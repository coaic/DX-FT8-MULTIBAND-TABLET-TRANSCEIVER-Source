
Katy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001010c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00045d44  080102dc  080102dc  000112dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08056020  08056020  00057020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08056028  08056028  00057028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0805602c  0805602c  0005702c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000107c  20000000  08056030  00058000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0004439c  20001080  080570ac  00059080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2004541c  080570ac  0005941c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0005907c  2**0
                  CONTENTS, READONLY
 10 .debug_line   000463d4  00000000  00000000  000590ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000092  00000000  00000000  0009f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0003b3ad  00000000  00000000  0009f512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000094d4  00000000  00000000  000da8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f50  00000000  00000000  000e3d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b667b  00000000  00000000  000e5ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00018812  00000000  00000000  0019c363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002898  00000000  00000000  001b4b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023fc0  00000000  00000000  001b740d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001db3cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ba0  00000000  00000000  001db410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001080 	.word	0x20001080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080102c4 	.word	0x080102c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001084 	.word	0x20001084
 800020c:	080102c4 	.word	0x080102c4

08000210 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000210:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000212:	2b01      	cmp	r3, #1
	IT       LS
 8000214:	bf98      	it	ls
	BXLS     lr
 8000216:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800021c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000228:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800022e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000230:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000232:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000234:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800023e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000244:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000248:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800024c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000250:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800025a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800026c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800026e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000270:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800027a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800027c:	2b01      	cmp	r3, #1
	IT       LS
 800027e:	bf98      	it	ls
	BXLS     lr
 8000280:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000286:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000292:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002b0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002be:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002c2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002c4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002c6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002ce:	4770      	bx	lr

080002d0 <strcmp>:
 80002d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002d8:	2a01      	cmp	r2, #1
 80002da:	bf28      	it	cs
 80002dc:	429a      	cmpcs	r2, r3
 80002de:	d0f7      	beq.n	80002d0 <strcmp>
 80002e0:	1ad0      	subs	r0, r2, r3
 80002e2:	4770      	bx	lr

080002e4 <strlen>:
 80002e4:	4603      	mov	r3, r0
 80002e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ea:	2a00      	cmp	r2, #0
 80002ec:	d1fb      	bne.n	80002e6 <strlen+0x2>
 80002ee:	1a18      	subs	r0, r3, r0
 80002f0:	3801      	subs	r0, #1
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_ldivmod>:
 8000da8:	b97b      	cbnz	r3, 8000dca <__aeabi_ldivmod+0x22>
 8000daa:	b972      	cbnz	r2, 8000dca <__aeabi_ldivmod+0x22>
 8000dac:	2900      	cmp	r1, #0
 8000dae:	bfbe      	ittt	lt
 8000db0:	2000      	movlt	r0, #0
 8000db2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000db6:	e006      	blt.n	8000dc6 <__aeabi_ldivmod+0x1e>
 8000db8:	bf08      	it	eq
 8000dba:	2800      	cmpeq	r0, #0
 8000dbc:	bf1c      	itt	ne
 8000dbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000dc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc6:	f000 b9b5 	b.w	8001134 <__aeabi_idiv0>
 8000dca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	db09      	blt.n	8000dea <__aeabi_ldivmod+0x42>
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db1a      	blt.n	8000e10 <__aeabi_ldivmod+0x68>
 8000dda:	f000 f84d 	bl	8000e78 <__udivmoddi4>
 8000dde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000de6:	b004      	add	sp, #16
 8000de8:	4770      	bx	lr
 8000dea:	4240      	negs	r0, r0
 8000dec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db1b      	blt.n	8000e2c <__aeabi_ldivmod+0x84>
 8000df4:	f000 f840 	bl	8000e78 <__udivmoddi4>
 8000df8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e00:	b004      	add	sp, #16
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	4252      	negs	r2, r2
 8000e0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e0e:	4770      	bx	lr
 8000e10:	4252      	negs	r2, r2
 8000e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e16:	f000 f82f 	bl	8000e78 <__udivmoddi4>
 8000e1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e22:	b004      	add	sp, #16
 8000e24:	4240      	negs	r0, r0
 8000e26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e2a:	4770      	bx	lr
 8000e2c:	4252      	negs	r2, r2
 8000e2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e32:	f000 f821 	bl	8000e78 <__udivmoddi4>
 8000e36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3e:	b004      	add	sp, #16
 8000e40:	4252      	negs	r2, r2
 8000e42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_uldivmod>:
 8000e48:	b953      	cbnz	r3, 8000e60 <__aeabi_uldivmod+0x18>
 8000e4a:	b94a      	cbnz	r2, 8000e60 <__aeabi_uldivmod+0x18>
 8000e4c:	2900      	cmp	r1, #0
 8000e4e:	bf08      	it	eq
 8000e50:	2800      	cmpeq	r0, #0
 8000e52:	bf1c      	itt	ne
 8000e54:	f04f 31ff 	movne.w	r1, #4294967295
 8000e58:	f04f 30ff 	movne.w	r0, #4294967295
 8000e5c:	f000 b96a 	b.w	8001134 <__aeabi_idiv0>
 8000e60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e68:	f000 f806 	bl	8000e78 <__udivmoddi4>
 8000e6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e74:	b004      	add	sp, #16
 8000e76:	4770      	bx	lr

08000e78 <__udivmoddi4>:
 8000e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e7c:	9d08      	ldr	r5, [sp, #32]
 8000e7e:	460c      	mov	r4, r1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d14e      	bne.n	8000f22 <__udivmoddi4+0xaa>
 8000e84:	4694      	mov	ip, r2
 8000e86:	458c      	cmp	ip, r1
 8000e88:	4686      	mov	lr, r0
 8000e8a:	fab2 f282 	clz	r2, r2
 8000e8e:	d962      	bls.n	8000f56 <__udivmoddi4+0xde>
 8000e90:	b14a      	cbz	r2, 8000ea6 <__udivmoddi4+0x2e>
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	4091      	lsls	r1, r2
 8000e98:	fa20 f303 	lsr.w	r3, r0, r3
 8000e9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea0:	4319      	orrs	r1, r3
 8000ea2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eaa:	fa1f f68c 	uxth.w	r6, ip
 8000eae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000eb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb04 f106 	mul.w	r1, r4, r6
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	d90a      	bls.n	8000edc <__udivmoddi4+0x64>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ece:	f080 8112 	bcs.w	80010f6 <__udivmoddi4+0x27e>
 8000ed2:	4299      	cmp	r1, r3
 8000ed4:	f240 810f 	bls.w	80010f6 <__udivmoddi4+0x27e>
 8000ed8:	3c02      	subs	r4, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	1a59      	subs	r1, r3, r1
 8000ede:	fa1f f38e 	uxth.w	r3, lr
 8000ee2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee6:	fb07 1110 	mls	r1, r7, r0, r1
 8000eea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eee:	fb00 f606 	mul.w	r6, r0, r6
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	d90a      	bls.n	8000f0c <__udivmoddi4+0x94>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000efe:	f080 80fc 	bcs.w	80010fa <__udivmoddi4+0x282>
 8000f02:	429e      	cmp	r6, r3
 8000f04:	f240 80f9 	bls.w	80010fa <__udivmoddi4+0x282>
 8000f08:	4463      	add	r3, ip
 8000f0a:	3802      	subs	r0, #2
 8000f0c:	1b9b      	subs	r3, r3, r6
 8000f0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f12:	2100      	movs	r1, #0
 8000f14:	b11d      	cbz	r5, 8000f1e <__udivmoddi4+0xa6>
 8000f16:	40d3      	lsrs	r3, r2
 8000f18:	2200      	movs	r2, #0
 8000f1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d905      	bls.n	8000f32 <__udivmoddi4+0xba>
 8000f26:	b10d      	cbz	r5, 8000f2c <__udivmoddi4+0xb4>
 8000f28:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4608      	mov	r0, r1
 8000f30:	e7f5      	b.n	8000f1e <__udivmoddi4+0xa6>
 8000f32:	fab3 f183 	clz	r1, r3
 8000f36:	2900      	cmp	r1, #0
 8000f38:	d146      	bne.n	8000fc8 <__udivmoddi4+0x150>
 8000f3a:	42a3      	cmp	r3, r4
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0xcc>
 8000f3e:	4290      	cmp	r0, r2
 8000f40:	f0c0 80f0 	bcc.w	8001124 <__udivmoddi4+0x2ac>
 8000f44:	1a86      	subs	r6, r0, r2
 8000f46:	eb64 0303 	sbc.w	r3, r4, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	d0e6      	beq.n	8000f1e <__udivmoddi4+0xa6>
 8000f50:	e9c5 6300 	strd	r6, r3, [r5]
 8000f54:	e7e3      	b.n	8000f1e <__udivmoddi4+0xa6>
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	f040 8090 	bne.w	800107c <__udivmoddi4+0x204>
 8000f5c:	eba1 040c 	sub.w	r4, r1, ip
 8000f60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	2101      	movs	r1, #1
 8000f6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f72:	fb08 4416 	mls	r4, r8, r6, r4
 8000f76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f7a:	fb07 f006 	mul.w	r0, r7, r6
 8000f7e:	4298      	cmp	r0, r3
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x11c>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f8a:	d202      	bcs.n	8000f92 <__udivmoddi4+0x11a>
 8000f8c:	4298      	cmp	r0, r3
 8000f8e:	f200 80cd 	bhi.w	800112c <__udivmoddi4+0x2b4>
 8000f92:	4626      	mov	r6, r4
 8000f94:	1a1c      	subs	r4, r3, r0
 8000f96:	fa1f f38e 	uxth.w	r3, lr
 8000f9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000fa2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fa6:	fb00 f707 	mul.w	r7, r0, r7
 8000faa:	429f      	cmp	r7, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x148>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb6:	d202      	bcs.n	8000fbe <__udivmoddi4+0x146>
 8000fb8:	429f      	cmp	r7, r3
 8000fba:	f200 80b0 	bhi.w	800111e <__udivmoddi4+0x2a6>
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	1bdb      	subs	r3, r3, r7
 8000fc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fc6:	e7a5      	b.n	8000f14 <__udivmoddi4+0x9c>
 8000fc8:	f1c1 0620 	rsb	r6, r1, #32
 8000fcc:	408b      	lsls	r3, r1
 8000fce:	fa22 f706 	lsr.w	r7, r2, r6
 8000fd2:	431f      	orrs	r7, r3
 8000fd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000fdc:	ea43 030c 	orr.w	r3, r3, ip
 8000fe0:	40f4      	lsrs	r4, r6
 8000fe2:	fa00 f801 	lsl.w	r8, r0, r1
 8000fe6:	0c38      	lsrs	r0, r7, #16
 8000fe8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fec:	fbb4 fef0 	udiv	lr, r4, r0
 8000ff0:	fa1f fc87 	uxth.w	ip, r7
 8000ff4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ff8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ffc:	fb0e f90c 	mul.w	r9, lr, ip
 8001000:	45a1      	cmp	r9, r4
 8001002:	fa02 f201 	lsl.w	r2, r2, r1
 8001006:	d90a      	bls.n	800101e <__udivmoddi4+0x1a6>
 8001008:	193c      	adds	r4, r7, r4
 800100a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800100e:	f080 8084 	bcs.w	800111a <__udivmoddi4+0x2a2>
 8001012:	45a1      	cmp	r9, r4
 8001014:	f240 8081 	bls.w	800111a <__udivmoddi4+0x2a2>
 8001018:	f1ae 0e02 	sub.w	lr, lr, #2
 800101c:	443c      	add	r4, r7
 800101e:	eba4 0409 	sub.w	r4, r4, r9
 8001022:	fa1f f983 	uxth.w	r9, r3
 8001026:	fbb4 f3f0 	udiv	r3, r4, r0
 800102a:	fb00 4413 	mls	r4, r0, r3, r4
 800102e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001032:	fb03 fc0c 	mul.w	ip, r3, ip
 8001036:	45a4      	cmp	ip, r4
 8001038:	d907      	bls.n	800104a <__udivmoddi4+0x1d2>
 800103a:	193c      	adds	r4, r7, r4
 800103c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001040:	d267      	bcs.n	8001112 <__udivmoddi4+0x29a>
 8001042:	45a4      	cmp	ip, r4
 8001044:	d965      	bls.n	8001112 <__udivmoddi4+0x29a>
 8001046:	3b02      	subs	r3, #2
 8001048:	443c      	add	r4, r7
 800104a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800104e:	fba0 9302 	umull	r9, r3, r0, r2
 8001052:	eba4 040c 	sub.w	r4, r4, ip
 8001056:	429c      	cmp	r4, r3
 8001058:	46ce      	mov	lr, r9
 800105a:	469c      	mov	ip, r3
 800105c:	d351      	bcc.n	8001102 <__udivmoddi4+0x28a>
 800105e:	d04e      	beq.n	80010fe <__udivmoddi4+0x286>
 8001060:	b155      	cbz	r5, 8001078 <__udivmoddi4+0x200>
 8001062:	ebb8 030e 	subs.w	r3, r8, lr
 8001066:	eb64 040c 	sbc.w	r4, r4, ip
 800106a:	fa04 f606 	lsl.w	r6, r4, r6
 800106e:	40cb      	lsrs	r3, r1
 8001070:	431e      	orrs	r6, r3
 8001072:	40cc      	lsrs	r4, r1
 8001074:	e9c5 6400 	strd	r6, r4, [r5]
 8001078:	2100      	movs	r1, #0
 800107a:	e750      	b.n	8000f1e <__udivmoddi4+0xa6>
 800107c:	f1c2 0320 	rsb	r3, r2, #32
 8001080:	fa20 f103 	lsr.w	r1, r0, r3
 8001084:	fa0c fc02 	lsl.w	ip, ip, r2
 8001088:	fa24 f303 	lsr.w	r3, r4, r3
 800108c:	4094      	lsls	r4, r2
 800108e:	430c      	orrs	r4, r1
 8001090:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001094:	fa00 fe02 	lsl.w	lr, r0, r2
 8001098:	fa1f f78c 	uxth.w	r7, ip
 800109c:	fbb3 f0f8 	udiv	r0, r3, r8
 80010a0:	fb08 3110 	mls	r1, r8, r0, r3
 80010a4:	0c23      	lsrs	r3, r4, #16
 80010a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010aa:	fb00 f107 	mul.w	r1, r0, r7
 80010ae:	4299      	cmp	r1, r3
 80010b0:	d908      	bls.n	80010c4 <__udivmoddi4+0x24c>
 80010b2:	eb1c 0303 	adds.w	r3, ip, r3
 80010b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80010ba:	d22c      	bcs.n	8001116 <__udivmoddi4+0x29e>
 80010bc:	4299      	cmp	r1, r3
 80010be:	d92a      	bls.n	8001116 <__udivmoddi4+0x29e>
 80010c0:	3802      	subs	r0, #2
 80010c2:	4463      	add	r3, ip
 80010c4:	1a5b      	subs	r3, r3, r1
 80010c6:	b2a4      	uxth	r4, r4
 80010c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80010cc:	fb08 3311 	mls	r3, r8, r1, r3
 80010d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010d4:	fb01 f307 	mul.w	r3, r1, r7
 80010d8:	42a3      	cmp	r3, r4
 80010da:	d908      	bls.n	80010ee <__udivmoddi4+0x276>
 80010dc:	eb1c 0404 	adds.w	r4, ip, r4
 80010e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80010e4:	d213      	bcs.n	800110e <__udivmoddi4+0x296>
 80010e6:	42a3      	cmp	r3, r4
 80010e8:	d911      	bls.n	800110e <__udivmoddi4+0x296>
 80010ea:	3902      	subs	r1, #2
 80010ec:	4464      	add	r4, ip
 80010ee:	1ae4      	subs	r4, r4, r3
 80010f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010f4:	e739      	b.n	8000f6a <__udivmoddi4+0xf2>
 80010f6:	4604      	mov	r4, r0
 80010f8:	e6f0      	b.n	8000edc <__udivmoddi4+0x64>
 80010fa:	4608      	mov	r0, r1
 80010fc:	e706      	b.n	8000f0c <__udivmoddi4+0x94>
 80010fe:	45c8      	cmp	r8, r9
 8001100:	d2ae      	bcs.n	8001060 <__udivmoddi4+0x1e8>
 8001102:	ebb9 0e02 	subs.w	lr, r9, r2
 8001106:	eb63 0c07 	sbc.w	ip, r3, r7
 800110a:	3801      	subs	r0, #1
 800110c:	e7a8      	b.n	8001060 <__udivmoddi4+0x1e8>
 800110e:	4631      	mov	r1, r6
 8001110:	e7ed      	b.n	80010ee <__udivmoddi4+0x276>
 8001112:	4603      	mov	r3, r0
 8001114:	e799      	b.n	800104a <__udivmoddi4+0x1d2>
 8001116:	4630      	mov	r0, r6
 8001118:	e7d4      	b.n	80010c4 <__udivmoddi4+0x24c>
 800111a:	46d6      	mov	lr, sl
 800111c:	e77f      	b.n	800101e <__udivmoddi4+0x1a6>
 800111e:	4463      	add	r3, ip
 8001120:	3802      	subs	r0, #2
 8001122:	e74d      	b.n	8000fc0 <__udivmoddi4+0x148>
 8001124:	4606      	mov	r6, r0
 8001126:	4623      	mov	r3, r4
 8001128:	4608      	mov	r0, r1
 800112a:	e70f      	b.n	8000f4c <__udivmoddi4+0xd4>
 800112c:	3e02      	subs	r6, #2
 800112e:	4463      	add	r3, ip
 8001130:	e730      	b.n	8000f94 <__udivmoddi4+0x11c>
 8001132:	bf00      	nop

08001134 <__aeabi_idiv0>:
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <arm_cfft_radix4by2_q15>:

void arm_cfft_radix4by2_q15(
    q15_t * pSrc,
    uint32_t fftLen,
    const q15_t * pCoef) 
{    
 8001138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifndef ARM_MATH_CM0_FAMILY
    q31_t T, S, R;
    q31_t coeff, out1, out2;
    const q15_t *pC = pCoef;
    q15_t *pSi = pSrc;
    q15_t *pSl = pSrc + fftLen;
 800113c:	eb00 0841 	add.w	r8, r0, r1, lsl #1
{    
 8001140:	4604      	mov	r4, r0
#else
    uint32_t ia, l;
    q15_t xt, yt, cosVal, sinVal;
#endif
    
    n2 = fftLen >> 1; 
 8001142:	084d      	lsrs	r5, r1, #1
{    
 8001144:	4617      	mov	r7, r2
 8001146:	3804      	subs	r0, #4
    q15_t *pSl = pSrc + fftLen;
 8001148:	4641      	mov	r1, r8
    const q15_t *pC = pCoef;
 800114a:	4694      	mov	ip, r2

#ifndef ARM_MATH_CM0_FAMILY

    for (i = n2; i > 0; i--)
 800114c:	462e      	mov	r6, r5

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800114e:	f04f 0e00 	mov.w	lr, #0
        out2 = __SMUAD(coeff, R);

    #endif //     #ifndef ARM_MATH_BIG_ENDIAN

        _SIMD32_OFFSET(pSl) =
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001152:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80011e0 <arm_cfft_radix4by2_q15+0xa8>
    for (i = n2; i > 0; i--)
 8001156:	b996      	cbnz	r6, 800117e <arm_cfft_radix4by2_q15+0x46>
    } 
    
#endif //    #ifndef ARM_MATH_CM0_FAMILY
    
    // first col
    arm_radix4_butterfly_q15( pSrc, n2, (q15_t*)pCoef, 2u);
 8001158:	2302      	movs	r3, #2
 800115a:	463a      	mov	r2, r7
 800115c:	4629      	mov	r1, r5
 800115e:	4620      	mov	r0, r4
 8001160:	f000 f8f2 	bl	8001348 <arm_radix4_butterfly_q15>
    // second col
    arm_radix4_butterfly_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2u);
 8001164:	4640      	mov	r0, r8
 8001166:	2302      	movs	r3, #2
 8001168:	463a      	mov	r2, r7
 800116a:	4629      	mov	r1, r5
 800116c:	f000 f8ec 	bl	8001348 <arm_radix4_butterfly_q15>
			
    for (i = 0; i < fftLen >> 1; i++)
 8001170:	4620      	mov	r0, r4
 8001172:	42ae      	cmp	r6, r5
 8001174:	f100 0008 	add.w	r0, r0, #8
 8001178:	d11b      	bne.n	80011b2 <arm_cfft_radix4by2_q15+0x7a>
        pSrc[4*i+0] = p0;
        pSrc[4*i+1] = p1;
        pSrc[4*i+2] = p2;
        pSrc[4*i+3] = p3;
    }
}
 800117a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        coeff = _SIMD32_OFFSET(pC);
 800117e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8001182:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8001186:	fa92 fa2e 	shadd16	sl, r2, lr
 800118a:	680a      	ldr	r2, [r1, #0]
 800118c:	fa92 f22e 	shadd16	r2, r2, lr

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001190:	fada fb12 	qsub16	fp, sl, r2
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001194:	fa9a f222 	shadd16	r2, sl, r2
        _SIMD32_OFFSET(pSi) = __SHADD16(T, S);
 8001198:	6002      	str	r2, [r0, #0]

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800119a:	fb23 f20b 	smuad	r2, r3, fp

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800119e:	fb43 f31b 	smusdx	r3, r3, fp
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80011a2:	ea03 0309 	and.w	r3, r3, r9
    for (i = n2; i > 0; i--)
 80011a6:	3e01      	subs	r6, #1
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80011a8:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
        _SIMD32_OFFSET(pSl) =
 80011ac:	f841 3b04 	str.w	r3, [r1], #4
    for (i = n2; i > 0; i--)
 80011b0:	e7d1      	b.n	8001156 <arm_cfft_radix4by2_q15+0x1e>
        p0 <<= 1;
 80011b2:	f930 4c08 	ldrsh.w	r4, [r0, #-8]
    for (i = 0; i < fftLen >> 1; i++)
 80011b6:	3601      	adds	r6, #1
        p1 <<= 1;
 80011b8:	f930 1c06 	ldrsh.w	r1, [r0, #-6]
        p2 <<= 1;
 80011bc:	f930 2c04 	ldrsh.w	r2, [r0, #-4]
        p0 <<= 1;
 80011c0:	0064      	lsls	r4, r4, #1
        p3 <<= 1;
 80011c2:	f930 3c02 	ldrsh.w	r3, [r0, #-2]
        p1 <<= 1;
 80011c6:	0049      	lsls	r1, r1, #1
        p2 <<= 1;
 80011c8:	0052      	lsls	r2, r2, #1
        p0 <<= 1;
 80011ca:	f820 4c08 	strh.w	r4, [r0, #-8]
        p3 <<= 1;
 80011ce:	005b      	lsls	r3, r3, #1
        p1 <<= 1;
 80011d0:	f820 1c06 	strh.w	r1, [r0, #-6]
        p2 <<= 1;
 80011d4:	f820 2c04 	strh.w	r2, [r0, #-4]
        p3 <<= 1;
 80011d8:	f820 3c02 	strh.w	r3, [r0, #-2]
    for (i = 0; i < fftLen >> 1; i++)
 80011dc:	e7c9      	b.n	8001172 <arm_cfft_radix4by2_q15+0x3a>
 80011de:	bf00      	nop
 80011e0:	ffff0000 	.word	0xffff0000

080011e4 <arm_cfft_radix4by2_inverse_q15>:

void arm_cfft_radix4by2_inverse_q15(
    q15_t * pSrc,
    uint32_t fftLen,
    const q15_t * pCoef) 
{    
 80011e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifndef ARM_MATH_CM0_FAMILY
    q31_t T, S, R;
    q31_t coeff, out1, out2;
    const q15_t *pC = pCoef;
    q15_t *pSi = pSrc;
    q15_t *pSl = pSrc + fftLen;
 80011e8:	eb00 0841 	add.w	r8, r0, r1, lsl #1
{    
 80011ec:	4604      	mov	r4, r0
#else
    uint32_t ia, l;
    q15_t xt, yt, cosVal, sinVal;
#endif
    
    n2 = fftLen >> 1; 
 80011ee:	084d      	lsrs	r5, r1, #1
{    
 80011f0:	4617      	mov	r7, r2
 80011f2:	3804      	subs	r0, #4
    q15_t *pSl = pSrc + fftLen;
 80011f4:	4641      	mov	r1, r8
    const q15_t *pC = pCoef;
 80011f6:	4694      	mov	ip, r2

#ifndef ARM_MATH_CM0_FAMILY

    for (i = n2; i > 0; i--)
 80011f8:	462e      	mov	r6, r5
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80011fa:	f04f 0e00 	mov.w	lr, #0
        out2 = __SMUSD(__QSUB(0, coeff), R);

    #endif //     #ifndef ARM_MATH_BIG_ENDIAN

        _SIMD32_OFFSET(pSl) =
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);        
 80011fe:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800128c <arm_cfft_radix4by2_inverse_q15+0xa8>
    for (i = n2; i > 0; i--)
 8001202:	b996      	cbnz	r6, 800122a <arm_cfft_radix4by2_inverse_q15+0x46>
    } 
    
#endif //    #ifndef ARM_MATH_CM0_FAMILY

    // first col
    arm_radix4_butterfly_inverse_q15( pSrc, n2, (q15_t*)pCoef, 2u);
 8001204:	2302      	movs	r3, #2
 8001206:	463a      	mov	r2, r7
 8001208:	4629      	mov	r1, r5
 800120a:	4620      	mov	r0, r4
 800120c:	f000 f9d2 	bl	80015b4 <arm_radix4_butterfly_inverse_q15>
    // second col
    arm_radix4_butterfly_inverse_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2u);
 8001210:	4640      	mov	r0, r8
 8001212:	2302      	movs	r3, #2
 8001214:	463a      	mov	r2, r7
 8001216:	4629      	mov	r1, r5
 8001218:	f000 f9cc 	bl	80015b4 <arm_radix4_butterfly_inverse_q15>
			
    for (i = 0; i < fftLen >> 1; i++)
 800121c:	4620      	mov	r0, r4
 800121e:	42ae      	cmp	r6, r5
 8001220:	f100 0008 	add.w	r0, r0, #8
 8001224:	d11b      	bne.n	800125e <arm_cfft_radix4by2_inverse_q15+0x7a>
        pSrc[4*i+0] = p0;
        pSrc[4*i+1] = p1;
        pSrc[4*i+2] = p2;
        pSrc[4*i+3] = p3;
    }
}
 8001226:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        coeff = _SIMD32_OFFSET(pC);
 800122a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800122e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8001232:	fa92 fa2e 	shadd16	sl, r2, lr
 8001236:	680a      	ldr	r2, [r1, #0]
 8001238:	fa92 f22e 	shadd16	r2, r2, lr
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800123c:	fada fb12 	qsub16	fp, sl, r2
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001240:	fa9a f222 	shadd16	r2, sl, r2
        _SIMD32_OFFSET(pSi) = __SHADD16(T, S);
 8001244:	6002      	str	r2, [r0, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001246:	fb43 f20b 	smusd	r2, r3, fp
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800124a:	fb23 f31b 	smuadx	r3, r3, fp
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);        
 800124e:	ea03 0309 	and.w	r3, r3, r9
    for (i = n2; i > 0; i--)
 8001252:	3e01      	subs	r6, #1
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);        
 8001254:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
        _SIMD32_OFFSET(pSl) =
 8001258:	f841 3b04 	str.w	r3, [r1], #4
    for (i = n2; i > 0; i--)
 800125c:	e7d1      	b.n	8001202 <arm_cfft_radix4by2_inverse_q15+0x1e>
        p0 <<= 1;
 800125e:	f930 4c08 	ldrsh.w	r4, [r0, #-8]
    for (i = 0; i < fftLen >> 1; i++)
 8001262:	3601      	adds	r6, #1
        p1 <<= 1;
 8001264:	f930 1c06 	ldrsh.w	r1, [r0, #-6]
        p2 <<= 1;
 8001268:	f930 2c04 	ldrsh.w	r2, [r0, #-4]
        p0 <<= 1;
 800126c:	0064      	lsls	r4, r4, #1
        p3 <<= 1;
 800126e:	f930 3c02 	ldrsh.w	r3, [r0, #-2]
        p1 <<= 1;
 8001272:	0049      	lsls	r1, r1, #1
        p2 <<= 1;
 8001274:	0052      	lsls	r2, r2, #1
        p0 <<= 1;
 8001276:	f820 4c08 	strh.w	r4, [r0, #-8]
        p3 <<= 1;
 800127a:	005b      	lsls	r3, r3, #1
        p1 <<= 1;
 800127c:	f820 1c06 	strh.w	r1, [r0, #-6]
        p2 <<= 1;
 8001280:	f820 2c04 	strh.w	r2, [r0, #-4]
        p3 <<= 1;
 8001284:	f820 3c02 	strh.w	r3, [r0, #-2]
    for (i = 0; i < fftLen >> 1; i++)
 8001288:	e7c9      	b.n	800121e <arm_cfft_radix4by2_inverse_q15+0x3a>
 800128a:	bf00      	nop
 800128c:	ffff0000 	.word	0xffff0000

08001290 <arm_cfft_q15>:
    if(ifftFlag == 1u)
 8001290:	2a01      	cmp	r2, #1
{
 8001292:	b570      	push	{r4, r5, r6, lr}
 8001294:	460d      	mov	r5, r1
 8001296:	4604      	mov	r4, r0
 8001298:	461e      	mov	r6, r3
    uint32_t L = S->fftLen;
 800129a:	8801      	ldrh	r1, [r0, #0]
    if(ifftFlag == 1u)
 800129c:	d12d      	bne.n	80012fa <arm_cfft_q15+0x6a>
        switch (L) 
 800129e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80012a2:	d01c      	beq.n	80012de <arm_cfft_q15+0x4e>
 80012a4:	d811      	bhi.n	80012ca <arm_cfft_q15+0x3a>
 80012a6:	2940      	cmp	r1, #64	@ 0x40
 80012a8:	d019      	beq.n	80012de <arm_cfft_q15+0x4e>
 80012aa:	d80c      	bhi.n	80012c6 <arm_cfft_q15+0x36>
 80012ac:	2910      	cmp	r1, #16
 80012ae:	d016      	beq.n	80012de <arm_cfft_q15+0x4e>
 80012b0:	2920      	cmp	r1, #32
 80012b2:	d01d      	beq.n	80012f0 <arm_cfft_q15+0x60>
    if( bitReverseFlag )
 80012b4:	2e00      	cmp	r6, #0
 80012b6:	d045      	beq.n	8001344 <arm_cfft_q15+0xb4>
        arm_bitreversal_16((uint16_t*)p1,S->bitRevLength,S->pBitRevTable);    
 80012b8:	68a2      	ldr	r2, [r4, #8]
 80012ba:	4628      	mov	r0, r5
 80012bc:	89a1      	ldrh	r1, [r4, #12]
}
 80012be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        arm_bitreversal_16((uint16_t*)p1,S->bitRevLength,S->pBitRevTable);    
 80012c2:	f7fe bfda 	b.w	800027a <arm_bitreversal_16>
        switch (L) 
 80012c6:	2980      	cmp	r1, #128	@ 0x80
 80012c8:	e7f3      	b.n	80012b2 <arm_cfft_q15+0x22>
 80012ca:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80012ce:	d00f      	beq.n	80012f0 <arm_cfft_q15+0x60>
 80012d0:	d80b      	bhi.n	80012ea <arm_cfft_q15+0x5a>
 80012d2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80012d6:	d00b      	beq.n	80012f0 <arm_cfft_q15+0x60>
 80012d8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80012dc:	d1ea      	bne.n	80012b4 <arm_cfft_q15+0x24>
            arm_radix4_butterfly_inverse_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 80012de:	2301      	movs	r3, #1
 80012e0:	6862      	ldr	r2, [r4, #4]
 80012e2:	4628      	mov	r0, r5
 80012e4:	f000 f966 	bl	80015b4 <arm_radix4_butterfly_inverse_q15>
            break;
 80012e8:	e7e4      	b.n	80012b4 <arm_cfft_q15+0x24>
        switch (L) 
 80012ea:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80012ee:	e7f5      	b.n	80012dc <arm_cfft_q15+0x4c>
            arm_cfft_radix4by2_inverse_q15  ( p1, L, S->pTwiddle );
 80012f0:	6862      	ldr	r2, [r4, #4]
 80012f2:	4628      	mov	r0, r5
 80012f4:	f7ff ff76 	bl	80011e4 <arm_cfft_radix4by2_inverse_q15>
            break;
 80012f8:	e7dc      	b.n	80012b4 <arm_cfft_q15+0x24>
        switch (L) 
 80012fa:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80012fe:	d018      	beq.n	8001332 <arm_cfft_q15+0xa2>
 8001300:	d80d      	bhi.n	800131e <arm_cfft_q15+0x8e>
 8001302:	2940      	cmp	r1, #64	@ 0x40
 8001304:	d015      	beq.n	8001332 <arm_cfft_q15+0xa2>
 8001306:	d808      	bhi.n	800131a <arm_cfft_q15+0x8a>
 8001308:	2910      	cmp	r1, #16
 800130a:	d012      	beq.n	8001332 <arm_cfft_q15+0xa2>
 800130c:	2920      	cmp	r1, #32
 800130e:	d1d1      	bne.n	80012b4 <arm_cfft_q15+0x24>
            arm_cfft_radix4by2_q15  ( p1, L, S->pTwiddle );
 8001310:	6862      	ldr	r2, [r4, #4]
 8001312:	4628      	mov	r0, r5
 8001314:	f7ff ff10 	bl	8001138 <arm_cfft_radix4by2_q15>
            break;
 8001318:	e7cc      	b.n	80012b4 <arm_cfft_q15+0x24>
        switch (L) 
 800131a:	2980      	cmp	r1, #128	@ 0x80
 800131c:	e7f7      	b.n	800130e <arm_cfft_q15+0x7e>
 800131e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8001322:	d0f5      	beq.n	8001310 <arm_cfft_q15+0x80>
 8001324:	d80b      	bhi.n	800133e <arm_cfft_q15+0xae>
 8001326:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800132a:	d0f1      	beq.n	8001310 <arm_cfft_q15+0x80>
 800132c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8001330:	d1c0      	bne.n	80012b4 <arm_cfft_q15+0x24>
            arm_radix4_butterfly_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 8001332:	2301      	movs	r3, #1
 8001334:	6862      	ldr	r2, [r4, #4]
 8001336:	4628      	mov	r0, r5
 8001338:	f000 f806 	bl	8001348 <arm_radix4_butterfly_q15>
            break;
 800133c:	e7ba      	b.n	80012b4 <arm_cfft_q15+0x24>
        switch (L) 
 800133e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8001342:	e7f5      	b.n	8001330 <arm_cfft_q15+0xa0>
}
 8001344:	bd70      	pop	{r4, r5, r6, pc}
	...

08001348 <arm_radix4_butterfly_q15>:
void arm_radix4_butterfly_q15(
  q15_t * pSrc16,
  uint32_t fftLen,
  q15_t * pCoef16,
  uint32_t twidCoefModifier)
{
 8001348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800134c:	469b      	mov	fp, r3
 800134e:	b091      	sub	sp, #68	@ 0x44
  /*  Initializations for the first stage */
  n2 = fftLen;
  n1 = n2;

  /* n2 = fftLen/4 */
  n2 >>= 2u;
 8001350:	088b      	lsrs	r3, r1, #2

  /* Index for twiddle coefficient */
  ic = 0u;
 8001352:	2500      	movs	r5, #0
 8001354:	f1a0 0904 	sub.w	r9, r0, #4
    T = __SHADD16(T, 0);

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    _SIMD32_OFFSET(pSi1) =
      (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001358:	f8df e254 	ldr.w	lr, [pc, #596]	@ 80015b0 <arm_radix4_butterfly_q15+0x268>
  n2 >>= 2u;
 800135c:	9301      	str	r3, [sp, #4]
  pSi1 = pSi0 + 2 * n2;
 800135e:	f021 0303 	bic.w	r3, r1, #3
  j = n2;
 8001362:	f8dd c004 	ldr.w	ip, [sp, #4]
  pSi2 = pSi1 + 2 * n2;
 8001366:	eb00 0443 	add.w	r4, r0, r3, lsl #1
  pSi1 = pSi0 + 2 * n2;
 800136a:	18c6      	adds	r6, r0, r3
  pSi3 = pSi2 + 2 * n2;
 800136c:	3b04      	subs	r3, #4
{
 800136e:	9000      	str	r0, [sp, #0]
 8001370:	f1a4 0804 	sub.w	r8, r4, #4
 8001374:	3e04      	subs	r6, #4
 8001376:	441c      	add	r4, r3
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001378:	462b      	mov	r3, r5
 800137a:	9103      	str	r1, [sp, #12]
 800137c:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8001380:	fa90 f023 	shadd16	r0, r0, r3
 8001384:	fa90 f023 	shadd16	r0, r0, r3
 8001388:	f858 7f04 	ldr.w	r7, [r8, #4]!
 800138c:	fa97 f723 	shadd16	r7, r7, r3
 8001390:	fa97 f723 	shadd16	r7, r7, r3
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001394:	fa90 f117 	qadd16	r1, r0, r7
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001398:	fad0 f017 	qsub16	r0, r0, r7
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800139c:	f856 7f04 	ldr.w	r7, [r6, #4]!
 80013a0:	fa97 fa23 	shadd16	sl, r7, r3
 80013a4:	fa9a fa23 	shadd16	sl, sl, r3
 80013a8:	f854 7f04 	ldr.w	r7, [r4, #4]!
 80013ac:	fa97 f723 	shadd16	r7, r7, r3
 80013b0:	fa97 f723 	shadd16	r7, r7, r3
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013b4:	fa9a f717 	qadd16	r7, sl, r7
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013b8:	fa91 fa27 	shadd16	sl, r1, r7
    _SIMD32_OFFSET(pSi0) = __SHADD16(R, T);
 80013bc:	f8c9 a000 	str.w	sl, [r9]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013c0:	fad1 f717 	qsub16	r7, r1, r7
    out1 = __SMUAD(C2, R) >> 16u;
 80013c4:	f852 1035 	ldr.w	r1, [r2, r5, lsl #3]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013c8:	fb21 fa07 	smuad	sl, r1, r7
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013cc:	fb41 f117 	smusdx	r1, r1, r7
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013d0:	6837      	ldr	r7, [r6, #0]
 80013d2:	fa97 f723 	shadd16	r7, r7, r3
 80013d6:	fa97 f723 	shadd16	r7, r7, r3
      (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80013da:	ea01 010e 	and.w	r1, r1, lr
 80013de:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
    _SIMD32_OFFSET(pSi1) =
 80013e2:	6031      	str	r1, [r6, #0]
 80013e4:	6821      	ldr	r1, [r4, #0]
 80013e6:	fa91 f123 	shadd16	r1, r1, r3
 80013ea:	fa91 f123 	shadd16	r1, r1, r3
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013ee:	fad7 f111 	qsub16	r1, r7, r1
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013f2:	faa0 f711 	qasx	r7, r0, r1
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013f6:	fae0 f111 	qsax	r1, r0, r1
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUAD(C1, S) >> 16u;
 80013fa:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013fe:	fb20 fa01 	smuad	sl, r0, r1
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001402:	fb40 f011 	smusdx	r0, r0, r1
      ((out2) & 0xFFFF0000) | ((out1) & 0x0000FFFF);
    pSi2 += 2;


    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 8001406:	210c      	movs	r1, #12
      ((out2) & 0xFFFF0000) | ((out1) & 0x0000FFFF);
 8001408:	ea00 000e 	and.w	r0, r0, lr
    C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 800140c:	4369      	muls	r1, r5
      ((out2) & 0xFFFF0000) | ((out1) & 0x0000FFFF);
 800140e:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
    _SIMD32_OFFSET(pSi2) =
 8001412:	f8c8 0000 	str.w	r0, [r8]
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUAD(C3, R) >> 16u;
 8001416:	5851      	ldr	r1, [r2, r1]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001418:	fb21 f007 	smuad	r0, r1, r7
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800141c:	fb41 f117 	smusdx	r1, r1, r7

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xd', yd') in little endian format */
    _SIMD32_OFFSET(pSi3) =
      ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001420:	ea01 010e 	and.w	r1, r1, lr
    pSi3 += 2;

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;

  } while(--j);
 8001424:	f1bc 0c01 	subs.w	ip, ip, #1
    ic = ic + twidCoefModifier;
 8001428:	445d      	add	r5, fp
      ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800142a:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    _SIMD32_OFFSET(pSi3) =
 800142e:	6021      	str	r1, [r4, #0]
  } while(--j);
 8001430:	d1a4      	bne.n	800137c <arm_radix4_butterfly_q15+0x34>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2u;
 8001432:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
  n2 >>= 2u;
 8001436:	9901      	ldr	r1, [sp, #4]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001438:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c

  /*  Calculation of Middle stage */
  for (k = fftLen / 4u; k > 4u; k >>= 2u)
 800143c:	2904      	cmp	r1, #4
 800143e:	d82b      	bhi.n	8001498 <arm_radix4_butterfly_q15+0x150>
 8001440:	9b00      	ldr	r3, [sp, #0]
 8001442:	3310      	adds	r3, #16

    /* Read xd (real), yd(imag) input */
    xdyd = *__SIMD32(ptr1)++;

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 8001444:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8001448:	f853 6c08 	ldr.w	r6, [r3, #-8]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800144c:	fa92 f016 	qadd16	r0, r2, r6

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8001450:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8001454:	f853 4c04 	ldr.w	r4, [r3, #-4]
 8001458:	fa91 f514 	qadd16	r5, r1, r4
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800145c:	fa90 f525 	shadd16	r5, r0, r5
    ptr1 = ptr1 - 8u;


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    *__SIMD32(ptr1)++ = __SHADD16(R, T);
 8001460:	f843 5c10 	str.w	r5, [r3, #-16]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001464:	fa91 f514 	qadd16	r5, r1, r4
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001468:	fad0 f025 	shsub16	r0, r0, r5
    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    *__SIMD32(ptr1)++ = __SHSUB16(R, T);
 800146c:	f843 0c0c 	str.w	r0, [r3, #-12]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001470:	fad2 f216 	qsub16	r2, r2, r6
 8001474:	fad1 f114 	qsub16	r1, r1, r4
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001478:	fae2 f021 	shsax	r0, r2, r1

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    *__SIMD32(ptr1)++ = __SHSAX(S, U);
 800147c:	f843 0c08 	str.w	r0, [r3, #-8]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001480:	faa2 f221 	shasx	r2, r2, r1


    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    *__SIMD32(ptr1)++ = __SHASX(S, U);
 8001484:	f843 2c04 	str.w	r2, [r3, #-4]
    /* yd' = (ya+xb-yc-xd) */
    *__SIMD32(ptr1)++ = __SHSAX(S, U);

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

  } while(--j);
 8001488:	3310      	adds	r3, #16
 800148a:	9a01      	ldr	r2, [sp, #4]
 800148c:	3a01      	subs	r2, #1
 800148e:	9201      	str	r2, [sp, #4]
 8001490:	d1d8      	bne.n	8001444 <arm_radix4_butterfly_q15+0xfc>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8001492:	b011      	add	sp, #68	@ 0x44
 8001494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n2 >>= 2u;
 8001498:	088b      	lsrs	r3, r1, #2
    for (j = 0u; j <= (n2 - 1u); j++)
 800149a:	2400      	movs	r4, #0
 800149c:	0888      	lsrs	r0, r1, #2
    n2 >>= 2u;
 800149e:	9306      	str	r3, [sp, #24]
      pSi1 = pSi0 + 2 * n2;
 80014a0:	f021 0303 	bic.w	r3, r1, #3
    ic = 0u;
 80014a4:	4625      	mov	r5, r4
      pSi1 = pSi0 + 2 * n2;
 80014a6:	9304      	str	r3, [sp, #16]
        pSi0 += 2 * n1;
 80014a8:	008b      	lsls	r3, r1, #2
 80014aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80014ac:	9b00      	ldr	r3, [sp, #0]
 80014ae:	eb03 0ec0 	add.w	lr, r3, r0, lsl #3
 80014b2:	469c      	mov	ip, r3
      C1 = _SIMD32_OFFSET(pCoef16 + (2u * ic));
 80014b4:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
      for (i0 = j; i0 < fftLen; i0 += n1)
 80014b8:	2000      	movs	r0, #0
 80014ba:	9402      	str	r4, [sp, #8]
      C1 = _SIMD32_OFFSET(pCoef16 + (2u * ic));
 80014bc:	9307      	str	r3, [sp, #28]
      C2 = _SIMD32_OFFSET(pCoef16 + (4u * ic));
 80014be:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
 80014c2:	9308      	str	r3, [sp, #32]
      C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 80014c4:	230c      	movs	r3, #12
 80014c6:	436b      	muls	r3, r5
      ic = ic + twidCoefModifier;
 80014c8:	445d      	add	r5, fp
      C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 80014ca:	58d3      	ldr	r3, [r2, r3]
 80014cc:	9309      	str	r3, [sp, #36]	@ 0x24
      for (i0 = j; i0 < fftLen; i0 += n1)
 80014ce:	9b04      	ldr	r3, [sp, #16]
 80014d0:	4473      	add	r3, lr
 80014d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80014d4:	9b04      	ldr	r3, [sp, #16]
 80014d6:	4463      	add	r3, ip
 80014d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80014da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80014dc:	eb0e 0a00 	add.w	sl, lr, r0
 80014e0:	eb03 0900 	add.w	r9, r3, r0
 80014e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80014e6:	eb03 0800 	add.w	r8, r3, r0
 80014ea:	eb0c 0300 	add.w	r3, ip, r0
 80014ee:	9305      	str	r3, [sp, #20]
 80014f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80014f2:	4418      	add	r0, r3
 80014f4:	e9dd 3602 	ldrd	r3, r6, [sp, #8]
 80014f8:	42b3      	cmp	r3, r6
 80014fa:	d30b      	bcc.n	8001514 <arm_radix4_butterfly_q15+0x1cc>
    for (j = 0u; j <= (n2 - 1u); j++)
 80014fc:	3401      	adds	r4, #1
 80014fe:	9b06      	ldr	r3, [sp, #24]
 8001500:	f10e 0e04 	add.w	lr, lr, #4
 8001504:	f10c 0c04 	add.w	ip, ip, #4
 8001508:	42a3      	cmp	r3, r4
 800150a:	d1d3      	bne.n	80014b4 <arm_radix4_butterfly_q15+0x16c>
    twidCoefModifier <<= 2u;
 800150c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
    n2 >>= 2u;
 8001510:	4619      	mov	r1, r3
 8001512:	e793      	b.n	800143c <arm_radix4_butterfly_q15+0xf4>
        R = __QADD16(T, S);
 8001514:	9b05      	ldr	r3, [sp, #20]
 8001516:	f8da 7000 	ldr.w	r7, [sl]
 800151a:	681e      	ldr	r6, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800151c:	fa96 f317 	qadd16	r3, r6, r7
 8001520:	930a      	str	r3, [sp, #40]	@ 0x28
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001522:	fad6 f317 	qsub16	r3, r6, r7
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001526:	f8d8 6000 	ldr.w	r6, [r8]
 800152a:	f8d9 7000 	ldr.w	r7, [r9]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800152e:	930b      	str	r3, [sp, #44]	@ 0x2c
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001530:	fa96 f617 	qadd16	r6, r6, r7
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001536:	fa93 f726 	shadd16	r7, r3, r6
 800153a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800153c:	fa97 f723 	shadd16	r7, r7, r3
        _SIMD32_OFFSET(pSi0) = out1;
 8001540:	9b05      	ldr	r3, [sp, #20]
 8001542:	601f      	str	r7, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001546:	fad3 f326 	shsub16	r3, r3, r6
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800154a:	9e08      	ldr	r6, [sp, #32]
 800154c:	fb26 f703 	smuad	r7, r6, r3
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001550:	fb46 f313 	smusdx	r3, r6, r3
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001554:	0c1b      	lsrs	r3, r3, #16
        T = _SIMD32_OFFSET(pSi1);
 8001556:	f8d8 6000 	ldr.w	r6, [r8]
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800155a:	041b      	lsls	r3, r3, #16
 800155c:	ea43 4317 	orr.w	r3, r3, r7, lsr #16
        _SIMD32_OFFSET(pSi1) =
 8001560:	f8c8 3000 	str.w	r3, [r8]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001564:	f8d9 3000 	ldr.w	r3, [r9]
 8001568:	fad6 f613 	qsub16	r6, r6, r3
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800156c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800156e:	faa3 f326 	shasx	r3, r3, r6
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001572:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8001574:	fae7 f626 	shsax	r6, r7, r6
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001578:	9f07      	ldr	r7, [sp, #28]
 800157a:	fb27 f806 	smuad	r8, r7, r6
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800157e:	fb47 f616 	smusdx	r6, r7, r6
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001582:	0c36      	lsrs	r6, r6, #16
 8001584:	0436      	lsls	r6, r6, #16
 8001586:	ea46 4618 	orr.w	r6, r6, r8, lsr #16
        _SIMD32_OFFSET(pSi2) =
 800158a:	f8ca 6000 	str.w	r6, [sl]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800158e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8001590:	fb26 f603 	smuad	r6, r6, r3
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001594:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8001596:	fb47 f313 	smusdx	r3, r7, r3
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	041b      	lsls	r3, r3, #16
 800159e:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
        _SIMD32_OFFSET(pSi3) =
 80015a2:	f8c9 3000 	str.w	r3, [r9]
      for (i0 = j; i0 < fftLen; i0 += n1)
 80015a6:	9b02      	ldr	r3, [sp, #8]
 80015a8:	440b      	add	r3, r1
 80015aa:	9302      	str	r3, [sp, #8]
 80015ac:	e795      	b.n	80014da <arm_radix4_butterfly_q15+0x192>
 80015ae:	bf00      	nop
 80015b0:	ffff0000 	.word	0xffff0000

080015b4 <arm_radix4_butterfly_inverse_q15>:
void arm_radix4_butterfly_inverse_q15(
  q15_t * pSrc16,
  uint32_t fftLen,
  q15_t * pCoef16,
  uint32_t twidCoefModifier)
{
 80015b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015b8:	469b      	mov	fp, r3
 80015ba:	b091      	sub	sp, #68	@ 0x44
  /*  Initializations for the first stage */
  n2 = fftLen;
  n1 = n2;

  /* n2 = fftLen/4 */
  n2 >>= 2u;
 80015bc:	088b      	lsrs	r3, r1, #2

  /* Index for twiddle coefficient */
  ic = 0u;
 80015be:	2500      	movs	r5, #0
 80015c0:	f1a0 0904 	sub.w	r9, r0, #4
    T = __SHADD16(T, 0);

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    _SIMD32_OFFSET(pSi1) =
      (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80015c4:	f8df e254 	ldr.w	lr, [pc, #596]	@ 800181c <arm_radix4_butterfly_inverse_q15+0x268>
  n2 >>= 2u;
 80015c8:	9301      	str	r3, [sp, #4]
  pSi1 = pSi0 + 2 * n2;
 80015ca:	f021 0303 	bic.w	r3, r1, #3
  j = n2;
 80015ce:	f8dd c004 	ldr.w	ip, [sp, #4]
  pSi2 = pSi1 + 2 * n2;
 80015d2:	eb00 0443 	add.w	r4, r0, r3, lsl #1
  pSi1 = pSi0 + 2 * n2;
 80015d6:	18c6      	adds	r6, r0, r3
  pSi3 = pSi2 + 2 * n2;
 80015d8:	3b04      	subs	r3, #4
{
 80015da:	9000      	str	r0, [sp, #0]
 80015dc:	f1a4 0804 	sub.w	r8, r4, #4
 80015e0:	3e04      	subs	r6, #4
 80015e2:	441c      	add	r4, r3
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80015e4:	462b      	mov	r3, r5
 80015e6:	9103      	str	r1, [sp, #12]
 80015e8:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80015ec:	fa90 f023 	shadd16	r0, r0, r3
 80015f0:	fa90 f023 	shadd16	r0, r0, r3
 80015f4:	f858 7f04 	ldr.w	r7, [r8, #4]!
 80015f8:	fa97 f723 	shadd16	r7, r7, r3
 80015fc:	fa97 f723 	shadd16	r7, r7, r3
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001600:	fa90 f117 	qadd16	r1, r0, r7
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001604:	fad0 f017 	qsub16	r0, r0, r7
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001608:	f856 7f04 	ldr.w	r7, [r6, #4]!
 800160c:	fa97 fa23 	shadd16	sl, r7, r3
 8001610:	fa9a fa23 	shadd16	sl, sl, r3
 8001614:	f854 7f04 	ldr.w	r7, [r4, #4]!
 8001618:	fa97 f723 	shadd16	r7, r7, r3
 800161c:	fa97 f723 	shadd16	r7, r7, r3
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001620:	fa9a f717 	qadd16	r7, sl, r7
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001624:	fa91 fa27 	shadd16	sl, r1, r7
    _SIMD32_OFFSET(pSi0) = __SHADD16(R, T);
 8001628:	f8c9 a000 	str.w	sl, [r9]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800162c:	fad1 f717 	qsub16	r7, r1, r7
    out1 = __SMUSD(C2, R) >> 16u;
 8001630:	f852 1035 	ldr.w	r1, [r2, r5, lsl #3]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001634:	fb41 fa07 	smusd	sl, r1, r7
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001638:	fb21 f117 	smuadx	r1, r1, r7
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800163c:	6837      	ldr	r7, [r6, #0]
 800163e:	fa97 f723 	shadd16	r7, r7, r3
 8001642:	fa97 f723 	shadd16	r7, r7, r3
      (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001646:	ea01 010e 	and.w	r1, r1, lr
 800164a:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
    _SIMD32_OFFSET(pSi1) =
 800164e:	6031      	str	r1, [r6, #0]
 8001650:	6821      	ldr	r1, [r4, #0]
 8001652:	fa91 f123 	shadd16	r1, r1, r3
 8001656:	fa91 f123 	shadd16	r1, r1, r3
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800165a:	fad7 f111 	qsub16	r1, r7, r1
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800165e:	fae0 f711 	qsax	r7, r0, r1
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001662:	faa0 f111 	qasx	r1, r0, r1
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUSD(C1, S) >> 16u;
 8001666:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800166a:	fb40 fa01 	smusd	sl, r0, r1
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800166e:	fb20 f011 	smuadx	r0, r0, r1
      ((out2) & 0xFFFF0000) | ((out1) & 0x0000FFFF);
    pSi2 += 2;


    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 8001672:	210c      	movs	r1, #12
      ((out2) & 0xFFFF0000) | ((out1) & 0x0000FFFF);
 8001674:	ea00 000e 	and.w	r0, r0, lr
    C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 8001678:	4369      	muls	r1, r5
      ((out2) & 0xFFFF0000) | ((out1) & 0x0000FFFF);
 800167a:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
    _SIMD32_OFFSET(pSi2) =
 800167e:	f8c8 0000 	str.w	r0, [r8]
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUSD(C3, R) >> 16u;
 8001682:	5851      	ldr	r1, [r2, r1]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001684:	fb41 f007 	smusd	r0, r1, r7
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001688:	fb21 f117 	smuadx	r1, r1, r7

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xd', yd') in little endian format */
    _SIMD32_OFFSET(pSi3) =
      ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800168c:	ea01 010e 	and.w	r1, r1, lr
    pSi3 += 2;

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;

  } while(--j);
 8001690:	f1bc 0c01 	subs.w	ip, ip, #1
    ic = ic + twidCoefModifier;
 8001694:	445d      	add	r5, fp
      ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001696:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    _SIMD32_OFFSET(pSi3) =
 800169a:	6021      	str	r1, [r4, #0]
  } while(--j);
 800169c:	d1a4      	bne.n	80015e8 <arm_radix4_butterfly_inverse_q15+0x34>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2u;
 800169e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
  n2 >>= 2u;
 80016a2:	9901      	ldr	r1, [sp, #4]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016a4:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c

  /*  Calculation of Middle stage */
  for (k = fftLen / 4u; k > 4u; k >>= 2u)
 80016a8:	2904      	cmp	r1, #4
 80016aa:	d82b      	bhi.n	8001704 <arm_radix4_butterfly_inverse_q15+0x150>
 80016ac:	9b00      	ldr	r3, [sp, #0]
 80016ae:	3310      	adds	r3, #16

    /* Read xd (real), yd(imag) input */
    xdyd = *__SIMD32(ptr1)++;

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 80016b0:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80016b4:	f853 6c08 	ldr.w	r6, [r3, #-8]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016b8:	fa92 f016 	qadd16	r0, r2, r6

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 80016bc:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 80016c0:	f853 4c04 	ldr.w	r4, [r3, #-4]
 80016c4:	fa91 f514 	qadd16	r5, r1, r4
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016c8:	fa90 f525 	shadd16	r5, r0, r5
    ptr1 = ptr1 - 8u;


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    *__SIMD32(ptr1)++ = __SHADD16(R, T);
 80016cc:	f843 5c10 	str.w	r5, [r3, #-16]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016d0:	fa91 f514 	qadd16	r5, r1, r4
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016d4:	fad0 f025 	shsub16	r0, r0, r5
    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    *__SIMD32(ptr1)++ = __SHSUB16(R, T);
 80016d8:	f843 0c0c 	str.w	r0, [r3, #-12]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016dc:	fad2 f216 	qsub16	r2, r2, r6
 80016e0:	fad1 f114 	qsub16	r1, r1, r4
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016e4:	faa2 f021 	shasx	r0, r2, r1

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    *__SIMD32(ptr1)++ = __SHASX(S, U);
 80016e8:	f843 0c08 	str.w	r0, [r3, #-8]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016ec:	fae2 f221 	shsax	r2, r2, r1


    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    *__SIMD32(ptr1)++ = __SHSAX(S, U);
 80016f0:	f843 2c04 	str.w	r2, [r3, #-4]
    *__SIMD32(ptr1)++ = __SHASX(S, U);


#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

  } while(--j);
 80016f4:	3310      	adds	r3, #16
 80016f6:	9a01      	ldr	r2, [sp, #4]
 80016f8:	3a01      	subs	r2, #1
 80016fa:	9201      	str	r2, [sp, #4]
 80016fc:	d1d8      	bne.n	80016b0 <arm_radix4_butterfly_inverse_q15+0xfc>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80016fe:	b011      	add	sp, #68	@ 0x44
 8001700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n2 >>= 2u;
 8001704:	088b      	lsrs	r3, r1, #2
    for (j = 0u; j <= (n2 - 1u); j++)
 8001706:	2400      	movs	r4, #0
 8001708:	0888      	lsrs	r0, r1, #2
    n2 >>= 2u;
 800170a:	9306      	str	r3, [sp, #24]
      pSi1 = pSi0 + 2 * n2;
 800170c:	f021 0303 	bic.w	r3, r1, #3
    ic = 0u;
 8001710:	4625      	mov	r5, r4
      pSi1 = pSi0 + 2 * n2;
 8001712:	9304      	str	r3, [sp, #16]
        pSi0 += 2 * n1;
 8001714:	008b      	lsls	r3, r1, #2
 8001716:	930c      	str	r3, [sp, #48]	@ 0x30
 8001718:	9b00      	ldr	r3, [sp, #0]
 800171a:	eb03 0ec0 	add.w	lr, r3, r0, lsl #3
 800171e:	469c      	mov	ip, r3
      C1 = _SIMD32_OFFSET(pCoef16 + (2u * ic));
 8001720:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
      for (i0 = j; i0 < fftLen; i0 += n1)
 8001724:	2000      	movs	r0, #0
 8001726:	9402      	str	r4, [sp, #8]
      C1 = _SIMD32_OFFSET(pCoef16 + (2u * ic));
 8001728:	9307      	str	r3, [sp, #28]
      C2 = _SIMD32_OFFSET(pCoef16 + (4u * ic));
 800172a:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
 800172e:	9308      	str	r3, [sp, #32]
      C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 8001730:	230c      	movs	r3, #12
 8001732:	436b      	muls	r3, r5
      ic = ic + twidCoefModifier;
 8001734:	445d      	add	r5, fp
      C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 8001736:	58d3      	ldr	r3, [r2, r3]
 8001738:	9309      	str	r3, [sp, #36]	@ 0x24
      for (i0 = j; i0 < fftLen; i0 += n1)
 800173a:	9b04      	ldr	r3, [sp, #16]
 800173c:	4473      	add	r3, lr
 800173e:	930d      	str	r3, [sp, #52]	@ 0x34
 8001740:	9b04      	ldr	r3, [sp, #16]
 8001742:	4463      	add	r3, ip
 8001744:	930e      	str	r3, [sp, #56]	@ 0x38
 8001746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001748:	eb0e 0a00 	add.w	sl, lr, r0
 800174c:	eb03 0900 	add.w	r9, r3, r0
 8001750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001752:	eb03 0800 	add.w	r8, r3, r0
 8001756:	eb0c 0300 	add.w	r3, ip, r0
 800175a:	9305      	str	r3, [sp, #20]
 800175c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800175e:	4418      	add	r0, r3
 8001760:	e9dd 3602 	ldrd	r3, r6, [sp, #8]
 8001764:	42b3      	cmp	r3, r6
 8001766:	d30b      	bcc.n	8001780 <arm_radix4_butterfly_inverse_q15+0x1cc>
    for (j = 0u; j <= (n2 - 1u); j++)
 8001768:	3401      	adds	r4, #1
 800176a:	9b06      	ldr	r3, [sp, #24]
 800176c:	f10e 0e04 	add.w	lr, lr, #4
 8001770:	f10c 0c04 	add.w	ip, ip, #4
 8001774:	42a3      	cmp	r3, r4
 8001776:	d1d3      	bne.n	8001720 <arm_radix4_butterfly_inverse_q15+0x16c>
    twidCoefModifier <<= 2u;
 8001778:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
    n2 >>= 2u;
 800177c:	4619      	mov	r1, r3
 800177e:	e793      	b.n	80016a8 <arm_radix4_butterfly_inverse_q15+0xf4>
        R = __QADD16(T, S);
 8001780:	9b05      	ldr	r3, [sp, #20]
 8001782:	f8da 7000 	ldr.w	r7, [sl]
 8001786:	681e      	ldr	r6, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001788:	fa96 f317 	qadd16	r3, r6, r7
 800178c:	930a      	str	r3, [sp, #40]	@ 0x28
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800178e:	fad6 f317 	qsub16	r3, r6, r7
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001792:	f8d8 6000 	ldr.w	r6, [r8]
 8001796:	f8d9 7000 	ldr.w	r7, [r9]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800179a:	930b      	str	r3, [sp, #44]	@ 0x2c
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800179c:	fa96 f617 	qadd16	r6, r6, r7
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80017a2:	fa93 f726 	shadd16	r7, r3, r6
 80017a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80017a8:	fa97 f723 	shadd16	r7, r7, r3
        _SIMD32_OFFSET(pSi0) = out1;
 80017ac:	9b05      	ldr	r3, [sp, #20]
 80017ae:	601f      	str	r7, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80017b2:	fad3 f326 	shsub16	r3, r3, r6
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017b6:	9e08      	ldr	r6, [sp, #32]
 80017b8:	fb46 f703 	smusd	r7, r6, r3
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017bc:	fb26 f313 	smuadx	r3, r6, r3
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80017c0:	0c1b      	lsrs	r3, r3, #16
        T = _SIMD32_OFFSET(pSi1);
 80017c2:	f8d8 6000 	ldr.w	r6, [r8]
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80017c6:	041b      	lsls	r3, r3, #16
 80017c8:	ea43 4317 	orr.w	r3, r3, r7, lsr #16
        _SIMD32_OFFSET(pSi1) =
 80017cc:	f8c8 3000 	str.w	r3, [r8]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017d0:	f8d9 3000 	ldr.w	r3, [r9]
 80017d4:	fad6 f613 	qsub16	r6, r6, r3
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80017da:	fae3 f326 	shsax	r3, r3, r6
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017de:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80017e0:	faa7 f626 	shasx	r6, r7, r6
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017e4:	9f07      	ldr	r7, [sp, #28]
 80017e6:	fb47 f806 	smusd	r8, r7, r6
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017ea:	fb27 f616 	smuadx	r6, r7, r6
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80017ee:	0c36      	lsrs	r6, r6, #16
 80017f0:	0436      	lsls	r6, r6, #16
 80017f2:	ea46 4618 	orr.w	r6, r6, r8, lsr #16
        _SIMD32_OFFSET(pSi2) =
 80017f6:	f8ca 6000 	str.w	r6, [sl]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017fa:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80017fc:	fb46 f603 	smusd	r6, r6, r3
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001800:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8001802:	fb27 f313 	smuadx	r3, r7, r3
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001806:	0c1b      	lsrs	r3, r3, #16
 8001808:	041b      	lsls	r3, r3, #16
 800180a:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
        _SIMD32_OFFSET(pSi3) =
 800180e:	f8c9 3000 	str.w	r3, [r9]
      for (i0 = j; i0 < fftLen; i0 += n1)
 8001812:	9b02      	ldr	r3, [sp, #8]
 8001814:	440b      	add	r3, r1
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	e795      	b.n	8001746 <arm_radix4_butterfly_inverse_q15+0x192>
 800181a:	bf00      	nop
 800181c:	ffff0000 	.word	0xffff0000

08001820 <arm_cmplx_mag_squared_q15>:

void arm_cmplx_mag_squared_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples)
{
 8001820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t blkCnt;                               /* loop counter */
  q31_t in1, in2, in3, in4;
  q31_t acc2, acc3;

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8001824:	0897      	lsrs	r7, r2, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8001826:	f100 0410 	add.w	r4, r0, #16
 800182a:	460b      	mov	r3, r1
  blkCnt = numSamples >> 2u;
 800182c:	46bc      	mov	ip, r7
  while(blkCnt > 0u)
 800182e:	3410      	adds	r4, #16
 8001830:	3308      	adds	r3, #8
 8001832:	f1bc 0f00 	cmp.w	ip, #0
 8001836:	d10b      	bne.n	8001850 <arm_cmplx_mag_squared_q15+0x30>
 8001838:	eb00 1007 	add.w	r0, r0, r7, lsl #4
    blkCnt--;
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 800183c:	f002 0203 	and.w	r2, r2, #3
 8001840:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8001844:	eb00 0282 	add.w	r2, r0, r2, lsl #2

  while(blkCnt > 0u)
 8001848:	4290      	cmp	r0, r2
 800184a:	d122      	bne.n	8001892 <arm_cmplx_mag_squared_q15+0x72>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 800184c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acc0 = __SMUAD(in1, in1);
 8001850:	f854 5c20 	ldr.w	r5, [r4, #-32]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001854:	fb25 f805 	smuad	r8, r5, r5
    acc1 = __SMUAD(in2, in2);
 8001858:	f854 5c1c 	ldr.w	r5, [r4, #-28]
 800185c:	fb25 fe05 	smuad	lr, r5, r5
    acc2 = __SMUAD(in3, in3);
 8001860:	f854 6c18 	ldr.w	r6, [r4, #-24]
 8001864:	fb26 f606 	smuad	r6, r6, r6
    acc3 = __SMUAD(in4, in4);
 8001868:	f854 5c14 	ldr.w	r5, [r4, #-20]
 800186c:	fb25 f505 	smuad	r5, r5, r5
    *pDst++ = (q15_t) (acc0 >> 17);
 8001870:	ea4f 4868 	mov.w	r8, r8, asr #17
    blkCnt--;
 8001874:	f10c 3cff 	add.w	ip, ip, #4294967295
    *pDst++ = (q15_t) (acc1 >> 17);
 8001878:	ea4f 4e6e 	mov.w	lr, lr, asr #17
    *pDst++ = (q15_t) (acc2 >> 17);
 800187c:	1476      	asrs	r6, r6, #17
    *pDst++ = (q15_t) (acc0 >> 17);
 800187e:	f823 8c08 	strh.w	r8, [r3, #-8]
    *pDst++ = (q15_t) (acc3 >> 17);
 8001882:	146d      	asrs	r5, r5, #17
    *pDst++ = (q15_t) (acc1 >> 17);
 8001884:	f823 ec06 	strh.w	lr, [r3, #-6]
    *pDst++ = (q15_t) (acc2 >> 17);
 8001888:	f823 6c04 	strh.w	r6, [r3, #-4]
    *pDst++ = (q15_t) (acc3 >> 17);
 800188c:	f823 5c02 	strh.w	r5, [r3, #-2]
    blkCnt--;
 8001890:	e7cd      	b.n	800182e <arm_cmplx_mag_squared_q15+0xe>
    acc0 = __SMUAD(in1, in1);
 8001892:	f850 3b04 	ldr.w	r3, [r0], #4
 8001896:	fb23 f303 	smuad	r3, r3, r3
    *pDst++ = (q15_t) (acc0 >> 17);
 800189a:	145b      	asrs	r3, r3, #17
 800189c:	f821 3b02 	strh.w	r3, [r1], #2
    blkCnt--;
 80018a0:	e7d2      	b.n	8001848 <arm_cmplx_mag_squared_q15+0x28>

080018a2 <arm_fir_q15>:
void arm_fir_q15(
  const arm_fir_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 80018a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018a6:	b093      	sub	sp, #76	@ 0x4c
 80018a8:	f101 0908 	add.w	r9, r1, #8
 80018ac:	9310      	str	r3, [sp, #64]	@ 0x40
  q15_t *pState = S->pState;                     /* State pointer */
 80018ae:	6843      	ldr	r3, [r0, #4]
{
 80018b0:	900a      	str	r0, [sp, #40]	@ 0x28
  q15_t *pState = S->pState;                     /* State pointer */
 80018b2:	9305      	str	r3, [sp, #20]
  q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 80018b4:	6883      	ldr	r3, [r0, #8]
 80018b6:	930b      	str	r3, [sp, #44]	@ 0x2c
  q15_t *pStateCurnt;                            /* Points to the current sample of the state */
  q15_t *px1;                                    /* Temporary q15 pointer for state buffer */
  q15_t *pb;                                     /* Temporary pointer for coefficient buffer */
  q31_t x0, x1, x2, x3, c0;                      /* Temporary variables to hold SIMD state and coefficient values */
  q63_t acc0, acc1, acc2, acc3;                  /* Accumulators */
  uint32_t numTaps = S->numTaps;                 /* Number of taps in the filter */
 80018b8:	8803      	ldrh	r3, [r0, #0]
 80018ba:	9302      	str	r3, [sp, #8]
  uint32_t tapCnt, blkCnt;                       /* Loop counters */


  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1u)]);
 80018bc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
{
 80018c0:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
  pStateCurnt = &(S->pState[(numTaps - 1u)]);
 80018c4:	3b01      	subs	r3, #1
 80018c6:	9a05      	ldr	r2, [sp, #20]
 80018c8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80018cc:	930c      	str	r3, [sp, #48]	@ 0x30
   *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]       
   *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]       
   *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]       
   */

  blkCnt = blockSize >> 2;
 80018ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	9303      	str	r3, [sp, #12]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.       
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80018d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80018d6:	3308      	adds	r3, #8
 80018d8:	9308      	str	r3, [sp, #32]
 80018da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80018dc:	3308      	adds	r3, #8
 80018de:	9309      	str	r3, [sp, #36]	@ 0x24

    px1 += 2u;

    /* Loop over the number of taps.  Unroll by a factor of 4.       
     ** Repeat until we've computed numTaps-4 coefficients. */
    tapCnt = numTaps >> 2;
 80018e0:	9b02      	ldr	r3, [sp, #8]
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
 80018e8:	3204      	adds	r2, #4
 80018ea:	9204      	str	r2, [sp, #16]
 80018ec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80018ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80018f2:	930d      	str	r3, [sp, #52]	@ 0x34
    }


    /* If the filter length is not a multiple of 4, compute the remaining filter taps.       
     ** This is always be 2 taps since the filter length is even. */
    if((numTaps & 0x3u) != 0u)
 80018f4:	e9dd 3802 	ldrd	r3, r8, [sp, #8]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	9311      	str	r3, [sp, #68]	@ 0x44
  while(blkCnt > 0u)
 80018fe:	f1b8 0f00 	cmp.w	r8, #0
 8001902:	d132      	bne.n	800196a <arm_fir_q15+0xc8>
 8001904:	9a03      	ldr	r2, [sp, #12]
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.       
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
  while(blkCnt > 0u)
 8001906:	4640      	mov	r0, r8
 8001908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800190a:	eb03 09c2 	add.w	r9, r3, r2, lsl #3
 800190e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8001910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	9b05      	ldr	r3, [sp, #20]
 8001918:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
 800191c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800191e:	eb03 0ec2 	add.w	lr, r3, r2, lsl #3
  blkCnt = blockSize % 0x4u;
 8001922:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8001924:	f003 0b03 	and.w	fp, r3, #3
    px1 = pState;

    /* Initialize coeff pointer of type q31 */
    pb = pCoeffs;

    tapCnt = numTaps >> 1;
 8001928:	9b02      	ldr	r3, [sp, #8]
 800192a:	ea4f 0a53 	mov.w	sl, r3, lsr #1
  while(blkCnt > 0u)
 800192e:	4583      	cmp	fp, r0
 8001930:	eb0c 0240 	add.w	r2, ip, r0, lsl #1
 8001934:	f040 80a9 	bne.w	8001a8a <arm_fir_q15+0x1e8>
  /* Processing is complete.       
   ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.       
   ** This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8001938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  while(tapCnt > 0u)
  {

    /* Copy state values to start of state buffer */
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 800193a:	1d14      	adds	r4, r2, #4
  pStateCurnt = S->pState;
 800193c:	6859      	ldr	r1, [r3, #4]
  tapCnt = (numTaps - 1u) >> 2;
 800193e:	9b02      	ldr	r3, [sp, #8]
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 8001940:	1d0d      	adds	r5, r1, #4
  tapCnt = (numTaps - 1u) >> 2;
 8001942:	3b01      	subs	r3, #1
 8001944:	0898      	lsrs	r0, r3, #2
  while(tapCnt > 0u)
 8001946:	4540      	cmp	r0, r8
 8001948:	f040 80b9 	bne.w	8001abe <arm_fir_q15+0x21c>
 800194c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    tapCnt--;

  }

  /* Calculation of count for remaining q15_t data */
  tapCnt = (numTaps - 1u) % 0x4u;
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8001958:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800195c:	3902      	subs	r1, #2

  /* copy remaining data */
  while(tapCnt > 0u)
 800195e:	429a      	cmp	r2, r3
 8001960:	f040 80b8 	bne.w	8001ad4 <arm_fir_q15+0x232>
    *pStateCurnt++ = *pState++;

    /* Decrement the loop counter */
    tapCnt--;
  }
}
 8001964:	b013      	add	sp, #76	@ 0x4c
 8001966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pSrc)++;
 800196a:	f859 3c08 	ldr.w	r3, [r9, #-8]
 800196e:	9a08      	ldr	r2, [sp, #32]
    pb = pCoeffs;
 8001970:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pSrc)++;
 8001974:	f842 3c08 	str.w	r3, [r2, #-8]
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pSrc)++;
 8001978:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800197c:	f842 3c04 	str.w	r3, [r2, #-4]
    x0 = _SIMD32_OFFSET(px1);
 8001980:	9b04      	ldr	r3, [sp, #16]
 8001982:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8001986:	9306      	str	r3, [sp, #24]
    x1 = _SIMD32_OFFSET(px1 + 1u);
 8001988:	9b04      	ldr	r3, [sp, #16]
 800198a:	f853 3c02 	ldr.w	r3, [r3, #-2]
 800198e:	9307      	str	r3, [sp, #28]
    while(tapCnt > 0u)
 8001990:	9b04      	ldr	r3, [sp, #16]
 8001992:	3308      	adds	r3, #8
 8001994:	9304      	str	r3, [sp, #16]
 8001996:	9301      	str	r3, [sp, #4]
    acc3 = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	461c      	mov	r4, r3
    acc2 = 0;
 800199c:	461a      	mov	r2, r3
 800199e:	461f      	mov	r7, r3
    acc1 = 0;
 80019a0:	4618      	mov	r0, r3
 80019a2:	469c      	mov	ip, r3
    acc0 = 0;
 80019a4:	4619      	mov	r1, r3
 80019a6:	469e      	mov	lr, r3
    while(tapCnt > 0u)
 80019a8:	9d01      	ldr	r5, [sp, #4]
 80019aa:	3508      	adds	r5, #8
 80019ac:	9501      	str	r5, [sp, #4]
 80019ae:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80019b0:	45aa      	cmp	sl, r5
 80019b2:	d13d      	bne.n	8001a30 <arm_fir_q15+0x18e>
    if((numTaps & 0x3u) != 0u)
 80019b4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80019b6:	b18d      	cbz	r5, 80019dc <arm_fir_q15+0x13a>
      x2 = _SIMD32_OFFSET(px1);
 80019b8:	f8db 5004 	ldr.w	r5, [fp, #4]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80019bc:	9e06      	ldr	r6, [sp, #24]
 80019be:	9501      	str	r5, [sp, #4]
      acc0 = __SMLALD(x0, c0, acc0);
 80019c0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80019c2:	682d      	ldr	r5, [r5, #0]
 80019c4:	fbc6 1ec5 	smlald	r1, lr, r6, r5
 80019c8:	9e07      	ldr	r6, [sp, #28]
 80019ca:	fbc6 0cc5 	smlald	r0, ip, r6, r5
 80019ce:	9e01      	ldr	r6, [sp, #4]
 80019d0:	fbc6 27c5 	smlald	r2, r7, r6, r5
 80019d4:	f8db 6006 	ldr.w	r6, [fp, #6]
 80019d8:	fbc6 34c5 	smlald	r3, r4, r6, r5
      __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 80019dc:	0bd2      	lsrs	r2, r2, #15
    blkCnt--;
 80019de:	f108 38ff 	add.w	r8, r8, #4294967295
      __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 80019e2:	0bdb      	lsrs	r3, r3, #15
 80019e4:	f109 0908 	add.w	r9, r9, #8
      __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 80019e8:	0bc9      	lsrs	r1, r1, #15
 80019ea:	f10b 0b08 	add.w	fp, fp, #8
 80019ee:	0bc0      	lsrs	r0, r0, #15
      __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 80019f0:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
 80019f4:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
 80019f8:	f302 020f 	ssat	r2, #16, r2
 80019fc:	f303 030f 	ssat	r3, #16, r3
 8001a00:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 8001a04:	9b08      	ldr	r3, [sp, #32]
      __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 8001a06:	ea41 414e 	orr.w	r1, r1, lr, lsl #17
 8001a0a:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
 8001a0e:	3308      	adds	r3, #8
 8001a10:	f300 000f 	ssat	r0, #16, r0
 8001a14:	f301 010f 	ssat	r1, #16, r1
 8001a18:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *__SIMD32(pDst)++ =
 8001a1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001a1e:	9308      	str	r3, [sp, #32]
 8001a20:	4603      	mov	r3, r0
 8001a22:	f840 1c08 	str.w	r1, [r0, #-8]
    *__SIMD32(pDst)++ =
 8001a26:	f840 2c04 	str.w	r2, [r0, #-4]
    blkCnt--;
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a2e:	e766      	b.n	80018fe <arm_fir_q15+0x5c>
      acc0 = __SMLALD(x0, c0, acc0);
 8001a30:	f85a 6b08 	ldr.w	r6, [sl], #8
 8001a34:	9d06      	ldr	r5, [sp, #24]
 8001a36:	fbc5 1ec6 	smlald	r1, lr, r5, r6
 8001a3a:	9d07      	ldr	r5, [sp, #28]
 8001a3c:	fbc5 0cc6 	smlald	r0, ip, r5, r6
 8001a40:	9d01      	ldr	r5, [sp, #4]
 8001a42:	f855 5c10 	ldr.w	r5, [r5, #-16]
 8001a46:	fbc5 27c6 	smlald	r2, r7, r5, r6
 8001a4a:	9d01      	ldr	r5, [sp, #4]
 8001a4c:	f855 5c0e 	ldr.w	r5, [r5, #-14]
 8001a50:	fbc5 34c6 	smlald	r3, r4, r5, r6
 8001a54:	9d01      	ldr	r5, [sp, #4]
      acc0 = __SMLALD(x2, c0, acc0);
 8001a56:	f85a 6c04 	ldr.w	r6, [sl, #-4]
 8001a5a:	f855 5c10 	ldr.w	r5, [r5, #-16]
 8001a5e:	fbc5 1ec6 	smlald	r1, lr, r5, r6
 8001a62:	9d01      	ldr	r5, [sp, #4]
 8001a64:	f855 5c0e 	ldr.w	r5, [r5, #-14]
 8001a68:	fbc5 0cc6 	smlald	r0, ip, r5, r6
      x0 = _SIMD32_OFFSET(px1 + 2u);
 8001a6c:	9d01      	ldr	r5, [sp, #4]
 8001a6e:	f855 5c0c 	ldr.w	r5, [r5, #-12]
 8001a72:	9506      	str	r5, [sp, #24]
      x1 = _SIMD32_OFFSET(px1 + 3u);
 8001a74:	9d01      	ldr	r5, [sp, #4]
 8001a76:	f855 5c0a 	ldr.w	r5, [r5, #-10]
 8001a7a:	9507      	str	r5, [sp, #28]
 8001a7c:	9d06      	ldr	r5, [sp, #24]
 8001a7e:	fbc5 27c6 	smlald	r2, r7, r5, r6
 8001a82:	9d07      	ldr	r5, [sp, #28]
 8001a84:	fbc5 34c6 	smlald	r3, r4, r5, r6
      tapCnt--;
 8001a88:	e78e      	b.n	80019a8 <arm_fir_q15+0x106>
    *pStateCurnt++ = *pSrc++;
 8001a8a:	f939 3010 	ldrsh.w	r3, [r9, r0, lsl #1]
    tapCnt = numTaps >> 1;
 8001a8e:	4654      	mov	r4, sl
    pb = pCoeffs;
 8001a90:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
    *pStateCurnt++ = *pSrc++;
 8001a92:	f82e 3010 	strh.w	r3, [lr, r0, lsl #1]
    acc0 = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	4619      	mov	r1, r3
      acc0 = __SMLALD(x0, c0, acc0);
 8001a9a:	f852 5b04 	ldr.w	r5, [r2], #4
 8001a9e:	f857 6b04 	ldr.w	r6, [r7], #4
 8001aa2:	fbc5 31c6 	smlald	r3, r1, r5, r6
    while(tapCnt > 0u);
 8001aa6:	3c01      	subs	r4, #1
 8001aa8:	d1f7      	bne.n	8001a9a <arm_fir_q15+0x1f8>
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8001aaa:	0bdb      	lsrs	r3, r3, #15
 8001aac:	9a01      	ldr	r2, [sp, #4]
 8001aae:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001ab2:	f303 030f 	ssat	r3, #16, r3
 8001ab6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    blkCnt--;
 8001aba:	3001      	adds	r0, #1
 8001abc:	e737      	b.n	800192e <arm_fir_q15+0x8c>
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 8001abe:	f852 6038 	ldr.w	r6, [r2, r8, lsl #3]
 8001ac2:	f841 6038 	str.w	r6, [r1, r8, lsl #3]
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 8001ac6:	f854 6038 	ldr.w	r6, [r4, r8, lsl #3]
 8001aca:	f845 6038 	str.w	r6, [r5, r8, lsl #3]
    tapCnt--;
 8001ace:	f108 0801 	add.w	r8, r8, #1
 8001ad2:	e738      	b.n	8001946 <arm_fir_q15+0xa4>
    *pStateCurnt++ = *pState++;
 8001ad4:	f932 0b02 	ldrsh.w	r0, [r2], #2
 8001ad8:	f821 0f02 	strh.w	r0, [r1, #2]!
    tapCnt--;
 8001adc:	e73f      	b.n	800195e <arm_fir_q15+0xbc>
	...

08001ae0 <arm_rfft_init_q15>:
arm_status arm_rfft_init_q15(
    arm_rfft_instance_q15 * S,
    uint32_t fftLenReal,
    uint32_t ifftFlagR,
    uint32_t bitReverseFlag)
{
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	b289      	uxth	r1, r1

    /*  Initialize the Real FFT length */
    S->fftLenReal = (uint16_t) fftLenReal;

    /*  Initialize the Twiddle coefficientA pointer */
    S->pTwiddleAReal = (q15_t *) realCoefAQ15;
 8001ae4:	4c21      	ldr	r4, [pc, #132]	@ (8001b6c <arm_rfft_init_q15+0x8c>)

    /*  Initialize the Twiddle coefficientB pointer */
    S->pTwiddleBReal = (q15_t *) realCoefBQ15;

    /*  Initialize the Flag for selection of RFFT or RIFFT */
    S->ifftFlagR = (uint8_t) ifftFlagR;
 8001ae6:	7102      	strb	r2, [r0, #4]
    S->pTwiddleAReal = (q15_t *) realCoefAQ15;
 8001ae8:	60c4      	str	r4, [r0, #12]

    /*  Initialize the Flag for calculation Bit reversal or not */
    S->bitReverseFlagR = (uint8_t) bitReverseFlag;

    /*  Initialization of coef modifier depending on the FFT length */
    switch (S->fftLenReal)
 8001aea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
    S->pTwiddleBReal = (q15_t *) realCoefBQ15;
 8001aee:	4c20      	ldr	r4, [pc, #128]	@ (8001b70 <arm_rfft_init_q15+0x90>)
    S->fftLenReal = (uint16_t) fftLenReal;
 8001af0:	6001      	str	r1, [r0, #0]
    S->pTwiddleBReal = (q15_t *) realCoefBQ15;
 8001af2:	6104      	str	r4, [r0, #16]
    S->bitReverseFlagR = (uint8_t) bitReverseFlag;
 8001af4:	7143      	strb	r3, [r0, #5]
    switch (S->fftLenReal)
 8001af6:	d026      	beq.n	8001b46 <arm_rfft_init_q15+0x66>
 8001af8:	d80f      	bhi.n	8001b1a <arm_rfft_init_q15+0x3a>
 8001afa:	2980      	cmp	r1, #128	@ 0x80
 8001afc:	d026      	beq.n	8001b4c <arm_rfft_init_q15+0x6c>
 8001afe:	d806      	bhi.n	8001b0e <arm_rfft_init_q15+0x2e>
 8001b00:	2920      	cmp	r1, #32
 8001b02:	d026      	beq.n	8001b52 <arm_rfft_init_q15+0x72>
 8001b04:	2940      	cmp	r1, #64	@ 0x40
 8001b06:	d028      	beq.n	8001b5a <arm_rfft_init_q15+0x7a>
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	e01a      	b.n	8001b44 <arm_rfft_init_q15+0x64>
 8001b0e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001b12:	d1f9      	bne.n	8001b08 <arm_rfft_init_q15+0x28>
 8001b14:	2220      	movs	r2, #32
 8001b16:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <arm_rfft_init_q15+0x94>)
 8001b18:	e011      	b.n	8001b3e <arm_rfft_init_q15+0x5e>
 8001b1a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8001b1e:	d01f      	beq.n	8001b60 <arm_rfft_init_q15+0x80>
 8001b20:	d808      	bhi.n	8001b34 <arm_rfft_init_q15+0x54>
 8001b22:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8001b26:	d01e      	beq.n	8001b66 <arm_rfft_init_q15+0x86>
 8001b28:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8001b2c:	d1ec      	bne.n	8001b08 <arm_rfft_init_q15+0x28>
 8001b2e:	2204      	movs	r2, #4
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <arm_rfft_init_q15+0x98>)
 8001b32:	e004      	b.n	8001b3e <arm_rfft_init_q15+0x5e>
 8001b34:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8001b38:	d1e6      	bne.n	8001b08 <arm_rfft_init_q15+0x28>
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <arm_rfft_init_q15+0x9c>)
    case 8192u:
        S->twidCoefRModifier = 1u;
        S->pCfft = &arm_cfft_sR_q15_len4096;
        break;
    case 4096u:
        S->twidCoefRModifier = 2u;
 8001b3e:	6082      	str	r2, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len2048;
 8001b40:	6143      	str	r3, [r0, #20]
    arm_status status = ARM_MATH_SUCCESS;
 8001b42:	2000      	movs	r0, #0
        break;
    }

    /* return the status of RFFT Init function */
    return (status);
}
 8001b44:	bd10      	pop	{r4, pc}
    switch (S->fftLenReal)
 8001b46:	2210      	movs	r2, #16
 8001b48:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <arm_rfft_init_q15+0xa0>)
 8001b4a:	e7f8      	b.n	8001b3e <arm_rfft_init_q15+0x5e>
 8001b4c:	2240      	movs	r2, #64	@ 0x40
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b84 <arm_rfft_init_q15+0xa4>)
 8001b50:	e7f5      	b.n	8001b3e <arm_rfft_init_q15+0x5e>
 8001b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b56:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <arm_rfft_init_q15+0xa8>)
 8001b58:	e7f1      	b.n	8001b3e <arm_rfft_init_q15+0x5e>
 8001b5a:	2280      	movs	r2, #128	@ 0x80
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <arm_rfft_init_q15+0xac>)
 8001b5e:	e7ee      	b.n	8001b3e <arm_rfft_init_q15+0x5e>
 8001b60:	2202      	movs	r2, #2
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <arm_rfft_init_q15+0xb0>)
 8001b64:	e7eb      	b.n	8001b3e <arm_rfft_init_q15+0x5e>
 8001b66:	2208      	movs	r2, #8
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <arm_rfft_init_q15+0xb4>)
 8001b6a:	e7e8      	b.n	8001b3e <arm_rfft_init_q15+0x5e>
 8001b6c:	08049358 	.word	0x08049358
 8001b70:	08045358 	.word	0x08045358
 8001b74:	080451f8 	.word	0x080451f8
 8001b78:	080451c8 	.word	0x080451c8
 8001b7c:	080451a8 	.word	0x080451a8
 8001b80:	080451e8 	.word	0x080451e8
 8001b84:	08045208 	.word	0x08045208
 8001b88:	08045228 	.word	0x08045228
 8001b8c:	08045218 	.word	0x08045218
 8001b90:	080451b8 	.word	0x080451b8
 8001b94:	080451d8 	.word	0x080451d8

08001b98 <arm_split_rfft_q15>:
    uint32_t fftLen,
    q15_t * pATable,
    q15_t * pBTable,
    q15_t * pDst,
    uint32_t modifier)
{
 8001b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b9c:	e9dd 740c 	ldrd	r7, r4, [sp, #48]	@ 0x30
 8001ba0:	4682      	mov	sl, r0
    /* Run the below code for Cortex-M4 and Cortex-M3 */
    i = 1u;
    pD1 = pDst + 2;
    pD2 = pDst + (4u * fftLen) - 2;

    for(i = fftLen - 1; i > 0; i--)
 8001ba2:	f04f 0e00 	mov.w	lr, #0
    pCoefA = &pATable[modifier * 2u];
 8001ba6:	00a5      	lsls	r5, r4, #2
    pD1 = pDst + 2;
 8001ba8:	f107 0c04 	add.w	ip, r7, #4
    pCoefB = &pBTable[modifier * 2u];
 8001bac:	eb03 0984 	add.w	r9, r3, r4, lsl #2
    for(i = fftLen - 1; i > 0; i--)
 8001bb0:	1e4b      	subs	r3, r1, #1
    pCoefA = &pATable[modifier * 2u];
 8001bb2:	9501      	str	r5, [sp, #4]
    pSrc2 = &pSrc[(2u * fftLen) - 2u];
 8001bb4:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
    pD2 = pDst + (4u * fftLen) - 2;
 8001bb8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    pSrc2 = &pSrc[(2u * fftLen) - 2u];
 8001bbc:	3d01      	subs	r5, #1
    pCoefA = &pATable[modifier * 2u];
 8001bbe:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    pD2 = pDst + (4u * fftLen) - 2;
 8001bc2:	3904      	subs	r1, #4
    pSrc2 = &pSrc[(2u * fftLen) - 2u];
 8001bc4:	00ad      	lsls	r5, r5, #2
    pCoefA = &pATable[modifier * 2u];
 8001bc6:	9200      	str	r2, [sp, #0]
    for(i = fftLen - 1; i > 0; i--)
 8001bc8:	f105 0804 	add.w	r8, r5, #4
 8001bcc:	4480      	add	r8, r0
 8001bce:	f10c 0c04 	add.w	ip, ip, #4
 8001bd2:	3904      	subs	r1, #4
 8001bd4:	b99b      	cbnz	r3, 8001bfe <arm_split_rfft_q15+0x66>
        /* update coefficient pointer */
        pCoefB = pCoefB + (2u * modifier);
        pCoefA = pCoefA + (2u * modifier);
    }

    pDst[2u * fftLen] = (pSrc[0] - pSrc[1]) >> 1;
 8001bd6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8001bda:	443d      	add	r5, r7
 8001bdc:	f9b0 2000 	ldrsh.w	r2, [r0]
    pDst[(2u * fftLen) + 1u] = 0;
 8001be0:	80eb      	strh	r3, [r5, #6]
    pDst[2u * fftLen] = (pSrc[0] - pSrc[1]) >> 1;
 8001be2:	1a52      	subs	r2, r2, r1
 8001be4:	1052      	asrs	r2, r2, #1
 8001be6:	80aa      	strh	r2, [r5, #4]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
 8001be8:	f9b0 2000 	ldrsh.w	r2, [r0]
 8001bec:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
    pDst[1] = 0;
 8001bf0:	807b      	strh	r3, [r7, #2]
    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
 8001bf2:	440a      	add	r2, r1
 8001bf4:	1052      	asrs	r2, r2, #1
 8001bf6:	803a      	strh	r2, [r7, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
    pDst[1] = 0;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */
}
 8001bf8:	b003      	add	sp, #12
 8001bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001bfe:	9a00      	ldr	r2, [sp, #0]
        outR = __SMUSD(*__SIMD32(pSrc1), *__SIMD32(pCoefA));
 8001c00:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8001c04:	f852 400e 	ldr.w	r4, [r2, lr]
 8001c08:	fb4b f604 	smusd	r6, fp, r4
        outR = __SMLAD(*__SIMD32(pSrc2), *__SIMD32(pCoefB), outR) >> 16u;
 8001c0c:	f858 4d04 	ldr.w	r4, [r8, #-4]!
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001c10:	f859 200e 	ldr.w	r2, [r9, lr]
 8001c14:	fb24 6602 	smlad	r6, r4, r2, r6
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001c18:	fb44 f412 	smusdx	r4, r4, r2
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001c1c:	9a00      	ldr	r2, [sp, #0]
 8001c1e:	f852 200e 	ldr.w	r2, [r2, lr]
 8001c22:	fb2b 4412 	smladx	r4, fp, r2, r4
        *pD1++ = outI >> 16u;
 8001c26:	1424      	asrs	r4, r4, #16
 8001c28:	9a01      	ldr	r2, [sp, #4]
        *pD1++ = (q15_t) outR;
 8001c2a:	1436      	asrs	r6, r6, #16
    for(i = fftLen - 1; i > 0; i--)
 8001c2c:	3b01      	subs	r3, #1
        *pD1++ = outI >> 16u;
 8001c2e:	f82c 4c02 	strh.w	r4, [ip, #-2]
        pD2[1] = -(outI >> 16u);
 8001c32:	4264      	negs	r4, r4
        *pD1++ = (q15_t) outR;
 8001c34:	f82c 6c04 	strh.w	r6, [ip, #-4]
        pD2[0] = (q15_t) outR;
 8001c38:	4496      	add	lr, r2
 8001c3a:	808e      	strh	r6, [r1, #4]
        pD2[1] = -(outI >> 16u);
 8001c3c:	80cc      	strh	r4, [r1, #6]
    for(i = fftLen - 1; i > 0; i--)
 8001c3e:	e7c6      	b.n	8001bce <arm_split_rfft_q15+0x36>

08001c40 <arm_split_rifft_q15>:
    uint32_t fftLen,
    q15_t * pATable,
    q15_t * pBTable,
    q15_t * pDst,
    uint32_t modifier)
{
 8001c40:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
        *__SIMD32(pDst1)++ = __PKHBT((outI >> 16u), outR, 16);

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* update coefficient pointer */
        pCoefB = pCoefB + (2u * modifier);
 8001c44:	9c08      	ldr	r4, [sp, #32]
 8001c46:	f101 0e01 	add.w	lr, r1, #1
    while(i > 0u)
 8001c4a:	2600      	movs	r6, #0
        pCoefB = pCoefB + (2u * modifier);
 8001c4c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001c50:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
    while(i > 0u)
 8001c54:	42b1      	cmp	r1, r6
 8001c56:	d101      	bne.n	8001c5c <arm_split_rifft_q15+0x1c>
        pCoefA = pCoefA + (2u * modifier);

        i--;
    }
#endif /* #ifndef ARM_MATH_CM0_FAMILY */
}
 8001c58:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
        outR = __SMUSD(*__SIMD32(pSrc2), *__SIMD32(pCoefB));
 8001c5c:	f85e 5d04 	ldr.w	r5, [lr, #-4]!
 8001c60:	f8d3 a000 	ldr.w	sl, [r3]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001c64:	fb45 f80a 	smusd	r8, r5, sl
        outR = __SMLAD(*__SIMD32(pSrc1), *__SIMD32(pCoefA), outR) >> 16u;
 8001c68:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8001c6c:	6814      	ldr	r4, [r2, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001c6e:	fb27 8804 	smlad	r8, r7, r4, r8
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001c72:	fb25 f51a 	smuadx	r5, r5, sl
        outI = __SMLSDX(*__SIMD32(pCoefA), *__SIMD32(pSrc1)++, -outI);
 8001c76:	426d      	negs	r5, r5

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001c78:	fb44 5417 	smlsdx	r4, r4, r7, r5
        outR = __SMLAD(*__SIMD32(pSrc1), *__SIMD32(pCoefA), outR) >> 16u;
 8001c7c:	ea4f 4518 	mov.w	r5, r8, lsr #16
        pCoefB = pCoefB + (2u * modifier);
 8001c80:	4463      	add	r3, ip
        *__SIMD32(pDst1)++ = __PKHBT(outR, (outI >> 16u), 16);
 8001c82:	1424      	asrs	r4, r4, #16
        pCoefA = pCoefA + (2u * modifier);
 8001c84:	4462      	add	r2, ip
        *__SIMD32(pDst1)++ = __PKHBT(outR, (outI >> 16u), 16);
 8001c86:	eac5 4404 	pkhbt	r4, r5, r4, lsl #16
 8001c8a:	9d07      	ldr	r5, [sp, #28]
 8001c8c:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
        i--;
 8001c90:	3601      	adds	r6, #1
 8001c92:	e7df      	b.n	8001c54 <arm_split_rifft_q15+0x14>

08001c94 <arm_rfft_q15>:
{
 8001c94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001c98:	4615      	mov	r5, r2
    if(S->ifftFlagR == 1u)
 8001c9a:	7902      	ldrb	r2, [r0, #4]
    uint32_t L2 = S->fftLenReal >> 1;
 8001c9c:	6807      	ldr	r7, [r0, #0]
{
 8001c9e:	4604      	mov	r4, r0
    if(S->ifftFlagR == 1u)
 8001ca0:	2a01      	cmp	r2, #1
{
 8001ca2:	460e      	mov	r6, r1
    const arm_cfft_instance_q15 *S_CFFT = S->pCfft;
 8001ca4:	f8d0 8014 	ldr.w	r8, [r0, #20]
    uint32_t L2 = S->fftLenReal >> 1;
 8001ca8:	ea4f 0757 	mov.w	r7, r7, lsr #1
    if(S->ifftFlagR == 1u)
 8001cac:	d11d      	bne.n	8001cea <arm_rfft_q15+0x56>
        arm_split_rifft_q15(pSrc, L2, S->pTwiddleAReal,
 8001cae:	6883      	ldr	r3, [r0, #8]
 8001cb0:	4639      	mov	r1, r7
 8001cb2:	e9cd 5300 	strd	r5, r3, [sp]
 8001cb6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f7ff ffc0 	bl	8001c40 <arm_split_rifft_q15>
        arm_cfft_q15(S_CFFT, pDst, S->ifftFlagR, S->bitReverseFlagR);
 8001cc0:	7963      	ldrb	r3, [r4, #5]
 8001cc2:	7922      	ldrb	r2, [r4, #4]
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	4640      	mov	r0, r8
 8001cc8:	f7ff fae2 	bl	8001290 <arm_cfft_q15>
        for(i=0;i<S->fftLenReal;i++)
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	462a      	mov	r2, r5
 8001cd0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d102      	bne.n	8001cde <arm_rfft_q15+0x4a>
}
 8001cd8:	b002      	add	sp, #8
 8001cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            pDst[i] = pDst[i] << 1;
 8001cde:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001ce2:	0049      	lsls	r1, r1, #1
 8001ce4:	f822 1b02 	strh.w	r1, [r2], #2
        for(i=0;i<S->fftLenReal;i++)
 8001ce8:	e7f4      	b.n	8001cd4 <arm_rfft_q15+0x40>
        arm_cfft_q15(S_CFFT, pSrc, S->ifftFlagR, S->bitReverseFlagR);
 8001cea:	7943      	ldrb	r3, [r0, #5]
 8001cec:	4640      	mov	r0, r8
 8001cee:	f7ff facf 	bl	8001290 <arm_cfft_q15>
        arm_split_rfft_q15(pSrc, L2, S->pTwiddleAReal,
 8001cf2:	68a3      	ldr	r3, [r4, #8]
 8001cf4:	4639      	mov	r1, r7
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	e9cd 5300 	strd	r5, r3, [sp]
 8001cfc:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8001d00:	f7ff ff4a 	bl	8001b98 <arm_split_rfft_q15>
}
 8001d04:	e7e8      	b.n	8001cd8 <arm_rfft_q15+0x44>

08001d06 <arm_shift_q15>:

  /* Getting the sign of shiftBits */
  sign = (shiftBits & 0x80);

  /* If the shift value is positive then do right shift else left shift */
  if(sign == 0u)
 8001d06:	2900      	cmp	r1, #0
{
 8001d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  blkCnt = blockSize >> 2u;
 8001d0c:	ea4f 0593 	mov.w	r5, r3, lsr #2
  if(sign == 0u)
 8001d10:	f102 0408 	add.w	r4, r2, #8
 8001d14:	da19      	bge.n	8001d4a <arm_shift_q15+0x44>
 8001d16:	4606      	mov	r6, r0
  blkCnt = blockSize >> 2u;
 8001d18:	46ae      	mov	lr, r5

      /* C = A >> shiftBits */
      /* Shift the inputs and then store the results in the destination buffer. */
#ifndef  ARM_MATH_BIG_ENDIAN

      *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 8001d1a:	f1c1 0c00 	rsb	ip, r1, #0
    while(blkCnt > 0u)
 8001d1e:	3408      	adds	r4, #8
 8001d20:	3608      	adds	r6, #8
 8001d22:	f1be 0f00 	cmp.w	lr, #0
 8001d26:	d14c      	bne.n	8001dc2 <arm_shift_q15+0xbc>
 8001d28:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
      blkCnt--;
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	eb02 02c5 	add.w	r2, r2, r5, lsl #3

    while(blkCnt > 0u)
    {
      /* C = A >> shiftBits */
      /* Shift the inputs and then store the results in the destination buffer. */
      *pDst++ = (*pSrc++ >> -shiftBits);
 8001d34:	4249      	negs	r1, r1
 8001d36:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    while(blkCnt > 0u)
 8001d3a:	4298      	cmp	r0, r3
 8001d3c:	d016      	beq.n	8001d6c <arm_shift_q15+0x66>
      *pDst++ = (*pSrc++ >> -shiftBits);
 8001d3e:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8001d42:	410c      	asrs	r4, r1
 8001d44:	f822 4b02 	strh.w	r4, [r2], #2

      /* Decrement the loop counter */
      blkCnt--;
 8001d48:	e7f7      	b.n	8001d3a <arm_shift_q15+0x34>
 8001d4a:	4607      	mov	r7, r0
  blkCnt = blockSize >> 2u;
 8001d4c:	46ac      	mov	ip, r5
    while(blkCnt > 0u)
 8001d4e:	3408      	adds	r4, #8
 8001d50:	3708      	adds	r7, #8
 8001d52:	f1bc 0f00 	cmp.w	ip, #0
 8001d56:	d10b      	bne.n	8001d70 <arm_shift_q15+0x6a>
 8001d58:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    blkCnt = blockSize % 0x4u;
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
    while(blkCnt > 0u)
 8001d64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001d68:	4298      	cmp	r0, r3
 8001d6a:	d122      	bne.n	8001db2 <arm_shift_q15+0xac>
    }
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8001d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 8001d70:	f937 6c08 	ldrsh.w	r6, [r7, #-8]
      blkCnt--;
 8001d74:	f10c 3cff 	add.w	ip, ip, #4294967295
      *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 8001d78:	f937 ec06 	ldrsh.w	lr, [r7, #-6]
 8001d7c:	408e      	lsls	r6, r1
 8001d7e:	fa0e fe01 	lsl.w	lr, lr, r1
 8001d82:	f306 060f 	ssat	r6, #16, r6
 8001d86:	f30e 0e0f 	ssat	lr, #16, lr
 8001d8a:	eac6 460e 	pkhbt	r6, r6, lr, lsl #16
      *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 8001d8e:	f937 ec02 	ldrsh.w	lr, [r7, #-2]
      *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 8001d92:	f844 6c10 	str.w	r6, [r4, #-16]
      *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 8001d96:	f937 6c04 	ldrsh.w	r6, [r7, #-4]
 8001d9a:	fa0e fe01 	lsl.w	lr, lr, r1
 8001d9e:	f30e 0e0f 	ssat	lr, #16, lr
 8001da2:	408e      	lsls	r6, r1
 8001da4:	f306 060f 	ssat	r6, #16, r6
 8001da8:	eac6 460e 	pkhbt	r6, r6, lr, lsl #16
 8001dac:	f844 6c0c 	str.w	r6, [r4, #-12]
      blkCnt--;
 8001db0:	e7cd      	b.n	8001d4e <arm_shift_q15+0x48>
      *pDst++ = __SSAT((*pSrc++ << shiftBits), 16);
 8001db2:	f930 2b02 	ldrsh.w	r2, [r0], #2
 8001db6:	408a      	lsls	r2, r1
 8001db8:	f302 020f 	ssat	r2, #16, r2
 8001dbc:	f825 2b02 	strh.w	r2, [r5], #2
      blkCnt--;
 8001dc0:	e7d2      	b.n	8001d68 <arm_shift_q15+0x62>
      *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 8001dc2:	f936 7c08 	ldrsh.w	r7, [r6, #-8]
      blkCnt--;
 8001dc6:	f10e 3eff 	add.w	lr, lr, #4294967295
      *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 8001dca:	f936 8c06 	ldrsh.w	r8, [r6, #-6]
 8001dce:	fa47 f70c 	asr.w	r7, r7, ip
 8001dd2:	fa48 f80c 	asr.w	r8, r8, ip
 8001dd6:	eac7 4708 	pkhbt	r7, r7, r8, lsl #16
      *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 8001dda:	f936 8c02 	ldrsh.w	r8, [r6, #-2]
      *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 8001dde:	f844 7c10 	str.w	r7, [r4, #-16]
      *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 8001de2:	f936 7c04 	ldrsh.w	r7, [r6, #-4]
 8001de6:	fa48 f80c 	asr.w	r8, r8, ip
 8001dea:	fa47 f70c 	asr.w	r7, r7, ip
 8001dee:	eac7 4708 	pkhbt	r7, r7, r8, lsl #16
 8001df2:	f844 7c0c 	str.w	r7, [r4, #-12]
      blkCnt--;
 8001df6:	e792      	b.n	8001d1e <arm_shift_q15+0x18>

08001df8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	4606      	mov	r6, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001dfe:	f002 feed 	bl	8004bdc <HAL_I2C_GetState>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	f040 809b 	bne.w	8001f3e <I2Cx_Init+0x146>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001e08:	4b4e      	ldr	r3, [pc, #312]	@ (8001f44 <I2Cx_Init+0x14c>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8001e0a:	2500      	movs	r5, #0
 8001e0c:	4c4e      	ldr	r4, [pc, #312]	@ (8001f48 <I2Cx_Init+0x150>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001e0e:	429e      	cmp	r6, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8001e10:	6175      	str	r5, [r6, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001e12:	bf0c      	ite	eq
 8001e14:	4a4d      	ldreq	r2, [pc, #308]	@ (8001f4c <I2Cx_Init+0x154>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001e16:	4a4e      	ldrne	r2, [pc, #312]	@ (8001f50 <I2Cx_Init+0x158>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001e18:	429e      	cmp	r6, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001e1a:	6032      	str	r2, [r6, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 8001e1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f54 <I2Cx_Init+0x15c>)
 8001e1e:	e9c6 2501 	strd	r2, r5, [r6, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001e22:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001e26:	e9c6 5507 	strd	r5, r5, [r6, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001e2a:	e9c6 2503 	strd	r2, r5, [r6, #12]
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001e2e:	d146      	bne.n	8001ebe <I2Cx_Init+0xc6>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e30:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001e32:	2080      	movs	r0, #128	@ 0x80
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001e36:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e3a:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e40:	6323      	str	r3, [r4, #48]	@ 0x30
 8001e42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001e44:	9507      	str	r5, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001e4e:	2312      	movs	r3, #18
 8001e50:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001e54:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e56:	4840      	ldr	r0, [pc, #256]	@ (8001f58 <I2Cx_Init+0x160>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001e58:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e5c:	f002 fb02 	bl	8004464 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e64:	a905      	add	r1, sp, #20
 8001e66:	483c      	ldr	r0, [pc, #240]	@ (8001f58 <I2Cx_Init+0x160>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001e68:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e6a:	f002 fafb 	bl	8004464 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001e6e:	9502      	str	r5, [sp, #8]
    HAL_NVIC_SetPriority(72, 0x05, 0);
 8001e70:	462a      	mov	r2, r5
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001e72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(72, 0x05, 0);
 8001e74:	2105      	movs	r1, #5
 8001e76:	2048      	movs	r0, #72	@ 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001e78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e7c:	6423      	str	r3, [r4, #64]	@ 0x40
 8001e7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e84:	9302      	str	r3, [sp, #8]
 8001e86:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001e88:	6a23      	ldr	r3, [r4, #32]
 8001e8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e8e:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001e90:	6a23      	ldr	r3, [r4, #32]
 8001e92:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e96:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(72, 0x05, 0);
 8001e98:	f001 ffbe 	bl	8003e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(72);
 8001e9c:	2048      	movs	r0, #72	@ 0x48
 8001e9e:	f001 ffed 	bl	8003e7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(73, 0x05, 0);
 8001ea2:	2049      	movs	r0, #73	@ 0x49
 8001ea4:	462a      	mov	r2, r5
 8001ea6:	2105      	movs	r1, #5
 8001ea8:	f001 ffb6 	bl	8003e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(73);
 8001eac:	2049      	movs	r0, #73	@ 0x49
    HAL_NVIC_EnableIRQ(32);
 8001eae:	f001 ffe5 	bl	8003e7c <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8001eb2:	4630      	mov	r0, r6
  }
}
 8001eb4:	b00a      	add	sp, #40	@ 0x28
 8001eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
 8001eba:	f002 bcfb 	b.w	80048b4 <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001ebe:	9503      	str	r5, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001ec0:	f44f 7280 	mov.w	r2, #256	@ 0x100
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001ec4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001ec6:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ec8:	4824      	ldr	r0, [pc, #144]	@ (8001f5c <I2Cx_Init+0x164>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	6323      	str	r3, [r4, #48]	@ 0x30
 8001ed0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001ed2:	9507      	str	r5, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	9303      	str	r3, [sp, #12]
 8001eda:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001edc:	2312      	movs	r3, #18
 8001ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ee8:	a905      	add	r1, sp, #20
 8001eea:	f002 fabb 	bl	8004464 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001eee:	f44f 7300 	mov.w	r3, #512	@ 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ef2:	a905      	add	r1, sp, #20
 8001ef4:	4819      	ldr	r0, [pc, #100]	@ (8001f5c <I2Cx_Init+0x164>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001ef6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ef8:	f002 fab4 	bl	8004464 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001efc:	9504      	str	r5, [sp, #16]
    HAL_NVIC_SetPriority(31, 0x05, 0);
 8001efe:	462a      	mov	r2, r5
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001f00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(31, 0x05, 0);
 8001f02:	2105      	movs	r1, #5
 8001f04:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001f06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f0a:	6423      	str	r3, [r4, #64]	@ 0x40
 8001f0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f12:	9304      	str	r3, [sp, #16]
 8001f14:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001f16:	6a23      	ldr	r3, [r4, #32]
 8001f18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f1c:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001f1e:	6a23      	ldr	r3, [r4, #32]
 8001f20:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f24:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(31, 0x05, 0);
 8001f26:	f001 ff77 	bl	8003e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(31);
 8001f2a:	201f      	movs	r0, #31
 8001f2c:	f001 ffa6 	bl	8003e7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(32, 0x05, 0);
 8001f30:	2020      	movs	r0, #32
 8001f32:	462a      	mov	r2, r5
 8001f34:	2105      	movs	r1, #5
 8001f36:	f001 ff6f 	bl	8003e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(32);
 8001f3a:	2020      	movs	r0, #32
 8001f3c:	e7b7      	b.n	8001eae <I2Cx_Init+0xb6>
}
 8001f3e:	b00a      	add	sp, #40	@ 0x28
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
 8001f42:	bf00      	nop
 8001f44:	2000109c 	.word	0x2000109c
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40005c00 	.word	0x40005c00
 8001f50:	40005400 	.word	0x40005400
 8001f54:	40912732 	.word	0x40912732
 8001f58:	40021c00 	.word	0x40021c00
 8001f5c:	40020400 	.word	0x40020400

08001f60 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001f60:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f62:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 8001f66:	b085      	sub	sp, #20
 8001f68:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f6a:	9402      	str	r4, [sp, #8]
 8001f6c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8001f70:	9401      	str	r4, [sp, #4]
 8001f72:	9c08      	ldr	r4, [sp, #32]
 8001f74:	9400      	str	r4, [sp, #0]
 8001f76:	f002 fcff 	bl	8004978 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	b128      	cbz	r0, 8001f8a <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001f7e:	4628      	mov	r0, r5
 8001f80:	f002 fce4 	bl	800494c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001f84:	4628      	mov	r0, r5
 8001f86:	f7ff ff37 	bl	8001df8 <I2Cx_Init>
}
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	b005      	add	sp, #20
 8001f8e:	bd30      	pop	{r4, r5, pc}

08001f90 <I2Cx_ReadMultiple>:
{
 8001f90:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f92:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 8001f96:	b085      	sub	sp, #20
 8001f98:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f9a:	9402      	str	r4, [sp, #8]
 8001f9c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8001fa0:	9401      	str	r4, [sp, #4]
 8001fa2:	9c08      	ldr	r4, [sp, #32]
 8001fa4:	9400      	str	r4, [sp, #0]
 8001fa6:	f002 fd7e 	bl	8004aa6 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001faa:	4604      	mov	r4, r0
 8001fac:	b128      	cbz	r0, 8001fba <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f002 fccc 	bl	800494c <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001fb4:	4628      	mov	r0, r5
 8001fb6:	f7ff ff1f 	bl	8001df8 <I2Cx_Init>
}
 8001fba:	4620      	mov	r0, r4
 8001fbc:	b005      	add	sp, #20
 8001fbe:	bd30      	pop	{r4, r5, pc}

08001fc0 <BSP_LED_Init>:
{
 8001fc0:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
 8001fc2:	4604      	mov	r4, r0
{
 8001fc4:	b087      	sub	sp, #28
  if (Led == LED1)
 8001fc6:	b9d0      	cbnz	r0, 8001ffe <BSP_LED_Init+0x3e>
    LED1_GPIO_CLK_ENABLE();
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <BSP_LED_Init+0x44>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	2502      	movs	r5, #2
    LED1_GPIO_CLK_ENABLE();
 8001fcc:	9000      	str	r0, [sp, #0]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8001fce:	a901      	add	r1, sp, #4
    LED1_GPIO_CLK_ENABLE();
 8001fd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8001fd2:	480d      	ldr	r0, [pc, #52]	@ (8002008 <BSP_LED_Init+0x48>)
    LED1_GPIO_CLK_ENABLE();
 8001fd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001fea:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8001ff0:	f002 fa38 	bl	8004464 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8001ff4:	4622      	mov	r2, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	4803      	ldr	r0, [pc, #12]	@ (8002008 <BSP_LED_Init+0x48>)
 8001ffa:	f002 fb21 	bl	8004640 <HAL_GPIO_WritePin>
}
 8001ffe:	b007      	add	sp, #28
 8002000:	bd30      	pop	{r4, r5, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40022000 	.word	0x40022000

0800200c <BSP_PB_Init>:
{
 800200c:	b570      	push	{r4, r5, r6, lr}
 800200e:	4b2e      	ldr	r3, [pc, #184]	@ (80020c8 <BSP_PB_Init+0xbc>)
 8002010:	b088      	sub	sp, #32
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002012:	4604      	mov	r4, r0
 8002014:	b9d0      	cbnz	r0, 800204c <BSP_PB_Init+0x40>
 8002016:	9000      	str	r0, [sp, #0]
 8002018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800201a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 800202a:	bb49      	cbnz	r1, 8002080 <BSP_PB_Init+0x74>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800202c:	4b27      	ldr	r3, [pc, #156]	@ (80020cc <BSP_PB_Init+0xc0>)
    gpio_init_structure.Pull = GPIO_NOPULL;
 800202e:	9105      	str	r1, [sp, #20]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002030:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002034:	e9cd 3103 	strd	r3, r1, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002038:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800203a:	a903      	add	r1, sp, #12
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800203c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800203e:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <BSP_PB_Init+0xc4>)
 8002040:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002044:	f002 fa0e 	bl	8004464 <HAL_GPIO_Init>
}
 8002048:	b008      	add	sp, #32
 800204a:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800204c:	2801      	cmp	r0, #1
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	d10a      	bne.n	800206a <BSP_PB_Init+0x5e>
 8002054:	9201      	str	r2, [sp, #4]
 8002056:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002058:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800205c:	631a      	str	r2, [r3, #48]	@ 0x30
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	9b01      	ldr	r3, [sp, #4]
 8002068:	e7df      	b.n	800202a <BSP_PB_Init+0x1e>
 800206a:	9202      	str	r2, [sp, #8]
 800206c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800206e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002072:	631a      	str	r2, [r3, #48]	@ 0x30
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207a:	9302      	str	r3, [sp, #8]
 800207c:	9b02      	ldr	r3, [sp, #8]
 800207e:	e7d4      	b.n	800202a <BSP_PB_Init+0x1e>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002080:	2901      	cmp	r1, #1
 8002082:	d1e1      	bne.n	8002048 <BSP_PB_Init+0x3c>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002084:	4d11      	ldr	r5, [pc, #68]	@ (80020cc <BSP_PB_Init+0xc0>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002086:	2600      	movs	r6, #0
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8002088:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <BSP_PB_Init+0xc8>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800208a:	a903      	add	r1, sp, #12
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800208c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002090:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002094:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002096:	2302      	movs	r3, #2
 8002098:	e9cd 6305 	strd	r6, r3, [sp, #20]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 800209c:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <BSP_PB_Init+0xcc>)
 800209e:	42b4      	cmp	r4, r6
 80020a0:	bf18      	it	ne
 80020a2:	4613      	movne	r3, r2
 80020a4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80020a6:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <BSP_PB_Init+0xc4>)
 80020a8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80020ac:	f002 f9da 	bl	8004464 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80020b0:	f995 4006 	ldrsb.w	r4, [r5, #6]
 80020b4:	4632      	mov	r2, r6
 80020b6:	210f      	movs	r1, #15
 80020b8:	4620      	mov	r0, r4
 80020ba:	f001 fead 	bl	8003e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80020be:	4620      	mov	r0, r4
 80020c0:	f001 fedc 	bl	8003e7c <HAL_NVIC_EnableIRQ>
}
 80020c4:	e7c0      	b.n	8002048 <BSP_PB_Init+0x3c>
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	0804d358 	.word	0x0804d358
 80020d0:	20000000 	.word	0x20000000
 80020d4:	10210000 	.word	0x10210000
 80020d8:	10110000 	.word	0x10110000

080020dc <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 80020dc:	4801      	ldr	r0, [pc, #4]	@ (80020e4 <AUDIO_IO_Init+0x8>)
 80020de:	f7ff be8b 	b.w	8001df8 <I2Cx_Init>
 80020e2:	bf00      	nop
 80020e4:	2000109c 	.word	0x2000109c

080020e8 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 80020e8:	4770      	bx	lr
	...

080020ec <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80020ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80020ee:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80020f0:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80020f2:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80020f6:	f10d 020e 	add.w	r2, sp, #14
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	9200      	str	r2, [sp, #0]
 80020fe:	460a      	mov	r2, r1
 8002100:	4601      	mov	r1, r0
 8002102:	4803      	ldr	r0, [pc, #12]	@ (8002110 <AUDIO_IO_Write+0x24>)
 8002104:	f7ff ff2c 	bl	8001f60 <I2Cx_WriteMultiple>
}
 8002108:	b005      	add	sp, #20
 800210a:	f85d fb04 	ldr.w	pc, [sp], #4
 800210e:	bf00      	nop
 8002110:	2000109c 	.word	0x2000109c

08002114 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8002114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 8002116:	2300      	movs	r3, #0
{
 8002118:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800211a:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
 800211e:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8002122:	2302      	movs	r3, #2
 8002124:	9100      	str	r1, [sp, #0]
 8002126:	4601      	mov	r1, r0
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	4805      	ldr	r0, [pc, #20]	@ (8002140 <AUDIO_IO_Read+0x2c>)
 800212c:	f7ff ff30 	bl	8001f90 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8002130:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8002134:	ba40      	rev16	r0, r0
  
  read_value = tmp;
  
  return read_value;
}
 8002136:	b280      	uxth	r0, r0
 8002138:	b005      	add	sp, #20
 800213a:	f85d fb04 	ldr.w	pc, [sp], #4
 800213e:	bf00      	nop
 8002140:	2000109c 	.word	0x2000109c

08002144 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8002144:	f00b ba8a 	b.w	800d65c <HAL_Delay>

08002148 <TS_IO_Init>:

/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
 8002148:	f7ff bfc8 	b.w	80020dc <AUDIO_IO_Init>

0800214c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800214c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800214e:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002152:	f10d 020f 	add.w	r2, sp, #15
 8002156:	2301      	movs	r3, #1
 8002158:	9200      	str	r2, [sp, #0]
 800215a:	460a      	mov	r2, r1
 800215c:	4601      	mov	r1, r0
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	4802      	ldr	r0, [pc, #8]	@ (800216c <TS_IO_Write+0x20>)
 8002162:	f7ff fefd 	bl	8001f60 <I2Cx_WriteMultiple>
}
 8002166:	b005      	add	sp, #20
 8002168:	f85d fb04 	ldr.w	pc, [sp], #4
 800216c:	2000109c 	.word	0x2000109c

08002170 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 8002172:	2300      	movs	r3, #0
{
 8002174:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002176:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
 800217a:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800217e:	2301      	movs	r3, #1
 8002180:	9100      	str	r1, [sp, #0]
 8002182:	4601      	mov	r1, r0
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	4804      	ldr	r0, [pc, #16]	@ (8002198 <TS_IO_Read+0x28>)
 8002188:	f7ff ff02 	bl	8001f90 <I2Cx_ReadMultiple>

  return read_value;
}
 800218c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8002190:	b005      	add	sp, #20
 8002192:	f85d fb04 	ldr.w	pc, [sp], #4
 8002196:	bf00      	nop
 8002198:	2000109c 	.word	0x2000109c

0800219c <TS_IO_Delay>:
/**
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
 800219c:	f00b ba5e 	b.w	800d65c <HAL_Delay>

080021a0 <EXT_I2C_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void EXT_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80021a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80021a2:	f8ad 200e 	strh.w	r2, [sp, #14]
	  I2Cx_WriteMultiple(&hI2cExtHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80021a6:	f10d 020e 	add.w	r2, sp, #14
 80021aa:	2301      	movs	r3, #1
 80021ac:	9200      	str	r2, [sp, #0]
 80021ae:	460a      	mov	r2, r1
 80021b0:	4601      	mov	r1, r0
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	4802      	ldr	r0, [pc, #8]	@ (80021c0 <EXT_I2C_Write+0x20>)
 80021b6:	f7ff fed3 	bl	8001f60 <I2Cx_WriteMultiple>
}
 80021ba:	b005      	add	sp, #20
 80021bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80021c0:	200010d8 	.word	0x200010d8

080021c4 <EXT_I2C_Write_N>:
}



void EXT_I2C_Write_N(uint8_t Addr, uint8_t Reg, uint8_t Value, uint8_t Items)
{
 80021c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  I2Cx_WriteMultiple(&hI2cExtHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, Items);
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	f10d 030f 	add.w	r3, sp, #15
{
 80021cc:	f88d 200f 	strb.w	r2, [sp, #15]
	  I2Cx_WriteMultiple(&hI2cExtHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, Items);
 80021d0:	460a      	mov	r2, r1
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	4601      	mov	r1, r0
 80021d6:	2301      	movs	r3, #1
 80021d8:	4802      	ldr	r0, [pc, #8]	@ (80021e4 <EXT_I2C_Write_N+0x20>)
 80021da:	f7ff fec1 	bl	8001f60 <I2Cx_WriteMultiple>
}
 80021de:	b005      	add	sp, #20
 80021e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80021e4:	200010d8 	.word	0x200010d8

080021e8 <EXT_I2C_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t EXT_I2C_Read(uint8_t Addr, uint16_t Reg)
{
 80021e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  uint8_t read_value = 0;
 80021ea:	2300      	movs	r3, #0
{
 80021ec:	460a      	mov	r2, r1

	  I2Cx_ReadMultiple(&hI2cExtHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80021ee:	f10d 010f 	add.w	r1, sp, #15
	  uint8_t read_value = 0;
 80021f2:	f88d 300f 	strb.w	r3, [sp, #15]
	  I2Cx_ReadMultiple(&hI2cExtHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80021f6:	2301      	movs	r3, #1
 80021f8:	9100      	str	r1, [sp, #0]
 80021fa:	4601      	mov	r1, r0
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	4804      	ldr	r0, [pc, #16]	@ (8002210 <EXT_I2C_Read+0x28>)
 8002200:	f7ff fec6 	bl	8001f90 <I2Cx_ReadMultiple>
	  return read_value;
}
 8002204:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8002208:	b005      	add	sp, #20
 800220a:	f85d fb04 	ldr.w	pc, [sp], #4
 800220e:	bf00      	nop
 8002210:	200010d8 	.word	0x200010d8

08002214 <EXT_I2C_Init>:



void EXT_I2C_Init(void)
{
  I2Cx_Init(&hI2cExtHandler);
 8002214:	4801      	ldr	r0, [pc, #4]	@ (800221c <EXT_I2C_Init+0x8>)
 8002216:	f7ff bdef 	b.w	8001df8 <I2Cx_Init>
 800221a:	bf00      	nop
 800221c:	200010d8 	.word	0x200010d8

08002220 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002220:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SAIx_Out_DeInit+0x14>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002222:	4a05      	ldr	r2, [pc, #20]	@ (8002238 <SAIx_Out_DeInit+0x18>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002224:	4805      	ldr	r0, [pc, #20]	@ (800223c <SAIx_Out_DeInit+0x1c>)
 8002226:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002228:	6853      	ldr	r3, [r2, #4]
 800222a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222e:	6053      	str	r3, [r2, #4]

  HAL_SAI_DeInit(&haudio_out_sai);
 8002230:	f003 bf01 	b.w	8006036 <HAL_SAI_DeInit>
 8002234:	40015c04 	.word	0x40015c04
 8002238:	40015c00 	.word	0x40015c00
 800223c:	20001114 	.word	0x20001114

08002240 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002242:	4a06      	ldr	r2, [pc, #24]	@ (800225c <SAIx_In_DeInit+0x1c>)
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002244:	4806      	ldr	r0, [pc, #24]	@ (8002260 <SAIx_In_DeInit+0x20>)
 8002246:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800224a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800224c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002250:	6253      	str	r3, [r2, #36]	@ 0x24

  HAL_SAI_DeInit(&haudio_in_sai);
 8002252:	f003 bef0 	b.w	8006036 <HAL_SAI_DeInit>
 8002256:	bf00      	nop
 8002258:	40015c24 	.word	0x40015c24
 800225c:	40015c00 	.word	0x40015c00
 8002260:	20001114 	.word	0x20001114

08002264 <SAIx_In_Init>:
{
 8002264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002268:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <SAIx_In_Init+0xe4>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800226a:	2500      	movs	r5, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800226c:	4c37      	ldr	r4, [pc, #220]	@ (800234c <SAIx_In_Init+0xe8>)
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800226e:	f04f 0b20 	mov.w	fp, #32
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002272:	4f37      	ldr	r7, [pc, #220]	@ (8002350 <SAIx_In_Init+0xec>)
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002274:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002278:	6023      	str	r3, [r4, #0]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800227a:	f04f 0801 	mov.w	r8, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800227e:	687b      	ldr	r3, [r7, #4]
{
 8002280:	4616      	mov	r6, r2
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002282:	f44f 2980 	mov.w	r9, #262144	@ 0x40000
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800228a:	607b      	str	r3, [r7, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800228c:	2380      	movs	r3, #128	@ 0x80
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800228e:	61e2      	str	r2, [r4, #28]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002290:	f44f 7200 	mov.w	r2, #512	@ 0x200
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8002294:	6060      	str	r0, [r4, #4]
  HAL_SAI_Init(&haudio_out_sai);
 8002296:	4620      	mov	r0, r4
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002298:	63e2      	str	r2, [r4, #60]	@ 0x3c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 800229a:	9101      	str	r1, [sp, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800229c:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800229e:	6325      	str	r5, [r4, #48]	@ 0x30
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80022a0:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80022a2:	f8c4 8018 	str.w	r8, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80022a6:	65a5      	str	r5, [r4, #88]	@ 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80022a8:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80022ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022b0:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80022b2:	2340      	movs	r3, #64	@ 0x40
 80022b4:	e9c4 3b10 	strd	r3, fp, [r4, #64]	@ 0x40
  haudio_out_sai.SlotInit.SlotNumber = 4;
 80022b8:	2304      	movs	r3, #4
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80022ba:	e9c4 a512 	strd	sl, r5, [r4, #72]	@ 0x48
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80022be:	e9c4 3117 	strd	r3, r1, [r4, #92]	@ 0x5c
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80022c2:	e9c4 9514 	strd	r9, r5, [r4, #80]	@ 0x50
  HAL_SAI_Init(&haudio_out_sai);
 80022c6:	f003 fe1f 	bl	8005f08 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80022ca:	4822      	ldr	r0, [pc, #136]	@ (8002354 <SAIx_In_Init+0xf0>)
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80022cc:	2380      	movs	r3, #128	@ 0x80
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80022ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80022d2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80022d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80022d8:	9901      	ldr	r1, [sp, #4]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80022da:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80022de:	6278      	str	r0, [r7, #36]	@ 0x24
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80022e0:	2003      	movs	r0, #3
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80022e2:	f8c4 20c0 	str.w	r2, [r4, #192]	@ 0xc0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80022e6:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  HAL_SAI_Init(&haudio_in_sai);
 80022ea:	f104 0084 	add.w	r0, r4, #132	@ 0x84
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80022ee:	f8c4 60a0 	str.w	r6, [r4, #160]	@ 0xa0
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80022f2:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80022f6:	f8c4 50b4 	str.w	r5, [r4, #180]	@ 0xb4
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80022fa:	f8c4 808c 	str.w	r8, [r4, #140]	@ 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80022fe:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002302:	f8c4 809c 	str.w	r8, [r4, #156]	@ 0x9c
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002306:	f8c4 50dc 	str.w	r5, [r4, #220]	@ 0xdc
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800230a:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800230e:	e9c4 352e 	strd	r3, r5, [r4, #184]	@ 0xb8
  haudio_in_sai.FrameInit.FrameLength = 64;
 8002312:	2340      	movs	r3, #64	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8002314:	e9c4 3b31 	strd	r3, fp, [r4, #196]	@ 0xc4
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8002318:	2304      	movs	r3, #4
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800231a:	e9c4 a533 	strd	sl, r5, [r4, #204]	@ 0xcc
  haudio_in_sai.SlotInit.SlotNumber = 4;
 800231e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002322:	e9c4 9535 	strd	r9, r5, [r4, #212]	@ 0xd4
  HAL_SAI_Init(&haudio_in_sai);
 8002326:	f003 fdef 	bl	8005f08 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800232a:	6822      	ldr	r2, [r4, #0]
 800232c:	6813      	ldr	r3, [r2, #0]
 800232e:	ea43 030a 	orr.w	r3, r3, sl
 8002332:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8002334:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8002338:	6813      	ldr	r3, [r2, #0]
 800233a:	ea43 030a 	orr.w	r3, r3, sl
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	b003      	add	sp, #12
 8002342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002346:	bf00      	nop
 8002348:	40015c04 	.word	0x40015c04
 800234c:	20001114 	.word	0x20001114
 8002350:	40015c00 	.word	0x40015c00
 8002354:	40015c24 	.word	0x40015c24

08002358 <BSP_AUDIO_OUT_Play>:
{
 8002358:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <BSP_AUDIO_OUT_Play+0x38>)
{
 800235c:	4605      	mov	r5, r0
 800235e:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8002360:	b28a      	uxth	r2, r1
 8002362:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002366:	4601      	mov	r1, r0
 8002368:	2034      	movs	r0, #52	@ 0x34
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4798      	blx	r3
 800236e:	b960      	cbnz	r0, 800238a <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8002370:	f5b4 3f00 	cmp.w	r4, #131072	@ 0x20000
 8002374:	4629      	mov	r1, r5
 8002376:	4806      	ldr	r0, [pc, #24]	@ (8002390 <BSP_AUDIO_OUT_Play+0x38>)
 8002378:	bf34      	ite	cc
 800237a:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 800237e:	f64f 72ff 	movwcs	r2, #65535	@ 0xffff
 8002382:	f003 fea1 	bl	80060c8 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 8002386:	2000      	movs	r0, #0
}
 8002388:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 800238a:	2001      	movs	r0, #1
 800238c:	e7fc      	b.n	8002388 <BSP_AUDIO_OUT_Play+0x30>
 800238e:	bf00      	nop
 8002390:	20001114 	.word	0x20001114

08002394 <HAL_SAI_TxCpltCallback>:
{
 8002394:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002396:	f008 ff81 	bl	800b29c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800239a:	bd08      	pop	{r3, pc}

0800239c <HAL_SAI_TxHalfCpltCallback>:
{
 800239c:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800239e:	f008 ff7e 	bl	800b29e <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80023a2:	bd08      	pop	{r3, pc}

080023a4 <BSP_AUDIO_OUT_Error_CallBack>:
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
 80023a4:	4770      	bx	lr
	...

080023a8 <BSP_AUDIO_OUT_MspInit>:
{ 
 80023a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80023ac:	4c4f      	ldr	r4, [pc, #316]	@ (80024ec <BSP_AUDIO_OUT_MspInit+0x144>)
{ 
 80023ae:	b08a      	sub	sp, #40	@ 0x28
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80023b0:	2500      	movs	r5, #0
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80023b2:	f04f 0902 	mov.w	r9, #2
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80023b6:	2703      	movs	r7, #3
 80023b8:	f04f 080a 	mov.w	r8, #10
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80023bc:	9500      	str	r5, [sp, #0]
{ 
 80023be:	4606      	mov	r6, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80023c0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80023c2:	a905      	add	r1, sp, #20
 80023c4:	484a      	ldr	r0, [pc, #296]	@ (80024f0 <BSP_AUDIO_OUT_MspInit+0x148>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80023c6:	f04f 0a40 	mov.w	sl, #64	@ 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80023ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023ce:	6463      	str	r3, [r4, #68]	@ 0x44
 80023d0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80023d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80023da:	9501      	str	r5, [sp, #4]
 80023dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80023e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 80023ee:	9502      	str	r5, [sp, #8]
 80023f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80023f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fe:	9302      	str	r3, [sp, #8]
 8002400:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8002402:	9503      	str	r5, [sp, #12]
 8002404:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240a:	6323      	str	r3, [r4, #48]	@ 0x30
 800240c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  gpio_init_structure.Pull = GPIO_NOPULL;
 800240e:	9507      	str	r5, [sp, #28]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8002410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002414:	9303      	str	r3, [sp, #12]
 8002416:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002418:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800241a:	e9cd 7808 	strd	r7, r8, [sp, #32]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800241e:	e9cd 3905 	strd	r3, r9, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8002422:	f002 f81f 	bl	8004464 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8002426:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002428:	a905      	add	r1, sp, #20
 800242a:	4831      	ldr	r0, [pc, #196]	@ (80024f0 <BSP_AUDIO_OUT_MspInit+0x148>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 800242c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002430:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002434:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002438:	f002 f814 	bl	8004464 <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800243c:	a905      	add	r1, sp, #20
 800243e:	482c      	ldr	r0, [pc, #176]	@ (80024f0 <BSP_AUDIO_OUT_MspInit+0x148>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002440:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002444:	e9cd a905 	strd	sl, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002448:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800244c:	f002 f80a 	bl	8004464 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8002450:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8002452:	a905      	add	r1, sp, #20
 8002454:	4826      	ldr	r0, [pc, #152]	@ (80024f0 <BSP_AUDIO_OUT_MspInit+0x148>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002456:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800245a:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800245e:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8002462:	f001 ffff 	bl	8004464 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8002466:	9504      	str	r5, [sp, #16]
 8002468:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800246a:	6832      	ldr	r2, [r6, #0]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800246c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002470:	6323      	str	r3, [r4, #48]	@ 0x30
 8002472:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002474:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002478:	9304      	str	r3, [sp, #16]
 800247a:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800247c:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <BSP_AUDIO_OUT_MspInit+0x14c>)
 800247e:	429a      	cmp	r2, r3
 8002480:	d129      	bne.n	80024d6 <BSP_AUDIO_OUT_MspInit+0x12e>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8002482:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <BSP_AUDIO_OUT_MspInit+0x150>)
 8002484:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002488:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800248c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8002490:	f44f 3400 	mov.w	r4, #131072	@ 0x20000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002494:	f8c3 5118 	str.w	r5, [r3, #280]	@ 0x118
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002498:	f8c3 513c 	str.w	r5, [r3, #316]	@ 0x13c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800249c:	f8c3 6144 	str.w	r6, [r3, #324]	@ 0x144
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80024a0:	e9c3 2a44 	strd	r2, sl, [r3, #272]	@ 0x110
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 80024a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024a8:	e9c3 1247 	strd	r1, r2, [r3, #284]	@ 0x11c
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80024ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024b0:	e9c3 0249 	strd	r0, r2, [r3, #292]	@ 0x124
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80024b4:	2204      	movs	r2, #4
 80024b6:	e9c3 424b 	strd	r4, r2, [r3, #300]	@ 0x12c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80024ba:	f503 7486 	add.w	r4, r3, #268	@ 0x10c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80024be:	4a0f      	ldr	r2, [pc, #60]	@ (80024fc <BSP_AUDIO_OUT_MspInit+0x154>)
    HAL_DMA_DeInit(&hdma_sai_tx);
 80024c0:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80024c2:	66f4      	str	r4, [r6, #108]	@ 0x6c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80024c4:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80024c8:	e9c3 754d 	strd	r7, r5, [r3, #308]	@ 0x134
    HAL_DMA_DeInit(&hdma_sai_tx);
 80024cc:	f001 fd50 	bl	8003f70 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
 80024d0:	4620      	mov	r0, r4
 80024d2:	f001 fd09 	bl	8003ee8 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2105      	movs	r1, #5
 80024da:	203c      	movs	r0, #60	@ 0x3c
 80024dc:	f001 fc9c 	bl	8003e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80024e0:	203c      	movs	r0, #60	@ 0x3c
 80024e2:	f001 fccb 	bl	8003e7c <HAL_NVIC_EnableIRQ>
}
 80024e6:	b00a      	add	sp, #40	@ 0x28
 80024e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40015c04 	.word	0x40015c04
 80024f8:	20001114 	.word	0x20001114
 80024fc:	40026470 	.word	0x40026470

08002500 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8002500:	b510      	push	{r4, lr}
 8002502:	b0a2      	sub	sp, #136	@ 0x88
 8002504:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002506:	a801      	add	r0, sp, #4
 8002508:	f003 fb78 	bl	8005bfc <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800250c:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8002510:	429c      	cmp	r4, r3
 8002512:	d007      	beq.n	8002524 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8002514:	f245 6322 	movw	r3, #22050	@ 0x5622
 8002518:	429c      	cmp	r4, r3
 800251a:	d003      	beq.n	8002524 <BSP_AUDIO_OUT_ClockConfig+0x24>
 800251c:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8002520:	429c      	cmp	r4, r3
 8002522:	d111      	bne.n	8002548 <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002524:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002528:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800252a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800252e:	9311      	str	r3, [sp, #68]	@ 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8002530:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8002534:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8002536:	2302      	movs	r3, #2
 8002538:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800253a:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800253c:	a801      	add	r0, sp, #4
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 800253e:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002540:	f002 ffc2 	bl	80054c8 <HAL_RCCEx_PeriphCLKConfig>
}
 8002544:	b022      	add	sp, #136	@ 0x88
 8002546:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002548:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800254c:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800254e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002552:	9311      	str	r3, [sp, #68]	@ 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8002554:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8002558:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 800255a:	2307      	movs	r3, #7
 800255c:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	e7ec      	b.n	800253c <BSP_AUDIO_OUT_ClockConfig+0x3c>
	...

08002564 <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8002564:	b28a      	uxth	r2, r1
 8002566:	4601      	mov	r1, r0
 8002568:	4802      	ldr	r0, [pc, #8]	@ (8002574 <BSP_AUDIO_IN_Record+0x10>)
{
 800256a:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 800256c:	f003 fdf6 	bl	800615c <HAL_SAI_Receive_DMA>
}
 8002570:	2000      	movs	r0, #0
 8002572:	bd08      	pop	{r3, pc}
 8002574:	20001198 	.word	0x20001198

08002578 <HAL_SAI_RxCpltCallback>:
{
 8002578:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800257a:	f008 fe7d 	bl	800b278 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800257e:	bd08      	pop	{r3, pc}

08002580 <HAL_SAI_RxHalfCpltCallback>:
{
 8002580:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8002582:	f008 fe83 	bl	800b28c <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002586:	bd08      	pop	{r3, pc}

08002588 <BSP_AUDIO_IN_Error_CallBack>:
__weak void BSP_AUDIO_IN_Error_CallBack(void)
 8002588:	4770      	bx	lr
	...

0800258c <HAL_SAI_ErrorCallback>:
{
 800258c:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 800258e:	480c      	ldr	r0, [pc, #48]	@ (80025c0 <HAL_SAI_ErrorCallback+0x34>)
 8002590:	f003 fe7f 	bl	8006292 <HAL_SAI_GetState>
 8002594:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8002596:	480b      	ldr	r0, [pc, #44]	@ (80025c4 <HAL_SAI_ErrorCallback+0x38>)
 8002598:	f003 fe7b 	bl	8006292 <HAL_SAI_GetState>
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX)
 800259c:	1eab      	subs	r3, r5, #2
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 800259e:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX)
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_SAI_ErrorCallback+0x1e>
 80025a6:	2d12      	cmp	r5, #18
 80025a8:	d101      	bne.n	80025ae <HAL_SAI_ErrorCallback+0x22>
    BSP_AUDIO_OUT_Error_CallBack();
 80025aa:	f7ff fefb 	bl	80023a4 <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX)
 80025ae:	1ea3      	subs	r3, r4, #2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_SAI_ErrorCallback+0x2e>
 80025b6:	2c22      	cmp	r4, #34	@ 0x22
 80025b8:	d101      	bne.n	80025be <HAL_SAI_ErrorCallback+0x32>
    BSP_AUDIO_IN_Error_CallBack();
 80025ba:	f7ff ffe5 	bl	8002588 <BSP_AUDIO_IN_Error_CallBack>
}
 80025be:	bd38      	pop	{r3, r4, r5, pc}
 80025c0:	20001114 	.word	0x20001114
 80025c4:	20001198 	.word	0x20001198

080025c8 <BSP_AUDIO_IN_MspInit>:
{
 80025c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
 80025cc:	4d3f      	ldr	r5, [pc, #252]	@ (80026cc <BSP_AUDIO_IN_MspInit+0x104>)
{
 80025ce:	b08a      	sub	sp, #40	@ 0x28
  AUDIO_IN_SAIx_CLK_ENABLE();
 80025d0:	2400      	movs	r4, #0
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80025d2:	2702      	movs	r7, #2
 80025d4:	f44f 6880 	mov.w	r8, #1024	@ 0x400
{
 80025d8:	4606      	mov	r6, r0
  AUDIO_IN_SAIx_CLK_ENABLE();
 80025da:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80025dc:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
 80025de:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80025e0:	483b      	ldr	r0, [pc, #236]	@ (80026d0 <BSP_AUDIO_IN_MspInit+0x108>)
  AUDIO_IN_SAIx_CLK_ENABLE();
 80025e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025e6:	646b      	str	r3, [r5, #68]	@ 0x44
 80025e8:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80025ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
 80025f2:	9402      	str	r4, [sp, #8]
 80025f4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80025f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025fa:	632b      	str	r3, [r5, #48]	@ 0x30
 80025fc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80025fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002602:	9302      	str	r3, [sp, #8]
 8002604:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8002606:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002608:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 800260c:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800260e:	e9cd 4707 	strd	r4, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002612:	f001 ff27 	bl	8004464 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 8002616:	9403      	str	r4, [sp, #12]
 8002618:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800261a:	a905      	add	r1, sp, #20
 800261c:	482d      	ldr	r0, [pc, #180]	@ (80026d4 <BSP_AUDIO_IN_MspInit+0x10c>)
  AUDIO_IN_INT_GPIO_ENABLE();
 800261e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002622:	632b      	str	r3, [r5, #48]	@ 0x30
 8002624:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	9303      	str	r3, [sp, #12]
 800262c:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 800262e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002632:	e9cd 4707 	strd	r4, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002636:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800263a:	f001 ff13 	bl	8004464 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800263e:	9404      	str	r4, [sp, #16]
 8002640:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002642:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002644:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002648:	632b      	str	r3, [r5, #48]	@ 0x30
 800264a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800264c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002650:	9304      	str	r3, [sp, #16]
 8002652:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002654:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <BSP_AUDIO_IN_MspInit+0x110>)
 8002656:	429a      	cmp	r2, r3
 8002658:	d125      	bne.n	80026a6 <BSP_AUDIO_IN_MspInit+0xde>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 800265a:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <BSP_AUDIO_IN_MspInit+0x114>)
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800265c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002660:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002664:	f44f 7080 	mov.w	r0, #256	@ 0x100
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002668:	f8c3 4188 	str.w	r4, [r3, #392]	@ 0x188
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800266c:	f8c3 4194 	str.w	r4, [r3, #404]	@ 0x194
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002670:	f8c3 619c 	str.w	r6, [r3, #412]	@ 0x19c
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8002674:	e9c3 125e 	strd	r1, r2, [r3, #376]	@ 0x178
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002678:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800267c:	e9c3 0260 	strd	r0, r2, [r3, #384]	@ 0x180
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002680:	2203      	movs	r2, #3
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002682:	e9c3 445a 	strd	r4, r4, [r3, #360]	@ 0x168
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002686:	e9c3 2463 	strd	r2, r4, [r3, #396]	@ 0x18c
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800268a:	e9c3 485c 	strd	r4, r8, [r3, #368]	@ 0x170
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800268e:	f503 74b2 	add.w	r4, r3, #356	@ 0x164
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002692:	4a13      	ldr	r2, [pc, #76]	@ (80026e0 <BSP_AUDIO_IN_MspInit+0x118>)
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002694:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002696:	6734      	str	r4, [r6, #112]	@ 0x70
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002698:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    HAL_DMA_DeInit(&hdma_sai_rx);
 800269c:	f001 fc68 	bl	8003f70 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 80026a0:	4620      	mov	r0, r4
 80026a2:	f001 fc21 	bl	8003ee8 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2106      	movs	r1, #6
 80026aa:	2046      	movs	r0, #70	@ 0x46
 80026ac:	f001 fbb4 	bl	8003e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80026b0:	2046      	movs	r0, #70	@ 0x46
 80026b2:	f001 fbe3 	bl	8003e7c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, 3, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2103      	movs	r1, #3
 80026ba:	2028      	movs	r0, #40	@ 0x28
 80026bc:	f001 fbac 	bl	8003e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 80026c0:	2028      	movs	r0, #40	@ 0x28
 80026c2:	f001 fbdb 	bl	8003e7c <HAL_NVIC_EnableIRQ>
}
 80026c6:	b00a      	add	sp, #40	@ 0x28
 80026c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40021800 	.word	0x40021800
 80026d4:	40021c00 	.word	0x40021c00
 80026d8:	40015c24 	.word	0x40015c24
 80026dc:	20001114 	.word	0x20001114
 80026e0:	400264b8 	.word	0x400264b8

080026e4 <BSP_AUDIO_IN_OUT_Init>:
{
 80026e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026e8:	461d      	mov	r5, r3
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 80026ea:	f420 7380 	bic.w	r3, r0, #256	@ 0x100
{
 80026ee:	4604      	mov	r4, r0
 80026f0:	4688      	mov	r8, r1
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 80026f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
{
 80026f6:	4691      	mov	r9, r2
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 80026f8:	d002      	beq.n	8002700 <BSP_AUDIO_IN_OUT_Init+0x1c>
    ret = AUDIO_ERROR;
 80026fa:	2001      	movs	r0, #1
}
 80026fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8002700:	4e20      	ldr	r6, [pc, #128]	@ (8002784 <BSP_AUDIO_IN_OUT_Init+0xa0>)
    SAIx_In_DeInit();
 8002702:	f7ff fd9d 	bl	8002240 <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 8002706:	f7ff fd8b 	bl	8002220 <SAIx_Out_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 800270a:	4629      	mov	r1, r5
 800270c:	2200      	movs	r2, #0
 800270e:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 8002712:	f7ff fef5 	bl	8002500 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002716:	4630      	mov	r0, r6
 8002718:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <BSP_AUDIO_IN_OUT_Init+0xa4>)
 800271a:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800271e:	f003 fdb8 	bl	8006292 <HAL_SAI_GetState>
 8002722:	4601      	mov	r1, r0
 8002724:	b918      	cbnz	r0, 800272e <BSP_AUDIO_IN_OUT_Init+0x4a>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8002726:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 800272a:	f7ff ff4d 	bl	80025c8 <BSP_AUDIO_IN_MspInit>
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800272e:	4b17      	ldr	r3, [pc, #92]	@ (800278c <BSP_AUDIO_IN_OUT_Init+0xa8>)
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8002730:	4814      	ldr	r0, [pc, #80]	@ (8002784 <BSP_AUDIO_IN_OUT_Init+0xa0>)
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002732:	6033      	str	r3, [r6, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8002734:	f003 fdad 	bl	8006292 <HAL_SAI_GetState>
 8002738:	4601      	mov	r1, r0
 800273a:	b910      	cbnz	r0, 8002742 <BSP_AUDIO_IN_OUT_Init+0x5e>
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800273c:	4811      	ldr	r0, [pc, #68]	@ (8002784 <BSP_AUDIO_IN_OUT_Init+0xa0>)
 800273e:	f7ff fe33 	bl	80023a8 <BSP_AUDIO_OUT_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8002742:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002746:	4f12      	ldr	r7, [pc, #72]	@ (8002790 <BSP_AUDIO_IN_OUT_Init+0xac>)
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8002748:	462a      	mov	r2, r5
 800274a:	f04f 0000 	mov.w	r0, #0
 800274e:	bf0c      	ite	eq
 8002750:	210a      	moveq	r1, #10
 8002752:	2105      	movne	r1, #5
 8002754:	f7ff fd86 	bl	8002264 <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2034      	movs	r0, #52	@ 0x34
 800275c:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
 800275e:	f648 1394 	movw	r3, #35220	@ 0x8994
 8002762:	4298      	cmp	r0, r3
 8002764:	d1c9      	bne.n	80026fa <BSP_AUDIO_IN_OUT_Init+0x16>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002768:	2034      	movs	r0, #52	@ 0x34
 800276a:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 800276c:	f8c6 7108 	str.w	r7, [r6, #264]	@ 0x108
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, Volume, AudioFreq);
 8002770:	462b      	mov	r3, r5
 8002772:	683e      	ldr	r6, [r7, #0]
 8002774:	464a      	mov	r2, r9
 8002776:	ea44 0108 	orr.w	r1, r4, r8
 800277a:	2034      	movs	r0, #52	@ 0x34
 800277c:	47b0      	blx	r6
      ret = AUDIO_OK;
 800277e:	2000      	movs	r0, #0
 8002780:	e7bc      	b.n	80026fc <BSP_AUDIO_IN_OUT_Init+0x18>
 8002782:	bf00      	nop
 8002784:	20001114 	.word	0x20001114
 8002788:	40015c24 	.word	0x40015c24
 800278c:	40015c04 	.word	0x40015c04
 8002790:	2000006c 	.word	0x2000006c

08002794 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002794:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002798:	4c1a      	ldr	r4, [pc, #104]	@ (8002804 <LL_FillBuffer+0x70>)
{
 800279a:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800279c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
{
 80027a0:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80027a2:	2234      	movs	r2, #52	@ 0x34
{
 80027a4:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80027a6:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80027a8:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80027aa:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
{
 80027ae:	460e      	mov	r6, r1
 80027b0:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80027b4:	fb02 4303 	mla	r3, r2, r3, r4
 80027b8:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80027bc:	1eab      	subs	r3, r5, #2
 80027be:	425d      	negs	r5, r3
 80027c0:	415d      	adcs	r5, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80027c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80027c4:	006d      	lsls	r5, r5, #1
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80027c6:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <LL_FillBuffer+0x74>)
 80027ca:	60a5      	str	r5, [r4, #8]
 80027cc:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80027ce:	f001 fd36 	bl	800423e <HAL_DMA2D_Init>
 80027d2:	b9a0      	cbnz	r0, 80027fe <LL_FillBuffer+0x6a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80027d4:	4649      	mov	r1, r9
 80027d6:	4620      	mov	r0, r4
 80027d8:	f001 fddc 	bl	8004394 <HAL_DMA2D_ConfigLayer>
 80027dc:	b978      	cbnz	r0, 80027fe <LL_FillBuffer+0x6a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80027de:	463b      	mov	r3, r7
 80027e0:	4632      	mov	r2, r6
 80027e2:	4651      	mov	r1, sl
 80027e4:	4620      	mov	r0, r4
 80027e6:	f8cd 8000 	str.w	r8, [sp]
 80027ea:	f001 fd54 	bl	8004296 <HAL_DMA2D_Start>
 80027ee:	b930      	cbnz	r0, 80027fe <LL_FillBuffer+0x6a>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80027f0:	210a      	movs	r1, #10
 80027f2:	4620      	mov	r0, r4
      }
    }
  } 
}
 80027f4:	b002      	add	sp, #8
 80027f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80027fa:	f001 bd69 	b.w	80042d0 <HAL_DMA2D_PollForTransfer>
}
 80027fe:	b002      	add	sp, #8
 8002800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002804:	20001364 	.word	0x20001364
 8002808:	4002b000 	.word	0x4002b000

0800280c <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800280c:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <BSP_LCD_GetXSize+0x14>)
 800280e:	2134      	movs	r1, #52	@ 0x34
 8002810:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002814:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002818:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20001364 	.word	0x20001364

08002824 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002824:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <BSP_LCD_GetYSize+0x14>)
 8002826:	2134      	movs	r1, #52	@ 0x34
 8002828:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800282c:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002830:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20001364 	.word	0x20001364

0800283c <BSP_LCD_LayerDefaultInit>:
{     
 800283c:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
 800283e:	2400      	movs	r4, #0
{     
 8002840:	b08e      	sub	sp, #56	@ 0x38
 8002842:	460e      	mov	r6, r1
 8002844:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
 8002846:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002848:	f7ff ffe0 	bl	800280c <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
 800284c:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002850:	f7ff ffe8 	bl	8002824 <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
 8002854:	23ff      	movs	r3, #255	@ 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002856:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
  layer_cfg.Backcolor.Blue = 0;
 800285a:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
  layer_cfg.Backcolor.Red = 0;
 800285e:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
  layer_cfg.FBStartAdress = FB_Address;
 8002862:	960a      	str	r6, [sp, #40]	@ 0x28
  layer_cfg.Alpha0 = 0;
 8002864:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002868:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800286c:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800286e:	4c0f      	ldr	r4, [pc, #60]	@ (80028ac <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002870:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002874:	f7ff ffca 	bl	800280c <BSP_LCD_GetXSize>
 8002878:	900b      	str	r0, [sp, #44]	@ 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800287a:	f7ff ffd3 	bl	8002824 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800287e:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002880:	900c      	str	r0, [sp, #48]	@ 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002882:	a901      	add	r1, sp, #4
 8002884:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8002888:	f002 faa2 	bl	8004dd0 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800288c:	230c      	movs	r3, #12
 800288e:	fb03 4005 	mla	r0, r3, r5, r4
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
 8002896:	f8c0 30f0 	str.w	r3, [r0, #240]	@ 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 800289a:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <BSP_LCD_LayerDefaultInit+0x74>)
 800289c:	f8c0 30f4 	str.w	r3, [r0, #244]	@ 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80028a0:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80028a4:	f8c0 30ec 	str.w	r3, [r0, #236]	@ 0xec
}
 80028a8:	b00e      	add	sp, #56	@ 0x38
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
 80028ac:	20001364 	.word	0x20001364
 80028b0:	20000018 	.word	0x20000018

080028b4 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80028b4:	4b01      	ldr	r3, [pc, #4]	@ (80028bc <BSP_LCD_SelectLayer+0x8>)
 80028b6:	f8c3 00e8 	str.w	r0, [r3, #232]	@ 0xe8
} 
 80028ba:	4770      	bx	lr
 80028bc:	20001364 	.word	0x20001364

080028c0 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80028c0:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <BSP_LCD_SetTextColor+0x14>)
 80028c2:	210c      	movs	r1, #12
 80028c4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80028c8:	fb01 3302 	mla	r3, r1, r2, r3
 80028cc:	f8c3 00ec 	str.w	r0, [r3, #236]	@ 0xec
}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20001364 	.word	0x20001364

080028d8 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 80028d8:	4b04      	ldr	r3, [pc, #16]	@ (80028ec <BSP_LCD_SetBackColor+0x14>)
 80028da:	210c      	movs	r1, #12
 80028dc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80028e0:	fb01 3302 	mla	r3, r1, r2, r3
 80028e4:	f8c3 00f0 	str.w	r0, [r3, #240]	@ 0xf0
}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20001364 	.word	0x20001364

080028f0 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 80028f0:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <BSP_LCD_SetFont+0x14>)
 80028f2:	210c      	movs	r1, #12
 80028f4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80028f8:	fb01 3302 	mla	r3, r1, r2, r3
 80028fc:	f8c3 00f4 	str.w	r0, [r3, #244]	@ 0xf4
}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20001364 	.word	0x20001364

08002908 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002908:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <BSP_LCD_DrawPixel+0x3c>)
{
 800290a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800290e:	460e      	mov	r6, r1
 8002910:	4614      	mov	r4, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002912:	2134      	movs	r1, #52	@ 0x34
 8002914:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
{
 8002918:	4605      	mov	r5, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800291a:	fb01 3302 	mla	r3, r1, r2, r3
 800291e:	f8d3 8088 	ldr.w	r8, [r3, #136]	@ 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002922:	f8d3 709c 	ldr.w	r7, [r3, #156]	@ 0x9c
 8002926:	f7ff ff71 	bl	800280c <BSP_LCD_GetXSize>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800292a:	f1b8 0f02 	cmp.w	r8, #2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800292e:	fb00 5006 	mla	r0, r0, r6, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002932:	d104      	bne.n	800293e <BSP_LCD_DrawPixel+0x36>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002934:	b2a4      	uxth	r4, r4
 8002936:	f827 4010 	strh.w	r4, [r7, r0, lsl #1]
}
 800293a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800293e:	f847 4020 	str.w	r4, [r7, r0, lsl #2]
}
 8002942:	e7fa      	b.n	800293a <BSP_LCD_DrawPixel+0x32>
 8002944:	20001364 	.word	0x20001364

08002948 <BSP_LCD_DisplayChar>:
{
 8002948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800294c:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800294e:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
 8002950:	f04f 0800 	mov.w	r8, #0
{
 8002954:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002958:	4928      	ldr	r1, [pc, #160]	@ (80029fc <BSP_LCD_DisplayChar+0xb4>)
 800295a:	200c      	movs	r0, #12
 800295c:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	@ 0xe8
 8002960:	fb00 110b 	mla	r1, r0, fp, r1
 8002964:	f8d1 10f4 	ldr.w	r1, [r1, #244]	@ 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002968:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 800296c:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8002970:	f109 0607 	add.w	r6, r9, #7
 8002974:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002976:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800297a:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 800297c:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 8002980:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
 8002984:	f109 32ff 	add.w	r2, r9, #4294967295
 8002988:	fa52 f380 	uxtab	r3, r2, r0
 800298c:	9303      	str	r3, [sp, #12]
 800298e:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8002990:	45d0      	cmp	r8, sl
 8002992:	eb03 0208 	add.w	r2, r3, r8
 8002996:	b293      	uxth	r3, r2
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	d302      	bcc.n	80029a2 <BSP_LCD_DisplayChar+0x5a>
}
 800299c:	b005      	add	sp, #20
 800299e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 80029a2:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 80029a4:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 80029a6:	d004      	beq.n	80029b2 <BSP_LCD_DisplayChar+0x6a>
 80029a8:	2e02      	cmp	r6, #2
 80029aa:	d109      	bne.n	80029c0 <BSP_LCD_DisplayChar+0x78>
      line =  (pchar[0]<< 8) | pchar[1];      
 80029ac:	882c      	ldrh	r4, [r5, #0]
 80029ae:	ba64      	rev16	r4, r4
 80029b0:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 80029b2:	2700      	movs	r7, #0
 80029b4:	45b9      	cmp	r9, r7
 80029b6:	d80a      	bhi.n	80029ce <BSP_LCD_DisplayChar+0x86>
  for(i = 0; i < height; i++)
 80029b8:	f108 0801 	add.w	r8, r8, #1
 80029bc:	4435      	add	r5, r6
 80029be:	e7e6      	b.n	800298e <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80029c0:	786a      	ldrb	r2, [r5, #1]
 80029c2:	0424      	lsls	r4, r4, #16
 80029c4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80029c8:	78aa      	ldrb	r2, [r5, #2]
 80029ca:	4314      	orrs	r4, r2
      break;
 80029cc:	e7f1      	b.n	80029b2 <BSP_LCD_DisplayChar+0x6a>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80029ce:	9b01      	ldr	r3, [sp, #4]
      if(line & (1 << (width- j + offset- 1))) 
 80029d0:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80029d2:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 80029d4:	9b03      	ldr	r3, [sp, #12]
 80029d6:	1bd9      	subs	r1, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80029d8:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <BSP_LCD_DisplayChar+0xb4>)
 80029da:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 80029dc:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 80029de:	408a      	lsls	r2, r1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80029e0:	9900      	ldr	r1, [sp, #0]
      if(line & (1 << (width- j + offset- 1))) 
 80029e2:	4222      	tst	r2, r4
 80029e4:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80029e8:	fb02 320b 	mla	r2, r2, fp, r3
 80029ec:	bf14      	ite	ne
 80029ee:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	@ 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80029f2:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	@ 0xf0
 80029f6:	f7ff ff87 	bl	8002908 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80029fa:	e7db      	b.n	80029b4 <BSP_LCD_DisplayChar+0x6c>
 80029fc:	20001364 	.word	0x20001364

08002a00 <BSP_LCD_DisplayStringAt>:
{
 8002a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a04:	4680      	mov	r8, r0
  while (*ptr++) size ++ ;
 8002a06:	4610      	mov	r0, r2
{
 8002a08:	469a      	mov	sl, r3
 8002a0a:	460e      	mov	r6, r1
 8002a0c:	4615      	mov	r5, r2
  while (*ptr++) size ++ ;
 8002a0e:	f7fd fc69 	bl	80002e4 <strlen>
 8002a12:	4681      	mov	r9, r0
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002a14:	f7ff fefa 	bl	800280c <BSP_LCD_GetXSize>
 8002a18:	4b22      	ldr	r3, [pc, #136]	@ (8002aa4 <BSP_LCD_DisplayStringAt+0xa4>)
 8002a1a:	210c      	movs	r1, #12
  switch (Mode)
 8002a1c:	f1ba 0f01 	cmp.w	sl, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002a20:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a24:	fb01 3302 	mla	r3, r1, r2, r3
 8002a28:	f8d3 70f4 	ldr.w	r7, [r3, #244]	@ 0xf4
 8002a2c:	88bb      	ldrh	r3, [r7, #4]
 8002a2e:	fbb0 f4f3 	udiv	r4, r0, r3
  switch (Mode)
 8002a32:	d01e      	beq.n	8002a72 <BSP_LCD_DisplayStringAt+0x72>
 8002a34:	f1ba 0f02 	cmp.w	sl, #2
 8002a38:	d023      	beq.n	8002a82 <BSP_LCD_DisplayStringAt+0x82>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002a3a:	fa0f f388 	sxth.w	r3, r8
    ref_column = 1;
 8002a3e:	2400      	movs	r4, #0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bfd8      	it	le
 8002a44:	f04f 0801 	movle.w	r8, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002a48:	f7ff fee0 	bl	800280c <BSP_LCD_GetXSize>
 8002a4c:	88bb      	ldrh	r3, [r7, #4]
 8002a4e:	b2a2      	uxth	r2, r4
 8002a50:	f815 9004 	ldrb.w	r9, [r5, r4]
 8002a54:	3401      	adds	r4, #1
 8002a56:	fb03 0012 	mls	r0, r3, r2, r0
 8002a5a:	b280      	uxth	r0, r0
 8002a5c:	4298      	cmp	r0, r3
 8002a5e:	bf34      	ite	cc
 8002a60:	2000      	movcc	r0, #0
 8002a62:	2001      	movcs	r0, #1
 8002a64:	f1b9 0f00 	cmp.w	r9, #0
 8002a68:	bf08      	it	eq
 8002a6a:	2000      	moveq	r0, #0
 8002a6c:	b980      	cbnz	r0, 8002a90 <BSP_LCD_DisplayStringAt+0x90>
}
 8002a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002a72:	eba4 0409 	sub.w	r4, r4, r9
 8002a76:	435c      	muls	r4, r3
 8002a78:	eb08 0054 	add.w	r0, r8, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002a7c:	fa1f f880 	uxth.w	r8, r0
      break;
 8002a80:	e7db      	b.n	8002a3a <BSP_LCD_DisplayStringAt+0x3a>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002a82:	eba4 0409 	sub.w	r4, r4, r9
 8002a86:	fb14 f403 	smulbb	r4, r4, r3
 8002a8a:	eba4 0008 	sub.w	r0, r4, r8
 8002a8e:	e7f5      	b.n	8002a7c <BSP_LCD_DisplayStringAt+0x7c>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002a90:	4640      	mov	r0, r8
 8002a92:	464a      	mov	r2, r9
 8002a94:	4631      	mov	r1, r6
 8002a96:	f7ff ff57 	bl	8002948 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002a9a:	88bb      	ldrh	r3, [r7, #4]
 8002a9c:	4443      	add	r3, r8
 8002a9e:	fa1f f883 	uxth.w	r8, r3
    i++;
 8002aa2:	e7d1      	b.n	8002a48 <BSP_LCD_DisplayStringAt+0x48>
 8002aa4:	20001364 	.word	0x20001364

08002aa8 <BSP_LCD_DrawLine>:
{
 8002aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002aac:	1a14      	subs	r4, r2, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002aae:	1a5e      	subs	r6, r3, r1
{
 8002ab0:	b085      	sub	sp, #20
  x = x1;                       /* Start x off at the first pixel */
 8002ab2:	fa0f f980 	sxth.w	r9, r0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002ab6:	2c00      	cmp	r4, #0
  y = y1;                       /* Start y off at the first pixel */
 8002ab8:	fa0f fa81 	sxth.w	sl, r1
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002abc:	bfb8      	it	lt
 8002abe:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002ac0:	2e00      	cmp	r6, #0
 8002ac2:	bfb8      	it	lt
 8002ac4:	4276      	neglt	r6, r6
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002ac6:	b224      	sxth	r4, r4
    xinc1 = 1;
 8002ac8:	4282      	cmp	r2, r0
 8002aca:	bf34      	ite	cc
 8002acc:	f04f 37ff 	movcc.w	r7, #4294967295
 8002ad0:	2701      	movcs	r7, #1
    yinc1 = 1;
 8002ad2:	428b      	cmp	r3, r1
 8002ad4:	bf34      	ite	cc
 8002ad6:	f04f 38ff 	movcc.w	r8, #4294967295
 8002ada:	f04f 0801 	movcs.w	r8, #1
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002ade:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002ae0:	42b4      	cmp	r4, r6
 8002ae2:	db0f      	blt.n	8002b04 <BSP_LCD_DrawLine+0x5c>
    num = deltax / 2;
 8002ae4:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 8002ae8:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002aea:	2700      	movs	r7, #0
    num = deltax / 2;
 8002aec:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002aee:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002af0:	f04f 0b00 	mov.w	fp, #0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002af4:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <BSP_LCD_DrawLine+0xd0>)
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002af6:	fa0f f28b 	sxth.w	r2, fp
 8002afa:	4294      	cmp	r4, r2
 8002afc:	da10      	bge.n	8002b20 <BSP_LCD_DrawLine+0x78>
}
 8002afe:	b005      	add	sp, #20
 8002b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 8002b04:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 8002b08:	4623      	mov	r3, r4
 8002b0a:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002b0e:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 8002b12:	4634      	mov	r4, r6
 8002b14:	f345 054f 	sbfx	r5, r5, #1, #16
 8002b18:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002b1a:	f8cd 8000 	str.w	r8, [sp]
 8002b1e:	e7e7      	b.n	8002af0 <BSP_LCD_DrawLine+0x48>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002b20:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002b24:	f04f 0c0c 	mov.w	ip, #12
 8002b28:	fa1f f089 	uxth.w	r0, r9
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002b2c:	4435      	add	r5, r6
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b32:	fa1f f18a 	uxth.w	r1, sl
 8002b36:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 8002b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b3e:	f7ff fee3 	bl	8002908 <BSP_LCD_DrawPixel>
    if (num >= den)                           /* Check if numerator >= denominator */
 8002b42:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <BSP_LCD_DrawLine+0xd0>)
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002b44:	b2aa      	uxth	r2, r5
 8002b46:	b22d      	sxth	r5, r5
    if (num >= den)                           /* Check if numerator >= denominator */
 8002b48:	42ac      	cmp	r4, r5
 8002b4a:	dc09      	bgt.n	8002b60 <BSP_LCD_DrawLine+0xb8>
      x += xinc1;                             /* Change the x as appropriate */
 8002b4c:	9802      	ldr	r0, [sp, #8]
      num -= den;                             /* Calculate the new numerator value */
 8002b4e:	1b12      	subs	r2, r2, r4
      y += yinc1;                             /* Change the y as appropriate */
 8002b50:	9903      	ldr	r1, [sp, #12]
      x += xinc1;                             /* Change the x as appropriate */
 8002b52:	4438      	add	r0, r7
      num -= den;                             /* Calculate the new numerator value */
 8002b54:	b215      	sxth	r5, r2
      y += yinc1;                             /* Change the y as appropriate */
 8002b56:	4441      	add	r1, r8
      x += xinc1;                             /* Change the x as appropriate */
 8002b58:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;                             /* Change the y as appropriate */
 8002b5c:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                               /* Change the x as appropriate */
 8002b60:	9a00      	ldr	r2, [sp, #0]
 8002b62:	f10b 0b01 	add.w	fp, fp, #1
 8002b66:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
 8002b68:	9a01      	ldr	r2, [sp, #4]
 8002b6a:	4492      	add	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
 8002b6c:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
 8002b70:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002b74:	e7bf      	b.n	8002af6 <BSP_LCD_DrawLine+0x4e>
 8002b76:	bf00      	nop
 8002b78:	20001364 	.word	0x20001364

08002b7c <BSP_LCD_FillRect>:
{
 8002b7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002b80:	4d1b      	ldr	r5, [pc, #108]	@ (8002bf0 <BSP_LCD_FillRect+0x74>)
{
 8002b82:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002b84:	230c      	movs	r3, #12
{
 8002b86:	4604      	mov	r4, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002b88:	f8d5 60e8 	ldr.w	r6, [r5, #232]	@ 0xe8
{
 8002b8c:	4617      	mov	r7, r2
 8002b8e:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002b90:	fb03 5306 	mla	r3, r3, r6, r5
 8002b94:	f8d3 00ec 	ldr.w	r0, [r3, #236]	@ 0xec
 8002b98:	f7ff fe92 	bl	80028c0 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b9c:	2334      	movs	r3, #52	@ 0x34
 8002b9e:	fb03 5306 	mla	r3, r3, r6, r5
 8002ba2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ba6:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 8002baa:	2a02      	cmp	r2, #2
 8002bac:	d118      	bne.n	8002be0 <BSP_LCD_FillRect+0x64>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002bae:	f7ff fe2d 	bl	800280c <BSP_LCD_GetXSize>
 8002bb2:	fb00 4009 	mla	r0, r0, r9, r4
 8002bb6:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002bba:	f7ff fe27 	bl	800280c <BSP_LCD_GetXSize>
 8002bbe:	230c      	movs	r3, #12
 8002bc0:	1bc0      	subs	r0, r0, r7
 8002bc2:	463a      	mov	r2, r7
 8002bc4:	fb03 5106 	mla	r1, r3, r6, r5
 8002bc8:	f8d1 30ec 	ldr.w	r3, [r1, #236]	@ 0xec
 8002bcc:	4651      	mov	r1, sl
 8002bce:	9000      	str	r0, [sp, #0]
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	4643      	mov	r3, r8
 8002bd6:	f7ff fddd 	bl	8002794 <LL_FillBuffer>
}
 8002bda:	b002      	add	sp, #8
 8002bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002be0:	f7ff fe14 	bl	800280c <BSP_LCD_GetXSize>
 8002be4:	fb00 4409 	mla	r4, r0, r9, r4
 8002be8:	eb0a 0a84 	add.w	sl, sl, r4, lsl #2
 8002bec:	e7e5      	b.n	8002bba <BSP_LCD_FillRect+0x3e>
 8002bee:	bf00      	nop
 8002bf0:	20001364 	.word	0x20001364

08002bf4 <BSP_LCD_DisplayOn>:
{
 8002bf4:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002bf8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bfc:	4808      	ldr	r0, [pc, #32]	@ (8002c20 <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c00:	6993      	ldr	r3, [r2, #24]
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f001 fd19 	bl	8004640 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002c0e:	2201      	movs	r2, #1
 8002c10:	2108      	movs	r1, #8
 8002c12:	4804      	ldr	r0, [pc, #16]	@ (8002c24 <BSP_LCD_DisplayOn+0x30>)
}
 8002c14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002c18:	f001 bd12 	b.w	8004640 <HAL_GPIO_WritePin>
 8002c1c:	20001364 	.word	0x20001364
 8002c20:	40022000 	.word	0x40022000
 8002c24:	40022800 	.word	0x40022800

08002c28 <BSP_LCD_MspInit>:
{
 8002c28:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d68 <BSP_LCD_MspInit+0x140>)
{
 8002c2c:	b08f      	sub	sp, #60	@ 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c2e:	2200      	movs	r2, #0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c30:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002c32:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002c34:	484d      	ldr	r0, [pc, #308]	@ (8002d6c <BSP_LCD_MspInit+0x144>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c36:	9200      	str	r2, [sp, #0]
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002c38:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c3c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002c3e:	4e4c      	ldr	r6, [pc, #304]	@ (8002d70 <BSP_LCD_MspInit+0x148>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c40:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8002c44:	6459      	str	r1, [r3, #68]	@ 0x44
 8002c46:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c48:	f001 6180 	and.w	r1, r1, #67108864	@ 0x4000000
 8002c4c:	9100      	str	r1, [sp, #0]
 8002c4e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002c50:	9201      	str	r2, [sp, #4]
 8002c52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c54:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8002c58:	6319      	str	r1, [r3, #48]	@ 0x30
 8002c5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c5c:	f401 0100 	and.w	r1, r1, #8388608	@ 0x800000
 8002c60:	9101      	str	r1, [sp, #4]
 8002c62:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c64:	9202      	str	r2, [sp, #8]
 8002c66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c68:	f041 0110 	orr.w	r1, r1, #16
 8002c6c:	6319      	str	r1, [r3, #48]	@ 0x30
 8002c6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c70:	f001 0110 	and.w	r1, r1, #16
 8002c74:	9102      	str	r1, [sp, #8]
 8002c76:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c78:	9203      	str	r2, [sp, #12]
 8002c7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c7c:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8002c80:	6319      	str	r1, [r3, #48]	@ 0x30
 8002c82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c84:	f001 0140 	and.w	r1, r1, #64	@ 0x40
 8002c88:	9103      	str	r1, [sp, #12]
 8002c8a:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c8c:	9204      	str	r2, [sp, #16]
 8002c8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c90:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002c94:	6319      	str	r1, [r3, #48]	@ 0x30
 8002c96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c98:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8002c9c:	9104      	str	r1, [sp, #16]
 8002c9e:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ca0:	9205      	str	r2, [sp, #20]
 8002ca2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ca4:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8002ca8:	6319      	str	r1, [r3, #48]	@ 0x30
 8002caa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cac:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8002cb0:	9105      	str	r1, [sp, #20]
 8002cb2:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002cb4:	9206      	str	r2, [sp, #24]
 8002cb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cb8:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8002cbc:	6319      	str	r1, [r3, #48]	@ 0x30
 8002cbe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cc0:	f401 6180 	and.w	r1, r1, #1024	@ 0x400
 8002cc4:	9106      	str	r1, [sp, #24]
 8002cc6:	9906      	ldr	r1, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002cc8:	9207      	str	r2, [sp, #28]
 8002cca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ccc:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002cd0:	6319      	str	r1, [r3, #48]	@ 0x30
 8002cd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cd4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8002cd8:	9107      	str	r1, [sp, #28]
 8002cda:	9907      	ldr	r1, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002cdc:	9208      	str	r2, [sp, #32]
 8002cde:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ce0:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8002ce4:	6319      	str	r1, [r3, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002ce6:	a909      	add	r1, sp, #36	@ 0x24
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002cea:	950d      	str	r5, [sp, #52]	@ 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf0:	9308      	str	r3, [sp, #32]
 8002cf2:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002cf4:	2310      	movs	r3, #16
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002cf6:	e9cd 240b 	strd	r2, r4, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002cfa:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002cfe:	f001 fbb1 	bl	8004464 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002d02:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002d04:	a909      	add	r1, sp, #36	@ 0x24
 8002d06:	481b      	ldr	r0, [pc, #108]	@ (8002d74 <BSP_LCD_MspInit+0x14c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002d08:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d0a:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002d0e:	f001 fba9 	bl	8004464 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8002d12:	f44f 4367 	mov.w	r3, #59136	@ 0xe700
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002d16:	a909      	add	r1, sp, #36	@ 0x24
 8002d18:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002d1a:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d1c:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002d20:	f001 fba0 	bl	8004464 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002d24:	f64e 73ff 	movw	r3, #61439	@ 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002d28:	a909      	add	r1, sp, #36	@ 0x24
 8002d2a:	4813      	ldr	r0, [pc, #76]	@ (8002d78 <BSP_LCD_MspInit+0x150>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002d2c:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d2e:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002d32:	f001 fb97 	bl	8004464 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002d36:	23f7      	movs	r3, #247	@ 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002d38:	a909      	add	r1, sp, #36	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002d3a:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002d3c:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d3e:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002d42:	4c0e      	ldr	r4, [pc, #56]	@ (8002d7c <BSP_LCD_MspInit+0x154>)
 8002d44:	4620      	mov	r0, r4
 8002d46:	f001 fb8d 	bl	8004464 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002d4a:	a909      	add	r1, sp, #36	@ 0x24
 8002d4c:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002d4e:	9709      	str	r7, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002d50:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002d52:	f001 fb87 	bl	8004464 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002d56:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002d58:	a909      	add	r1, sp, #36	@ 0x24
 8002d5a:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002d5c:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002d60:	f001 fb80 	bl	8004464 <HAL_GPIO_Init>
}
 8002d64:	b00f      	add	sp, #60	@ 0x3c
 8002d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40022000 	.word	0x40022000
 8002d74:	40021800 	.word	0x40021800
 8002d78:	40022400 	.word	0x40022400
 8002d7c:	40022800 	.word	0x40022800

08002d80 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d80:	4807      	ldr	r0, [pc, #28]	@ (8002da0 <BSP_LCD_ClockConfig+0x20>)
 8002d82:	2308      	movs	r3, #8
 8002d84:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002d88:	23c0      	movs	r3, #192	@ 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002d8a:	f500 7082 	add.w	r0, r0, #260	@ 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002d8e:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002d90:	2305      	movs	r3, #5
 8002d92:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002d94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d98:	62c3      	str	r3, [r0, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002d9a:	f002 bb95 	b.w	80054c8 <HAL_RCCEx_PeriphCLKConfig>
 8002d9e:	bf00      	nop
 8002da0:	20001364 	.word	0x20001364

08002da4 <BSP_LCD_Init>:
{    
 8002da4:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002da6:	2228      	movs	r2, #40	@ 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002da8:	4c24      	ldr	r4, [pc, #144]	@ (8002e3c <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002daa:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002dac:	2135      	movs	r1, #53	@ 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002dae:	f240 101b 	movw	r0, #283	@ 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002db2:	f240 1c1d 	movw	ip, #285	@ 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002db6:	e9c4 2315 	strd	r2, r3, [r4, #84]	@ 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002dba:	230b      	movs	r3, #11
 8002dbc:	e9c4 1317 	strd	r1, r3, [r4, #92]	@ 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002dc0:	f240 2315 	movw	r3, #533	@ 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002dc4:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002dc6:	e9c4 3019 	strd	r3, r0, [r4, #100]	@ 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002dca:	f240 2335 	movw	r3, #565	@ 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002dce:	f104 0040 	add.w	r0, r4, #64	@ 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002dd2:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	@ 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002dd6:	f7ff ffd3 	bl	8002d80 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002dda:	f44f 7ef0 	mov.w	lr, #480	@ 0x1e0
 8002dde:	f44f 7388 	mov.w	r3, #272	@ 0x110
  hLtdcHandler.Instance = LTDC;
 8002de2:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002de4:	e9c4 e328 	strd	lr, r3, [r4, #160]	@ 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8a4 3074 	strh.w	r3, [r4, #116]	@ 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002dee:	f884 3076 	strb.w	r3, [r4, #118]	@ 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002df2:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002df6:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hLtdcHandler.Instance = LTDC;
 8002dfa:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <BSP_LCD_Init+0x9c>)
 8002dfc:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002e00:	f002 f813 	bl	8004e2a <HAL_LTDC_GetState>
 8002e04:	4601      	mov	r1, r0
 8002e06:	b918      	cbnz	r0, 8002e10 <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002e08:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8002e0c:	f7ff ff0c 	bl	8002c28 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8002e10:	480c      	ldr	r0, [pc, #48]	@ (8002e44 <BSP_LCD_Init+0xa0>)
 8002e12:	f001 ff6d 	bl	8004cf0 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002e16:	2201      	movs	r2, #1
 8002e18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e1c:	480a      	ldr	r0, [pc, #40]	@ (8002e48 <BSP_LCD_Init+0xa4>)
 8002e1e:	f001 fc0f 	bl	8004640 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002e22:	2201      	movs	r2, #1
 8002e24:	2108      	movs	r1, #8
 8002e26:	4809      	ldr	r0, [pc, #36]	@ (8002e4c <BSP_LCD_Init+0xa8>)
 8002e28:	f001 fc0a 	bl	8004640 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8002e2c:	f000 fa92 	bl	8003354 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002e30:	4807      	ldr	r0, [pc, #28]	@ (8002e50 <BSP_LCD_Init+0xac>)
 8002e32:	f7ff fd5d 	bl	80028f0 <BSP_LCD_SetFont>
}
 8002e36:	2000      	movs	r0, #0
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20001364 	.word	0x20001364
 8002e40:	40016800 	.word	0x40016800
 8002e44:	200013a4 	.word	0x200013a4
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40022800 	.word	0x40022800
 8002e50:	20000018 	.word	0x20000018

08002e54 <BSP_SD_ITConfig>:
/**
  * @brief  Configures Interrupt mode for SD detection pin.
  * @retval Returns MSD_OK
  */
uint8_t BSP_SD_ITConfig(void)
{  
 8002e54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef gpio_init_structure;

  /* Configure Interrupt mode for SD detection pin */  
  gpio_init_structure.Pin = SD_DETECT_PIN;
 8002e56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  gpio_init_structure.Pull = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002e5a:	2101      	movs	r1, #1
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8002e5c:	480a      	ldr	r0, [pc, #40]	@ (8002e88 <BSP_SD_ITConfig+0x34>)
  gpio_init_structure.Pin = SD_DETECT_PIN;
 8002e5e:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002e60:	2302      	movs	r3, #2
 8002e62:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e66:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <BSP_SD_ITConfig+0x38>)
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8002e68:	a901      	add	r1, sp, #4
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e6a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8002e6c:	f001 fafa 	bl	8004464 <HAL_GPIO_Init>

  /* Enable and set SD detect EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(SD_DETECT_EXTI_IRQn), 0x0F, 0x00);
 8002e70:	2200      	movs	r2, #0
 8002e72:	210f      	movs	r1, #15
 8002e74:	2028      	movs	r0, #40	@ 0x28
 8002e76:	f000 ffcf 	bl	8003e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(SD_DETECT_EXTI_IRQn));
 8002e7a:	2028      	movs	r0, #40	@ 0x28
 8002e7c:	f000 fffe 	bl	8003e7c <HAL_NVIC_EnableIRQ>

  return MSD_OK;
}
 8002e80:	2000      	movs	r0, #0
 8002e82:	b007      	add	sp, #28
 8002e84:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e88:	40020800 	.word	0x40020800
 8002e8c:	10310000 	.word	0x10310000

08002e90 <BSP_SD_IsDetected>:
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t      status = SD_PRESENT;
 8002e90:	2301      	movs	r3, #1
{
 8002e92:	b507      	push	{r0, r1, r2, lr}
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8002e94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e98:	4807      	ldr	r0, [pc, #28]	@ (8002eb8 <BSP_SD_IsDetected+0x28>)
  __IO uint8_t      status = SD_PRESENT;
 8002e9a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8002e9e:	f001 fbc9 	bl	8004634 <HAL_GPIO_ReadPin>
 8002ea2:	2801      	cmp	r0, #1
 8002ea4:	d102      	bne.n	8002eac <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8002eac:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002eb0:	b003      	add	sp, #12
 8002eb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002eb6:	bf00      	nop
 8002eb8:	40020800 	.word	0x40020800

08002ebc <BSP_SD_ReadBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 8002ebc:	b507      	push	{r0, r1, r2, lr}
 8002ebe:	4601      	mov	r1, r0
  if(HAL_SD_ReadBlocks(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) != SD_OK)
 8002ec0:	9805      	ldr	r0, [sp, #20]
 8002ec2:	9001      	str	r0, [sp, #4]
 8002ec4:	9804      	ldr	r0, [sp, #16]
 8002ec6:	9000      	str	r0, [sp, #0]
 8002ec8:	4804      	ldr	r0, [pc, #16]	@ (8002edc <BSP_SD_ReadBlocks+0x20>)
 8002eca:	f003 ff7b 	bl	8006dc4 <HAL_SD_ReadBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8002ece:	3800      	subs	r0, #0
 8002ed0:	bf18      	it	ne
 8002ed2:	2001      	movne	r0, #1
 8002ed4:	b003      	add	sp, #12
 8002ed6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002eda:	bf00      	nop
 8002edc:	200014f0 	.word	0x200014f0

08002ee0 <BSP_SD_WriteBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 8002ee0:	b507      	push	{r0, r1, r2, lr}
 8002ee2:	4601      	mov	r1, r0
  if(HAL_SD_WriteBlocks(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) != SD_OK)
 8002ee4:	9805      	ldr	r0, [sp, #20]
 8002ee6:	9001      	str	r0, [sp, #4]
 8002ee8:	9804      	ldr	r0, [sp, #16]
 8002eea:	9000      	str	r0, [sp, #0]
 8002eec:	4804      	ldr	r0, [pc, #16]	@ (8002f00 <BSP_SD_WriteBlocks+0x20>)
 8002eee:	f004 f81f 	bl	8006f30 <HAL_SD_WriteBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8002ef2:	3800      	subs	r0, #0
 8002ef4:	bf18      	it	ne
 8002ef6:	2001      	movne	r0, #1
 8002ef8:	b003      	add	sp, #12
 8002efa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002efe:	bf00      	nop
 8002f00:	200014f0 	.word	0x200014f0

08002f04 <BSP_SD_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8002f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f08:	4b58      	ldr	r3, [pc, #352]	@ (800306c <BSP_SD_MspInit+0x168>)
{
 8002f0a:	b08b      	sub	sp, #44	@ 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f0c:	2500      	movs	r5, #0
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8002f0e:	f04f 0803 	mov.w	r8, #3
{
 8002f12:	4606      	mov	r6, r0
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8002f14:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f18:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002f1a:	a905      	add	r1, sp, #20
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8002f1e:	f44f 4b80 	mov.w	fp, #16384	@ 0x4000
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002f22:	4853      	ldr	r0, [pc, #332]	@ (8003070 <BSP_SD_MspInit+0x16c>)
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8002f24:	f04f 0a20 	mov.w	sl, #32
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8002f2c:	4c51      	ldr	r4, [pc, #324]	@ (8003074 <BSP_SD_MspInit+0x170>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f2e:	645a      	str	r2, [r3, #68]	@ 0x44
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8002f30:	4627      	mov	r7, r4
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f34:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002f38:	9201      	str	r2, [sp, #4]
 8002f3a:	9a01      	ldr	r2, [sp, #4]
  __DMAx_TxRx_CLK_ENABLE();
 8002f3c:	9502      	str	r5, [sp, #8]
 8002f3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f40:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002f44:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f48:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8002f4c:	9202      	str	r2, [sp, #8]
 8002f4e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f50:	9503      	str	r5, [sp, #12]
 8002f52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f54:	f042 0204 	orr.w	r2, r2, #4
 8002f58:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f5c:	f002 0204 	and.w	r2, r2, #4
 8002f60:	9203      	str	r2, [sp, #12]
 8002f62:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f64:	9504      	str	r5, [sp, #16]
 8002f66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f68:	f042 0208 	orr.w	r2, r2, #8
 8002f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002f6e:	2202      	movs	r2, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	9304      	str	r3, [sp, #16]
 8002f78:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8002f80:	230c      	movs	r3, #12
 8002f82:	e9cd 8308 	strd	r8, r3, [sp, #32]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8002f86:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002f8a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002f8c:	f001 fa6a 	bl	8004464 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002f90:	a905      	add	r1, sp, #20
 8002f92:	4839      	ldr	r0, [pc, #228]	@ (8003078 <BSP_SD_MspInit+0x174>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 8002f94:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002f98:	f001 fa64 	bl	8004464 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8002f9c:	462a      	mov	r2, r5
 8002f9e:	2105      	movs	r1, #5
 8002fa0:	2031      	movs	r0, #49	@ 0x31
 8002fa2:	f000 ff39 	bl	8003e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002fa6:	2031      	movs	r0, #49	@ 0x31
 8002fa8:	f000 ff68 	bl	8003e7c <HAL_NVIC_EnableIRQ>
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8002fb4:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8002fb8:	4830      	ldr	r0, [pc, #192]	@ (800307c <BSP_SD_MspInit+0x178>)
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002fba:	66e5      	str	r5, [r4, #108]	@ 0x6c
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8002fbc:	f847 0f60 	str.w	r0, [r7, #96]!
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8002fc0:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8002fc2:	65b7      	str	r7, [r6, #88]	@ 0x58
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002fc4:	f8c4 8088 	str.w	r8, [r4, #136]	@ 0x88
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8002fc8:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fcc:	e9c4 231c 	strd	r2, r3, [r4, #112]	@ 0x70
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002fd0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002fd4:	e9c4 1519 	strd	r1, r5, [r4, #100]	@ 0x64
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8002fd8:	e9c4 3920 	strd	r3, r9, [r4, #128]	@ 0x80
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002fdc:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 8002fe0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8002fe4:	e9c4 ba1e 	strd	fp, sl, [r4, #120]	@ 0x78
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002fe8:	e9c4 1323 	strd	r1, r3, [r4, #140]	@ 0x8c
  HAL_DMA_DeInit(&dma_rx_handle);
 8002fec:	f000 ffc0 	bl	8003f70 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	f000 ff79 	bl	8003ee8 <HAL_DMA_Init>
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ff6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ffa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002ffe:	f44f 0700 	mov.w	r7, #8388608	@ 0x800000
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003002:	2140      	movs	r1, #64	@ 0x40
 8003004:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003008:	f8c4 50c4 	str.w	r5, [r4, #196]	@ 0xc4
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800300c:	f8c4 80e0 	str.w	r8, [r4, #224]	@ 0xe0
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8003010:	f8c4 60f0 	str.w	r6, [r4, #240]	@ 0xf0
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003014:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8003018:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800301c:	e9c4 3936 	strd	r3, r9, [r4, #216]	@ 0xd8
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003020:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003024:	e9c4 7339 	strd	r7, r3, [r4, #228]	@ 0xe4
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8003028:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <BSP_SD_MspInit+0x17c>)
 800302a:	4627      	mov	r7, r4
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800302c:	e9c4 012f 	strd	r0, r1, [r4, #188]	@ 0xbc
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8003030:	f847 3fb8 	str.w	r3, [r7, #184]!
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8003034:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8003036:	65f7      	str	r7, [r6, #92]	@ 0x5c
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8003038:	e9c4 ba34 	strd	fp, sl, [r4, #208]	@ 0xd0
  HAL_DMA_DeInit(&dma_tx_handle);
 800303c:	f000 ff98 	bl	8003f70 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8003040:	4638      	mov	r0, r7
 8003042:	f000 ff51 	bl	8003ee8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 6, 0);
 8003046:	462a      	mov	r2, r5
 8003048:	2106      	movs	r1, #6
 800304a:	203b      	movs	r0, #59	@ 0x3b
 800304c:	f000 fee4 	bl	8003e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8003050:	203b      	movs	r0, #59	@ 0x3b
 8003052:	f000 ff13 	bl	8003e7c <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 6, 0);
 8003056:	462a      	mov	r2, r5
 8003058:	2106      	movs	r1, #6
 800305a:	2045      	movs	r0, #69	@ 0x45
 800305c:	f000 fedc 	bl	8003e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8003060:	2045      	movs	r0, #69	@ 0x45
 8003062:	f000 ff0b 	bl	8003e7c <HAL_NVIC_EnableIRQ>
}
 8003066:	b00b      	add	sp, #44	@ 0x2c
 8003068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	40020800 	.word	0x40020800
 8003074:	200014f0 	.word	0x200014f0
 8003078:	40020c00 	.word	0x40020c00
 800307c:	40026458 	.word	0x40026458
 8003080:	400264a0 	.word	0x400264a0

08003084 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8003084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8003086:	2100      	movs	r1, #0
 8003088:	4b0c      	ldr	r3, [pc, #48]	@ (80030bc <BSP_SD_Detect_MspInit+0x38>)
  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800308a:	480d      	ldr	r0, [pc, #52]	@ (80030c0 <BSP_SD_Detect_MspInit+0x3c>)
  SD_DETECT_GPIO_CLK_ENABLE();
 800308c:	9100      	str	r1, [sp, #0]
 800308e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003090:	f042 0204 	orr.w	r2, r2, #4
 8003094:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003096:	2201      	movs	r2, #1
  SD_DETECT_GPIO_CLK_ENABLE();
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 80030a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80030a6:	e9cd 3101 	strd	r3, r1, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80030aa:	2303      	movs	r3, #3
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80030ac:	a901      	add	r1, sp, #4
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80030ae:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80030b2:	f001 f9d7 	bl	8004464 <HAL_GPIO_Init>
}
 80030b6:	b007      	add	sp, #28
 80030b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020800 	.word	0x40020800

080030c4 <BSP_SD_Init>:
{ 
 80030c4:	b570      	push	{r4, r5, r6, lr}
  uSdHandle.Instance = SDMMC1;
 80030c6:	4c14      	ldr	r4, [pc, #80]	@ (8003118 <BSP_SD_Init+0x54>)
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80030c8:	2600      	movs	r6, #0
 80030ca:	4b14      	ldr	r3, [pc, #80]	@ (800311c <BSP_SD_Init+0x58>)
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80030cc:	4631      	mov	r1, r6
 80030ce:	4620      	mov	r0, r4
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80030d0:	61a6      	str	r6, [r4, #24]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80030d2:	e9c4 3600 	strd	r3, r6, [r4]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80030d6:	e9c4 6602 	strd	r6, r6, [r4, #8]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80030da:	e9c4 6604 	strd	r6, r6, [r4, #16]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80030de:	f7ff ffd1 	bl	8003084 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 80030e2:	f7ff fed5 	bl	8002e90 <BSP_SD_IsDetected>
 80030e6:	2801      	cmp	r0, #1
 80030e8:	4605      	mov	r5, r0
 80030ea:	d113      	bne.n	8003114 <BSP_SD_Init+0x50>
  BSP_SD_MspInit(&uSdHandle, NULL);
 80030ec:	4631      	mov	r1, r6
 80030ee:	4620      	mov	r0, r4
 80030f0:	f7ff ff08 	bl	8002f04 <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 80030f4:	f504 7188 	add.w	r1, r4, #272	@ 0x110
 80030f8:	4620      	mov	r0, r4
 80030fa:	f003 fbe9 	bl	80068d0 <HAL_SD_Init>
 80030fe:	b938      	cbnz	r0, 8003110 <BSP_SD_Init+0x4c>
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDMMC_BUS_WIDE_4B) != SD_OK)
 8003100:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003104:	4620      	mov	r0, r4
 8003106:	f003 fdbd 	bl	8006c84 <HAL_SD_WideBusOperation_Config>
 800310a:	1b85      	subs	r5, r0, r6
 800310c:	bf18      	it	ne
 800310e:	2501      	movne	r5, #1
}
 8003110:	4628      	mov	r0, r5
 8003112:	bd70      	pop	{r4, r5, r6, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 8003114:	2502      	movs	r5, #2
 8003116:	e7fb      	b.n	8003110 <BSP_SD_Init+0x4c>
 8003118:	200014f0 	.word	0x200014f0
 800311c:	40012c00 	.word	0x40012c00

08003120 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 8003120:	4801      	ldr	r0, [pc, #4]	@ (8003128 <BSP_SD_GetStatus+0x8>)
 8003122:	f003 bfe5 	b.w	80070f0 <HAL_SD_GetStatus>
 8003126:	bf00      	nop
 8003128:	200014f0 	.word	0x200014f0

0800312c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
 800312c:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 800312e:	4801      	ldr	r0, [pc, #4]	@ (8003134 <BSP_SD_GetCardInfo+0x8>)
 8003130:	f003 ba91 	b.w	8006656 <HAL_SD_Get_CardInfo>
 8003134:	200014f0 	.word	0x200014f0

08003138 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800313c:	4c21      	ldr	r4, [pc, #132]	@ (80031c4 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800313e:	2710      	movs	r7, #16
 8003140:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8003142:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003146:	19e5      	adds	r5, r4, r7
 8003148:	4621      	mov	r1, r4
{
 800314a:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800314c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003150:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8003152:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003156:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800315a:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800315e:	f004 f80d 	bl	800717c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003162:	4630      	mov	r0, r6
 8003164:	f00a fa7a 	bl	800d65c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003168:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800316a:	4621      	mov	r1, r4
 800316c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003170:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003172:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8003176:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800317a:	f003 ffff 	bl	800717c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800317e:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003180:	4621      	mov	r1, r4
 8003182:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003186:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003188:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 800318c:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 800318e:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003192:	f003 fff3 	bl	800717c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003196:	f44f 7308 	mov.w	r3, #544	@ 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800319a:	4621      	mov	r1, r4
 800319c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80031a0:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80031a2:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80031a4:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 80031a6:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80031a8:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 80031ac:	9b01      	ldr	r3, [sp, #4]
 80031ae:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80031b0:	f003 ffe4 	bl	800717c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80031b4:	4649      	mov	r1, r9
 80031b6:	4628      	mov	r0, r5
}
 80031b8:	b003      	add	sp, #12
 80031ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80031be:	f003 bff5 	b.w	80071ac <HAL_SDRAM_ProgramRefreshRate>
 80031c2:	bf00      	nop
 80031c4:	20001708 	.word	0x20001708

080031c8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80031c8:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80031ca:	4b59      	ldr	r3, [pc, #356]	@ (8003330 <BSP_SDRAM_MspInit+0x168>)
{  
 80031cc:	b08e      	sub	sp, #56	@ 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 80031ce:	2400      	movs	r4, #0
{  
 80031d0:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80031d2:	a909      	add	r1, sp, #36	@ 0x24
 80031d4:	4857      	ldr	r0, [pc, #348]	@ (8003334 <BSP_SDRAM_MspInit+0x16c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80031d6:	9401      	str	r4, [sp, #4]
 80031d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	639a      	str	r2, [r3, #56]	@ 0x38
 80031e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031e2:	f002 0201 	and.w	r2, r2, #1
 80031e6:	9201      	str	r2, [sp, #4]
 80031e8:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 80031ea:	9402      	str	r4, [sp, #8]
 80031ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031ee:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80031f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031f6:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 80031fa:	9202      	str	r2, [sp, #8]
 80031fc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fe:	9403      	str	r4, [sp, #12]
 8003200:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003202:	f042 0204 	orr.w	r2, r2, #4
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
 8003208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800320a:	f002 0204 	and.w	r2, r2, #4
 800320e:	9203      	str	r2, [sp, #12]
 8003210:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003212:	9404      	str	r4, [sp, #16]
 8003214:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003216:	f042 0208 	orr.w	r2, r2, #8
 800321a:	631a      	str	r2, [r3, #48]	@ 0x30
 800321c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800321e:	f002 0208 	and.w	r2, r2, #8
 8003222:	9204      	str	r2, [sp, #16]
 8003224:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003226:	9405      	str	r4, [sp, #20]
 8003228:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800322a:	f042 0210 	orr.w	r2, r2, #16
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003230:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003232:	f002 0210 	and.w	r2, r2, #16
 8003236:	9205      	str	r2, [sp, #20]
 8003238:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800323a:	9406      	str	r4, [sp, #24]
 800323c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800323e:	f042 0220 	orr.w	r2, r2, #32
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
 8003244:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003246:	f002 0220 	and.w	r2, r2, #32
 800324a:	9206      	str	r2, [sp, #24]
 800324c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800324e:	9407      	str	r4, [sp, #28]
 8003250:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003252:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003256:	631a      	str	r2, [r3, #48]	@ 0x30
 8003258:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800325a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800325e:	9207      	str	r2, [sp, #28]
 8003260:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003262:	9408      	str	r4, [sp, #32]
 8003264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003266:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800326c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003274:	9308      	str	r3, [sp, #32]
 8003276:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003278:	2302      	movs	r3, #2
 800327a:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800327e:	930c      	str	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003280:	230c      	movs	r3, #12
 8003282:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003284:	2308      	movs	r3, #8
 8003286:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003288:	f001 f8ec 	bl	8004464 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 800328c:	f24c 730b 	movw	r3, #50955	@ 0xc70b
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003290:	a909      	add	r1, sp, #36	@ 0x24
 8003292:	4829      	ldr	r0, [pc, #164]	@ (8003338 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003294:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003296:	f001 f8e5 	bl	8004464 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800329a:	f64f 7383 	movw	r3, #65411	@ 0xff83
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800329e:	a909      	add	r1, sp, #36	@ 0x24
 80032a0:	4826      	ldr	r0, [pc, #152]	@ (800333c <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80032a2:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80032a4:	f001 f8de 	bl	8004464 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80032a8:	f64f 033f 	movw	r3, #63551	@ 0xf83f
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80032ac:	a909      	add	r1, sp, #36	@ 0x24
 80032ae:	4824      	ldr	r0, [pc, #144]	@ (8003340 <BSP_SDRAM_MspInit+0x178>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80032b0:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80032b2:	f001 f8d7 	bl	8004464 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80032b6:	f248 1333 	movw	r3, #33075	@ 0x8133
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80032ba:	a909      	add	r1, sp, #36	@ 0x24
 80032bc:	4821      	ldr	r0, [pc, #132]	@ (8003344 <BSP_SDRAM_MspInit+0x17c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80032be:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80032c0:	f001 f8d0 	bl	8004464 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80032c4:	2328      	movs	r3, #40	@ 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80032c6:	a909      	add	r1, sp, #36	@ 0x24
 80032c8:	481f      	ldr	r0, [pc, #124]	@ (8003348 <BSP_SDRAM_MspInit+0x180>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80032ca:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80032cc:	f001 f8ca 	bl	8004464 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80032d0:	4b1e      	ldr	r3, [pc, #120]	@ (800334c <BSP_SDRAM_MspInit+0x184>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80032d2:	2180      	movs	r1, #128	@ 0x80
 80032d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032d8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80032dc:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80032de:	675c      	str	r4, [r3, #116]	@ 0x74
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80032e0:	649c      	str	r4, [r3, #72]	@ 0x48
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80032e2:	e9c3 1213 	strd	r1, r2, [r3, #76]	@ 0x4c
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032ea:	e9c3 0215 	strd	r0, r2, [r3, #84]	@ 0x54
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80032ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  dma_handle.Init.Mode                = DMA_NORMAL;
 80032f2:	e9c3 2417 	strd	r2, r4, [r3, #92]	@ 0x5c
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80032f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80032fa:	e9c3 2419 	strd	r2, r4, [r3, #100]	@ 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80032fe:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003300:	e9c3 241b 	strd	r2, r4, [r3, #108]	@ 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003304:	4a12      	ldr	r2, [pc, #72]	@ (8003350 <BSP_SDRAM_MspInit+0x188>)
 8003306:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800330a:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800330c:	6335      	str	r5, [r6, #48]	@ 0x30
 800330e:	67de      	str	r6, [r3, #124]	@ 0x7c
  HAL_DMA_DeInit(&dma_handle);
 8003310:	f000 fe2e 	bl	8003f70 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003314:	4628      	mov	r0, r5
 8003316:	f000 fde7 	bl	8003ee8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 800331a:	4622      	mov	r2, r4
 800331c:	2105      	movs	r1, #5
 800331e:	2038      	movs	r0, #56	@ 0x38
 8003320:	f000 fd7a 	bl	8003e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003324:	2038      	movs	r0, #56	@ 0x38
 8003326:	f000 fda9 	bl	8003e7c <HAL_NVIC_EnableIRQ>
}
 800332a:	b00e      	add	sp, #56	@ 0x38
 800332c:	bd70      	pop	{r4, r5, r6, pc}
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800
 8003334:	40020800 	.word	0x40020800
 8003338:	40020c00 	.word	0x40020c00
 800333c:	40021000 	.word	0x40021000
 8003340:	40021400 	.word	0x40021400
 8003344:	40021800 	.word	0x40021800
 8003348:	40021c00 	.word	0x40021c00
 800334c:	20001708 	.word	0x20001708
 8003350:	40026410 	.word	0x40026410

08003354 <BSP_SDRAM_Init>:
{ 
 8003354:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003356:	4c1b      	ldr	r4, [pc, #108]	@ (80033c4 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 8003358:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800335a:	4b1b      	ldr	r3, [pc, #108]	@ (80033c8 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 800335c:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800335e:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003360:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003364:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 8003366:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003368:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 800336a:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
  Timing.ExitSelfRefreshDelay = 7;
 800336e:	e9c4 3127 	strd	r3, r1, [r4, #156]	@ 0x9c
  Timing.RPDelay              = 2;
 8003372:	e9c4 332b 	strd	r3, r3, [r4, #172]	@ 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003376:	2340      	movs	r3, #64	@ 0x40
  Timing.RowCycleDelay        = 7;
 8003378:	e9c4 2129 	strd	r2, r1, [r4, #164]	@ 0xa4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800337c:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003380:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003382:	f44f 7380 	mov.w	r3, #256	@ 0x100
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003386:	e9c4 310a 	strd	r3, r1, [r4, #40]	@ 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800338a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800338e:	63a1      	str	r1, [r4, #56]	@ 0x38
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003390:	e9c4 530c 	strd	r5, r3, [r4, #48]	@ 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003394:	f104 0510 	add.w	r5, r4, #16
 8003398:	4628      	mov	r0, r5
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800339a:	e9c4 1105 	strd	r1, r1, [r4, #20]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800339e:	f7ff ff13 	bl	80031c8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80033a2:	f104 019c 	add.w	r1, r4, #156	@ 0x9c
 80033a6:	4628      	mov	r0, r5
 80033a8:	4c08      	ldr	r4, [pc, #32]	@ (80033cc <BSP_SDRAM_Init+0x78>)
 80033aa:	f003 fec7 	bl	800713c <HAL_SDRAM_Init>
 80033ae:	3800      	subs	r0, #0
 80033b0:	bf18      	it	ne
 80033b2:	2001      	movne	r0, #1
 80033b4:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80033b6:	f240 6003 	movw	r0, #1539	@ 0x603
 80033ba:	f7ff febd 	bl	8003138 <BSP_SDRAM_Initialization_sequence>
}
 80033be:	7820      	ldrb	r0, [r4, #0]
 80033c0:	bd38      	pop	{r3, r4, r5, pc}
 80033c2:	bf00      	nop
 80033c4:	20001708 	.word	0x20001708
 80033c8:	a0000140 	.word	0xa0000140
 80033cc:	20000040 	.word	0x20000040

080033d0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80033d0:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 80033d2:	4c0b      	ldr	r4, [pc, #44]	@ (8003400 <BSP_TS_Init+0x30>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80033d4:	4d0b      	ldr	r5, [pc, #44]	@ (8003404 <BSP_TS_Init+0x34>)
  tsXBoundary = ts_SizeX;
 80033d6:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80033d8:	2070      	movs	r0, #112	@ 0x70
 80033da:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
 80033dc:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80033de:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80033e0:	686b      	ldr	r3, [r5, #4]
 80033e2:	2070      	movs	r0, #112	@ 0x70
 80033e4:	4798      	blx	r3
 80033e6:	2851      	cmp	r0, #81	@ 0x51
 80033e8:	d108      	bne.n	80033fc <BSP_TS_Init+0x2c>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
    tsOrientation = TS_SWAP_XY;
 80033ea:	2308      	movs	r3, #8
    I2cAddress = TS_I2C_ADDRESS;
 80033ec:	2070      	movs	r0, #112	@ 0x70
    tsDriver = &ft5336_ts_drv;
 80033ee:	6065      	str	r5, [r4, #4]
    tsOrientation = TS_SWAP_XY;
 80033f0:	7263      	strb	r3, [r4, #9]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80033f2:	68eb      	ldr	r3, [r5, #12]
    I2cAddress = TS_I2C_ADDRESS;
 80033f4:	7220      	strb	r0, [r4, #8]
    tsDriver->Start(I2cAddress);
 80033f6:	4798      	blx	r3
  uint8_t status = TS_OK;
 80033f8:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 80033fa:	bd38      	pop	{r3, r4, r5, pc}
    status = TS_DEVICE_NOT_FOUND;
 80033fc:	2003      	movs	r0, #3
 80033fe:	e7fc      	b.n	80033fa <BSP_TS_Init+0x2a>
 8003400:	20001818 	.word	0x20001818
 8003404:	20000044 	.word	0x20000044

08003408 <BSP_TS_Get_GestureId>:
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
  uint32_t gestureId = 0;
 8003408:	2300      	movs	r3, #0
{
 800340a:	b513      	push	{r0, r1, r4, lr}
  uint32_t gestureId = 0;
 800340c:	9301      	str	r3, [sp, #4]
{
 800340e:	4604      	mov	r4, r0
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003410:	4b12      	ldr	r3, [pc, #72]	@ (800345c <BSP_TS_Get_GestureId+0x54>)
 8003412:	a901      	add	r1, sp, #4
 8003414:	7a18      	ldrb	r0, [r3, #8]
 8003416:	f000 f995 	bl	8003744 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800341a:	9b01      	ldr	r3, [sp, #4]
 800341c:	2b18      	cmp	r3, #24
 800341e:	d012      	beq.n	8003446 <BSP_TS_Get_GestureId+0x3e>
 8003420:	d806      	bhi.n	8003430 <BSP_TS_Get_GestureId+0x28>
 8003422:	2b10      	cmp	r3, #16
 8003424:	d011      	beq.n	800344a <BSP_TS_Get_GestureId+0x42>
 8003426:	2b14      	cmp	r3, #20
 8003428:	d011      	beq.n	800344e <BSP_TS_Get_GestureId+0x46>
 800342a:	b143      	cbz	r3, 800343e <BSP_TS_Get_GestureId+0x36>
 800342c:	2001      	movs	r0, #1
 800342e:	e008      	b.n	8003442 <BSP_TS_Get_GestureId+0x3a>
 8003430:	2b40      	cmp	r3, #64	@ 0x40
 8003432:	d00e      	beq.n	8003452 <BSP_TS_Get_GestureId+0x4a>
 8003434:	2b49      	cmp	r3, #73	@ 0x49
 8003436:	d00e      	beq.n	8003456 <BSP_TS_Get_GestureId+0x4e>
 8003438:	2b1c      	cmp	r3, #28
 800343a:	d1f7      	bne.n	800342c <BSP_TS_Get_GestureId+0x24>
 800343c:	2304      	movs	r3, #4
  uint8_t  ts_status = TS_OK;
 800343e:	2000      	movs	r0, #0
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
      break;
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003440:	62a3      	str	r3, [r4, #40]	@ 0x28
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 8003442:	b002      	add	sp, #8
 8003444:	bd10      	pop	{r4, pc}
  switch(gestureId)
 8003446:	2303      	movs	r3, #3
 8003448:	e7f9      	b.n	800343e <BSP_TS_Get_GestureId+0x36>
 800344a:	2301      	movs	r3, #1
 800344c:	e7f7      	b.n	800343e <BSP_TS_Get_GestureId+0x36>
 800344e:	2302      	movs	r3, #2
 8003450:	e7f5      	b.n	800343e <BSP_TS_Get_GestureId+0x36>
 8003452:	2305      	movs	r3, #5
 8003454:	e7f3      	b.n	800343e <BSP_TS_Get_GestureId+0x36>
 8003456:	2306      	movs	r3, #6
 8003458:	e7f1      	b.n	800343e <BSP_TS_Get_GestureId+0x36>
 800345a:	bf00      	nop
 800345c:	20001818 	.word	0x20001818

08003460 <BSP_TS_GetState>:
{
 8003460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003464:	4c55      	ldr	r4, [pc, #340]	@ (80035bc <BSP_TS_GetState+0x15c>)
{
 8003466:	b097      	sub	sp, #92	@ 0x5c
  uint32_t weight = 0;
 8003468:	2300      	movs	r3, #0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800346a:	6862      	ldr	r2, [r4, #4]
{
 800346c:	9004      	str	r0, [sp, #16]
  uint32_t event = 0;
 800346e:	9309      	str	r3, [sp, #36]	@ 0x24
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003470:	6912      	ldr	r2, [r2, #16]
 8003472:	7a20      	ldrb	r0, [r4, #8]
  uint32_t area = 0;
 8003474:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003478:	4790      	blx	r2
 800347a:	9b04      	ldr	r3, [sp, #16]
 800347c:	7018      	strb	r0, [r3, #0]
  if(TS_State->touchDetected)
 800347e:	b1b8      	cbz	r0, 80034b0 <BSP_TS_GetState+0x50>
 8003480:	f103 0615 	add.w	r6, r3, #21
 8003484:	f103 0b02 	add.w	fp, r3, #2
 8003488:	ab0d      	add	r3, sp, #52	@ 0x34
 800348a:	f104 0a0c 	add.w	sl, r4, #12
 800348e:	f104 0920 	add.w	r9, r4, #32
 8003492:	ad0a      	add	r5, sp, #40	@ 0x28
 8003494:	9303      	str	r3, [sp, #12]
 8003496:	af10      	add	r7, sp, #64	@ 0x40
    for(index=0; index < TS_State->touchDetected; index++)
 8003498:	2300      	movs	r3, #0
 800349a:	f10d 084c 	add.w	r8, sp, #76	@ 0x4c
 800349e:	9305      	str	r3, [sp, #20]
 80034a0:	9b04      	ldr	r3, [sp, #16]
 80034a2:	9a05      	ldr	r2, [sp, #20]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d805      	bhi.n	80034b6 <BSP_TS_GetState+0x56>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80034aa:	9804      	ldr	r0, [sp, #16]
 80034ac:	f7ff ffac 	bl	8003408 <BSP_TS_Get_GestureId>
}
 80034b0:	b017      	add	sp, #92	@ 0x5c
 80034b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80034b6:	6863      	ldr	r3, [r4, #4]
 80034b8:	4642      	mov	r2, r8
 80034ba:	4639      	mov	r1, r7
 80034bc:	7a20      	ldrb	r0, [r4, #8]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 80034c2:	7a63      	ldrb	r3, [r4, #9]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d13e      	bne.n	8003546 <BSP_TS_GetState+0xe6>
        x[index] = brute_x[index];
 80034c8:	883b      	ldrh	r3, [r7, #0]
        y[index] = brute_y[index];
 80034ca:	9a03      	ldr	r2, [sp, #12]
        x[index] = brute_x[index];
 80034cc:	802b      	strh	r3, [r5, #0]
        y[index] = brute_y[index];
 80034ce:	f8b8 3000 	ldrh.w	r3, [r8]
 80034d2:	8013      	strh	r3, [r2, #0]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80034d4:	f835 cb02 	ldrh.w	ip, [r5], #2
 80034d8:	f8da 2000 	ldr.w	r2, [sl]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80034dc:	9903      	ldr	r1, [sp, #12]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80034de:	b293      	uxth	r3, r2
 80034e0:	4594      	cmp	ip, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80034e2:	f8d9 0000 	ldr.w	r0, [r9]
 80034e6:	f831 2b02 	ldrh.w	r2, [r1], #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80034ea:	bf8c      	ite	hi
 80034ec:	ebac 0303 	subhi.w	r3, ip, r3
 80034f0:	eba3 030c 	subls.w	r3, r3, ip
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80034f4:	9103      	str	r1, [sp, #12]
 80034f6:	4282      	cmp	r2, r0
 80034f8:	b281      	uxth	r1, r0
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80034fa:	7a20      	ldrb	r0, [r4, #8]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80034fc:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80034fe:	bf8c      	ite	hi
 8003500:	1a51      	subhi	r1, r2, r1
 8003502:	1a89      	subls	r1, r1, r2
 8003504:	b289      	uxth	r1, r1
      if ((x_diff + y_diff) > 5)
 8003506:	440b      	add	r3, r1
 8003508:	2b05      	cmp	r3, #5
        _x[index] = x[index];
 800350a:	bfc4      	itt	gt
 800350c:	f8ca c000 	strgt.w	ip, [sl]
        _y[index] = y[index];
 8003510:	f8c9 2000 	strgt.w	r2, [r9]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003514:	2870      	cmp	r0, #112	@ 0x70
 8003516:	d12d      	bne.n	8003574 <BSP_TS_GetState+0x114>
        TS_State->touchX[index] = x[index];
 8003518:	f8ab c000 	strh.w	ip, [fp]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800351c:	ab09      	add	r3, sp, #36	@ 0x24
        TS_State->touchY[index] = y[index];
 800351e:	f8ab 200a 	strh.w	r2, [fp, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003522:	9905      	ldr	r1, [sp, #20]
 8003524:	aa07      	add	r2, sp, #28
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	ab08      	add	r3, sp, #32
 800352a:	f000 f91b 	bl	8003764 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 800352e:	9b07      	ldr	r3, [sp, #28]
 8003530:	f806 3f01 	strb.w	r3, [r6, #1]!
      TS_State->touchArea[index]   = area;
 8003534:	9b08      	ldr	r3, [sp, #32]
 8003536:	72b3      	strb	r3, [r6, #10]
      switch(event)
 8003538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800353a:	2b03      	cmp	r3, #3
 800353c:	d82a      	bhi.n	8003594 <BSP_TS_GetState+0x134>
 800353e:	e8df f003 	tbb	[pc, r3]
 8003542:	3627      	.short	0x3627
 8003544:	3a38      	.short	0x3a38
      if(tsOrientation & TS_SWAP_X)
 8003546:	0799      	lsls	r1, r3, #30
        x[index] = 4096 - brute_x[index];
 8003548:	bf42      	ittt	mi
 800354a:	883a      	ldrhmi	r2, [r7, #0]
 800354c:	f5c2 5280 	rsbmi	r2, r2, #4096	@ 0x1000
 8003550:	802a      	strhmi	r2, [r5, #0]
      if(tsOrientation & TS_SWAP_Y)
 8003552:	075a      	lsls	r2, r3, #29
        y[index] = 4096 - brute_y[index];
 8003554:	bf41      	itttt	mi
 8003556:	f8b8 2000 	ldrhmi.w	r2, [r8]
 800355a:	9903      	ldrmi	r1, [sp, #12]
 800355c:	f5c2 5280 	rsbmi	r2, r2, #4096	@ 0x1000
 8003560:	800a      	strhmi	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_XY)
 8003562:	071b      	lsls	r3, r3, #28
 8003564:	d5b6      	bpl.n	80034d4 <BSP_TS_GetState+0x74>
        y[index] = brute_x[index];
 8003566:	883b      	ldrh	r3, [r7, #0]
 8003568:	9a03      	ldr	r2, [sp, #12]
 800356a:	8013      	strh	r3, [r2, #0]
        x[index] = brute_y[index];
 800356c:	f8b8 3000 	ldrh.w	r3, [r8]
 8003570:	802b      	strh	r3, [r5, #0]
 8003572:	e7af      	b.n	80034d4 <BSP_TS_GetState+0x74>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003574:	f8da 2000 	ldr.w	r2, [sl]
 8003578:	8823      	ldrh	r3, [r4, #0]
 800357a:	4353      	muls	r3, r2
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800357c:	8862      	ldrh	r2, [r4, #2]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800357e:	0b1b      	lsrs	r3, r3, #12
 8003580:	f8ab 3000 	strh.w	r3, [fp]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003584:	f8d9 3000 	ldr.w	r3, [r9]
 8003588:	435a      	muls	r2, r3
 800358a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800358e:	e7c5      	b.n	800351c <BSP_TS_GetState+0xbc>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003590:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003592:	7173      	strb	r3, [r6, #5]
    for(index=0; index < TS_State->touchDetected; index++)
 8003594:	9b05      	ldr	r3, [sp, #20]
 8003596:	f10b 0b02 	add.w	fp, fp, #2
 800359a:	f10a 0a04 	add.w	sl, sl, #4
 800359e:	f109 0904 	add.w	r9, r9, #4
 80035a2:	3301      	adds	r3, #1
 80035a4:	3702      	adds	r7, #2
 80035a6:	f108 0802 	add.w	r8, r8, #2
 80035aa:	9305      	str	r3, [sp, #20]
 80035ac:	e778      	b.n	80034a0 <BSP_TS_GetState+0x40>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	e7ef      	b.n	8003592 <BSP_TS_GetState+0x132>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e7ed      	b.n	8003592 <BSP_TS_GetState+0x132>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e7eb      	b.n	8003592 <BSP_TS_GetState+0x132>
 80035ba:	bf00      	nop
 80035bc:	20001818 	.word	0x20001818

080035c0 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80035c0:	4770      	bx	lr

080035c2 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 80035c2:	2000      	movs	r0, #0
 80035c4:	4770      	bx	lr
	...

080035c8 <ft5336_TS_DetectTouch>:
{
 80035c8:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 80035ca:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80035cc:	2102      	movs	r1, #2
 80035ce:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 80035d0:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80035d4:	f7fe fdcc 	bl	8002170 <TS_IO_Read>
 80035d8:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80035dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80035e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d901      	bls.n	80035f4 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 80035f0:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80035f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80035f8:	4b03      	ldr	r3, [pc, #12]	@ (8003608 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 80035fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80035fe:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8003600:	2200      	movs	r2, #0
 8003602:	709a      	strb	r2, [r3, #2]
}
 8003604:	b002      	add	sp, #8
 8003606:	bd10      	pop	{r4, pc}
 8003608:	2000184c 	.word	0x2000184c

0800360c <ft5336_TS_GetXY>:
{
 800360c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003610:	4c2b      	ldr	r4, [pc, #172]	@ (80036c0 <ft5336_TS_GetXY+0xb4>)
{
 8003612:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
 8003614:	f04f 0800 	mov.w	r8, #0
{
 8003618:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800361a:	78a3      	ldrb	r3, [r4, #2]
 800361c:	7862      	ldrb	r2, [r4, #1]
  volatile uint8_t ucReadData = 0;
 800361e:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003622:	429a      	cmp	r2, r3
 8003624:	d945      	bls.n	80036b2 <ft5336_TS_GetXY+0xa6>
    switch(ft5336_handle.currActiveTouchIdx)
 8003626:	2b09      	cmp	r3, #9
 8003628:	d846      	bhi.n	80036b8 <ft5336_TS_GetXY+0xac>
 800362a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	b2db      	uxtb	r3, r3
 8003632:	1d19      	adds	r1, r3, #4
 8003634:	f103 0a03 	add.w	sl, r3, #3
 8003638:	f103 0906 	add.w	r9, r3, #6
 800363c:	3305      	adds	r3, #5
 800363e:	b2c9      	uxtb	r1, r1
 8003640:	fa5f fa8a 	uxtb.w	sl, sl
 8003644:	fa5f f989 	uxtb.w	r9, r9
 8003648:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800364c:	b2c6      	uxtb	r6, r0
 800364e:	4630      	mov	r0, r6
 8003650:	f7fe fd8e 	bl	8002170 <TS_IO_Read>
 8003654:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003658:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800365c:	4651      	mov	r1, sl
 800365e:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003660:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003662:	f7fe fd85 	bl	8002170 <TS_IO_Read>
 8003666:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800366a:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800366c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003670:	4630      	mov	r0, r6
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003672:	88a2      	ldrh	r2, [r4, #4]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800367a:	4313      	orrs	r3, r2
    *X = coord;
 800367c:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800367e:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003680:	f7fe fd76 	bl	8002170 <TS_IO_Read>
 8003684:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003688:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800368a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800368e:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003690:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003692:	f7fe fd6d 	bl	8002170 <TS_IO_Read>
 8003696:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800369a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800369e:	88a2      	ldrh	r2, [r4, #4]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80036a6:	4313      	orrs	r3, r2
 80036a8:	80a3      	strh	r3, [r4, #4]
    *Y = coord;
 80036aa:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80036ac:	78a3      	ldrb	r3, [r4, #2]
 80036ae:	3301      	adds	r3, #1
 80036b0:	70a3      	strb	r3, [r4, #2]
}
 80036b2:	b002      	add	sp, #8
 80036b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80036b8:	46c1      	mov	r9, r8
 80036ba:	46c2      	mov	sl, r8
 80036bc:	4641      	mov	r1, r8
 80036be:	e7c5      	b.n	800364c <ft5336_TS_GetXY+0x40>
 80036c0:	2000184c 	.word	0x2000184c

080036c4 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80036c4:	2201      	movs	r2, #1
 80036c6:	21a4      	movs	r1, #164	@ 0xa4
 80036c8:	b2c0      	uxtb	r0, r0
 80036ca:	f7fe bd3f 	b.w	800214c <TS_IO_Write>

080036ce <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80036ce:	2200      	movs	r2, #0
 80036d0:	21a4      	movs	r1, #164	@ 0xa4
 80036d2:	b2c0      	uxtb	r0, r0
 80036d4:	f7fe bd3a 	b.w	800214c <TS_IO_Write>

080036d8 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 80036d8:	f7ff bff9 	b.w	80036ce <ft5336_TS_DisableIT>

080036dc <ft5336_Init>:
{
 80036dc:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 80036de:	4c05      	ldr	r4, [pc, #20]	@ (80036f4 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 80036e0:	20c8      	movs	r0, #200	@ 0xc8
 80036e2:	f7fe fd5b 	bl	800219c <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80036e6:	7823      	ldrb	r3, [r4, #0]
 80036e8:	b91b      	cbnz	r3, 80036f2 <ft5336_Init+0x16>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80036ea:	f7fe fd2d 	bl	8002148 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80036ee:	2301      	movs	r3, #1
 80036f0:	7023      	strb	r3, [r4, #0]
}
 80036f2:	bd10      	pop	{r4, pc}
 80036f4:	2000184c 	.word	0x2000184c

080036f8 <ft5336_TS_ClearIT>:
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
 80036f8:	4770      	bx	lr
	...

080036fc <ft5336_ReadID>:
{
 80036fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 80036fe:	2300      	movs	r3, #0
  return(ft5336_handle.i2cInitialized);
 8003700:	4c0f      	ldr	r4, [pc, #60]	@ (8003740 <ft5336_ReadID+0x44>)
{
 8003702:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 8003704:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8003708:	7823      	ldrb	r3, [r4, #0]
 800370a:	b91b      	cbnz	r3, 8003714 <ft5336_ReadID+0x18>
    TS_IO_Init();
 800370c:	f7fe fd1c 	bl	8002148 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003710:	2301      	movs	r3, #1
 8003712:	7023      	strb	r3, [r4, #0]
{
 8003714:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003716:	b2ed      	uxtb	r5, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003718:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800371a:	21a8      	movs	r1, #168	@ 0xa8
 800371c:	4628      	mov	r0, r5
 800371e:	f7fe fd27 	bl	8002170 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003722:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003726:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 800372a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800372e:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003730:	d001      	beq.n	8003736 <ft5336_ReadID+0x3a>
 8003732:	2b51      	cmp	r3, #81	@ 0x51
 8003734:	d1f0      	bne.n	8003718 <ft5336_ReadID+0x1c>
  return (ucReadId);
 8003736:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800373a:	b003      	add	sp, #12
 800373c:	bd30      	pop	{r4, r5, pc}
 800373e:	bf00      	nop
 8003740:	2000184c 	.word	0x2000184c

08003744 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 8003744:	2300      	movs	r3, #0
{
 8003746:	b513      	push	{r0, r1, r4, lr}
 8003748:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800374a:	b2c0      	uxtb	r0, r0
 800374c:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 800374e:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8003752:	f7fe fd0d 	bl	8002170 <TS_IO_Read>
 8003756:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 800375a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800375e:	6023      	str	r3, [r4, #0]
}
 8003760:	b002      	add	sp, #8
 8003762:	bd10      	pop	{r4, pc}

08003764 <ft5336_TS_GetTouchInfo>:
{
 8003764:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003768:	461d      	mov	r5, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800376a:	4b1d      	ldr	r3, [pc, #116]	@ (80037e0 <ft5336_TS_GetTouchInfo+0x7c>)
  volatile uint8_t ucReadData = 0;
 800376c:	2400      	movs	r4, #0
{
 800376e:	4616      	mov	r6, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8003770:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 8003772:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8003776:	428b      	cmp	r3, r1
 8003778:	d92c      	bls.n	80037d4 <ft5336_TS_GetTouchInfo+0x70>
    switch(touchIdx)
 800377a:	2909      	cmp	r1, #9
 800377c:	d82d      	bhi.n	80037da <ft5336_TS_GetTouchInfo+0x76>
 800377e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003782:	004c      	lsls	r4, r1, #1
 8003784:	b2e4      	uxtb	r4, r4
 8003786:	1ce1      	adds	r1, r4, #3
 8003788:	1de7      	adds	r7, r4, #7
 800378a:	3408      	adds	r4, #8
 800378c:	b2c9      	uxtb	r1, r1
 800378e:	b2ff      	uxtb	r7, r7
 8003790:	b2e4      	uxtb	r4, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003792:	fa5f f880 	uxtb.w	r8, r0
 8003796:	4640      	mov	r0, r8
 8003798:	f7fe fcea 	bl	8002170 <TS_IO_Read>
 800379c:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80037a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80037a4:	4639      	mov	r1, r7
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80037a6:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80037a8:	4640      	mov	r0, r8
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80037ae:	f7fe fcdf 	bl	8002170 <TS_IO_Read>
 80037b2:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80037b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80037ba:	4621      	mov	r1, r4
 80037bc:	4640      	mov	r0, r8
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80037be:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80037c0:	f7fe fcd6 	bl	8002170 <TS_IO_Read>
 80037c4:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80037c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80037cc:	0912      	lsrs	r2, r2, #4
 80037ce:	f002 0204 	and.w	r2, r2, #4
 80037d2:	602a      	str	r2, [r5, #0]
}
 80037d4:	b002      	add	sp, #8
 80037d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80037da:	4627      	mov	r7, r4
 80037dc:	4621      	mov	r1, r4
 80037de:	e7d8      	b.n	8003792 <ft5336_TS_GetTouchInfo+0x2e>
 80037e0:	2000184c 	.word	0x2000184c

080037e4 <wm8994_SetVolume>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
	return 0;
}
 80037e4:	2000      	movs	r0, #0
 80037e6:	4770      	bx	lr

080037e8 <wm8994_Init>:
{
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	4604      	mov	r4, r0
  uint16_t output_device = OutputInputDevice & 0xFF;
 80037ec:	b2cf      	uxtb	r7, r1
{
 80037ee:	460e      	mov	r6, r1
  AUDIO_IO_Init();
 80037f0:	f7fe fc74 	bl	80020dc <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80037f4:	b2e4      	uxtb	r4, r4
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80037f6:	2203      	movs	r2, #3
 80037f8:	f44f 7181 	mov.w	r1, #258	@ 0x102
    outputEnabled = 1;
 80037fc:	2501      	movs	r5, #1
 AUDIO_IO_Write(Addr, Reg, Value);
 80037fe:	4620      	mov	r0, r4
 8003800:	f7fe fc74 	bl	80020ec <AUDIO_IO_Write>
 8003804:	2200      	movs	r2, #0
 8003806:	f640 0117 	movw	r1, #2071	@ 0x817
 800380a:	4620      	mov	r0, r4
 800380c:	f7fe fc6e 	bl	80020ec <AUDIO_IO_Write>
 8003810:	2200      	movs	r2, #0
 8003812:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003816:	4620      	mov	r0, r4
 8003818:	f7fe fc68 	bl	80020ec <AUDIO_IO_Write>
 800381c:	226c      	movs	r2, #108	@ 0x6c
 800381e:	2139      	movs	r1, #57	@ 0x39
 8003820:	4620      	mov	r0, r4
 8003822:	f7fe fc63 	bl	80020ec <AUDIO_IO_Write>
 8003826:	2203      	movs	r2, #3
 8003828:	2101      	movs	r1, #1
 800382a:	4620      	mov	r0, r4
 800382c:	f7fe fc5e 	bl	80020ec <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 8003830:	2032      	movs	r0, #50	@ 0x32
 8003832:	f7fe fc87 	bl	8002144 <AUDIO_IO_Delay>
    outputEnabled = 1;
 8003836:	4bad      	ldr	r3, [pc, #692]	@ (8003aec <wm8994_Init+0x304>)
 AUDIO_IO_Write(Addr, Reg, Value);
 8003838:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800383c:	2105      	movs	r1, #5
 800383e:	4620      	mov	r0, r4
    outputEnabled = 1;
 8003840:	601d      	str	r5, [r3, #0]
 AUDIO_IO_Write(Addr, Reg, Value);
 8003842:	f7fe fc53 	bl	80020ec <AUDIO_IO_Write>
 8003846:	462a      	mov	r2, r5
 8003848:	f240 6101 	movw	r1, #1537	@ 0x601
 800384c:	4620      	mov	r0, r4
 800384e:	f7fe fc4d 	bl	80020ec <AUDIO_IO_Write>
 8003852:	462a      	mov	r2, r5
 8003854:	f240 6102 	movw	r1, #1538	@ 0x602
 8003858:	4620      	mov	r0, r4
 800385a:	f7fe fc47 	bl	80020ec <AUDIO_IO_Write>
 800385e:	2202      	movs	r2, #2
 8003860:	f240 6104 	movw	r1, #1540	@ 0x604
 8003864:	4620      	mov	r0, r4
 8003866:	f7fe fc41 	bl	80020ec <AUDIO_IO_Write>
 800386a:	2202      	movs	r2, #2
 800386c:	f240 6105 	movw	r1, #1541	@ 0x605
 8003870:	4620      	mov	r0, r4
 8003872:	f7fe fc3b 	bl	80020ec <AUDIO_IO_Write>
 8003876:	f640 7233 	movw	r2, #3891	@ 0xf33
 800387a:	2104      	movs	r1, #4
 800387c:	4620      	mov	r0, r4
 800387e:	f7fe fc35 	bl	80020ec <AUDIO_IO_Write>
 8003882:	2200      	movs	r2, #0
 8003884:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003888:	4620      	mov	r0, r4
 800388a:	f7fe fc2f 	bl	80020ec <AUDIO_IO_Write>
 800388e:	2200      	movs	r2, #0
 8003890:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8003894:	4620      	mov	r0, r4
 8003896:	f7fe fc29 	bl	80020ec <AUDIO_IO_Write>
 800389a:	f246 3250 	movw	r2, #25424	@ 0x6350
 800389e:	2102      	movs	r1, #2
 80038a0:	4620      	mov	r0, r4
 80038a2:	f7fe fc23 	bl	80020ec <AUDIO_IO_Write>
 80038a6:	2202      	movs	r2, #2
 80038a8:	f240 6106 	movw	r1, #1542	@ 0x606
 80038ac:	4620      	mov	r0, r4
 80038ae:	f7fe fc1d 	bl	80020ec <AUDIO_IO_Write>
 80038b2:	2202      	movs	r2, #2
 80038b4:	f240 6107 	movw	r1, #1543	@ 0x607
 80038b8:	4620      	mov	r0, r4
 80038ba:	f7fe fc17 	bl	80020ec <AUDIO_IO_Write>
 80038be:	2202      	movs	r2, #2
 80038c0:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80038c4:	4620      	mov	r0, r4
 80038c6:	f7fe fc11 	bl	80020ec <AUDIO_IO_Write>
 80038ca:	2202      	movs	r2, #2
 80038cc:	f240 6109 	movw	r1, #1545	@ 0x609
 80038d0:	4620      	mov	r0, r4
 80038d2:	f7fe fc0b 	bl	80020ec <AUDIO_IO_Write>
 80038d6:	220d      	movs	r2, #13
 80038d8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80038dc:	4620      	mov	r0, r4
 80038de:	f7fe fc05 	bl	80020ec <AUDIO_IO_Write>
 80038e2:	f244 0210 	movw	r2, #16400	@ 0x4010
 80038e6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80038ea:	4620      	mov	r0, r4
 80038ec:	f7fe fbfe 	bl	80020ec <AUDIO_IO_Write>
 80038f0:	2200      	movs	r2, #0
 80038f2:	f240 3102 	movw	r1, #770	@ 0x302
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7fe fbf8 	bl	80020ec <AUDIO_IO_Write>
 80038fc:	220a      	movs	r2, #10
 80038fe:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8003902:	4620      	mov	r0, r4
 8003904:	f7fe fbf2 	bl	80020ec <AUDIO_IO_Write>
 8003908:	462a      	mov	r2, r5
 800390a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800390e:	4620      	mov	r0, r4
 8003910:	f7fe fbec 	bl	80020ec <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 8003914:	2f00      	cmp	r7, #0
 8003916:	f000 8083 	beq.w	8003a20 <wm8994_Init+0x238>
 AUDIO_IO_Write(Addr, Reg, Value);
 800391a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800391e:	2103      	movs	r1, #3
 8003920:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8003922:	f243 3703 	movw	r7, #13059	@ 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
 8003926:	f7fe fbe1 	bl	80020ec <AUDIO_IO_Write>
 800392a:	2200      	movs	r2, #0
 800392c:	2122      	movs	r1, #34	@ 0x22
 800392e:	4620      	mov	r0, r4
 8003930:	f7fe fbdc 	bl	80020ec <AUDIO_IO_Write>
 8003934:	2200      	movs	r2, #0
 8003936:	2123      	movs	r1, #35	@ 0x23
 8003938:	4620      	mov	r0, r4
 800393a:	f7fe fbd7 	bl	80020ec <AUDIO_IO_Write>
 800393e:	2203      	movs	r2, #3
 8003940:	2136      	movs	r1, #54	@ 0x36
 8003942:	4620      	mov	r0, r4
 8003944:	f7fe fbd2 	bl	80020ec <AUDIO_IO_Write>
 8003948:	f240 127f 	movw	r2, #383	@ 0x17f
 800394c:	2125      	movs	r1, #37	@ 0x25
 800394e:	4620      	mov	r0, r4
 8003950:	f7fe fbcc 	bl	80020ec <AUDIO_IO_Write>
 8003954:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003958:	2123      	movs	r1, #35	@ 0x23
 800395a:	4620      	mov	r0, r4
 800395c:	f7fe fbc6 	bl	80020ec <AUDIO_IO_Write>
 8003960:	f243 0203 	movw	r2, #12291	@ 0x3003
 8003964:	4629      	mov	r1, r5
 8003966:	4620      	mov	r0, r4
 8003968:	f7fe fbc0 	bl	80020ec <AUDIO_IO_Write>
 800396c:	2205      	movs	r2, #5
 800396e:	2151      	movs	r1, #81	@ 0x51
 8003970:	4620      	mov	r0, r4
 8003972:	f7fe fbbb 	bl	80020ec <AUDIO_IO_Write>
 8003976:	f243 3203 	movw	r2, #13059	@ 0x3303
 800397a:	4629      	mov	r1, r5
 800397c:	4620      	mov	r0, r4
 800397e:	f7fe fbb5 	bl	80020ec <AUDIO_IO_Write>
 8003982:	2222      	movs	r2, #34	@ 0x22
 8003984:	2160      	movs	r1, #96	@ 0x60
 8003986:	4620      	mov	r0, r4
 8003988:	f7fe fbb0 	bl	80020ec <AUDIO_IO_Write>
 800398c:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8003990:	214c      	movs	r1, #76	@ 0x4c
 8003992:	4620      	mov	r0, r4
 8003994:	f7fe fbaa 	bl	80020ec <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 8003998:	200f      	movs	r0, #15
 800399a:	f7fe fbd3 	bl	8002144 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 800399e:	462a      	mov	r2, r5
 80039a0:	212d      	movs	r1, #45	@ 0x2d
 80039a2:	4620      	mov	r0, r4
 80039a4:	f7fe fba2 	bl	80020ec <AUDIO_IO_Write>
 80039a8:	462a      	mov	r2, r5
 80039aa:	212e      	movs	r1, #46	@ 0x2e
 80039ac:	4620      	mov	r0, r4
 80039ae:	f7fe fb9d 	bl	80020ec <AUDIO_IO_Write>
 80039b2:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80039b6:	2103      	movs	r1, #3
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7fe fb97 	bl	80020ec <AUDIO_IO_Write>
 80039be:	2233      	movs	r2, #51	@ 0x33
 80039c0:	2154      	movs	r1, #84	@ 0x54
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7fe fb92 	bl	80020ec <AUDIO_IO_Write>
    AUDIO_IO_Delay(250);
 80039c8:	20fa      	movs	r0, #250	@ 0xfa
 80039ca:	f7fe fbbb 	bl	8002144 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 80039ce:	22ee      	movs	r2, #238	@ 0xee
 80039d0:	2160      	movs	r1, #96	@ 0x60
 80039d2:	4620      	mov	r0, r4
 80039d4:	f7fe fb8a 	bl	80020ec <AUDIO_IO_Write>
 80039d8:	22c0      	movs	r2, #192	@ 0xc0
 80039da:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 80039de:	4620      	mov	r0, r4
 80039e0:	f7fe fb84 	bl	80020ec <AUDIO_IO_Write>
 80039e4:	22c0      	movs	r2, #192	@ 0xc0
 80039e6:	f240 6111 	movw	r1, #1553	@ 0x611
 80039ea:	4620      	mov	r0, r4
 80039ec:	f7fe fb7e 	bl	80020ec <AUDIO_IO_Write>
 80039f0:	2200      	movs	r2, #0
 80039f2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7fe fb78 	bl	80020ec <AUDIO_IO_Write>
 80039fc:	22c0      	movs	r2, #192	@ 0xc0
 80039fe:	f240 6112 	movw	r1, #1554	@ 0x612
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7fe fb72 	bl	80020ec <AUDIO_IO_Write>
 8003a08:	22c0      	movs	r2, #192	@ 0xc0
 8003a0a:	f240 6113 	movw	r1, #1555	@ 0x613
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7fe fb6c 	bl	80020ec <AUDIO_IO_Write>
 8003a14:	2200      	movs	r2, #0
 8003a16:	f240 4122 	movw	r1, #1058	@ 0x422
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f7fe fb66 	bl	80020ec <AUDIO_IO_Write>
  if (input_device > 0) /* Audio input selected */
 8003a20:	2eff      	cmp	r6, #255	@ 0xff
 8003a22:	d960      	bls.n	8003ae6 <wm8994_Init+0x2fe>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003a24:	f047 0213 	orr.w	r2, r7, #19
 8003a28:	2101      	movs	r1, #1
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f7fe fb5e 	bl	80020ec <AUDIO_IO_Write>
 8003a30:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a34:	f240 4111 	movw	r1, #1041	@ 0x411
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7fe fb57 	bl	80020ec <AUDIO_IO_Write>
      AUDIO_IO_Delay(2);
 8003a3e:	2002      	movs	r0, #2
 8003a40:	f7fe fb80 	bl	8002144 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003a44:	228b      	movs	r2, #139	@ 0x8b
 8003a46:	2118      	movs	r1, #24
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f7fe fb4f 	bl	80020ec <AUDIO_IO_Write>
      AUDIO_IO_Delay(2);
 8003a4e:	2002      	movs	r0, #2
 8003a50:	f7fe fb78 	bl	8002144 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003a54:	f240 128b 	movw	r2, #395	@ 0x18b
 8003a58:	211a      	movs	r1, #26
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f7fe fb46 	bl	80020ec <AUDIO_IO_Write>
      AUDIO_IO_Delay(2);
 8003a60:	2002      	movs	r0, #2
 8003a62:	f7fe fb6f 	bl	8002144 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003a66:	2220      	movs	r2, #32
 8003a68:	2129      	movs	r1, #41	@ 0x29
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f7fe fb3e 	bl	80020ec <AUDIO_IO_Write>
      AUDIO_IO_Delay(2);
 8003a70:	2002      	movs	r0, #2
 8003a72:	f7fe fb67 	bl	8002144 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003a76:	2220      	movs	r2, #32
 8003a78:	212a      	movs	r1, #42	@ 0x2a
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f7fe fb36 	bl	80020ec <AUDIO_IO_Write>
      AUDIO_IO_Delay(2);
 8003a80:	2002      	movs	r0, #2
 8003a82:	f7fe fb5f 	bl	8002144 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003a86:	2211      	movs	r2, #17
 8003a88:	2128      	movs	r1, #40	@ 0x28
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7fe fb2e 	bl	80020ec <AUDIO_IO_Write>
      AUDIO_IO_Delay(2);
 8003a90:	2002      	movs	r0, #2
 8003a92:	f7fe fb57 	bl	8002144 <AUDIO_IO_Delay>
      AUDIO_IO_Delay(2);
 8003a96:	2002      	movs	r0, #2
 8003a98:	f7fe fb54 	bl	8002144 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003a9c:	227f      	movs	r2, #127	@ 0x7f
 8003a9e:	211c      	movs	r1, #28
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f7fe fb23 	bl	80020ec <AUDIO_IO_Write>
 8003aa6:	f240 127f 	movw	r2, #383	@ 0x17f
 8003aaa:	211d      	movs	r1, #29
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7fe fb1d 	bl	80020ec <AUDIO_IO_Write>
 8003ab2:	22c0      	movs	r2, #192	@ 0xc0
 8003ab4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f7fe fb17 	bl	80020ec <AUDIO_IO_Write>
 8003abe:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8003ac2:	f240 4101 	movw	r1, #1025	@ 0x401
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f7fe fb10 	bl	80020ec <AUDIO_IO_Write>
 8003acc:	22c0      	movs	r2, #192	@ 0xc0
 8003ace:	f240 4104 	movw	r1, #1028	@ 0x404
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f7fe fb0a 	bl	80020ec <AUDIO_IO_Write>
 8003ad8:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8003adc:	f240 4105 	movw	r1, #1029	@ 0x405
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f7fe fb03 	bl	80020ec <AUDIO_IO_Write>
}
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20001854 	.word	0x20001854

08003af0 <wm8994_SetOutputMode>:
  switch (Output) 
 8003af0:	2901      	cmp	r1, #1
{
 8003af2:	b510      	push	{r4, lr}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003af4:	b2c4      	uxtb	r4, r0
  switch (Output) 
 8003af6:	d00f      	beq.n	8003b18 <wm8994_SetOutputMode+0x28>
 8003af8:	2903      	cmp	r1, #3
 8003afa:	d12d      	bne.n	8003b58 <wm8994_SetOutputMode+0x68>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003afc:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003b00:	2105      	movs	r1, #5
 8003b02:	4620      	mov	r0, r4
 8003b04:	f7fe faf2 	bl	80020ec <AUDIO_IO_Write>
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f240 6101 	movw	r1, #1537	@ 0x601
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f7fe faec 	bl	80020ec <AUDIO_IO_Write>
 8003b14:	2201      	movs	r2, #1
 8003b16:	e00c      	b.n	8003b32 <wm8994_SetOutputMode+0x42>
 8003b18:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8003b1c:	2105      	movs	r1, #5
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7fe fae4 	bl	80020ec <AUDIO_IO_Write>
 8003b24:	2200      	movs	r2, #0
 8003b26:	f240 6101 	movw	r1, #1537	@ 0x601
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7fe fade 	bl	80020ec <AUDIO_IO_Write>
 8003b30:	2200      	movs	r2, #0
 8003b32:	f240 6102 	movw	r1, #1538	@ 0x602
 8003b36:	4620      	mov	r0, r4
 8003b38:	f7fe fad8 	bl	80020ec <AUDIO_IO_Write>
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	f240 6104 	movw	r1, #1540	@ 0x604
 8003b42:	4620      	mov	r0, r4
 8003b44:	f7fe fad2 	bl	80020ec <AUDIO_IO_Write>
 8003b48:	2202      	movs	r2, #2
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f240 6105 	movw	r1, #1541	@ 0x605
 8003b50:	f7fe facc 	bl	80020ec <AUDIO_IO_Write>
}
 8003b54:	2000      	movs	r0, #0
 8003b56:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8003b58:	f240 3203 	movw	r2, #771	@ 0x303
 8003b5c:	2105      	movs	r1, #5
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f7fe fac4 	bl	80020ec <AUDIO_IO_Write>
 8003b64:	2201      	movs	r2, #1
 8003b66:	f240 6101 	movw	r1, #1537	@ 0x601
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f7fe fabe 	bl	80020ec <AUDIO_IO_Write>
 8003b70:	2201      	movs	r2, #1
 8003b72:	f240 6102 	movw	r1, #1538	@ 0x602
 8003b76:	4620      	mov	r0, r4
 8003b78:	f7fe fab8 	bl	80020ec <AUDIO_IO_Write>
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f240 6104 	movw	r1, #1540	@ 0x604
 8003b82:	4620      	mov	r0, r4
 8003b84:	f7fe fab2 	bl	80020ec <AUDIO_IO_Write>
 8003b88:	2200      	movs	r2, #0
 8003b8a:	e7de      	b.n	8003b4a <wm8994_SetOutputMode+0x5a>

08003b8c <wm8994_SetFrequency>:
{
 8003b8c:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8003b8e:	f245 6322 	movw	r3, #22050	@ 0x5622
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003b92:	b2c0      	uxtb	r0, r0
  switch (AudioFreq)
 8003b94:	4299      	cmp	r1, r3
 8003b96:	d020      	beq.n	8003bda <wm8994_SetFrequency+0x4e>
 8003b98:	d80b      	bhi.n	8003bb2 <wm8994_SetFrequency+0x26>
 8003b9a:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8003b9e:	4299      	cmp	r1, r3
 8003ba0:	d019      	beq.n	8003bd6 <wm8994_SetFrequency+0x4a>
 8003ba2:	f5b1 5f7a 	cmp.w	r1, #16000	@ 0x3e80
 8003ba6:	d014      	beq.n	8003bd2 <wm8994_SetFrequency+0x46>
 8003ba8:	f5b1 5ffa 	cmp.w	r1, #8000	@ 0x1f40
 8003bac:	d00a      	beq.n	8003bc4 <wm8994_SetFrequency+0x38>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003bae:	2283      	movs	r2, #131	@ 0x83
 8003bb0:	e009      	b.n	8003bc6 <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8003bb2:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8003bb6:	4299      	cmp	r1, r3
 8003bb8:	d011      	beq.n	8003bde <wm8994_SetFrequency+0x52>
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <wm8994_SetFrequency+0x58>)
 8003bbc:	4299      	cmp	r1, r3
 8003bbe:	d1f6      	bne.n	8003bae <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003bc0:	22a3      	movs	r2, #163	@ 0xa3
 8003bc2:	e000      	b.n	8003bc6 <wm8994_SetFrequency+0x3a>
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003bca:	f7fe fa8f 	bl	80020ec <AUDIO_IO_Write>
}
 8003bce:	2000      	movs	r0, #0
 8003bd0:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8003bd2:	2233      	movs	r2, #51	@ 0x33
 8003bd4:	e7f7      	b.n	8003bc6 <wm8994_SetFrequency+0x3a>
 8003bd6:	2213      	movs	r2, #19
 8003bd8:	e7f5      	b.n	8003bc6 <wm8994_SetFrequency+0x3a>
 8003bda:	2243      	movs	r2, #67	@ 0x43
 8003bdc:	e7f3      	b.n	8003bc6 <wm8994_SetFrequency+0x3a>
 8003bde:	2273      	movs	r2, #115	@ 0x73
 8003be0:	e7f1      	b.n	8003bc6 <wm8994_SetFrequency+0x3a>
 8003be2:	bf00      	nop
 8003be4:	00017700 	.word	0x00017700

08003be8 <wm8994_Reset>:
 8003be8:	2200      	movs	r2, #0
 8003bea:	b2c0      	uxtb	r0, r0
{
 8003bec:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 8003bee:	4611      	mov	r1, r2
 8003bf0:	f7fe fa7c 	bl	80020ec <AUDIO_IO_Write>
  outputEnabled = 0;
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	4b01      	ldr	r3, [pc, #4]	@ (8003bfc <wm8994_Reset+0x14>)
 8003bf8:	6018      	str	r0, [r3, #0]
}
 8003bfa:	bd08      	pop	{r3, pc}
 8003bfc:	20001854 	.word	0x20001854

08003c00 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 8003c00:	f7fe ba72 	b.w	80020e8 <AUDIO_IO_DeInit>

08003c04 <wm8994_ReadID>:
{
 8003c04:	b510      	push	{r4, lr}
 8003c06:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8003c08:	f7fe fa68 	bl	80020dc <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	b2e0      	uxtb	r0, r4
 8003c10:	f7fe fa80 	bl	8002114 <AUDIO_IO_Read>
}
 8003c14:	bd10      	pop	{r4, pc}
	...

08003c18 <wm8994_SetMute>:
  if (outputEnabled != 0)
 8003c18:	4b0f      	ldr	r3, [pc, #60]	@ (8003c58 <wm8994_SetMute+0x40>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
{
 8003c1c:	b510      	push	{r4, lr}
  if (outputEnabled != 0)
 8003c1e:	b183      	cbz	r3, 8003c42 <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 8003c20:	2901      	cmp	r1, #1
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003c22:	b2c4      	uxtb	r4, r0
    if(Cmd == AUDIO_MUTE_ON)
 8003c24:	d10f      	bne.n	8003c46 <wm8994_SetMute+0x2e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c2a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7fe fa5c 	bl	80020ec <AUDIO_IO_Write>
 8003c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c38:	f240 4122 	movw	r1, #1058	@ 0x422
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fe fa55 	bl	80020ec <AUDIO_IO_Write>
}
 8003c42:	2000      	movs	r0, #0
 8003c44:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8003c46:	2200      	movs	r2, #0
 8003c48:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f7fe fa4d 	bl	80020ec <AUDIO_IO_Write>
 8003c52:	2200      	movs	r2, #0
 8003c54:	e7f0      	b.n	8003c38 <wm8994_SetMute+0x20>
 8003c56:	bf00      	nop
 8003c58:	20001854 	.word	0x20001854

08003c5c <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	f7ff bfdb 	b.w	8003c18 <wm8994_SetMute>

08003c62 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003c62:	2100      	movs	r1, #0
 8003c64:	f7ff bfd8 	b.w	8003c18 <wm8994_SetMute>

08003c68 <wm8994_Pause>:
{  
 8003c68:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003c6a:	2101      	movs	r1, #1
{  
 8003c6c:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003c6e:	f7ff ffd3 	bl	8003c18 <wm8994_SetMute>
 8003c72:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8003c74:	2201      	movs	r2, #1
 8003c76:	b2e8      	uxtb	r0, r5
 8003c78:	2102      	movs	r1, #2
 8003c7a:	f7fe fa37 	bl	80020ec <AUDIO_IO_Write>
}
 8003c7e:	4620      	mov	r0, r4
 8003c80:	bd38      	pop	{r3, r4, r5, pc}
	...

08003c84 <wm8994_Stop>:
{
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
 8003c86:	4f19      	ldr	r7, [pc, #100]	@ (8003cec <wm8994_Stop+0x68>)
{
 8003c88:	4604      	mov	r4, r0
 8003c8a:	460e      	mov	r6, r1
  if (outputEnabled != 0)
 8003c8c:	683d      	ldr	r5, [r7, #0]
 8003c8e:	b355      	cbz	r5, 8003ce6 <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003c90:	2101      	movs	r1, #1
 8003c92:	f7ff ffc1 	bl	8003c18 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003c96:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003c98:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003c9a:	d024      	beq.n	8003ce6 <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003c9c:	b2e4      	uxtb	r4, r4
 AUDIO_IO_Write(Addr, Reg, Value);
 8003c9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ca2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f7fe fa20 	bl	80020ec <AUDIO_IO_Write>
 8003cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cb0:	f240 4122 	movw	r1, #1058	@ 0x422
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f7fe fa19 	bl	80020ec <AUDIO_IO_Write>
 8003cba:	2200      	movs	r2, #0
 8003cbc:	212d      	movs	r1, #45	@ 0x2d
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f7fe fa14 	bl	80020ec <AUDIO_IO_Write>
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	212e      	movs	r1, #46	@ 0x2e
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f7fe fa0f 	bl	80020ec <AUDIO_IO_Write>
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2105      	movs	r1, #5
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7fe fa0a 	bl	80020ec <AUDIO_IO_Write>
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4620      	mov	r0, r4
 8003cdc:	4611      	mov	r1, r2
 8003cde:	f7fe fa05 	bl	80020ec <AUDIO_IO_Write>
      outputEnabled = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	603b      	str	r3, [r7, #0]
}
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20001854 	.word	0x20001854

08003cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003cf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003cf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003cf6:	e003      	b.n	8003d00 <LoopCopyDataInit>

08003cf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003cfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003cfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003cfe:	3104      	adds	r1, #4

08003d00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d00:	480b      	ldr	r0, [pc, #44]	@ (8003d30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d02:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d08:	d3f6      	bcc.n	8003cf8 <CopyDataInit>
  ldr  r2, =_sbss
 8003d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8003d38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d0c:	e002      	b.n	8003d14 <LoopFillZerobss>

08003d0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d10:	f842 3b04 	str.w	r3, [r2], #4

08003d14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d14:	4b09      	ldr	r3, [pc, #36]	@ (8003d3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d18:	d3f9      	bcc.n	8003d0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d1a:	f000 f813 	bl	8003d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d1e:	f00a fbeb 	bl	800e4f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d22:	f009 fcad 	bl	800d680 <main>
  bx  lr    
 8003d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d28:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003d2c:	08056030 	.word	0x08056030
  ldr  r0, =_sdata
 8003d30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d34:	2000107c 	.word	0x2000107c
  ldr  r2, =_sbss
 8003d38:	20001080 	.word	0x20001080
  ldr  r3, = _ebss
 8003d3c:	2004541c 	.word	0x2004541c

08003d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d40:	e7fe      	b.n	8003d40 <ADC_IRQHandler>
	...

08003d44 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d44:	490f      	ldr	r1, [pc, #60]	@ (8003d84 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d46:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d48:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003d54:	4b0c      	ldr	r3, [pc, #48]	@ (8003d88 <SystemInit+0x44>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	f042 0201 	orr.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003d5e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8003d66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d6c:	4a07      	ldr	r2, [pc, #28]	@ (8003d8c <SystemInit+0x48>)
 8003d6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d76:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003d78:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003d7e:	608b      	str	r3, [r1, #8]
#endif
}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	e000ed00 	.word	0xe000ed00
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	24003010 	.word	0x24003010

08003d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d90:	b510      	push	{r4, lr}
 8003d92:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003d94:	f001 fb7e 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 8003d98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003da0:	f000 f878 	bl	8003e94 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8003da4:	2200      	movs	r2, #0
 8003da6:	4621      	mov	r1, r4
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	f000 f834 	bl	8003e18 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8003db0:	2000      	movs	r0, #0
 8003db2:	bd10      	pop	{r4, pc}

08003db4 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 8003db4:	4a07      	ldr	r2, [pc, #28]	@ (8003dd4 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db6:	2003      	movs	r0, #3
{
 8003db8:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8003dba:	6813      	ldr	r3, [r2, #0]
 8003dbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dc0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc2:	f000 f817 	bl	8003df4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dc6:	200f      	movs	r0, #15
 8003dc8:	f7ff ffe2 	bl	8003d90 <HAL_InitTick>
  HAL_MspInit();
 8003dcc:	f001 f830 	bl	8004e30 <HAL_MspInit>
}
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	bd08      	pop	{r3, pc}
 8003dd4:	40023c00 	.word	0x40023c00

08003dd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003dd8:	4a02      	ldr	r2, [pc, #8]	@ (8003de4 <HAL_IncTick+0xc>)
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	6013      	str	r3, [r2, #0]
}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20001858 	.word	0x20001858

08003de8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003de8:	4b01      	ldr	r3, [pc, #4]	@ (8003df0 <HAL_GetTick+0x8>)
 8003dea:	6818      	ldr	r0, [r3, #0]
}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20001858 	.word	0x20001858

08003df4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df4:	4907      	ldr	r1, [pc, #28]	@ (8003e14 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003df6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003dfa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e02:	0412      	lsls	r2, r2, #16
 8003e04:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003e10:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e18:	4b16      	ldr	r3, [pc, #88]	@ (8003e74 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e1a:	b530      	push	{r4, r5, lr}
 8003e1c:	68dc      	ldr	r4, [r3, #12]
 8003e1e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e22:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e26:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	bf28      	it	cs
 8003e2c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e2e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e34:	bf8c      	ite	hi
 8003e36:	3c03      	subhi	r4, #3
 8003e38:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e3a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 8003e3e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e40:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e44:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e48:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e4c:	fa03 f304 	lsl.w	r3, r3, r4
 8003e50:	ea43 0302 	orr.w	r3, r3, r2
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e54:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003e58:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) < 0)
 8003e5a:	da04      	bge.n	8003e66 <HAL_NVIC_SetPriority+0x4e>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5c:	f000 000f 	and.w	r0, r0, #15
 8003e60:	4a05      	ldr	r2, [pc, #20]	@ (8003e78 <HAL_NVIC_SetPriority+0x60>)
 8003e62:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003e64:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e66:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003e6a:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003e6e:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
 8003e72:	e7f7      	b.n	8003e64 <HAL_NVIC_SetPriority+0x4c>
 8003e74:	e000ed00 	.word	0xe000ed00
 8003e78:	e000ed14 	.word	0xe000ed14

08003e7c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003e7c:	0941      	lsrs	r1, r0, #5
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f000 001f 	and.w	r0, r0, #31
 8003e84:	4a02      	ldr	r2, [pc, #8]	@ (8003e90 <HAL_NVIC_EnableIRQ+0x14>)
 8003e86:	4083      	lsls	r3, r0
 8003e88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000e100 	.word	0xe000e100

08003e94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e94:	3801      	subs	r0, #1
 8003e96:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003e9a:	d20b      	bcs.n	8003eb4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea0:	4a05      	ldr	r2, [pc, #20]	@ (8003eb8 <HAL_SYSTICK_Config+0x24>)
 8003ea2:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ea4:	6158      	str	r0, [r3, #20]
 // NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  NVIC_SetPriority (-1, (1UL << 4) - 1UL);
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ea6:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea8:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eac:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eae:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eb0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eb2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003eb4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
 8003ebc:	6803      	ldr	r3, [r0, #0]
{
 8003ebe:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
 8003ec0:	2018      	movs	r0, #24
 8003ec2:	b2d9      	uxtb	r1, r3
 8003ec4:	3910      	subs	r1, #16
 8003ec6:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8003eca:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ecc:	4c05      	ldr	r4, [pc, #20]	@ (8003ee4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3)
 8003ece:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ed0:	5c20      	ldrb	r0, [r4, r0]
 8003ed2:	6550      	str	r0, [r2, #84]	@ 0x54
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
 8003ed4:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8003ed8:	f020 0003 	bic.w	r0, r0, #3
 8003edc:	bf88      	it	hi
 8003ede:	3004      	addhi	r0, #4
 8003ee0:	6510      	str	r0, [r2, #80]	@ 0x50
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FF));
  }
  
  return hdma->StreamBaseAddress;
}
 8003ee2:	bd10      	pop	{r4, pc}
 8003ee4:	0805104c 	.word	0x0805104c

08003ee8 <HAL_DMA_Init>:
{ 
 8003ee8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8003eea:	4604      	mov	r4, r0
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d03a      	beq.n	8003f66 <HAL_DMA_Init+0x7e>
  tmp = hdma->Instance->CR;
 8003ef0:	6802      	ldr	r2, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ef2:	2302      	movs	r3, #2
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003ef4:	6a41      	ldr	r1, [r0, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ef6:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003efa:	481c      	ldr	r0, [pc, #112]	@ (8003f6c <HAL_DMA_Init+0x84>)
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003efc:	2904      	cmp	r1, #4
  tmp = hdma->Instance->CR;
 8003efe:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f00:	ea00 0003 	and.w	r0, r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f04:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8003f08:	ea43 0305 	orr.w	r3, r3, r5
 8003f0c:	68e5      	ldr	r5, [r4, #12]
 8003f0e:	ea43 0305 	orr.w	r3, r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f12:	6925      	ldr	r5, [r4, #16]
 8003f14:	ea43 0305 	orr.w	r3, r3, r5
 8003f18:	6965      	ldr	r5, [r4, #20]
 8003f1a:	ea43 0305 	orr.w	r3, r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1e:	69a5      	ldr	r5, [r4, #24]
 8003f20:	ea43 0305 	orr.w	r3, r3, r5
 8003f24:	69e5      	ldr	r5, [r4, #28]
 8003f26:	ea43 0305 	orr.w	r3, r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f2a:	6a25      	ldr	r5, [r4, #32]
 8003f2c:	ea43 0305 	orr.w	r3, r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f30:	ea43 0300 	orr.w	r3, r3, r0
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f34:	bf02      	ittt	eq
 8003f36:	e9d4 050b 	ldrdeq	r0, r5, [r4, #44]	@ 0x2c
 8003f3a:	4328      	orreq	r0, r5
 8003f3c:	4303      	orreq	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f3e:	2904      	cmp	r1, #4
  DMA_CalcBaseAndBitshift(hdma);
 8003f40:	4620      	mov	r0, r4
  hdma->Instance->CR = tmp;  
 8003f42:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8003f44:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f46:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8003f4a:	ea43 0301 	orr.w	r3, r3, r1
    tmp |= hdma->Init.FIFOThreshold;
 8003f4e:	bf04      	itt	eq
 8003f50:	6aa1      	ldreq	r1, [r4, #40]	@ 0x28
 8003f52:	430b      	orreq	r3, r1
  hdma->Instance->FCR = tmp;
 8003f54:	6153      	str	r3, [r2, #20]
  DMA_CalcBaseAndBitshift(hdma);
 8003f56:	f7ff ffb1 	bl	8003ebc <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f5a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003f5c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f5e:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hdma->State = HAL_DMA_STATE_READY;
 8003f60:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8003f64:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003f66:	2001      	movs	r0, #1
 8003f68:	e7fc      	b.n	8003f64 <HAL_DMA_Init+0x7c>
 8003f6a:	bf00      	nop
 8003f6c:	f010803f 	.word	0xf010803f

08003f70 <HAL_DMA_DeInit>:
{
 8003f70:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8003f72:	4605      	mov	r5, r0
 8003f74:	b1e8      	cbz	r0, 8003fb2 <HAL_DMA_DeInit+0x42>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003f76:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d019      	beq.n	8003fb2 <HAL_DMA_DeInit+0x42>
  __HAL_DMA_DISABLE(hdma);
 8003f7e:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0;
 8003f80:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 8003f8a:	2221      	movs	r2, #33	@ 0x21
  hdma->Instance->CR   = 0;
 8003f8c:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0;
 8003f8e:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0;
 8003f90:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0;
 8003f92:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0;
 8003f94:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 8003f96:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f98:	f7ff ff90 	bl	8003ebc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3F << hdma->StreamIndex;
 8003f9c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8003f9e:	233f      	movs	r3, #63	@ 0x3f
 8003fa0:	4093      	lsls	r3, r2
 8003fa2:	6083      	str	r3, [r0, #8]
  return HAL_OK;
 8003fa4:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa6:	64ec      	str	r4, [r5, #76]	@ 0x4c
  __HAL_UNLOCK(hdma);
 8003fa8:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8003fac:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
}
 8003fb0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	e7fc      	b.n	8003fb0 <HAL_DMA_DeInit+0x40>

08003fb6 <HAL_DMA_Start_IT>:
{
 8003fb6:	b530      	push	{r4, r5, lr}
 8003fb8:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 8003fba:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8003fbe:	2801      	cmp	r0, #1
 8003fc0:	f04f 0002 	mov.w	r0, #2
 8003fc4:	d020      	beq.n	8004008 <HAL_DMA_Start_IT+0x52>
 8003fc6:	2401      	movs	r4, #1
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fc8:	f885 0035 	strb.w	r0, [r5, #53]	@ 0x35
  __HAL_LOCK(hdma);
 8003fcc:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8003fd0:	682c      	ldr	r4, [r5, #0]
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	f020 0001 	bic.w	r0, r0, #1
 8003fd8:	6020      	str	r0, [r4, #0]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fda:	6820      	ldr	r0, [r4, #0]
 8003fdc:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8003fe0:	6020      	str	r0, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8003fe2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fe4:	68ab      	ldr	r3, [r5, #8]
 8003fe6:	2b40      	cmp	r3, #64	@ 0x40
 8003fe8:	d10f      	bne.n	800400a <HAL_DMA_Start_IT+0x54>
    hdma->Instance->PAR = DstAddress;
 8003fea:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003fec:	60e1      	str	r1, [r4, #12]
  hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_HT | DMA_IT_TE | DMA_IT_DME;
 8003fee:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8003ff0:	2000      	movs	r0, #0
  hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_HT | DMA_IT_TE | DMA_IT_DME;
 8003ff2:	f043 031e 	orr.w	r3, r3, #30
 8003ff6:	6023      	str	r3, [r4, #0]
  hdma->Instance->FCR |= DMA_IT_FE;
 8003ff8:	6963      	ldr	r3, [r4, #20]
 8003ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ffe:	6163      	str	r3, [r4, #20]
  __HAL_DMA_ENABLE(hdma);
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6023      	str	r3, [r4, #0]
} 
 8004008:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->PAR = SrcAddress;
 800400a:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800400c:	60e2      	str	r2, [r4, #12]
 800400e:	e7ee      	b.n	8003fee <HAL_DMA_Start_IT+0x38>

08004010 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 8004010:	6802      	ldr	r2, [r0, #0]
{
 8004012:	b538      	push	{r3, r4, r5, lr}
  __HAL_DMA_DISABLE(hdma);
 8004014:	6813      	ldr	r3, [r2, #0]
{
 8004016:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800401e:	f7ff fee3 	bl	8003de8 <HAL_GetTick>
 8004022:	4605      	mov	r5, r0
  while((hdma->Instance->CR & DMA_SxCR_EN) != 0)
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	f010 0001 	ands.w	r0, r0, #1
 800402c:	d105      	bne.n	800403a <HAL_DMA_Abort+0x2a>
  hdma->State = HAL_DMA_STATE_READY;
 800402e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma);
 8004030:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_READY;
 8004034:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8004038:	e00f      	b.n	800405a <HAL_DMA_Abort+0x4a>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800403a:	f7ff fed5 	bl	8003de8 <HAL_GetTick>
 800403e:	1b40      	subs	r0, r0, r5
 8004040:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004044:	d9ee      	bls.n	8004024 <HAL_DMA_Abort+0x14>
      hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004046:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004048:	2003      	movs	r0, #3
      hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800404a:	f043 0320 	orr.w	r3, r3, #32
 800404e:	64e3      	str	r3, [r4, #76]	@ 0x4c
      __HAL_UNLOCK(hdma);
 8004050:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004052:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8004056:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800405a:	bd38      	pop	{r3, r4, r5, pc}

0800405c <HAL_DMA_IRQHandler>:
{
 800405c:	b570      	push	{r4, r5, r6, lr}
  if ((regs->ISR & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800405e:	6d41      	ldr	r1, [r0, #84]	@ 0x54
 8004060:	2308      	movs	r3, #8
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004062:	6d05      	ldr	r5, [r0, #80]	@ 0x50
{
 8004064:	4604      	mov	r4, r0
  if ((regs->ISR & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004066:	408b      	lsls	r3, r1
 8004068:	682a      	ldr	r2, [r5, #0]
 800406a:	421a      	tst	r2, r3
 800406c:	d015      	beq.n	800409a <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800406e:	6802      	ldr	r2, [r0, #0]
 8004070:	6811      	ldr	r1, [r2, #0]
 8004072:	074e      	lsls	r6, r1, #29
 8004074:	d511      	bpl.n	800409a <HAL_DMA_IRQHandler+0x3e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8004076:	6811      	ldr	r1, [r2, #0]
 8004078:	f021 0104 	bic.w	r1, r1, #4
 800407c:	6011      	str	r1, [r2, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800407e:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004080:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	64c3      	str	r3, [r0, #76]	@ 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 8004088:	2304      	movs	r3, #4
 800408a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma); 
 800408e:	2300      	movs	r3, #0
 8004090:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8004094:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8004096:	b103      	cbz	r3, 800409a <HAL_DMA_IRQHandler+0x3e>
        hdma->XferErrorCallback(hdma);
 8004098:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800409a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800409c:	4b46      	ldr	r3, [pc, #280]	@ (80041b8 <HAL_DMA_IRQHandler+0x15c>)
 800409e:	682a      	ldr	r2, [r5, #0]
 80040a0:	408b      	lsls	r3, r1
 80040a2:	421a      	tst	r2, r3
 80040a4:	d016      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x78>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	6951      	ldr	r1, [r2, #20]
 80040aa:	0609      	lsls	r1, r1, #24
 80040ac:	d512      	bpl.n	80040d4 <HAL_DMA_IRQHandler+0x78>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
 80040ae:	6951      	ldr	r1, [r2, #20]
 80040b0:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80040b4:	6151      	str	r1, [r2, #20]
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040b6:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040b8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80040ba:	f043 0302 	orr.w	r3, r3, #2
 80040be:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 80040c0:	2304      	movs	r3, #4
 80040c2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80040c6:	2300      	movs	r3, #0
 80040c8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 80040cc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80040ce:	b10b      	cbz	r3, 80040d4 <HAL_DMA_IRQHandler+0x78>
        hdma->XferErrorCallback(hdma);
 80040d0:	4620      	mov	r0, r4
 80040d2:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040d4:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80040d6:	4b39      	ldr	r3, [pc, #228]	@ (80041bc <HAL_DMA_IRQHandler+0x160>)
 80040d8:	682a      	ldr	r2, [r5, #0]
 80040da:	408b      	lsls	r3, r1
 80040dc:	421a      	tst	r2, r3
 80040de:	d016      	beq.n	800410e <HAL_DMA_IRQHandler+0xb2>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040e0:	6822      	ldr	r2, [r4, #0]
 80040e2:	6811      	ldr	r1, [r2, #0]
 80040e4:	078e      	lsls	r6, r1, #30
 80040e6:	d512      	bpl.n	800410e <HAL_DMA_IRQHandler+0xb2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
 80040e8:	6811      	ldr	r1, [r2, #0]
 80040ea:	f021 0102 	bic.w	r1, r1, #2
 80040ee:	6011      	str	r1, [r2, #0]
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040f0:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040f2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 80040fa:	2304      	movs	r3, #4
 80040fc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8004100:	2300      	movs	r3, #0
 8004102:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8004106:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004108:	b10b      	cbz	r3, 800410e <HAL_DMA_IRQHandler+0xb2>
        hdma->XferErrorCallback(hdma);
 800410a:	4620      	mov	r0, r4
 800410c:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800410e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8004110:	2210      	movs	r2, #16
 8004112:	682b      	ldr	r3, [r5, #0]
 8004114:	408a      	lsls	r2, r1
 8004116:	4213      	tst	r3, r2
 8004118:	d016      	beq.n	8004148 <HAL_DMA_IRQHandler+0xec>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	6819      	ldr	r1, [r3, #0]
 800411e:	0708      	lsls	r0, r1, #28
 8004120:	d512      	bpl.n	8004148 <HAL_DMA_IRQHandler+0xec>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
 8004122:	6819      	ldr	r1, [r3, #0]
 8004124:	0349      	lsls	r1, r1, #13
 8004126:	d526      	bpl.n	8004176 <HAL_DMA_IRQHandler+0x11a>
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004128:	60aa      	str	r2, [r5, #8]
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	0312      	lsls	r2, r2, #12
 800412e:	d401      	bmi.n	8004134 <HAL_DMA_IRQHandler+0xd8>
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 8004130:	2331      	movs	r3, #49	@ 0x31
 8004132:	e003      	b.n	800413c <HAL_DMA_IRQHandler+0xe0>
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	031e      	lsls	r6, r3, #12
 8004138:	d502      	bpl.n	8004140 <HAL_DMA_IRQHandler+0xe4>
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM1;
 800413a:	2341      	movs	r3, #65	@ 0x41
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 800413c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      if(hdma->XferHalfCpltCallback != NULL)
 8004140:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004142:	b10b      	cbz	r3, 8004148 <HAL_DMA_IRQHandler+0xec>
        hdma->XferHalfCpltCallback(hdma);
 8004144:	4620      	mov	r0, r4
 8004146:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004148:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800414a:	2220      	movs	r2, #32
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	408a      	lsls	r2, r1
 8004150:	4213      	tst	r3, r2
 8004152:	d02f      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x158>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	6819      	ldr	r1, [r3, #0]
 8004158:	06c9      	lsls	r1, r1, #27
 800415a:	d52b      	bpl.n	80041b4 <HAL_DMA_IRQHandler+0x158>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	034e      	lsls	r6, r1, #13
 8004160:	d517      	bpl.n	8004192 <HAL_DMA_IRQHandler+0x136>
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004162:	60aa      	str	r2, [r5, #8]
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	0315      	lsls	r5, r2, #12
 8004168:	d40e      	bmi.n	8004188 <HAL_DMA_IRQHandler+0x12c>
          if(hdma->XferM1CpltCallback != NULL)
 800416a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 800416c:	b313      	cbz	r3, 80041b4 <HAL_DMA_IRQHandler+0x158>
          hdma->XferCpltCallback(hdma);
 800416e:	4620      	mov	r0, r4
}
 8004170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          hdma->XferCpltCallback(hdma);
 8004174:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8004176:	6819      	ldr	r1, [r3, #0]
 8004178:	05c8      	lsls	r0, r1, #23
 800417a:	d403      	bmi.n	8004184 <HAL_DMA_IRQHandler+0x128>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800417c:	6819      	ldr	r1, [r3, #0]
 800417e:	f021 0108 	bic.w	r1, r1, #8
 8004182:	6019      	str	r1, [r3, #0]
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004184:	60aa      	str	r2, [r5, #8]
 8004186:	e7d3      	b.n	8004130 <HAL_DMA_IRQHandler+0xd4>
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0) 
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	0318      	lsls	r0, r3, #12
 800418c:	d512      	bpl.n	80041b4 <HAL_DMA_IRQHandler+0x158>
        if(hdma->XferCpltCallback != NULL)
 800418e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004190:	e7ec      	b.n	800416c <HAL_DMA_IRQHandler+0x110>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8004192:	6819      	ldr	r1, [r3, #0]
 8004194:	05c9      	lsls	r1, r1, #23
 8004196:	d403      	bmi.n	80041a0 <HAL_DMA_IRQHandler+0x144>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8004198:	6819      	ldr	r1, [r3, #0]
 800419a:	f021 0110 	bic.w	r1, r1, #16
 800419e:	6019      	str	r1, [r3, #0]
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041a0:	60aa      	str	r2, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 80041a2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80041a4:	64e3      	str	r3, [r4, #76]	@ 0x4c
        hdma->State = HAL_DMA_STATE_READY_MEM0;
 80041a6:	2311      	movs	r3, #17
 80041a8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);      
 80041ac:	2300      	movs	r3, #0
 80041ae:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80041b2:	e7ec      	b.n	800418e <HAL_DMA_IRQHandler+0x132>
}
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	bf00      	nop
 80041b8:	00800001 	.word	0x00800001
 80041bc:	00800004 	.word	0x00800004

080041c0 <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 80041c0:	b530      	push	{r4, r5, lr}
  uint32_t tmp4 = 0;
  
  tmp = Width << 16;
  
  /* Configure DMA2D data size */
  hdma2d->Instance->NLR = (Height | tmp);
 80041c2:	9d03      	ldr	r5, [sp, #12]
 80041c4:	6804      	ldr	r4, [r0, #0]
 80041c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  
  /* Configure DMA2D destination address */
  hdma2d->Instance->OMAR = DstAddress;
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80041ca:	6843      	ldr	r3, [r0, #4]
 80041cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  hdma2d->Instance->NLR = (Height | tmp);
 80041d0:	6465      	str	r5, [r4, #68]	@ 0x44
  hdma2d->Instance->OMAR = DstAddress;
 80041d2:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80041d4:	d130      	bne.n	8004238 <DMA2D_SetConfig+0x78>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
    
    /* Prepare the value to be wrote to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_ARGB8888)
 80041d6:	6885      	ldr	r5, [r0, #8]
 80041d8:	b11d      	cbz	r5, 80041e2 <DMA2D_SetConfig+0x22>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_RGB888)
 80041da:	2d01      	cmp	r5, #1
 80041dc:	d103      	bne.n	80041e6 <DMA2D_SetConfig+0x26>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 80041de:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    hdma2d->Instance->OCOLR = tmp;
 80041e2:	63a1      	str	r1, [r4, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    hdma2d->Instance->FGMAR = pdata;
  }
}
 80041e4:	bd30      	pop	{r4, r5, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_RGB565)
 80041e6:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80041e8:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80041ec:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80041f0:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_RGB565)
 80041f2:	d107      	bne.n	8004204 <DMA2D_SetConfig+0x44>
      tmp2 = (tmp2 >> 19);
 80041f4:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10);
 80041f6:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 80041f8:	02c9      	lsls	r1, r1, #11
 80041fa:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 80041fe:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8004202:	e7ee      	b.n	80041e2 <DMA2D_SetConfig+0x22>
    else if (hdma2d->Init.ColorMode == DMA2D_ARGB1555)
 8004204:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004206:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_ARGB1555)
 800420a:	d10a      	bne.n	8004222 <DMA2D_SetConfig+0x62>
      tmp2 = (tmp2 >> 19);
 800420c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11);
 800420e:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8004210:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31);
 8004212:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8004214:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 8004218:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800421c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8004220:	e7df      	b.n	80041e2 <DMA2D_SetConfig+0x22>
      tmp2 = (tmp2 >> 20);
 8004222:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12);
 8004224:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8004226:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28);
 8004228:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 800422a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800422e:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8004232:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8004236:	e7d4      	b.n	80041e2 <DMA2D_SetConfig+0x22>
    hdma2d->Instance->FGMAR = pdata;
 8004238:	60e1      	str	r1, [r4, #12]
}
 800423a:	e7d3      	b.n	80041e4 <DMA2D_SetConfig+0x24>

0800423c <HAL_DMA2D_MspInit>:
}
 800423c:	4770      	bx	lr

0800423e <HAL_DMA2D_Init>:
{ 
 800423e:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 8004240:	4604      	mov	r4, r0
 8004242:	b330      	cbz	r0, 8004292 <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004244:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8004248:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800424c:	b91b      	cbnz	r3, 8004256 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 800424e:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8004252:	f7ff fff3 	bl	800423c <HAL_DMA2D_MspInit>
  tmp = hdma2d->Instance->CR;
 8004256:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8004258:	2302      	movs	r3, #2
  tmp |= hdma2d->Init.Mode;
 800425a:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800425c:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 800425e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  tmp = hdma2d->Instance->CR;
 8004262:	6813      	ldr	r3, [r2, #0]
  tmp &= (uint32_t)~DMA2D_CR_MODE;
 8004264:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
  tmp |= hdma2d->Init.Mode;
 8004268:	430b      	orrs	r3, r1
  tmp |= hdma2d->Init.ColorMode;
 800426a:	68a1      	ldr	r1, [r4, #8]
  hdma2d->Instance->CR = tmp;
 800426c:	6013      	str	r3, [r2, #0]
  tmp = hdma2d->Instance->OPFCCR;
 800426e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
  tmp &= (uint32_t)~DMA2D_OPFCCR_CM;
 8004270:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma2d->Init.ColorMode;
 8004274:	430b      	orrs	r3, r1
  tmp |= hdma2d->Init.OutputOffset;
 8004276:	68e1      	ldr	r1, [r4, #12]
  hdma2d->Instance->OPFCCR = tmp;
 8004278:	6353      	str	r3, [r2, #52]	@ 0x34
  tmp = hdma2d->Instance->OOR;
 800427a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
  tmp &= (uint32_t)~DMA2D_OOR_LO;
 800427c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004280:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
  tmp |= hdma2d->Init.OutputOffset;
 8004284:	430b      	orrs	r3, r1
  hdma2d->Instance->OOR = tmp;
 8004286:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004288:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800428a:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800428c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 8004290:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8004292:	2001      	movs	r0, #1
 8004294:	e7fc      	b.n	8004290 <HAL_DMA2D_Init+0x52>

08004296 <HAL_DMA2D_Start>:
{
 8004296:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8004298:	f890 5038 	ldrb.w	r5, [r0, #56]	@ 0x38
 800429c:	2d01      	cmp	r5, #1
 800429e:	f04f 0502 	mov.w	r5, #2
 80042a2:	d013      	beq.n	80042cc <HAL_DMA2D_Start+0x36>
  __HAL_DMA2D_DISABLE(hdma2d);
 80042a4:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdma2d);
 80042a6:	2601      	movs	r6, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042a8:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
  __HAL_LOCK(hdma2d);
 80042ac:	f880 6038 	strb.w	r6, [r0, #56]	@ 0x38
  __HAL_DMA2D_DISABLE(hdma2d);
 80042b0:	6825      	ldr	r5, [r4, #0]
 80042b2:	f025 0501 	bic.w	r5, r5, #1
 80042b6:	6025      	str	r5, [r4, #0]
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80042b8:	9d06      	ldr	r5, [sp, #24]
 80042ba:	9500      	str	r5, [sp, #0]
 80042bc:	f7ff ff80 	bl	80041c0 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80042c0:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80042c2:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80042c4:	4333      	orrs	r3, r6
 80042c6:	6023      	str	r3, [r4, #0]
}
 80042c8:	b002      	add	sp, #8
 80042ca:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80042cc:	4628      	mov	r0, r5
 80042ce:	e7fb      	b.n	80042c8 <HAL_DMA2D_Start+0x32>

080042d0 <HAL_DMA2D_PollForTransfer>:
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0)
 80042d0:	6803      	ldr	r3, [r0, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
{
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0)
 80042d8:	07d8      	lsls	r0, r3, #31
{
 80042da:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0)
 80042dc:	d416      	bmi.n	800430c <HAL_DMA2D_PollForTransfer+0x3c>
  if((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != 0)
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	0699      	lsls	r1, r3, #26
 80042e4:	d506      	bpl.n	80042f4 <HAL_DMA2D_PollForTransfer+0x24>
    tickstart = HAL_GetTick();
 80042e6:	f7ff fd7f 	bl	8003de8 <HAL_GetTick>
 80042ea:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	06d2      	lsls	r2, r2, #27
 80042f2:	d53b      	bpl.n	800436c <HAL_DMA2D_PollForTransfer+0x9c>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma2d);
 80042f8:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80042fa:	609a      	str	r2, [r3, #8]
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);  
 80042fc:	2210      	movs	r2, #16
 80042fe:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004300:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8004302:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004306:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 800430a:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800430c:	f7ff fd6c 	bl	8003de8 <HAL_GetTick>
 8004310:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	f012 0202 	ands.w	r2, r2, #2
 800431a:	d1e0      	bne.n	80042de <HAL_DMA2D_PollForTransfer+0xe>
      tmp  = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CE);
 800431c:	6859      	ldr	r1, [r3, #4]
      tmp1 = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TE);
 800431e:	6858      	ldr	r0, [r3, #4]
      tmp  = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004320:	f001 0120 	and.w	r1, r1, #32
      tmp1 = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004324:	f000 0001 	and.w	r0, r0, #1
      if((tmp != RESET) || (tmp1 != RESET))
 8004328:	4301      	orrs	r1, r0
 800432a:	d00a      	beq.n	8004342 <HAL_DMA2D_PollForTransfer+0x72>
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800432c:	2120      	movs	r1, #32
 800432e:	6099      	str	r1, [r3, #8]
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004330:	2101      	movs	r1, #1
 8004332:	6099      	str	r1, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004334:	2304      	movs	r3, #4
        __HAL_UNLOCK(hdma2d);
 8004336:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800433a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        return HAL_ERROR;
 800433e:	2001      	movs	r0, #1
 8004340:	e7e3      	b.n	800430a <HAL_DMA2D_PollForTransfer+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 8004342:	1c6a      	adds	r2, r5, #1
 8004344:	d0e6      	beq.n	8004314 <HAL_DMA2D_PollForTransfer+0x44>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004346:	b95d      	cbnz	r5, 8004360 <HAL_DMA2D_PollForTransfer+0x90>
          __HAL_UNLOCK(hdma2d);
 8004348:	2300      	movs	r3, #0
 800434a:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800434e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          return HAL_TIMEOUT;
 8004350:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004352:	f043 0320 	orr.w	r3, r3, #32
 8004356:	63e3      	str	r3, [r4, #60]	@ 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
          return HAL_TIMEOUT;
 800435e:	e7d4      	b.n	800430a <HAL_DMA2D_PollForTransfer+0x3a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004360:	f7ff fd42 	bl	8003de8 <HAL_GetTick>
 8004364:	1b80      	subs	r0, r0, r6
 8004366:	42a8      	cmp	r0, r5
 8004368:	d9d3      	bls.n	8004312 <HAL_DMA2D_PollForTransfer+0x42>
 800436a:	e7ed      	b.n	8004348 <HAL_DMA2D_PollForTransfer+0x78>
      if((__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CAE) != RESET))
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	0710      	lsls	r0, r2, #28
 8004370:	d505      	bpl.n	800437e <HAL_DMA2D_PollForTransfer+0xae>
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004372:	2208      	movs	r2, #8
 8004374:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004376:	2304      	movs	r3, #4
 8004378:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        return HAL_ERROR;      
 800437c:	e7df      	b.n	800433e <HAL_DMA2D_PollForTransfer+0x6e>
      if(Timeout != HAL_MAX_DELAY)
 800437e:	1c69      	adds	r1, r5, #1
 8004380:	d0b5      	beq.n	80042ee <HAL_DMA2D_PollForTransfer+0x1e>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004382:	2d00      	cmp	r5, #0
 8004384:	d0e3      	beq.n	800434e <HAL_DMA2D_PollForTransfer+0x7e>
 8004386:	f7ff fd2f 	bl	8003de8 <HAL_GetTick>
 800438a:	1b80      	subs	r0, r0, r6
 800438c:	42a8      	cmp	r0, r5
 800438e:	d9ad      	bls.n	80042ec <HAL_DMA2D_PollForTransfer+0x1c>
 8004390:	e7dd      	b.n	800434e <HAL_DMA2D_PollForTransfer+0x7e>
	...

08004394 <HAL_DMA2D_ConfigLayer>:
{ 
 8004394:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8004396:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
{ 
 800439a:	4603      	mov	r3, r0
 800439c:	2002      	movs	r0, #2
  __HAL_LOCK(hdma2d);
 800439e:	2a01      	cmp	r2, #1
 80043a0:	d030      	beq.n	8004404 <HAL_DMA2D_ConfigLayer+0x70>
 80043a2:	2201      	movs	r2, #1
 80043a4:	4c2e      	ldr	r4, [pc, #184]	@ (8004460 <HAL_DMA2D_ConfigLayer+0xcc>)
  hdma2d->State = HAL_DMA2D_STATE_BUSY; 
 80043a6:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39
  __HAL_LOCK(hdma2d);
 80043aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    tmp = hdma2d->Instance->BGPFCCR;
 80043ae:	681a      	ldr	r2, [r3, #0]
  if(LayerIdx == 0)
 80043b0:	bb49      	cbnz	r1, 8004406 <HAL_DMA2D_ConfigLayer+0x72>
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80043b2:	69df      	ldr	r7, [r3, #28]
    tmp = hdma2d->Instance->BGPFCCR;
 80043b4:	6a50      	ldr	r0, [r2, #36]	@ 0x24
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80043b6:	f1a7 0509 	sub.w	r5, r7, #9
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 80043ba:	6a19      	ldr	r1, [r3, #32]
    tmp &= (uint32_t)~(DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA); 
 80043bc:	4020      	ands	r0, r4
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 80043be:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80043c0:	2d01      	cmp	r5, #1
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 80043c2:	ea4f 4101 	mov.w	r1, r1, lsl #16
 80043c6:	bf96      	itet	ls
 80043c8:	f004 467f 	andls.w	r6, r4, #4278190080	@ 0xff000000
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 80043cc:	ea41 6104 	orrhi.w	r1, r1, r4, lsl #24
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 80043d0:	4331      	orrls	r1, r6
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80043d2:	2d01      	cmp	r5, #1
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 80043d4:	ea41 0107 	orr.w	r1, r1, r7
 80043d8:	ea41 0100 	orr.w	r1, r1, r0
    tmp |= pLayerCfg->InputOffset;
 80043dc:	6998      	ldr	r0, [r3, #24]
    hdma2d->Instance->BGPFCCR = tmp; 
 80043de:	6251      	str	r1, [r2, #36]	@ 0x24
    tmp = hdma2d->Instance->BGOR;
 80043e0:	6991      	ldr	r1, [r2, #24]
    tmp &= (uint32_t)~DMA2D_BGOR_LO; 
 80043e2:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
 80043e6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
    tmp |= pLayerCfg->InputOffset;
 80043ea:	ea41 0100 	orr.w	r1, r1, r0
    hdma2d->Instance->BGOR = tmp;
 80043ee:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80043f0:	d802      	bhi.n	80043f8 <HAL_DMA2D_ConfigLayer+0x64>
      tmp = ((pLayerCfg->InputAlpha) & 0x00FFFFFF);
 80043f2:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
      hdma2d->Instance->BGCOLR = tmp;
 80043f6:	6294      	str	r4, [r2, #40]	@ 0x28
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80043f8:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdma2d);  
 80043fa:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80043fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);  
 8004400:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
}
 8004404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8004406:	010d      	lsls	r5, r1, #4
    tmp = hdma2d->Instance->FGPFCCR;
 8004408:	69d0      	ldr	r0, [r2, #28]
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 800440a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    tmp &= (uint32_t)~(DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA); 
 800440e:	4004      	ands	r4, r0
    tmp |= pLayerCfg->InputOffset;
 8004410:	441d      	add	r5, r3
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8004412:	f8d1 c01c 	ldr.w	ip, [r1, #28]
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8004416:	6a08      	ldr	r0, [r1, #32]
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8004418:	f1ac 0609 	sub.w	r6, ip, #9
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 800441c:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
 800441e:	0400      	lsls	r0, r0, #16
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8004420:	2e01      	cmp	r6, #1
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8004422:	bf95      	itete	ls
 8004424:	f007 417f 	andls.w	r1, r7, #4278190080	@ 0xff000000
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 8004428:	ea40 6007 	orrhi.w	r0, r0, r7, lsl #24
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 800442c:	4301      	orrls	r1, r0
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 800442e:	ea40 000c 	orrhi.w	r0, r0, ip
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8004432:	bf94      	ite	ls
 8004434:	ea41 010c 	orrls.w	r1, r1, ip
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 8004438:	4304      	orrhi	r4, r0
    tmp |= pLayerCfg->InputOffset;
 800443a:	69a8      	ldr	r0, [r5, #24]
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 800443c:	bf98      	it	ls
 800443e:	430c      	orrls	r4, r1
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8004440:	2e01      	cmp	r6, #1
    hdma2d->Instance->FGPFCCR = tmp; 
 8004442:	61d4      	str	r4, [r2, #28]
    tmp = hdma2d->Instance->FGOR;
 8004444:	6911      	ldr	r1, [r2, #16]
    tmp &= (uint32_t)~DMA2D_FGOR_LO; 
 8004446:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
 800444a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
    tmp |= pLayerCfg->InputOffset;
 800444e:	ea41 0100 	orr.w	r1, r1, r0
    hdma2d->Instance->FGOR = tmp;
 8004452:	6111      	str	r1, [r2, #16]
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8004454:	d8d0      	bhi.n	80043f8 <HAL_DMA2D_ConfigLayer+0x64>
      tmp = ((pLayerCfg->InputAlpha) & 0x00FFFFFF);
 8004456:	f027 477f 	bic.w	r7, r7, #4278190080	@ 0xff000000
      hdma2d->Instance->FGCOLR = tmp;
 800445a:	6217      	str	r7, [r2, #32]
 800445c:	e7cc      	b.n	80043f8 <HAL_DMA2D_ConfigLayer+0x64>
 800445e:	bf00      	nop
 8004460:	00fcfff0 	.word	0x00fcfff0

08004464 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004468:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800446a:	f04f 0901 	mov.w	r9, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800446e:	f8df 81c0 	ldr.w	r8, [pc, #448]	@ 8004630 <HAL_GPIO_Init+0x1cc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004472:	4a6d      	ldr	r2, [pc, #436]	@ (8004628 <HAL_GPIO_Init+0x1c4>)
    ioposition = ((uint32_t)0x01) << position;
 8004474:	fa09 fa03 	lsl.w	sl, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004478:	680c      	ldr	r4, [r1, #0]
 800447a:	ea0a 0504 	and.w	r5, sl, r4
    if(iocurrent == ioposition)
 800447e:	ea3a 0404 	bics.w	r4, sl, r4
 8004482:	f040 80b7 	bne.w	80045f4 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004486:	684c      	ldr	r4, [r1, #4]
 8004488:	f024 0e10 	bic.w	lr, r4, #16
 800448c:	f1be 0f02 	cmp.w	lr, #2
 8004490:	d114      	bne.n	80044bc <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3];
 8004492:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004496:	f003 0b07 	and.w	fp, r3, #7
 800449a:	270f      	movs	r7, #15
 800449c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80044a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80044a4:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80044a8:	fa07 f70b 	lsl.w	r7, r7, fp
 80044ac:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80044b0:	690e      	ldr	r6, [r1, #16]
 80044b2:	fa06 f60b 	lsl.w	r6, r6, fp
 80044b6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80044b8:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 80044bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80044c0:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 80044c2:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044c6:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80044ca:	fa06 f70c 	lsl.w	r7, r6, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044ce:	f1be 0f01 	cmp.w	lr, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80044d2:	ea2b 0b07 	bic.w	fp, fp, r7
 80044d6:	ea6f 0607 	mvn.w	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80044da:	f004 0703 	and.w	r7, r4, #3
 80044de:	fa07 f70c 	lsl.w	r7, r7, ip
 80044e2:	ea47 070b 	orr.w	r7, r7, fp
      GPIOx->MODER = temp;
 80044e6:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044e8:	d811      	bhi.n	800450e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->OSPEEDR; 
 80044ea:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044ec:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80044f0:	68cf      	ldr	r7, [r1, #12]
 80044f2:	fa07 f70c 	lsl.w	r7, r7, ip
 80044f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80044fa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80044fc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044fe:	ea27 0e0a 	bic.w	lr, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004502:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8004506:	409f      	lsls	r7, r3
 8004508:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800450c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800450e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004510:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004512:	688e      	ldr	r6, [r1, #8]
 8004514:	fa06 f60c 	lsl.w	r6, r6, ip
 8004518:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 800451a:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800451c:	00e6      	lsls	r6, r4, #3
 800451e:	d569      	bpl.n	80045f4 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004520:	2600      	movs	r6, #0
 8004522:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004526:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800452a:	9601      	str	r6, [sp, #4]
 800452c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8004530:	f8d8 6044 	ldr.w	r6, [r8, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004534:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004538:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800453c:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 8004540:	f8c8 6044 	str.w	r6, [r8, #68]	@ 0x44
 8004544:	f8d8 6044 	ldr.w	r6, [r8, #68]	@ 0x44
 8004548:	f406 4680 	and.w	r6, r6, #16384	@ 0x4000
 800454c:	9601      	str	r6, [sp, #4]
 800454e:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004550:	260f      	movs	r6, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8004552:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004556:	fa06 f60c 	lsl.w	r6, r6, ip
 800455a:	ea2e 0e06 	bic.w	lr, lr, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800455e:	4e33      	ldr	r6, [pc, #204]	@ (800462c <HAL_GPIO_Init+0x1c8>)
 8004560:	42b0      	cmp	r0, r6
 8004562:	d04e      	beq.n	8004602 <HAL_GPIO_Init+0x19e>
 8004564:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004568:	42b0      	cmp	r0, r6
 800456a:	d04c      	beq.n	8004606 <HAL_GPIO_Init+0x1a2>
 800456c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004570:	42b0      	cmp	r0, r6
 8004572:	d04a      	beq.n	800460a <HAL_GPIO_Init+0x1a6>
 8004574:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004578:	42b0      	cmp	r0, r6
 800457a:	d048      	beq.n	800460e <HAL_GPIO_Init+0x1aa>
 800457c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004580:	42b0      	cmp	r0, r6
 8004582:	d046      	beq.n	8004612 <HAL_GPIO_Init+0x1ae>
 8004584:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004588:	42b0      	cmp	r0, r6
 800458a:	d044      	beq.n	8004616 <HAL_GPIO_Init+0x1b2>
 800458c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004590:	42b0      	cmp	r0, r6
 8004592:	d042      	beq.n	800461a <HAL_GPIO_Init+0x1b6>
 8004594:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004598:	42b0      	cmp	r0, r6
 800459a:	d040      	beq.n	800461e <HAL_GPIO_Init+0x1ba>
 800459c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80045a0:	42b0      	cmp	r0, r6
 80045a2:	d03e      	beq.n	8004622 <HAL_GPIO_Init+0x1be>
 80045a4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80045a8:	42b0      	cmp	r0, r6
 80045aa:	bf14      	ite	ne
 80045ac:	260a      	movne	r6, #10
 80045ae:	2609      	moveq	r6, #9
 80045b0:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045b4:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045b8:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80045bc:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80045be:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 80045c2:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80045c4:	bf0c      	ite	eq
 80045c6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80045c8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045ca:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
        EXTI->IMR = temp;
 80045ce:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80045d0:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80045d2:	bf0c      	ite	eq
 80045d4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80045d6:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045d8:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
        EXTI->EMR = temp;
 80045dc:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80045de:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80045e0:	bf0c      	ite	eq
 80045e2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80045e4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045e6:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80045e8:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80045ea:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80045ec:	bf54      	ite	pl
 80045ee:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80045f0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80045f2:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80045f4:	3301      	adds	r3, #1
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	f47f af3c 	bne.w	8004474 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 80045fc:	b003      	add	sp, #12
 80045fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004602:	2600      	movs	r6, #0
 8004604:	e7d4      	b.n	80045b0 <HAL_GPIO_Init+0x14c>
 8004606:	2601      	movs	r6, #1
 8004608:	e7d2      	b.n	80045b0 <HAL_GPIO_Init+0x14c>
 800460a:	2602      	movs	r6, #2
 800460c:	e7d0      	b.n	80045b0 <HAL_GPIO_Init+0x14c>
 800460e:	2603      	movs	r6, #3
 8004610:	e7ce      	b.n	80045b0 <HAL_GPIO_Init+0x14c>
 8004612:	2604      	movs	r6, #4
 8004614:	e7cc      	b.n	80045b0 <HAL_GPIO_Init+0x14c>
 8004616:	2605      	movs	r6, #5
 8004618:	e7ca      	b.n	80045b0 <HAL_GPIO_Init+0x14c>
 800461a:	2606      	movs	r6, #6
 800461c:	e7c8      	b.n	80045b0 <HAL_GPIO_Init+0x14c>
 800461e:	2607      	movs	r6, #7
 8004620:	e7c6      	b.n	80045b0 <HAL_GPIO_Init+0x14c>
 8004622:	2608      	movs	r6, #8
 8004624:	e7c4      	b.n	80045b0 <HAL_GPIO_Init+0x14c>
 8004626:	bf00      	nop
 8004628:	40013c00 	.word	0x40013c00
 800462c:	40020000 	.word	0x40020000
 8004630:	40023800 	.word	0x40023800

08004634 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004634:	6903      	ldr	r3, [r0, #16]
 8004636:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004638:	bf14      	ite	ne
 800463a:	2001      	movne	r0, #1
 800463c:	2000      	moveq	r0, #0
 800463e:	4770      	bx	lr

08004640 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004640:	b10a      	cbz	r2, 8004646 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004642:	6181      	str	r1, [r0, #24]
  }
}
 8004644:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004646:	0409      	lsls	r1, r1, #16
 8004648:	e7fb      	b.n	8004642 <HAL_GPIO_WritePin+0x2>

0800464a <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800464a:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
  
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800464c:	6804      	ldr	r4, [r0, #0]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800464e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004652:	9d03      	ldr	r5, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 8004654:	6860      	ldr	r0, [r4, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8004656:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8004658:	f020 707f 	bic.w	r0, r0, #66846720	@ 0x3fc0000
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800465c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8004660:	f420 3059 	bic.w	r0, r0, #222208	@ 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8004664:	430b      	orrs	r3, r1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8004666:	f420 707f 	bic.w	r0, r0, #1020	@ 0x3fc
 800466a:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800466e:	4303      	orrs	r3, r0
    (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8004670:	6063      	str	r3, [r4, #4]
}  
 8004672:	bd30      	pop	{r4, r5, pc}

08004674 <I2C_IsAcknowledgeFailed>:
{
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	4604      	mov	r4, r0
 8004678:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800467a:	f7ff fbb5 	bl	8003de8 <HAL_GetTick>
 800467e:	4606      	mov	r6, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	6998      	ldr	r0, [r3, #24]
 8004684:	f010 0010 	ands.w	r0, r0, #16
 8004688:	d110      	bne.n	80046ac <I2C_IsAcknowledgeFailed+0x38>
}
 800468a:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 800468c:	1c68      	adds	r0, r5, #1
 800468e:	d00e      	beq.n	80046ae <I2C_IsAcknowledgeFailed+0x3a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004690:	b125      	cbz	r5, 800469c <I2C_IsAcknowledgeFailed+0x28>
 8004692:	f7ff fba9 	bl	8003de8 <HAL_GetTick>
 8004696:	1b80      	subs	r0, r0, r6
 8004698:	42a8      	cmp	r0, r5
 800469a:	d907      	bls.n	80046ac <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State= HAL_I2C_STATE_READY;
 800469c:	2301      	movs	r3, #1
          return HAL_TIMEOUT;
 800469e:	2003      	movs	r0, #3
          hi2c->State= HAL_I2C_STATE_READY;
 80046a0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hi2c);
 80046a4:	2300      	movs	r3, #0
 80046a6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          return HAL_TIMEOUT;
 80046aa:	e7ee      	b.n	800468a <I2C_IsAcknowledgeFailed+0x16>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	699a      	ldr	r2, [r3, #24]
 80046b0:	0691      	lsls	r1, r2, #26
 80046b2:	d5eb      	bpl.n	800468c <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b4:	2210      	movs	r2, #16
 80046b6:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b8:	2220      	movs	r2, #32
 80046ba:	61da      	str	r2, [r3, #28]
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	07d2      	lsls	r2, r2, #31
 80046c0:	d401      	bmi.n	80046c6 <I2C_IsAcknowledgeFailed+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046c2:	2201      	movs	r2, #1
 80046c4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80046c6:	685a      	ldr	r2, [r3, #4]
    hi2c->State= HAL_I2C_STATE_READY;
 80046c8:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80046ca:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80046ce:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80046d2:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80046d6:	f022 0201 	bic.w	r2, r2, #1
 80046da:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80046dc:	2304      	movs	r3, #4
 80046de:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_UNLOCK(hi2c);
 80046e0:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 80046e2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hi2c);
 80046e6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80046ea:	e7ce      	b.n	800468a <I2C_IsAcknowledgeFailed+0x16>

080046ec <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	4604      	mov	r4, r0
 80046f0:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80046f2:	f7ff fb79 	bl	8003de8 <HAL_GetTick>
 80046f6:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	079b      	lsls	r3, r3, #30
 80046fe:	d501      	bpl.n	8004704 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
  return HAL_OK;      
 8004700:	2000      	movs	r0, #0
 8004702:	e012      	b.n	800472a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8004704:	4629      	mov	r1, r5
 8004706:	4620      	mov	r0, r4
 8004708:	f7ff ffb4 	bl	8004674 <I2C_IsAcknowledgeFailed>
 800470c:	b9a0      	cbnz	r0, 8004738 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(Timeout != HAL_MAX_DELAY)
 800470e:	1c6a      	adds	r2, r5, #1
 8004710:	d0f2      	beq.n	80046f8 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004712:	b95d      	cbnz	r5, 800472c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004714:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        return HAL_TIMEOUT;
 8004716:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004718:	f043 0320 	orr.w	r3, r3, #32
 800471c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 800471e:	2301      	movs	r3, #1
 8004720:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hi2c);
 8004724:	2300      	movs	r3, #0
 8004726:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800472a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800472c:	f7ff fb5c 	bl	8003de8 <HAL_GetTick>
 8004730:	1b80      	subs	r0, r0, r6
 8004732:	42a8      	cmp	r0, r5
 8004734:	d9e0      	bls.n	80046f8 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 8004736:	e7ed      	b.n	8004714 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      return HAL_ERROR;
 8004738:	2001      	movs	r0, #1
 800473a:	e7f6      	b.n	800472a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>

0800473c <I2C_WaitOnFlagUntilTimeout>:
{  
 800473c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004740:	4690      	mov	r8, r2
 8004742:	4605      	mov	r5, r0
 8004744:	460e      	mov	r6, r1
 8004746:	461c      	mov	r4, r3
  uint32_t tickstart = HAL_GetTick();
 8004748:	f7ff fb4e 	bl	8003de8 <HAL_GetTick>
 800474c:	4607      	mov	r7, r0
  if(Status == RESET)
 800474e:	f1b8 0f00 	cmp.w	r8, #0
 8004752:	d01d      	beq.n	8004790 <I2C_WaitOnFlagUntilTimeout+0x54>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8004754:	682a      	ldr	r2, [r5, #0]
 8004756:	6993      	ldr	r3, [r2, #24]
 8004758:	ea36 0303 	bics.w	r3, r6, r3
 800475c:	d11d      	bne.n	800479a <I2C_WaitOnFlagUntilTimeout+0x5e>
      if(Timeout != HAL_MAX_DELAY)
 800475e:	1c63      	adds	r3, r4, #1
 8004760:	d0f9      	beq.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004762:	b16c      	cbz	r4, 8004780 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004764:	f7ff fb40 	bl	8003de8 <HAL_GetTick>
 8004768:	1bc0      	subs	r0, r0, r7
 800476a:	42a0      	cmp	r0, r4
 800476c:	d9f2      	bls.n	8004754 <I2C_WaitOnFlagUntilTimeout+0x18>
 800476e:	e007      	b.n	8004780 <I2C_WaitOnFlagUntilTimeout+0x44>
      if(Timeout != HAL_MAX_DELAY)
 8004770:	1c61      	adds	r1, r4, #1
 8004772:	d00e      	beq.n	8004792 <I2C_WaitOnFlagUntilTimeout+0x56>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004774:	b124      	cbz	r4, 8004780 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004776:	f7ff fb37 	bl	8003de8 <HAL_GetTick>
 800477a:	1bc0      	subs	r0, r0, r7
 800477c:	42a0      	cmp	r0, r4
 800477e:	d907      	bls.n	8004790 <I2C_WaitOnFlagUntilTimeout+0x54>
          hi2c->State= HAL_I2C_STATE_READY;
 8004780:	2301      	movs	r3, #1
          return HAL_TIMEOUT;
 8004782:	2003      	movs	r0, #3
          hi2c->State= HAL_I2C_STATE_READY;
 8004784:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          __HAL_UNLOCK(hi2c);
 8004788:	2300      	movs	r3, #0
 800478a:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
 800478e:	e005      	b.n	800479c <I2C_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004790:	682a      	ldr	r2, [r5, #0]
 8004792:	6993      	ldr	r3, [r2, #24]
 8004794:	ea36 0303 	bics.w	r3, r6, r3
 8004798:	d1ea      	bne.n	8004770 <I2C_WaitOnFlagUntilTimeout+0x34>
  return HAL_OK;
 800479a:	2000      	movs	r0, #0
}
 800479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080047a0 <I2C_RequestMemoryWrite>:
{
 80047a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047a2:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
{
 80047a8:	4604      	mov	r4, r0
 80047aa:	9f08      	ldr	r7, [sp, #32]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047ac:	9300      	str	r3, [sp, #0]
{
 80047ae:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047b4:	b2f2      	uxtb	r2, r6
 80047b6:	f7ff ff48 	bl	800464a <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80047ba:	4639      	mov	r1, r7
 80047bc:	4620      	mov	r0, r4
 80047be:	f7ff ff95 	bl	80046ec <I2C_WaitOnTXISFlagUntilTimeout>
 80047c2:	b138      	cbz	r0, 80047d4 <I2C_RequestMemoryWrite+0x34>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d002      	beq.n	80047d0 <I2C_RequestMemoryWrite+0x30>
      return HAL_TIMEOUT;
 80047ca:	2003      	movs	r0, #3
}
 80047cc:	b003      	add	sp, #12
 80047ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80047d0:	2001      	movs	r0, #1
 80047d2:	e7fb      	b.n	80047cc <I2C_RequestMemoryWrite+0x2c>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047d4:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);    
 80047d6:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047d8:	d10a      	bne.n	80047f0 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 80047da:	b2ed      	uxtb	r5, r5
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80047dc:	2200      	movs	r2, #0
 80047de:	2180      	movs	r1, #128	@ 0x80
 80047e0:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 80047e2:	629d      	str	r5, [r3, #40]	@ 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80047e4:	463b      	mov	r3, r7
 80047e6:	f7ff ffa9 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d0ee      	beq.n	80047cc <I2C_RequestMemoryWrite+0x2c>
 80047ee:	e7ec      	b.n	80047ca <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 80047f0:	0a2a      	lsrs	r2, r5, #8
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80047f2:	4639      	mov	r1, r7
 80047f4:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 80047f6:	629a      	str	r2, [r3, #40]	@ 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80047f8:	f7ff ff78 	bl	80046ec <I2C_WaitOnTXISFlagUntilTimeout>
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d1e1      	bne.n	80047c4 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	e7ea      	b.n	80047da <I2C_RequestMemoryWrite+0x3a>

08004804 <I2C_RequestMemoryRead>:
{
 8004804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004806:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004808:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
{
 800480c:	4604      	mov	r4, r0
 800480e:	9f08      	ldr	r7, [sp, #32]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004810:	9300      	str	r3, [sp, #0]
{
 8004812:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004814:	2300      	movs	r3, #0
 8004816:	b2f2      	uxtb	r2, r6
 8004818:	f7ff ff17 	bl	800464a <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800481c:	4639      	mov	r1, r7
 800481e:	4620      	mov	r0, r4
 8004820:	f7ff ff64 	bl	80046ec <I2C_WaitOnTXISFlagUntilTimeout>
 8004824:	b138      	cbz	r0, 8004836 <I2C_RequestMemoryRead+0x32>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004826:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004828:	2b04      	cmp	r3, #4
 800482a:	d002      	beq.n	8004832 <I2C_RequestMemoryRead+0x2e>
      return HAL_TIMEOUT;
 800482c:	2003      	movs	r0, #3
}
 800482e:	b003      	add	sp, #12
 8004830:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8004832:	2001      	movs	r0, #1
 8004834:	e7fb      	b.n	800482e <I2C_RequestMemoryRead+0x2a>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004836:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);    
 8004838:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800483a:	d10a      	bne.n	8004852 <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 800483c:	b2ed      	uxtb	r5, r5
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 800483e:	2200      	movs	r2, #0
 8004840:	2140      	movs	r1, #64	@ 0x40
 8004842:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8004844:	629d      	str	r5, [r3, #40]	@ 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 8004846:	463b      	mov	r3, r7
 8004848:	f7ff ff78 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 800484c:	2800      	cmp	r0, #0
 800484e:	d0ee      	beq.n	800482e <I2C_RequestMemoryRead+0x2a>
 8004850:	e7ec      	b.n	800482c <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8004852:	0a2a      	lsrs	r2, r5, #8
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004854:	4639      	mov	r1, r7
 8004856:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8004858:	629a      	str	r2, [r3, #40]	@ 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800485a:	f7ff ff47 	bl	80046ec <I2C_WaitOnTXISFlagUntilTimeout>
 800485e:	2800      	cmp	r0, #0
 8004860:	d1e1      	bne.n	8004826 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	e7ea      	b.n	800483c <I2C_RequestMemoryRead+0x38>

08004866 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 8004866:	b570      	push	{r4, r5, r6, lr}
 8004868:	4604      	mov	r4, r0
 800486a:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800486c:	f7ff fabc 	bl	8003de8 <HAL_GetTick>
 8004870:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	069b      	lsls	r3, r3, #26
 8004878:	d501      	bpl.n	800487e <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
 800487a:	2000      	movs	r0, #0
 800487c:	e010      	b.n	80048a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800487e:	4629      	mov	r1, r5
 8004880:	4620      	mov	r0, r4
 8004882:	f7ff fef7 	bl	8004674 <I2C_IsAcknowledgeFailed>
 8004886:	b990      	cbnz	r0, 80048ae <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004888:	b95d      	cbnz	r5, 80048a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800488a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 800488c:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800488e:	f043 0320 	orr.w	r3, r3, #32
 8004892:	63a3      	str	r3, [r4, #56]	@ 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8004894:	2301      	movs	r3, #1
 8004896:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hi2c);
 800489a:	2300      	movs	r3, #0
 800489c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 80048a0:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80048a2:	f7ff faa1 	bl	8003de8 <HAL_GetTick>
 80048a6:	1b80      	subs	r0, r0, r6
 80048a8:	42a8      	cmp	r0, r5
 80048aa:	d9e2      	bls.n	8004872 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 80048ac:	e7ed      	b.n	800488a <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
      return HAL_ERROR;
 80048ae:	2001      	movs	r0, #1
 80048b0:	e7f6      	b.n	80048a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>

080048b2 <HAL_I2C_MspInit>:
}
 80048b2:	4770      	bx	lr

080048b4 <HAL_I2C_Init>:
{ 
 80048b4:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 80048b6:	4604      	mov	r4, r0
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d044      	beq.n	8004946 <HAL_I2C_Init+0x92>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80048bc:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80048c0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80048c4:	b91b      	cbnz	r3, 80048ce <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80048c6:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
    HAL_I2C_MspInit(hi2c);
 80048ca:	f7ff fff2 	bl	80048b2 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80048ce:	2302      	movs	r3, #2
 80048d0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_I2C_DISABLE(hi2c);
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	f022 0201 	bic.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048de:	6862      	ldr	r2, [r4, #4]
 80048e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80048e4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048ec:	609a      	str	r2, [r3, #8]
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048ee:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 80048f2:	b312      	cbz	r2, 800493a <HAL_I2C_Init+0x86>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048f4:	2901      	cmp	r1, #1
 80048f6:	d11d      	bne.n	8004934 <HAL_I2C_Init+0x80>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048fc:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048fe:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004900:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004902:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004906:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800490a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800490c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8004910:	430a      	orrs	r2, r1
 8004912:	69a1      	ldr	r1, [r4, #24]
 8004914:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004918:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800491a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800492a:	2301      	movs	r3, #1
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800492c:	63a0      	str	r0, [r4, #56]	@ 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 800492e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8004932:	bd10      	pop	{r4, pc}
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004934:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004938:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800493a:	2902      	cmp	r1, #2
 800493c:	d1df      	bne.n	80048fe <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800493e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004942:	605a      	str	r2, [r3, #4]
 8004944:	e7db      	b.n	80048fe <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004946:	2001      	movs	r0, #1
 8004948:	e7f3      	b.n	8004932 <HAL_I2C_Init+0x7e>

0800494a <HAL_I2C_MspDeInit>:
 __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800494a:	4770      	bx	lr

0800494c <HAL_I2C_DeInit>:
{
 800494c:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800494e:	4604      	mov	r4, r0
 8004950:	b180      	cbz	r0, 8004974 <HAL_I2C_DeInit+0x28>
  __HAL_I2C_DISABLE(hi2c);
 8004952:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004954:	2302      	movs	r3, #2
 8004956:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  __HAL_I2C_DISABLE(hi2c);
 800495a:	6813      	ldr	r3, [r2, #0]
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004962:	f7ff fff2 	bl	800494a <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004966:	2000      	movs	r0, #0
 8004968:	63a0      	str	r0, [r4, #56]	@ 0x38
  __HAL_UNLOCK(hi2c);
 800496a:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  hi2c->State = HAL_I2C_STATE_RESET;
 800496e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8004972:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004974:	2001      	movs	r0, #1
 8004976:	e7fc      	b.n	8004972 <HAL_I2C_DeInit+0x26>

08004978 <HAL_I2C_Mem_Write>:
{
 8004978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800497c:	f890 7035 	ldrb.w	r7, [r0, #53]	@ 0x35
{
 8004980:	4604      	mov	r4, r0
 8004982:	4688      	mov	r8, r1
 8004984:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004988:	2f01      	cmp	r7, #1
{
 800498a:	f8bd 5034 	ldrh.w	r5, [sp, #52]	@ 0x34
 800498e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004992:	b2fe      	uxtb	r6, r7
 8004994:	f040 8085 	bne.w	8004aa2 <HAL_I2C_Mem_Write+0x12a>
    if((pData == NULL) || (Size == 0)) 
 8004998:	f1b9 0f00 	cmp.w	r9, #0
 800499c:	d01c      	beq.n	80049d8 <HAL_I2C_Mem_Write+0x60>
 800499e:	b1dd      	cbz	r5, 80049d8 <HAL_I2C_Mem_Write+0x60>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80049a0:	6807      	ldr	r7, [r0, #0]
 80049a2:	69bf      	ldr	r7, [r7, #24]
 80049a4:	f417 4700 	ands.w	r7, r7, #32768	@ 0x8000
 80049a8:	d17b      	bne.n	8004aa2 <HAL_I2C_Mem_Write+0x12a>
    __HAL_LOCK(hi2c);
 80049aa:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
 80049ae:	f1bc 0f01 	cmp.w	ip, #1
 80049b2:	d076      	beq.n	8004aa2 <HAL_I2C_Mem_Write+0x12a>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 80049b4:	f04f 0c52 	mov.w	ip, #82	@ 0x52
    __HAL_LOCK(hi2c);
 80049b8:	f880 6034 	strb.w	r6, [r0, #52]	@ 0x34
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 80049bc:	f880 c035 	strb.w	ip, [r0, #53]	@ 0x35
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c0:	6387      	str	r7, [r0, #56]	@ 0x38
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 80049c2:	f8cd a000 	str.w	sl, [sp]
 80049c6:	f7ff feeb 	bl	80047a0 <I2C_RequestMemoryWrite>
 80049ca:	b148      	cbz	r0, 80049e0 <HAL_I2C_Mem_Write+0x68>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        __HAL_UNLOCK(hi2c);
 80049ce:	f884 7034 	strb.w	r7, [r4, #52]	@ 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d000      	beq.n	80049d8 <HAL_I2C_Mem_Write+0x60>
        return HAL_TIMEOUT;
 80049d6:	2603      	movs	r6, #3
}
 80049d8:	4630      	mov	r0, r6
 80049da:	b003      	add	sp, #12
 80049dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(Size > 255)
 80049e0:	2dff      	cmp	r5, #255	@ 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049e2:	9000      	str	r0, [sp, #0]
    if(Size > 255)
 80049e4:	d910      	bls.n	8004a08 <HAL_I2C_Mem_Write+0x90>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049e6:	22ff      	movs	r2, #255	@ 0xff
 80049e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049ec:	4641      	mov	r1, r8
 80049ee:	4620      	mov	r0, r4
      Sizetmp = 255;
 80049f0:	4617      	mov	r7, r2
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049f2:	f7ff fe2a 	bl	800464a <I2C_TransferConfig>
      Sizetmp = 255;
 80049f6:	3d01      	subs	r5, #1
 80049f8:	b2ad      	uxth	r5, r5
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80049fa:	4651      	mov	r1, sl
 80049fc:	4620      	mov	r0, r4
 80049fe:	f7ff fe75 	bl	80046ec <I2C_WaitOnTXISFlagUntilTimeout>
 8004a02:	b150      	cbz	r0, 8004a1a <HAL_I2C_Mem_Write+0xa2>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a04:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004a06:	e7e4      	b.n	80049d2 <HAL_I2C_Mem_Write+0x5a>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a0c:	b2ea      	uxtb	r2, r5
 8004a0e:	4641      	mov	r1, r8
 8004a10:	4620      	mov	r0, r4
      Sizetmp = Size;
 8004a12:	462f      	mov	r7, r5
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a14:	f7ff fe19 	bl	800464a <I2C_TransferConfig>
      Sizetmp = Size;
 8004a18:	e7ed      	b.n	80049f6 <HAL_I2C_Mem_Write+0x7e>
      hi2c->Instance->TXDR = (*pData++);
 8004a1a:	6823      	ldr	r3, [r4, #0]
      if((Sizetmp == 0)&&(Size!=0))
 8004a1c:	3f01      	subs	r7, #1
      hi2c->Instance->TXDR = (*pData++);
 8004a1e:	f819 2b01 	ldrb.w	r2, [r9], #1
 8004a22:	629a      	str	r2, [r3, #40]	@ 0x28
      if((Sizetmp == 0)&&(Size!=0))
 8004a24:	d118      	bne.n	8004a58 <HAL_I2C_Mem_Write+0xe0>
 8004a26:	fa1f fb85 	uxth.w	fp, r5
 8004a2a:	f1bb 0f00 	cmp.w	fp, #0
 8004a2e:	d015      	beq.n	8004a5c <HAL_I2C_Mem_Write+0xe4>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8004a30:	4653      	mov	r3, sl
 8004a32:	463a      	mov	r2, r7
 8004a34:	2180      	movs	r1, #128	@ 0x80
 8004a36:	4620      	mov	r0, r4
 8004a38:	f7ff fe80 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d1ca      	bne.n	80049d6 <HAL_I2C_Mem_Write+0x5e>
        if(Size > 255)
 8004a40:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a44:	9700      	str	r7, [sp, #0]
        if(Size > 255)
 8004a46:	d923      	bls.n	8004a90 <HAL_I2C_Mem_Write+0x118>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a48:	22ff      	movs	r2, #255	@ 0xff
 8004a4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a4e:	4641      	mov	r1, r8
 8004a50:	4620      	mov	r0, r4
          Sizetmp = 255;
 8004a52:	4617      	mov	r7, r2
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a54:	f7ff fdf9 	bl	800464a <I2C_TransferConfig>
    }while(Size > 0);
 8004a58:	3d01      	subs	r5, #1
 8004a5a:	d2ce      	bcs.n	80049fa <HAL_I2C_Mem_Write+0x82>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8004a5c:	2119      	movs	r1, #25
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f7ff ff01 	bl	8004866 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d1cd      	bne.n	8004a04 <HAL_I2C_Mem_Write+0x8c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	2220      	movs	r2, #32
    return HAL_OK;
 8004a6c:	4606      	mov	r6, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a6e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8004a76:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8004a7a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 8004a84:	2301      	movs	r3, #1
    __HAL_UNLOCK(hi2c);
 8004a86:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
    hi2c->State = HAL_I2C_STATE_READY; 	  
 8004a8a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_OK;
 8004a8e:	e7a3      	b.n	80049d8 <HAL_I2C_Mem_Write+0x60>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a94:	b2ea      	uxtb	r2, r5
 8004a96:	4641      	mov	r1, r8
 8004a98:	4620      	mov	r0, r4
          Sizetmp = Size;
 8004a9a:	462f      	mov	r7, r5
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a9c:	f7ff fdd5 	bl	800464a <I2C_TransferConfig>
          Sizetmp = Size;
 8004aa0:	e7da      	b.n	8004a58 <HAL_I2C_Mem_Write+0xe0>
      return HAL_BUSY;
 8004aa2:	2602      	movs	r6, #2
 8004aa4:	e798      	b.n	80049d8 <HAL_I2C_Mem_Write+0x60>

08004aa6 <HAL_I2C_Mem_Read>:
{
 8004aa6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004aaa:	f890 7035 	ldrb.w	r7, [r0, #53]	@ 0x35
{
 8004aae:	4604      	mov	r4, r0
 8004ab0:	4688      	mov	r8, r1
 8004ab2:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004ab6:	2f01      	cmp	r7, #1
{
 8004ab8:	f8bd 5034 	ldrh.w	r5, [sp, #52]	@ 0x34
 8004abc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004ac0:	b2fe      	uxtb	r6, r7
 8004ac2:	f040 8089 	bne.w	8004bd8 <HAL_I2C_Mem_Read+0x132>
    if((pData == NULL) || (Size == 0)) 
 8004ac6:	f1b9 0f00 	cmp.w	r9, #0
 8004aca:	d01c      	beq.n	8004b06 <HAL_I2C_Mem_Read+0x60>
 8004acc:	b1dd      	cbz	r5, 8004b06 <HAL_I2C_Mem_Read+0x60>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004ace:	6807      	ldr	r7, [r0, #0]
 8004ad0:	69bf      	ldr	r7, [r7, #24]
 8004ad2:	f417 4700 	ands.w	r7, r7, #32768	@ 0x8000
 8004ad6:	d17f      	bne.n	8004bd8 <HAL_I2C_Mem_Read+0x132>
    __HAL_LOCK(hi2c);
 8004ad8:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
 8004adc:	f1bc 0f01 	cmp.w	ip, #1
 8004ae0:	d07a      	beq.n	8004bd8 <HAL_I2C_Mem_Read+0x132>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8004ae2:	f04f 0c62 	mov.w	ip, #98	@ 0x62
    __HAL_LOCK(hi2c);
 8004ae6:	f880 6034 	strb.w	r6, [r0, #52]	@ 0x34
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8004aea:	f880 c035 	strb.w	ip, [r0, #53]	@ 0x35
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aee:	6387      	str	r7, [r0, #56]	@ 0x38
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8004af0:	f8cd a000 	str.w	sl, [sp]
 8004af4:	f7ff fe86 	bl	8004804 <I2C_RequestMemoryRead>
 8004af8:	b148      	cbz	r0, 8004b0e <HAL_I2C_Mem_Read+0x68>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004afa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        __HAL_UNLOCK(hi2c);
 8004afc:	f884 7034 	strb.w	r7, [r4, #52]	@ 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d000      	beq.n	8004b06 <HAL_I2C_Mem_Read+0x60>
        return HAL_TIMEOUT;
 8004b04:	2603      	movs	r6, #3
}
 8004b06:	4630      	mov	r0, r6
 8004b08:	b003      	add	sp, #12
 8004b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(Size > 255)
 8004b0e:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8004b12:	2dff      	cmp	r5, #255	@ 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004b14:	9300      	str	r3, [sp, #0]
    if(Size > 255)
 8004b16:	d939      	bls.n	8004b8c <HAL_I2C_Mem_Read+0xe6>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004b18:	22ff      	movs	r2, #255	@ 0xff
 8004b1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b1e:	4641      	mov	r1, r8
 8004b20:	4620      	mov	r0, r4
      Sizetmp = 255;
 8004b22:	4617      	mov	r7, r2
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004b24:	f7ff fd91 	bl	800464a <I2C_TransferConfig>
      Sizetmp = 255;
 8004b28:	3d01      	subs	r5, #1
 8004b2a:	b2ad      	uxth	r5, r5
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 8004b2c:	4653      	mov	r3, sl
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2104      	movs	r1, #4
 8004b32:	4620      	mov	r0, r4
 8004b34:	f7ff fe02 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d1e3      	bne.n	8004b04 <HAL_I2C_Mem_Read+0x5e>
      (*pData++) = hi2c->Instance->RXDR;
 8004b3c:	6823      	ldr	r3, [r4, #0]
      if((Sizetmp == 0)&&(Size!=0))
 8004b3e:	3f01      	subs	r7, #1
      (*pData++) = hi2c->Instance->RXDR;
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	f809 3b01 	strb.w	r3, [r9], #1
      if((Sizetmp == 0)&&(Size!=0))
 8004b46:	d118      	bne.n	8004b7a <HAL_I2C_Mem_Read+0xd4>
 8004b48:	fa1f fb85 	uxth.w	fp, r5
 8004b4c:	f1bb 0f00 	cmp.w	fp, #0
 8004b50:	d015      	beq.n	8004b7e <HAL_I2C_Mem_Read+0xd8>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8004b52:	4653      	mov	r3, sl
 8004b54:	463a      	mov	r2, r7
 8004b56:	2180      	movs	r1, #128	@ 0x80
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f7ff fdef 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d1d0      	bne.n	8004b04 <HAL_I2C_Mem_Read+0x5e>
        if(Size > 255)
 8004b62:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b66:	9700      	str	r7, [sp, #0]
        if(Size > 255)
 8004b68:	d919      	bls.n	8004b9e <HAL_I2C_Mem_Read+0xf8>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b6a:	22ff      	movs	r2, #255	@ 0xff
 8004b6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b70:	4641      	mov	r1, r8
 8004b72:	4620      	mov	r0, r4
          Sizetmp = 255;
 8004b74:	4617      	mov	r7, r2
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b76:	f7ff fd68 	bl	800464a <I2C_TransferConfig>
    }while(Size > 0);
 8004b7a:	3d01      	subs	r5, #1
 8004b7c:	d2d6      	bcs.n	8004b2c <HAL_I2C_Mem_Read+0x86>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8004b7e:	2119      	movs	r1, #25
 8004b80:	4620      	mov	r0, r4
 8004b82:	f7ff fe70 	bl	8004866 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b86:	b198      	cbz	r0, 8004bb0 <HAL_I2C_Mem_Read+0x10a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b88:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004b8a:	e7b9      	b.n	8004b00 <HAL_I2C_Mem_Read+0x5a>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004b8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b90:	b2ea      	uxtb	r2, r5
 8004b92:	4641      	mov	r1, r8
 8004b94:	4620      	mov	r0, r4
      Sizetmp = Size;
 8004b96:	462f      	mov	r7, r5
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004b98:	f7ff fd57 	bl	800464a <I2C_TransferConfig>
      Sizetmp = Size;
 8004b9c:	e7c4      	b.n	8004b28 <HAL_I2C_Mem_Read+0x82>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ba2:	b2ea      	uxtb	r2, r5
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	4620      	mov	r0, r4
          Sizetmp = Size;
 8004ba8:	462f      	mov	r7, r5
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004baa:	f7ff fd4e 	bl	800464a <I2C_TransferConfig>
          Sizetmp = Size;
 8004bae:	e7e4      	b.n	8004b7a <HAL_I2C_Mem_Read+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	2220      	movs	r2, #32
    return HAL_OK;
 8004bb4:	4606      	mov	r6, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8004bbe:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8004bc2:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004bcc:	2301      	movs	r3, #1
    __HAL_UNLOCK(hi2c);
 8004bce:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
    hi2c->State = HAL_I2C_STATE_READY;
 8004bd2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_OK;
 8004bd6:	e796      	b.n	8004b06 <HAL_I2C_Mem_Read+0x60>
      return HAL_BUSY;
 8004bd8:	2602      	movs	r6, #2
 8004bda:	e794      	b.n	8004b06 <HAL_I2C_Mem_Read+0x60>

08004bdc <HAL_I2C_GetState>:
  return hi2c->State;
 8004bdc:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 8004be0:	4770      	bx	lr

08004be2 <LTDC_SetConfig>:
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004be2:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004be4:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004be6:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004bea:	3284      	adds	r2, #132	@ 0x84
 8004bec:	1883      	adds	r3, r0, r2
{
 8004bee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004bf2:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004bf4:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004bf8:	685d      	ldr	r5, [r3, #4]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004bfa:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004bfe:	684c      	ldr	r4, [r1, #4]
 8004c00:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c04:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8004c08:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004c0c:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c0e:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004c10:	68c5      	ldr	r5, [r0, #12]
 8004c12:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8004c16:	443d      	add	r5, r7
 8004c18:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8004c1c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8004c1e:	68c6      	ldr	r6, [r0, #12]
 8004c20:	68cd      	ldr	r5, [r1, #12]
 8004c22:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004c26:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004c28:	689d      	ldr	r5, [r3, #8]
 8004c2a:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8004c2e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8004c30:	688d      	ldr	r5, [r1, #8]
 8004c32:	68c7      	ldr	r7, [r0, #12]
 8004c34:	3501      	adds	r5, #1
 8004c36:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8004c3a:	443d      	add	r5, r7
 8004c3c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004c40:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8004c42:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004c44:	691d      	ldr	r5, [r3, #16]
 8004c46:	f025 0507 	bic.w	r5, r5, #7
 8004c4a:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004c4c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004c4e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8004c50:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8004c54:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004c58:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8004c5c:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8004c60:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004c64:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004c68:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8004c6c:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004c6e:	695d      	ldr	r5, [r3, #20]
 8004c70:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8004c74:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c76:	694d      	ldr	r5, [r1, #20]
 8004c78:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c7a:	69dd      	ldr	r5, [r3, #28]
 8004c7c:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8004c80:	f025 0507 	bic.w	r5, r5, #7
 8004c84:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c86:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8004c8a:	433d      	orrs	r5, r7
 8004c8c:	61dd      	str	r5, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c8e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c90:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c92:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c96:	629d      	str	r5, [r3, #40]	@ 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c98:	b31e      	cbz	r6, 8004ce2 <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004c9a:	2e01      	cmp	r6, #1
 8004c9c:	d023      	beq.n	8004ce6 <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c9e:	1eb5      	subs	r5, r6, #2
 8004ca0:	2d02      	cmp	r5, #2
 8004ca2:	d922      	bls.n	8004cea <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2;
 8004ca4:	2e07      	cmp	r6, #7
 8004ca6:	bf14      	ite	ne
 8004ca8:	2501      	movne	r5, #1
 8004caa:	2502      	moveq	r5, #2
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004cac:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004cae:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004cb2:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004cb6:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004cb8:	62de      	str	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004cba:	3403      	adds	r4, #3
 8004cbc:	6a8e      	ldr	r6, [r1, #40]	@ 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004cbe:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004cc0:	436e      	muls	r6, r5
 8004cc2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8004cc6:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004cc8:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004cca:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8004cce:	f024 0407 	bic.w	r4, r4, #7
 8004cd2:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004cd4:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004cd6:	5883      	ldr	r3, [r0, r2]
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	5083      	str	r3, [r0, r2]
}
 8004cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 8004ce2:	2504      	movs	r5, #4
 8004ce4:	e7e2      	b.n	8004cac <LTDC_SetConfig+0xca>
    tmp = 3;
 8004ce6:	2503      	movs	r5, #3
 8004ce8:	e7e0      	b.n	8004cac <LTDC_SetConfig+0xca>
    tmp = 2;
 8004cea:	2502      	movs	r5, #2
 8004cec:	e7de      	b.n	8004cac <LTDC_SetConfig+0xca>

08004cee <HAL_LTDC_MspInit>:
}
 8004cee:	4770      	bx	lr

08004cf0 <HAL_LTDC_Init>:
{
 8004cf0:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d067      	beq.n	8004dc8 <HAL_LTDC_Init+0xd8>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8004cf8:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8004cfc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004d00:	b91b      	cbnz	r3, 8004d0a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004d02:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004d06:	f7ff fff2 	bl	8004cee <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004d18:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d1a:	6999      	ldr	r1, [r3, #24]
 8004d1c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004d20:	4302      	orrs	r2, r0
 8004d22:	68e0      	ldr	r0, [r4, #12]
 8004d24:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d26:	6920      	ldr	r0, [r4, #16]
 8004d28:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16);
 8004d2a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d2c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d2e:	4927      	ldr	r1, [pc, #156]	@ (8004dcc <HAL_LTDC_Init+0xdc>)
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d30:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	400a      	ands	r2, r1
 8004d36:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004d3e:	69a0      	ldr	r0, [r4, #24]
 8004d40:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8004d42:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d44:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	400a      	ands	r2, r1
 8004d4a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004d52:	6a20      	ldr	r0, [r4, #32]
 8004d54:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8004d56:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d58:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004d66:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004d68:	4302      	orrs	r2, r0
 8004d6a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16);
 8004d70:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d72:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004d7a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8004d82:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004d86:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8004d8a:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004d90:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8004d92:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8004d96:	432a      	orrs	r2, r5
 8004d98:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8004d9c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004d9e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004da2:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8004da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004da6:	f042 0204 	orr.w	r2, r2, #4
 8004daa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8004dac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dae:	f042 0202 	orr.w	r2, r2, #2
 8004db2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004dbc:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8004dbe:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004dc2:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004dc8:	2001      	movs	r0, #1
 8004dca:	e7fc      	b.n	8004dc6 <HAL_LTDC_Init+0xd6>
 8004dcc:	f000f800 	.word	0xf000f800

08004dd0 <HAL_LTDC_ConfigLayer>:
{   
 8004dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004dd4:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{   
 8004dd8:	4606      	mov	r6, r0
 8004dda:	460f      	mov	r7, r1
 8004ddc:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	f04f 0002 	mov.w	r0, #2
 8004de4:	d01f      	beq.n	8004e26 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8004de6:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8004de8:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8004dec:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004dee:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8004df2:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8004df6:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8004dfa:	3438      	adds	r4, #56	@ 0x38
 8004dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e08:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	4662      	mov	r2, ip
 8004e0e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8004e10:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e12:	f7ff fee6 	bl	8004be2 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e16:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004e18:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e1a:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004e1e:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8004e22:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8004e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004e2a <HAL_LTDC_GetState>:
  return hltdc->State;
 8004e2a:	f890 00a1 	ldrb.w	r0, [r0, #161]	@ 0xa1
}
 8004e2e:	4770      	bx	lr

08004e30 <HAL_MspInit>:
  * @retval None
  */
void HAL_MspInit(void)
{
 
}
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e34:	2300      	movs	r3, #0
{
 8004e36:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	4b19      	ldr	r3, [pc, #100]	@ (8004ea0 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e3c:	4c19      	ldr	r4, [pc, #100]	@ (8004ea4 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e40:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004e44:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e56:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e58:	f7fe ffc6 	bl	8003de8 <HAL_GetTick>
 8004e5c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e5e:	6863      	ldr	r3, [r4, #4]
 8004e60:	03da      	lsls	r2, r3, #15
 8004e62:	d50c      	bpl.n	8004e7e <HAL_PWREx_EnableOverDrive+0x4a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e64:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e66:	4d0f      	ldr	r5, [pc, #60]	@ (8004ea4 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e6c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004e6e:	f7fe ffbb 	bl	8003de8 <HAL_GetTick>
 8004e72:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e74:	686b      	ldr	r3, [r5, #4]
 8004e76:	039b      	lsls	r3, r3, #14
 8004e78:	d50a      	bpl.n	8004e90 <HAL_PWREx_EnableOverDrive+0x5c>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e006      	b.n	8004e8c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e7e:	f7fe ffb3 	bl	8003de8 <HAL_GetTick>
 8004e82:	1b40      	subs	r0, r0, r5
 8004e84:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004e88:	d9e9      	bls.n	8004e5e <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
 8004e8a:	2003      	movs	r0, #3
}
 8004e8c:	b003      	add	sp, #12
 8004e8e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e90:	f7fe ffaa 	bl	8003de8 <HAL_GetTick>
 8004e94:	1b00      	subs	r0, r0, r4
 8004e96:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004e9a:	d9eb      	bls.n	8004e74 <HAL_PWREx_EnableOverDrive+0x40>
 8004e9c:	e7f5      	b.n	8004e8a <HAL_PWREx_EnableOverDrive+0x56>
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	40007000 	.word	0x40007000

08004ea8 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea8:	6803      	ldr	r3, [r0, #0]
{
 8004eaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eac:	07de      	lsls	r6, r3, #31
{
 8004eae:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eb0:	d458      	bmi.n	8004f64 <HAL_RCC_OscConfig+0xbc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb2:	682b      	ldr	r3, [r5, #0]
 8004eb4:	079c      	lsls	r4, r3, #30
 8004eb6:	f100 80c7 	bmi.w	8005048 <HAL_RCC_OscConfig+0x1a0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eba:	682b      	ldr	r3, [r5, #0]
 8004ebc:	071a      	lsls	r2, r3, #28
 8004ebe:	f100 8115 	bmi.w	80050ec <HAL_RCC_OscConfig+0x244>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec2:	682b      	ldr	r3, [r5, #0]
 8004ec4:	075b      	lsls	r3, r3, #29
 8004ec6:	d547      	bpl.n	8004f58 <HAL_RCC_OscConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ec8:	2300      	movs	r3, #0
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004eca:	4ca2      	ldr	r4, [pc, #648]	@ (8005154 <HAL_RCC_OscConfig+0x2ac>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ecc:	9301      	str	r3, [sp, #4]
 8004ece:	4ba2      	ldr	r3, [pc, #648]	@ (8005158 <HAL_RCC_OscConfig+0x2b0>)
 8004ed0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ed2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004ed6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee8:	6023      	str	r3, [r4, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eea:	f7fe ff7d 	bl	8003de8 <HAL_GetTick>
 8004eee:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	05d9      	lsls	r1, r3, #23
 8004ef4:	f140 811f 	bpl.w	8005136 <HAL_RCC_OscConfig+0x28e>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8004ef8:	4c97      	ldr	r4, [pc, #604]	@ (8005158 <HAL_RCC_OscConfig+0x2b0>)
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efa:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8004efe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004f00:	f023 0301 	bic.w	r3, r3, #1
 8004f04:	6723      	str	r3, [r4, #112]	@ 0x70
 8004f06:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004f08:	f023 0304 	bic.w	r3, r3, #4
 8004f0c:	6723      	str	r3, [r4, #112]	@ 0x70
 8004f0e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	6723      	str	r3, [r4, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8004f16:	f7fe ff67 	bl	8003de8 <HAL_GetTick>
 8004f1a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004f1e:	079a      	lsls	r2, r3, #30
 8004f20:	f100 8110 	bmi.w	8005144 <HAL_RCC_OscConfig+0x29c>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f24:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	6723      	str	r3, [r4, #112]	@ 0x70
 8004f2c:	68ab      	ldr	r3, [r5, #8]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	f040 8114 	bne.w	800515c <HAL_RCC_OscConfig+0x2b4>
 8004f34:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004f36:	f023 0304 	bic.w	r3, r3, #4
 8004f3a:	6723      	str	r3, [r4, #112]	@ 0x70
 8004f3c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6723      	str	r3, [r4, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fe ff50 	bl	8003de8 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f48:	4e83      	ldr	r6, [pc, #524]	@ (8005158 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8004f4a:	4604      	mov	r4, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f4c:	f241 3788 	movw	r7, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f50:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004f52:	079b      	lsls	r3, r3, #30
 8004f54:	f140 8123 	bpl.w	800519e <HAL_RCC_OscConfig+0x2f6>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f58:	69aa      	ldr	r2, [r5, #24]
 8004f5a:	2a00      	cmp	r2, #0
 8004f5c:	f040 8126 	bne.w	80051ac <HAL_RCC_OscConfig+0x304>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004f60:	2000      	movs	r0, #0
 8004f62:	e015      	b.n	8004f90 <HAL_RCC_OscConfig+0xe8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f64:	4b7c      	ldr	r3, [pc, #496]	@ (8005158 <HAL_RCC_OscConfig+0x2b0>)
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	f002 020c 	and.w	r2, r2, #12
 8004f6c:	2a04      	cmp	r2, #4
 8004f6e:	d007      	beq.n	8004f80 <HAL_RCC_OscConfig+0xd8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	f002 020c 	and.w	r2, r2, #12
 8004f76:	2a08      	cmp	r2, #8
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCC_OscConfig+0xec>
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	0258      	lsls	r0, r3, #9
 8004f7e:	d509      	bpl.n	8004f94 <HAL_RCC_OscConfig+0xec>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f80:	4b75      	ldr	r3, [pc, #468]	@ (8005158 <HAL_RCC_OscConfig+0x2b0>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	0399      	lsls	r1, r3, #14
 8004f86:	d594      	bpl.n	8004eb2 <HAL_RCC_OscConfig+0xa>
 8004f88:	686b      	ldr	r3, [r5, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d191      	bne.n	8004eb2 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8004f8e:	2001      	movs	r0, #1
}
 8004f90:	b003      	add	sp, #12
 8004f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8004f94:	4c70      	ldr	r4, [pc, #448]	@ (8005158 <HAL_RCC_OscConfig+0x2b0>)
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fac:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8004fae:	f7fe ff1b 	bl	8003de8 <HAL_GetTick>
 8004fb2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	039a      	lsls	r2, r3, #14
 8004fb8:	d41e      	bmi.n	8004ff8 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	686b      	ldr	r3, [r5, #4]
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc8:	d11e      	bne.n	8005008 <HAL_RCC_OscConfig+0x160>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004fda:	f7fe ff05 	bl	8003de8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fde:	4e5e      	ldr	r6, [pc, #376]	@ (8005158 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8004fe0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe2:	6833      	ldr	r3, [r6, #0]
 8004fe4:	039b      	lsls	r3, r3, #14
 8004fe6:	f53f af64 	bmi.w	8004eb2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fea:	f7fe fefd 	bl	8003de8 <HAL_GetTick>
 8004fee:	1b00      	subs	r0, r0, r4
 8004ff0:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8004ff4:	d9f5      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x13a>
 8004ff6:	e005      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff8:	f7fe fef6 	bl	8003de8 <HAL_GetTick>
 8004ffc:	1b80      	subs	r0, r0, r6
 8004ffe:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8005002:	d9d7      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x10c>
          return HAL_TIMEOUT;
 8005004:	2003      	movs	r0, #3
 8005006:	e7c3      	b.n	8004f90 <HAL_RCC_OscConfig+0xe8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800500c:	d103      	bne.n	8005016 <HAL_RCC_OscConfig+0x16e>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005014:	e7dc      	b.n	8004fd0 <HAL_RCC_OscConfig+0x128>
 8005016:	6822      	ldr	r2, [r4, #0]
 8005018:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800501c:	6022      	str	r2, [r4, #0]
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005024:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1d7      	bne.n	8004fda <HAL_RCC_OscConfig+0x132>
        tickstart = HAL_GetTick();
 800502a:	f7fe fedd 	bl	8003de8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800502e:	4e4a      	ldr	r6, [pc, #296]	@ (8005158 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005030:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005032:	6833      	ldr	r3, [r6, #0]
 8005034:	039f      	lsls	r7, r3, #14
 8005036:	f57f af3c 	bpl.w	8004eb2 <HAL_RCC_OscConfig+0xa>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800503a:	f7fe fed5 	bl	8003de8 <HAL_GetTick>
 800503e:	1b00      	subs	r0, r0, r4
 8005040:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8005044:	d9f5      	bls.n	8005032 <HAL_RCC_OscConfig+0x18a>
 8005046:	e7dd      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005048:	4b43      	ldr	r3, [pc, #268]	@ (8005158 <HAL_RCC_OscConfig+0x2b0>)
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	f012 0f0c 	tst.w	r2, #12
 8005050:	d007      	beq.n	8005062 <HAL_RCC_OscConfig+0x1ba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	f002 020c 	and.w	r2, r2, #12
 8005058:	2a08      	cmp	r2, #8
 800505a:	d116      	bne.n	800508a <HAL_RCC_OscConfig+0x1e2>
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	025e      	lsls	r6, r3, #9
 8005060:	d413      	bmi.n	800508a <HAL_RCC_OscConfig+0x1e2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005062:	493d      	ldr	r1, [pc, #244]	@ (8005158 <HAL_RCC_OscConfig+0x2b0>)
 8005064:	680b      	ldr	r3, [r1, #0]
 8005066:	079c      	lsls	r4, r3, #30
 8005068:	d502      	bpl.n	8005070 <HAL_RCC_OscConfig+0x1c8>
 800506a:	68eb      	ldr	r3, [r5, #12]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d18e      	bne.n	8004f8e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005070:	6808      	ldr	r0, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005072:	22f8      	movs	r2, #248	@ 0xf8
 8005074:	fa92 f2a2 	rbit	r2, r2
 8005078:	fab2 f282 	clz	r2, r2
 800507c:	692b      	ldr	r3, [r5, #16]
 800507e:	4093      	lsls	r3, r2
 8005080:	f020 02f8 	bic.w	r2, r0, #248	@ 0xf8
 8005084:	4313      	orrs	r3, r2
 8005086:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005088:	e717      	b.n	8004eba <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800508a:	68eb      	ldr	r3, [r5, #12]
 800508c:	4c32      	ldr	r4, [pc, #200]	@ (8005158 <HAL_RCC_OscConfig+0x2b0>)
 800508e:	b1e3      	cbz	r3, 80050ca <HAL_RCC_OscConfig+0x222>
        __HAL_RCC_HSI_ENABLE();
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005098:	f7fe fea6 	bl	8003de8 <HAL_GetTick>
 800509c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	0798      	lsls	r0, r3, #30
 80050a2:	d50c      	bpl.n	80050be <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a4:	6821      	ldr	r1, [r4, #0]
 80050a6:	22f8      	movs	r2, #248	@ 0xf8
 80050a8:	fa92 f2a2 	rbit	r2, r2
 80050ac:	fab2 f282 	clz	r2, r2
 80050b0:	692b      	ldr	r3, [r5, #16]
 80050b2:	4093      	lsls	r3, r2
 80050b4:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 80050b8:	4313      	orrs	r3, r2
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	e6fd      	b.n	8004eba <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050be:	f7fe fe93 	bl	8003de8 <HAL_GetTick>
 80050c2:	1b80      	subs	r0, r0, r6
 80050c4:	2864      	cmp	r0, #100	@ 0x64
 80050c6:	d9ea      	bls.n	800509e <HAL_RCC_OscConfig+0x1f6>
 80050c8:	e79c      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80050d2:	f7fe fe89 	bl	8003de8 <HAL_GetTick>
 80050d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	0799      	lsls	r1, r3, #30
 80050dc:	f57f aeed 	bpl.w	8004eba <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050e0:	f7fe fe82 	bl	8003de8 <HAL_GetTick>
 80050e4:	1b80      	subs	r0, r0, r6
 80050e6:	2864      	cmp	r0, #100	@ 0x64
 80050e8:	d9f6      	bls.n	80050d8 <HAL_RCC_OscConfig+0x230>
 80050ea:	e78b      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050ec:	696b      	ldr	r3, [r5, #20]
 80050ee:	4c1a      	ldr	r4, [pc, #104]	@ (8005158 <HAL_RCC_OscConfig+0x2b0>)
 80050f0:	b183      	cbz	r3, 8005114 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_LSI_ENABLE();
 80050f2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	6763      	str	r3, [r4, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80050fa:	f7fe fe75 	bl	8003de8 <HAL_GetTick>
 80050fe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005100:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005102:	079f      	lsls	r7, r3, #30
 8005104:	f53f aedd 	bmi.w	8004ec2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005108:	f7fe fe6e 	bl	8003de8 <HAL_GetTick>
 800510c:	1b80      	subs	r0, r0, r6
 800510e:	2864      	cmp	r0, #100	@ 0x64
 8005110:	d9f6      	bls.n	8005100 <HAL_RCC_OscConfig+0x258>
 8005112:	e777      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_LSI_DISABLE();
 8005114:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	6763      	str	r3, [r4, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800511c:	f7fe fe64 	bl	8003de8 <HAL_GetTick>
 8005120:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005122:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005124:	0798      	lsls	r0, r3, #30
 8005126:	f57f aecc 	bpl.w	8004ec2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800512a:	f7fe fe5d 	bl	8003de8 <HAL_GetTick>
 800512e:	1b80      	subs	r0, r0, r6
 8005130:	2864      	cmp	r0, #100	@ 0x64
 8005132:	d9f6      	bls.n	8005122 <HAL_RCC_OscConfig+0x27a>
 8005134:	e766      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005136:	f7fe fe57 	bl	8003de8 <HAL_GetTick>
 800513a:	1b80      	subs	r0, r0, r6
 800513c:	2864      	cmp	r0, #100	@ 0x64
 800513e:	f67f aed7 	bls.w	8004ef0 <HAL_RCC_OscConfig+0x48>
 8005142:	e75f      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005144:	f7fe fe50 	bl	8003de8 <HAL_GetTick>
 8005148:	1b80      	subs	r0, r0, r6
 800514a:	42b8      	cmp	r0, r7
 800514c:	f67f aee6 	bls.w	8004f1c <HAL_RCC_OscConfig+0x74>
 8005150:	e758      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
 8005152:	bf00      	nop
 8005154:	40007000 	.word	0x40007000
 8005158:	40023800 	.word	0x40023800
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800515c:	2b05      	cmp	r3, #5
 800515e:	d103      	bne.n	8005168 <HAL_RCC_OscConfig+0x2c0>
 8005160:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8005162:	f043 0304 	orr.w	r3, r3, #4
 8005166:	e6e8      	b.n	8004f3a <HAL_RCC_OscConfig+0x92>
 8005168:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800516a:	f022 0204 	bic.w	r2, r2, #4
 800516e:	6722      	str	r2, [r4, #112]	@ 0x70
 8005170:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	6722      	str	r2, [r4, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005178:	2b00      	cmp	r3, #0
 800517a:	f47f aee3 	bne.w	8004f44 <HAL_RCC_OscConfig+0x9c>
      tickstart = HAL_GetTick();
 800517e:	f7fe fe33 	bl	8003de8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005182:	4e38      	ldr	r6, [pc, #224]	@ (8005264 <HAL_RCC_OscConfig+0x3bc>)
      tickstart = HAL_GetTick();
 8005184:	4604      	mov	r4, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005186:	f241 3788 	movw	r7, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518a:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800518c:	0798      	lsls	r0, r3, #30
 800518e:	f57f aee3 	bpl.w	8004f58 <HAL_RCC_OscConfig+0xb0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005192:	f7fe fe29 	bl	8003de8 <HAL_GetTick>
 8005196:	1b00      	subs	r0, r0, r4
 8005198:	42b8      	cmp	r0, r7
 800519a:	d9f6      	bls.n	800518a <HAL_RCC_OscConfig+0x2e2>
 800519c:	e732      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fe fe23 	bl	8003de8 <HAL_GetTick>
 80051a2:	1b00      	subs	r0, r0, r4
 80051a4:	42b8      	cmp	r0, r7
 80051a6:	f67f aed3 	bls.w	8004f50 <HAL_RCC_OscConfig+0xa8>
 80051aa:	e72b      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ac:	4c2d      	ldr	r4, [pc, #180]	@ (8005264 <HAL_RCC_OscConfig+0x3bc>)
 80051ae:	68a3      	ldr	r3, [r4, #8]
 80051b0:	f003 030c 	and.w	r3, r3, #12
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	f43f aeea 	beq.w	8004f8e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 80051ba:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051bc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80051be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051c2:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051c4:	d140      	bne.n	8005248 <HAL_RCC_OscConfig+0x3a0>
        tickstart = HAL_GetTick();
 80051c6:	f7fe fe0f 	bl	8003de8 <HAL_GetTick>
 80051ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	0199      	lsls	r1, r3, #6
 80051d0:	d434      	bmi.n	800523c <HAL_RCC_OscConfig+0x394>
 80051d2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80051d6:	fa92 f2a2 	rbit	r2, r2
 80051da:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051de:	fab2 f282 	clz	r2, r2
 80051e2:	fa91 f1a1 	rbit	r1, r1
 80051e6:	f04f 6070 	mov.w	r0, #251658240	@ 0xf000000
 80051ea:	fab1 f181 	clz	r1, r1
 80051ee:	fa90 f0a0 	rbit	r0, r0
 80051f2:	e9d5 6307 	ldrd	r6, r3, [r5, #28]
 80051f6:	fab0 f080 	clz	r0, r0
 80051fa:	4333      	orrs	r3, r6
 80051fc:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80051fe:	4086      	lsls	r6, r0
 8005200:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8005202:	4090      	lsls	r0, r2
 8005204:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005206:	4333      	orrs	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005208:	4d16      	ldr	r5, [pc, #88]	@ (8005264 <HAL_RCC_OscConfig+0x3bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800520a:	0852      	lsrs	r2, r2, #1
 800520c:	4303      	orrs	r3, r0
 800520e:	3a01      	subs	r2, #1
 8005210:	408a      	lsls	r2, r1
 8005212:	4313      	orrs	r3, r2
 8005214:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005218:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005220:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005222:	f7fe fde1 	bl	8003de8 <HAL_GetTick>
 8005226:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	019a      	lsls	r2, r3, #6
 800522c:	f53f ae98 	bmi.w	8004f60 <HAL_RCC_OscConfig+0xb8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005230:	f7fe fdda 	bl	8003de8 <HAL_GetTick>
 8005234:	1b00      	subs	r0, r0, r4
 8005236:	2864      	cmp	r0, #100	@ 0x64
 8005238:	d9f6      	bls.n	8005228 <HAL_RCC_OscConfig+0x380>
 800523a:	e6e3      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523c:	f7fe fdd4 	bl	8003de8 <HAL_GetTick>
 8005240:	1b80      	subs	r0, r0, r6
 8005242:	2864      	cmp	r0, #100	@ 0x64
 8005244:	d9c2      	bls.n	80051cc <HAL_RCC_OscConfig+0x324>
 8005246:	e6dd      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
        tickstart = HAL_GetTick();
 8005248:	f7fe fdce 	bl	8003de8 <HAL_GetTick>
 800524c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	019b      	lsls	r3, r3, #6
 8005252:	f57f ae85 	bpl.w	8004f60 <HAL_RCC_OscConfig+0xb8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005256:	f7fe fdc7 	bl	8003de8 <HAL_GetTick>
 800525a:	1b40      	subs	r0, r0, r5
 800525c:	2864      	cmp	r0, #100	@ 0x64
 800525e:	d9f6      	bls.n	800524e <HAL_RCC_OscConfig+0x3a6>
 8005260:	e6d0      	b.n	8005004 <HAL_RCC_OscConfig+0x15c>
 8005262:	bf00      	nop
 8005264:	40023800 	.word	0x40023800

08005268 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005268:	4a6b      	ldr	r2, [pc, #428]	@ (8005418 <HAL_RCC_ClockConfig+0x1b0>)
 800526a:	6813      	ldr	r3, [r2, #0]
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	428b      	cmp	r3, r1
{
 8005272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005276:	4604      	mov	r4, r0
 8005278:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800527a:	d26c      	bcs.n	8005356 <HAL_RCC_ClockConfig+0xee>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527c:	6813      	ldr	r3, [r2, #0]
 800527e:	f023 030f 	bic.w	r3, r3, #15
 8005282:	430b      	orrs	r3, r1
 8005284:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	428b      	cmp	r3, r1
 800528e:	d002      	beq.n	8005296 <HAL_RCC_ClockConfig+0x2e>
    {
      return HAL_ERROR;
 8005290:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8005292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005296:	6802      	ldr	r2, [r0, #0]
 8005298:	0796      	lsls	r6, r2, #30
 800529a:	d506      	bpl.n	80052aa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800529c:	495f      	ldr	r1, [pc, #380]	@ (800541c <HAL_RCC_ClockConfig+0x1b4>)
 800529e:	6880      	ldr	r0, [r0, #8]
 80052a0:	688b      	ldr	r3, [r1, #8]
 80052a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052a6:	4303      	orrs	r3, r0
 80052a8:	608b      	str	r3, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052aa:	07d5      	lsls	r5, r2, #31
 80052ac:	d412      	bmi.n	80052d4 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ae:	6822      	ldr	r2, [r4, #0]
 80052b0:	0750      	lsls	r0, r2, #29
 80052b2:	f100 80a9 	bmi.w	8005408 <HAL_RCC_ClockConfig+0x1a0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b6:	0713      	lsls	r3, r2, #28
 80052b8:	d507      	bpl.n	80052ca <HAL_RCC_ClockConfig+0x62>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052ba:	4a58      	ldr	r2, [pc, #352]	@ (800541c <HAL_RCC_ClockConfig+0x1b4>)
 80052bc:	6921      	ldr	r1, [r4, #16]
 80052be:	6893      	ldr	r3, [r2, #8]
 80052c0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80052c4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80052c8:	6093      	str	r3, [r2, #8]
  HAL_InitTick (TICK_INT_PRIORITY);
 80052ca:	200f      	movs	r0, #15
 80052cc:	f7fe fd60 	bl	8003d90 <HAL_InitTick>
  return HAL_OK;
 80052d0:	2000      	movs	r0, #0
 80052d2:	e7de      	b.n	8005292 <HAL_RCC_ClockConfig+0x2a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052d4:	6861      	ldr	r1, [r4, #4]
 80052d6:	4b51      	ldr	r3, [pc, #324]	@ (800541c <HAL_RCC_ClockConfig+0x1b4>)
 80052d8:	2901      	cmp	r1, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052da:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052dc:	d11c      	bne.n	8005318 <HAL_RCC_ClockConfig+0xb0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052de:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e2:	d0d5      	beq.n	8005290 <HAL_RCC_ClockConfig+0x28>
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052e4:	689a      	ldr	r2, [r3, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e6:	f241 3788 	movw	r7, #5000	@ 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052ea:	4e4c      	ldr	r6, [pc, #304]	@ (800541c <HAL_RCC_ClockConfig+0x1b4>)
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ec:	f022 0203 	bic.w	r2, r2, #3
 80052f0:	430a      	orrs	r2, r1
 80052f2:	609a      	str	r2, [r3, #8]
      tickstart = HAL_GetTick();
 80052f4:	f7fe fd78 	bl	8003de8 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f8:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 80052fa:	4605      	mov	r5, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d113      	bne.n	8005328 <HAL_RCC_ClockConfig+0xc0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005300:	68b3      	ldr	r3, [r6, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	2b04      	cmp	r3, #4
 8005308:	d0d1      	beq.n	80052ae <HAL_RCC_ClockConfig+0x46>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800530a:	f7fe fd6d 	bl	8003de8 <HAL_GetTick>
 800530e:	1b40      	subs	r0, r0, r5
 8005310:	42b8      	cmp	r0, r7
 8005312:	d9f5      	bls.n	8005300 <HAL_RCC_ClockConfig+0x98>
            return HAL_TIMEOUT;
 8005314:	2003      	movs	r0, #3
 8005316:	e7bc      	b.n	8005292 <HAL_RCC_ClockConfig+0x2a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005318:	2902      	cmp	r1, #2
 800531a:	d102      	bne.n	8005322 <HAL_RCC_ClockConfig+0xba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800531c:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005320:	e7df      	b.n	80052e2 <HAL_RCC_ClockConfig+0x7a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005322:	f012 0f02 	tst.w	r2, #2
 8005326:	e7dc      	b.n	80052e2 <HAL_RCC_ClockConfig+0x7a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005328:	2b02      	cmp	r3, #2
 800532a:	d10f      	bne.n	800534c <HAL_RCC_ClockConfig+0xe4>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800532c:	68b3      	ldr	r3, [r6, #8]
 800532e:	f003 030c 	and.w	r3, r3, #12
 8005332:	2b08      	cmp	r3, #8
 8005334:	d0bb      	beq.n	80052ae <HAL_RCC_ClockConfig+0x46>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005336:	f7fe fd57 	bl	8003de8 <HAL_GetTick>
 800533a:	1b40      	subs	r0, r0, r5
 800533c:	42b8      	cmp	r0, r7
 800533e:	d9f5      	bls.n	800532c <HAL_RCC_ClockConfig+0xc4>
 8005340:	e7e8      	b.n	8005314 <HAL_RCC_ClockConfig+0xac>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005342:	f7fe fd51 	bl	8003de8 <HAL_GetTick>
 8005346:	1b40      	subs	r0, r0, r5
 8005348:	42b8      	cmp	r0, r7
 800534a:	d8e3      	bhi.n	8005314 <HAL_RCC_ClockConfig+0xac>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800534c:	68b3      	ldr	r3, [r6, #8]
 800534e:	f013 0f0c 	tst.w	r3, #12
 8005352:	d1f6      	bne.n	8005342 <HAL_RCC_ClockConfig+0xda>
 8005354:	e7ab      	b.n	80052ae <HAL_RCC_ClockConfig+0x46>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005356:	6802      	ldr	r2, [r0, #0]
 8005358:	0791      	lsls	r1, r2, #30
 800535a:	d506      	bpl.n	800536a <HAL_RCC_ClockConfig+0x102>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800535c:	492f      	ldr	r1, [pc, #188]	@ (800541c <HAL_RCC_ClockConfig+0x1b4>)
 800535e:	6880      	ldr	r0, [r0, #8]
 8005360:	688b      	ldr	r3, [r1, #8]
 8005362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005366:	4303      	orrs	r3, r0
 8005368:	608b      	str	r3, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536a:	07d2      	lsls	r2, r2, #31
 800536c:	d40b      	bmi.n	8005386 <HAL_RCC_ClockConfig+0x11e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536e:	4a2a      	ldr	r2, [pc, #168]	@ (8005418 <HAL_RCC_ClockConfig+0x1b0>)
 8005370:	6813      	ldr	r3, [r2, #0]
 8005372:	f023 030f 	bic.w	r3, r3, #15
 8005376:	432b      	orrs	r3, r5
 8005378:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	42ab      	cmp	r3, r5
 8005382:	d185      	bne.n	8005290 <HAL_RCC_ClockConfig+0x28>
 8005384:	e793      	b.n	80052ae <HAL_RCC_ClockConfig+0x46>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005386:	6861      	ldr	r1, [r4, #4]
 8005388:	4b24      	ldr	r3, [pc, #144]	@ (800541c <HAL_RCC_ClockConfig+0x1b4>)
 800538a:	2901      	cmp	r1, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538c:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538e:	d11c      	bne.n	80053ca <HAL_RCC_ClockConfig+0x162>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005390:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005394:	f43f af7c 	beq.w	8005290 <HAL_RCC_ClockConfig+0x28>
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005398:	689a      	ldr	r2, [r3, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800539a:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800539e:	4f1f      	ldr	r7, [pc, #124]	@ (800541c <HAL_RCC_ClockConfig+0x1b4>)
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a0:	f022 0203 	bic.w	r2, r2, #3
 80053a4:	430a      	orrs	r2, r1
 80053a6:	609a      	str	r2, [r3, #8]
      tickstart = HAL_GetTick();
 80053a8:	f7fe fd1e 	bl	8003de8 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ac:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 80053ae:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d112      	bne.n	80053da <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d0d7      	beq.n	800536e <HAL_RCC_ClockConfig+0x106>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053be:	f7fe fd13 	bl	8003de8 <HAL_GetTick>
 80053c2:	1b80      	subs	r0, r0, r6
 80053c4:	4540      	cmp	r0, r8
 80053c6:	d9f5      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x14c>
 80053c8:	e7a4      	b.n	8005314 <HAL_RCC_ClockConfig+0xac>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ca:	2902      	cmp	r1, #2
 80053cc:	d102      	bne.n	80053d4 <HAL_RCC_ClockConfig+0x16c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ce:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80053d2:	e7df      	b.n	8005394 <HAL_RCC_ClockConfig+0x12c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d4:	f012 0f02 	tst.w	r2, #2
 80053d8:	e7dc      	b.n	8005394 <HAL_RCC_ClockConfig+0x12c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d10f      	bne.n	80053fe <HAL_RCC_ClockConfig+0x196>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f003 030c 	and.w	r3, r3, #12
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d0c2      	beq.n	800536e <HAL_RCC_ClockConfig+0x106>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e8:	f7fe fcfe 	bl	8003de8 <HAL_GetTick>
 80053ec:	1b80      	subs	r0, r0, r6
 80053ee:	4540      	cmp	r0, r8
 80053f0:	d9f5      	bls.n	80053de <HAL_RCC_ClockConfig+0x176>
 80053f2:	e78f      	b.n	8005314 <HAL_RCC_ClockConfig+0xac>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f4:	f7fe fcf8 	bl	8003de8 <HAL_GetTick>
 80053f8:	1b80      	subs	r0, r0, r6
 80053fa:	4540      	cmp	r0, r8
 80053fc:	d88a      	bhi.n	8005314 <HAL_RCC_ClockConfig+0xac>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	f013 0f0c 	tst.w	r3, #12
 8005404:	d1f6      	bne.n	80053f4 <HAL_RCC_ClockConfig+0x18c>
 8005406:	e7b2      	b.n	800536e <HAL_RCC_ClockConfig+0x106>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005408:	4904      	ldr	r1, [pc, #16]	@ (800541c <HAL_RCC_ClockConfig+0x1b4>)
 800540a:	68e0      	ldr	r0, [r4, #12]
 800540c:	688b      	ldr	r3, [r1, #8]
 800540e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005412:	4303      	orrs	r3, r0
 8005414:	608b      	str	r3, [r1, #8]
 8005416:	e74e      	b.n	80052b6 <HAL_RCC_ClockConfig+0x4e>
 8005418:	40023c00 	.word	0x40023c00
 800541c:	40023800 	.word	0x40023800

08005420 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005420:	4b19      	ldr	r3, [pc, #100]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x68>)
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	f002 020c 	and.w	r2, r2, #12
 8005428:	2a04      	cmp	r2, #4
 800542a:	d028      	beq.n	800547e <HAL_RCC_GetSysClockFreq+0x5e>
 800542c:	2a08      	cmp	r2, #8
 800542e:	d128      	bne.n	8005482 <HAL_RCC_GetSysClockFreq+0x62>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005430:	685a      	ldr	r2, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005432:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005434:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8005438:	6858      	ldr	r0, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800543a:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 800543e:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 8005442:	fa91 f3a1 	rbit	r3, r1
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8005446:	fab3 f383 	clz	r3, r3
 800544a:	ea00 0001 	and.w	r0, r0, r1
 800544e:	fa20 f003 	lsr.w	r0, r0, r3
 8005452:	bf14      	ite	ne
 8005454:	4b0d      	ldrne	r3, [pc, #52]	@ (800548c <HAL_RCC_GetSysClockFreq+0x6c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8005456:	4b0e      	ldreq	r3, [pc, #56]	@ (8005490 <HAL_RCC_GetSysClockFreq+0x70>)
 8005458:	fbb3 f3f2 	udiv	r3, r3, r2
 800545c:	4358      	muls	r0, r3
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800545e:	4b0a      	ldr	r3, [pc, #40]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x68>)
 8005460:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	fa92 f2a2 	rbit	r2, r2
 800546a:	fab2 f282 	clz	r2, r2
 800546e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005472:	40d3      	lsrs	r3, r2
 8005474:	3301      	adds	r3, #1
 8005476:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8005478:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 800547c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800547e:	4803      	ldr	r0, [pc, #12]	@ (800548c <HAL_RCC_GetSysClockFreq+0x6c>)
 8005480:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 8005482:	4803      	ldr	r0, [pc, #12]	@ (8005490 <HAL_RCC_GetSysClockFreq+0x70>)
}
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40023800 	.word	0x40023800
 800548c:	017d7840 	.word	0x017d7840
 8005490:	00f42400 	.word	0x00f42400

08005494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005494:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005496:	f7ff ffc3 	bl	8005420 <HAL_RCC_GetSysClockFreq>
 800549a:	4b08      	ldr	r3, [pc, #32]	@ (80054bc <HAL_RCC_GetHCLKFreq+0x28>)
 800549c:	22f0      	movs	r2, #240	@ 0xf0
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	fa92 f2a2 	rbit	r2, r2
 80054a4:	fab2 f282 	clz	r2, r2
 80054a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054ac:	40d3      	lsrs	r3, r2
 80054ae:	4a04      	ldr	r2, [pc, #16]	@ (80054c0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80054b0:	5cd3      	ldrb	r3, [r2, r3]
 80054b2:	40d8      	lsrs	r0, r3
 80054b4:	4b03      	ldr	r3, [pc, #12]	@ (80054c4 <HAL_RCC_GetHCLKFreq+0x30>)
 80054b6:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80054b8:	bd08      	pop	{r3, pc}
 80054ba:	bf00      	nop
 80054bc:	40023800 	.word	0x40023800
 80054c0:	08051054 	.word	0x08051054
 80054c4:	2000009c 	.word	0x2000009c

080054c8 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80054c8:	6803      	ldr	r3, [r0, #0]
{
 80054ca:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80054ce:	f013 0601 	ands.w	r6, r3, #1
{
 80054d2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80054d4:	d00b      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054d6:	4aad      	ldr	r2, [pc, #692]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054d8:	6891      	ldr	r1, [r2, #8]
 80054da:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 80054de:	6091      	str	r1, [r2, #8]
 80054e0:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80054e2:	6891      	ldr	r1, [r2, #8]
 80054e4:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80054e6:	fab6 f686 	clz	r6, r6
 80054ea:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054ec:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80054ee:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 80054f2:	d012      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054f4:	49a5      	ldr	r1, [pc, #660]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054f6:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80054f8:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054fc:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005500:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1; 
 8005504:	bf08      	it	eq
 8005506:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005508:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800550c:	bf16      	itet	ne
 800550e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8005512:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005514:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005516:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800551a:	02d9      	lsls	r1, r3, #11
 800551c:	d510      	bpl.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800551e:	489b      	ldr	r0, [pc, #620]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005520:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005522:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005526:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800552a:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800552e:	ea42 0201 	orr.w	r2, r2, r1
 8005532:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005536:	f000 8212 	beq.w	800595e <HAL_RCCEx_PeriphCLKConfig+0x496>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 800553a:	2900      	cmp	r1, #0
 800553c:	bf08      	it	eq
 800553e:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8005540:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8005544:	bf18      	it	ne
 8005546:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005548:	069a      	lsls	r2, r3, #26
 800554a:	d543      	bpl.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800554c:	2300      	movs	r3, #0
      
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800554e:	4f90      	ldr	r7, [pc, #576]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	4b8e      	ldr	r3, [pc, #568]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005554:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005556:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800555a:	641a      	str	r2, [r3, #64]	@ 0x40
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005562:	9301      	str	r3, [sp, #4]
 8005564:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800556c:	603b      	str	r3, [r7, #0]
      
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800556e:	f7fe fc3b 	bl	8003de8 <HAL_GetTick>
 8005572:	4680      	mov	r8, r0
      
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	05db      	lsls	r3, r3, #23
 8005578:	f140 81f3 	bpl.w	8005962 <HAL_RCCEx_PeriphCLKConfig+0x49a>
      {
        return HAL_TIMEOUT;
      }      
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800557c:	4f83      	ldr	r7, [pc, #524]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800557e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005580:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005582:	4053      	eors	r3, r2
 8005584:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005588:	d024      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800558a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800558c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800558e:	f422 7140 	bic.w	r1, r2, #768	@ 0x300
      
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 8005592:	0790      	lsls	r0, r2, #30
      __HAL_RCC_BACKUPRESET_FORCE();
 8005594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005598:	673b      	str	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800559a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800559c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055a0:	673b      	str	r3, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 80055a2:	6739      	str	r1, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 80055a4:	f100 81e8 	bmi.w	8005978 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 80055a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80055aa:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80055ae:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80055b2:	4a76      	ldr	r2, [pc, #472]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055b4:	f040 81f0 	bne.w	8005998 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80055b8:	6891      	ldr	r1, [r2, #8]
 80055ba:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 80055be:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 80055c2:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 80055c6:	4301      	orrs	r1, r0
 80055c8:	6091      	str	r1, [r2, #8]
 80055ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ce:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6713      	str	r3, [r2, #112]	@ 0x70
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	06da      	lsls	r2, r3, #27
 80055d8:	d50c      	bpl.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055da:	4a6c      	ldr	r2, [pc, #432]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055dc:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80055e0:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80055e4:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80055e8:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80055ec:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80055ee:	4301      	orrs	r1, r0
 80055f0:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055f4:	045f      	lsls	r7, r3, #17
 80055f6:	d508      	bpl.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055f8:	4964      	ldr	r1, [pc, #400]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055fa:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80055fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005600:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8005604:	4302      	orrs	r2, r0
 8005606:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800560a:	0418      	lsls	r0, r3, #16
 800560c:	d508      	bpl.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800560e:	495f      	ldr	r1, [pc, #380]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005610:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8005612:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005616:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800561a:	4302      	orrs	r2, r0
 800561c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005620:	03d9      	lsls	r1, r3, #15
 8005622:	d508      	bpl.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005624:	4959      	ldr	r1, [pc, #356]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005626:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8005628:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800562c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005630:	4302      	orrs	r2, r0
 8005632:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005636:	039a      	lsls	r2, r3, #14
 8005638:	d508      	bpl.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800563a:	4954      	ldr	r1, [pc, #336]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800563c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800563e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005642:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005646:	4302      	orrs	r2, r0
 8005648:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800564c:	065f      	lsls	r7, r3, #25
 800564e:	d508      	bpl.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005650:	494e      	ldr	r1, [pc, #312]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005652:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005654:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005658:	f022 0203 	bic.w	r2, r2, #3
 800565c:	4302      	orrs	r2, r0
 800565e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005662:	0618      	lsls	r0, r3, #24
 8005664:	d508      	bpl.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005666:	4949      	ldr	r1, [pc, #292]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005668:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800566a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800566e:	f022 020c 	bic.w	r2, r2, #12
 8005672:	4302      	orrs	r2, r0
 8005674:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005678:	05d9      	lsls	r1, r3, #23
 800567a:	d508      	bpl.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800567c:	4943      	ldr	r1, [pc, #268]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800567e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005680:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005684:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8005688:	4302      	orrs	r2, r0
 800568a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800568e:	059a      	lsls	r2, r3, #22
 8005690:	d508      	bpl.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005692:	493e      	ldr	r1, [pc, #248]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005694:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005696:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800569a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800569e:	4302      	orrs	r2, r0
 80056a0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056a4:	055f      	lsls	r7, r3, #21
 80056a6:	d508      	bpl.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056a8:	4938      	ldr	r1, [pc, #224]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056aa:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80056ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80056b0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80056b4:	4302      	orrs	r2, r0
 80056b6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80056ba:	0518      	lsls	r0, r3, #20
 80056bc:	d508      	bpl.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80056be:	4933      	ldr	r1, [pc, #204]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80056c6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80056ca:	4302      	orrs	r2, r0
 80056cc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80056d0:	04d9      	lsls	r1, r3, #19
 80056d2:	d508      	bpl.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80056d4:	492d      	ldr	r1, [pc, #180]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056d6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80056d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80056dc:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80056e0:	4302      	orrs	r2, r0
 80056e2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80056e6:	049a      	lsls	r2, r3, #18
 80056e8:	d508      	bpl.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80056ea:	4928      	ldr	r1, [pc, #160]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056ec:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80056ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80056f2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80056f6:	4302      	orrs	r2, r0
 80056f8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056fc:	025f      	lsls	r7, r3, #9
 80056fe:	d508      	bpl.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005700:	4922      	ldr	r1, [pc, #136]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005702:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005704:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005708:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800570c:	4302      	orrs	r2, r0
 800570e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005712:	0298      	lsls	r0, r3, #10
 8005714:	d50c      	bpl.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x268>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005716:	481d      	ldr	r0, [pc, #116]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005718:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800571a:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 800571e:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005722:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1; 
 8005726:	bf08      	it	eq
 8005728:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800572a:	430a      	orrs	r2, r1
 800572c:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F756xx) || defined(STM32F746xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8005730:	f013 0f08 	tst.w	r3, #8
 8005734:	bf18      	it	ne
 8005736:	2501      	movne	r5, #1
  }
#endif /* STM32F756xx || STM32F746xx */
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005738:	0359      	lsls	r1, r3, #13
 800573a:	d508      	bpl.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800573c:	4913      	ldr	r1, [pc, #76]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800573e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005740:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005744:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005748:	4302      	orrs	r2, r0
 800574a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800574e:	021a      	lsls	r2, r3, #8
 8005750:	d509      	bpl.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005752:	490e      	ldr	r1, [pc, #56]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005754:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005758:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800575c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005760:	4302      	orrs	r2, r0
 8005762:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005766:	2e01      	cmp	r6, #1
 8005768:	f000 811c 	beq.w	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800576c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005770:	f000 8118 	beq.w	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005774:	2d01      	cmp	r5, #1
 8005776:	f040 80f0 	bne.w	800595a <HAL_RCCEx_PeriphCLKConfig+0x492>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800577a:	4d04      	ldr	r5, [pc, #16]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005782:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005784:	f7fe fb30 	bl	8003de8 <HAL_GetTick>
 8005788:	4606      	mov	r6, r0
 800578a:	e003      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800578c:	40023800 	.word	0x40023800
 8005790:	40007000 	.word	0x40007000

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	009f      	lsls	r7, r3, #2
 8005798:	f100 8220 	bmi.w	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x714>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800579c:	6821      	ldr	r1, [r4, #0]
 800579e:	030e      	lsls	r6, r1, #12
 80057a0:	d501      	bpl.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80057a2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80057a4:	b123      	cbz	r3, 80057b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80057a6:	02cd      	lsls	r5, r1, #11
 80057a8:	d547      	bpl.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x372>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d144      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x372>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80057b0:	4d7b      	ldr	r5, [pc, #492]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80057b2:	f44f 3c40 	mov.w	ip, #196608	@ 0x30000
 80057b6:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 80057ba:	fa9c feac 	rbit	lr, ip
 80057be:	f04f 46e0 	mov.w	r6, #1879048192	@ 0x70000000
 80057c2:	fabe fe8e 	clz	lr, lr
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80057c6:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
 80057ca:	fa96 f7a6 	rbit	r7, r6
 80057ce:	f647 79c0 	movw	r9, #32704	@ 0x7fc0
 80057d2:	fab7 f787 	clz	r7, r7
 80057d6:	fa99 f9a9 	rbit	r9, r9
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057da:	fab9 f989 	clz	r9, r9
 80057de:	fa9c fcac 	rbit	ip, ip
 80057e2:	f04f 6870 	mov.w	r8, #251658240	@ 0xf000000
 80057e6:	fabc fc8c 	clz	ip, ip
 80057ea:	fa98 f8a8 	rbit	r8, r8
 80057ee:	fab8 f888 	clz	r8, r8
 80057f2:	fa96 f6a6 	rbit	r6, r6
 80057f6:	6963      	ldr	r3, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80057f8:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80057fc:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005800:	fab6 f686 	clz	r6, r6
 8005804:	fa03 f909 	lsl.w	r9, r3, r9
 8005808:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800580a:	fa20 f00e 	lsr.w	r0, r0, lr
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800580e:	40fa      	lsrs	r2, r7
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005810:	fa03 f808 	lsl.w	r8, r3, r8
 8005814:	fa00 f00c 	lsl.w	r0, r0, ip
 8005818:	40b2      	lsls	r2, r6
 800581a:	ea49 0308 	orr.w	r3, r9, r8
 800581e:	4303      	orrs	r3, r0
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005826:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800582a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800582c:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005830:	3a01      	subs	r2, #1
 8005832:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005836:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800583a:	0288      	lsls	r0, r1, #10
 800583c:	d53e      	bpl.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800583e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8005840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005844:	d13a      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005846:	4d56      	ldr	r5, [pc, #344]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8005848:	f04f 6c70 	mov.w	ip, #251658240	@ 0xf000000
 800584c:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8005850:	fa9c feac 	rbit	lr, ip
 8005854:	f04f 46e0 	mov.w	r6, #1879048192	@ 0x70000000
 8005858:	fabe fe8e 	clz	lr, lr
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800585c:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
 8005860:	fa96 f7a6 	rbit	r7, r6
 8005864:	f647 79c0 	movw	r9, #32704	@ 0x7fc0
 8005868:	fab7 f787 	clz	r7, r7
 800586c:	fa99 f9a9 	rbit	r9, r9
 8005870:	f44f 3840 	mov.w	r8, #196608	@ 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005874:	fab9 f989 	clz	r9, r9
 8005878:	fa98 f8a8 	rbit	r8, r8
 800587c:	fab8 f888 	clz	r8, r8
 8005880:	fa9c fcac 	rbit	ip, ip
 8005884:	fabc fc8c 	clz	ip, ip
 8005888:	fa96 f6a6 	rbit	r6, r6
 800588c:	6963      	ldr	r3, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800588e:	f000 6070 	and.w	r0, r0, #251658240	@ 0xf000000
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005892:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005896:	fab6 f686 	clz	r6, r6
 800589a:	fa03 f909 	lsl.w	r9, r3, r9
 800589e:	6a23      	ldr	r3, [r4, #32]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80058a0:	fa20 f00e 	lsr.w	r0, r0, lr
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80058a4:	40fa      	lsrs	r2, r7
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80058a6:	fa03 f808 	lsl.w	r8, r3, r8
 80058aa:	fa00 f00c 	lsl.w	r0, r0, ip
 80058ae:	40b2      	lsls	r2, r6
 80058b0:	ea49 0308 	orr.w	r3, r9, r8
 80058b4:	4303      	orrs	r3, r0
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
    }        

#if defined(STM32F756xx) || defined(STM32F746xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058bc:	070a      	lsls	r2, r1, #28
 80058be:	d540      	bpl.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80058c0:	4837      	ldr	r0, [pc, #220]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80058c2:	f04f 6570 	mov.w	r5, #251658240	@ 0xf000000
 80058c6:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80058ca:	fa95 f6a5 	rbit	r6, r5
 80058ce:	f44f 3c40 	mov.w	ip, #196608	@ 0x30000
 80058d2:	fab6 f686 	clz	r6, r6
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80058d6:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80058da:	fa9c f8ac 	rbit	r8, ip
 80058de:	f647 77c0 	movw	r7, #32704	@ 0x7fc0
 80058e2:	fab8 f888 	clz	r8, r8
 80058e6:	fa97 f7a7 	rbit	r7, r7
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058ea:	fab7 f787 	clz	r7, r7
 80058ee:	fa9c fcac 	rbit	ip, ip
 80058f2:	fabc fc8c 	clz	ip, ip
 80058f6:	fa95 f5a5 	rbit	r5, r5
 80058fa:	f04f 4ee0 	mov.w	lr, #1879048192	@ 0x70000000
 80058fe:	fab5 f585 	clz	r5, r5
 8005902:	fa9e feae 	rbit	lr, lr
 8005906:	6963      	ldr	r3, [r4, #20]
 8005908:	fabe fe8e 	clz	lr, lr
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800590c:	f401 3140 	and.w	r1, r1, #196608	@ 0x30000
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005910:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005914:	40bb      	lsls	r3, r7
 8005916:	69e7      	ldr	r7, [r4, #28]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8005918:	fa21 f108 	lsr.w	r1, r1, r8
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800591c:	40f2      	lsrs	r2, r6
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800591e:	fa07 f70e 	lsl.w	r7, r7, lr
 8005922:	fa01 f10c 	lsl.w	r1, r1, ip
 8005926:	40aa      	lsls	r2, r5
 8005928:	433b      	orrs	r3, r7
 800592a:	430b      	orrs	r3, r1
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005932:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8005936:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005938:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    }    
#endif /* STM32F756xx || STM32F746xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005942:	4c17      	ldr	r4, [pc, #92]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800594a:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594c:	f7fe fa4c 	bl	8003de8 <HAL_GetTick>
 8005950:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	f140 8148 	bpl.w	8005bea <HAL_RCCEx_PeriphCLKConfig+0x722>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800595a:	2000      	movs	r0, #0
 800595c:	e009      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      plli2sused = 1; 
 800595e:	2601      	movs	r6, #1
 8005960:	e5ee      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005962:	f7fe fa41 	bl	8003de8 <HAL_GetTick>
 8005966:	eba0 0008 	sub.w	r0, r0, r8
 800596a:	2864      	cmp	r0, #100	@ 0x64
 800596c:	f67f ae02 	bls.w	8005574 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8005970:	2003      	movs	r0, #3
}
 8005972:	b002      	add	sp, #8
 8005974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tickstart = HAL_GetTick();
 8005978:	f7fe fa36 	bl	8003de8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800597c:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005980:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005984:	0799      	lsls	r1, r3, #30
 8005986:	f53f ae0f 	bmi.w	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800598a:	f7fe fa2d 	bl	8003de8 <HAL_GetTick>
 800598e:	eba0 0008 	sub.w	r0, r0, r8
 8005992:	4548      	cmp	r0, r9
 8005994:	d9f5      	bls.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005996:	e7eb      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 8005998:	6891      	ldr	r1, [r2, #8]
 800599a:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800599e:	e613      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80059a0:	40023800 	.word	0x40023800
    __HAL_RCC_PLLI2S_DISABLE();  
 80059a4:	4e94      	ldr	r6, [pc, #592]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 80059a6:	6833      	ldr	r3, [r6, #0]
 80059a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059ac:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80059ae:	f7fe fa1b 	bl	8003de8 <HAL_GetTick>
 80059b2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059b4:	6833      	ldr	r3, [r6, #0]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	f100 8109 	bmi.w	8005bce <HAL_RCCEx_PeriphCLKConfig+0x706>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	07d7      	lsls	r7, r2, #31
 80059c0:	d53c      	bpl.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x574>
 80059c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059c4:	bbd3      	cbnz	r3, 8005a3c <HAL_RCCEx_PeriphCLKConfig+0x574>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80059c6:	f8d6 0084 	ldr.w	r0, [r6, #132]	@ 0x84
 80059ca:	f44f 3e40 	mov.w	lr, #196608	@ 0x30000
 80059ce:	fa9e f8ae 	rbit	r8, lr
 80059d2:	f04f 6770 	mov.w	r7, #251658240	@ 0xf000000
 80059d6:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80059da:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
 80059de:	fa97 fca7 	rbit	ip, r7
 80059e2:	f647 7ac0 	movw	sl, #32704	@ 0x7fc0
 80059e6:	fabc fc8c 	clz	ip, ip
 80059ea:	fa9a faaa 	rbit	sl, sl
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80059ee:	faba fa8a 	clz	sl, sl
 80059f2:	fa9e feae 	rbit	lr, lr
 80059f6:	fabe fe8e 	clz	lr, lr
 80059fa:	fa97 f7a7 	rbit	r7, r7
 80059fe:	f04f 49e0 	mov.w	r9, #1879048192	@ 0x70000000
 8005a02:	fab7 f787 	clz	r7, r7
 8005a06:	fa99 f9a9 	rbit	r9, r9
 8005a0a:	6863      	ldr	r3, [r4, #4]
 8005a0c:	fab9 f989 	clz	r9, r9
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005a10:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005a14:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a18:	fa03 fa0a 	lsl.w	sl, r3, sl
 8005a1c:	68a3      	ldr	r3, [r4, #8]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005a1e:	fa20 f008 	lsr.w	r0, r0, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005a22:	fa21 f10c 	lsr.w	r1, r1, ip
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a26:	fa03 f909 	lsl.w	r9, r3, r9
 8005a2a:	fa00 f00e 	lsl.w	r0, r0, lr
 8005a2e:	40b9      	lsls	r1, r7
 8005a30:	ea4a 0309 	orr.w	r3, sl, r9
 8005a34:	4303      	orrs	r3, r0
 8005a36:	430b      	orrs	r3, r1
 8005a38:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a3c:	0316      	lsls	r6, r2, #12
 8005a3e:	d503      	bpl.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8005a40:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a46:	d005      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8005a48:	02d0      	lsls	r0, r2, #11
 8005a4a:	d548      	bpl.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x616>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005a4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a52:	d144      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x616>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005a54:	4e68      	ldr	r6, [pc, #416]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 8005a56:	f44f 3e40 	mov.w	lr, #196608	@ 0x30000
 8005a5a:	f8d6 0084 	ldr.w	r0, [r6, #132]	@ 0x84
 8005a5e:	fa9e f8ae 	rbit	r8, lr
 8005a62:	f04f 47e0 	mov.w	r7, #1879048192	@ 0x70000000
 8005a66:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005a6a:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
 8005a6e:	fa97 fca7 	rbit	ip, r7
 8005a72:	f647 7ac0 	movw	sl, #32704	@ 0x7fc0
 8005a76:	fabc fc8c 	clz	ip, ip
 8005a7a:	fa9a faaa 	rbit	sl, sl
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a7e:	faba fa8a 	clz	sl, sl
 8005a82:	fa9e feae 	rbit	lr, lr
 8005a86:	f04f 6970 	mov.w	r9, #251658240	@ 0xf000000
 8005a8a:	fabe fe8e 	clz	lr, lr
 8005a8e:	fa99 f9a9 	rbit	r9, r9
 8005a92:	fab9 f989 	clz	r9, r9
 8005a96:	fa97 f7a7 	rbit	r7, r7
 8005a9a:	6863      	ldr	r3, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005a9c:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005aa0:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005aa4:	fab7 f787 	clz	r7, r7
 8005aa8:	fa03 fa0a 	lsl.w	sl, r3, sl
 8005aac:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005aae:	fa20 f008 	lsr.w	r0, r0, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005ab2:	fa21 f10c 	lsr.w	r1, r1, ip
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ab6:	fa03 f909 	lsl.w	r9, r3, r9
 8005aba:	fa00 f00e 	lsl.w	r0, r0, lr
 8005abe:	40b9      	lsls	r1, r7
 8005ac0:	ea4a 0309 	orr.w	r3, sl, r9
 8005ac4:	4303      	orrs	r3, r0
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8005acc:	f8d6 108c 	ldr.w	r1, [r6, #140]	@ 0x8c
 8005ad0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005ad2:	f021 011f 	bic.w	r1, r1, #31
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ade:	01d1      	lsls	r1, r2, #7
 8005ae0:	d53b      	bpl.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x692>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005ae2:	4e45      	ldr	r6, [pc, #276]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 8005ae4:	f04f 6e70 	mov.w	lr, #251658240	@ 0xf000000
 8005ae8:	f8d6 0084 	ldr.w	r0, [r6, #132]	@ 0x84
 8005aec:	fa9e f8ae 	rbit	r8, lr
 8005af0:	f04f 47e0 	mov.w	r7, #1879048192	@ 0x70000000
 8005af4:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005af8:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
 8005afc:	fa97 fca7 	rbit	ip, r7
 8005b00:	f647 7ac0 	movw	sl, #32704	@ 0x7fc0
 8005b04:	fabc fc8c 	clz	ip, ip
 8005b08:	fa9a faaa 	rbit	sl, sl
 8005b0c:	f44f 3940 	mov.w	r9, #196608	@ 0x30000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b10:	faba fa8a 	clz	sl, sl
 8005b14:	fa99 f9a9 	rbit	r9, r9
 8005b18:	fab9 f989 	clz	r9, r9
 8005b1c:	fa9e feae 	rbit	lr, lr
 8005b20:	fabe fe8e 	clz	lr, lr
 8005b24:	fa97 f7a7 	rbit	r7, r7
 8005b28:	6863      	ldr	r3, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005b2a:	f000 6070 	and.w	r0, r0, #251658240	@ 0xf000000
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005b2e:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b32:	fab7 f787 	clz	r7, r7
 8005b36:	fa03 fa0a 	lsl.w	sl, r3, sl
 8005b3a:	6923      	ldr	r3, [r4, #16]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005b3c:	fa20 f008 	lsr.w	r0, r0, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005b40:	fa21 f10c 	lsr.w	r1, r1, ip
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b44:	fa03 f909 	lsl.w	r9, r3, r9
 8005b48:	fa00 f00e 	lsl.w	r0, r0, lr
 8005b4c:	40b9      	lsls	r1, r7
 8005b4e:	ea4a 0309 	orr.w	r3, sl, r9
 8005b52:	4303      	orrs	r3, r0
 8005b54:	430b      	orrs	r3, r1
 8005b56:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b5a:	0192      	lsls	r2, r2, #6
 8005b5c:	d525      	bpl.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005b5e:	f647 76c0 	movw	r6, #32704	@ 0x7fc0
 8005b62:	fa96 f6a6 	rbit	r6, r6
 8005b66:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b6a:	fab6 f686 	clz	r6, r6
 8005b6e:	fa90 f0a0 	rbit	r0, r0
 8005b72:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 8005b76:	fab0 f080 	clz	r0, r0
 8005b7a:	fa91 f1a1 	rbit	r1, r1
 8005b7e:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8005b82:	fab1 f181 	clz	r1, r1
 8005b86:	fa92 f2a2 	rbit	r2, r2
 8005b8a:	6863      	ldr	r3, [r4, #4]
 8005b8c:	fab2 f282 	clz	r2, r2
 8005b90:	40b3      	lsls	r3, r6
 8005b92:	6926      	ldr	r6, [r4, #16]
 8005b94:	4086      	lsls	r6, r0
 8005b96:	68e0      	ldr	r0, [r4, #12]
 8005b98:	4333      	orrs	r3, r6
 8005b9a:	4088      	lsls	r0, r1
 8005b9c:	68a1      	ldr	r1, [r4, #8]
 8005b9e:	4303      	orrs	r3, r0
 8005ba0:	4091      	lsls	r1, r2
 8005ba2:	4a15      	ldr	r2, [pc, #84]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005baa:	4e13      	ldr	r6, [pc, #76]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 8005bac:	6833      	ldr	r3, [r6, #0]
 8005bae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005bb2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005bb4:	f7fe f918 	bl	8003de8 <HAL_GetTick>
 8005bb8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bba:	6833      	ldr	r3, [r6, #0]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	f53f add9 	bmi.w	8005774 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bc2:	f7fe f911 	bl	8003de8 <HAL_GetTick>
 8005bc6:	1bc0      	subs	r0, r0, r7
 8005bc8:	2864      	cmp	r0, #100	@ 0x64
 8005bca:	d9f6      	bls.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005bcc:	e6d0      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bce:	f7fe f90b 	bl	8003de8 <HAL_GetTick>
 8005bd2:	1bc0      	subs	r0, r0, r7
 8005bd4:	2864      	cmp	r0, #100	@ 0x64
 8005bd6:	f67f aeed 	bls.w	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005bda:	e6c9      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bdc:	f7fe f904 	bl	8003de8 <HAL_GetTick>
 8005be0:	1b80      	subs	r0, r0, r6
 8005be2:	2864      	cmp	r0, #100	@ 0x64
 8005be4:	f67f add6 	bls.w	8005794 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005be8:	e6c2      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bea:	f7fe f8fd 	bl	8003de8 <HAL_GetTick>
 8005bee:	1b40      	subs	r0, r0, r5
 8005bf0:	2864      	cmp	r0, #100	@ 0x64
 8005bf2:	f67f aeae 	bls.w	8005952 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005bf6:	e6bb      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005bf8:	40023800 	.word	0x40023800

08005bfc <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tempreg = 0;
  
  /* Set all possible values for the extended clock type parameter------------*/ 
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8005bfc:	4b73      	ldr	r3, [pc, #460]	@ (8005dcc <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8005bfe:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;

  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8005c00:	4b73      	ldr	r3, [pc, #460]	@ (8005dd0 <HAL_RCCEx_GetPeriphCLKConfig+0x1d4>)
{
 8005c02:	b5f0      	push	{r4, r5, r6, r7, lr}
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8005c04:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005c08:	f647 76c0 	movw	r6, #32704	@ 0x7fc0
 8005c0c:	fa96 f1a6 	rbit	r1, r6
 8005c10:	fab1 f181 	clz	r1, r1
 8005c14:	4032      	ands	r2, r6
 8005c16:	40ca      	lsrs	r2, r1
 8005c18:	6042      	str	r2, [r0, #4]
 8005c1a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005c1e:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8005c22:	fa92 f4a2 	rbit	r4, r2
 8005c26:	fab4 f484 	clz	r4, r4
 8005c2a:	4011      	ands	r1, r2
 8005c2c:	40e1      	lsrs	r1, r4
 8005c2e:	f04f 6470 	mov.w	r4, #251658240	@ 0xf000000
 8005c32:	6101      	str	r1, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005c34:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8005c38:	fa94 f5a4 	rbit	r5, r4
 8005c3c:	fab5 f585 	clz	r5, r5
 8005c40:	4021      	ands	r1, r4
 8005c42:	40e9      	lsrs	r1, r5
 8005c44:	60c1      	str	r1, [r0, #12]
 8005c46:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005c4a:	f8d3 5084 	ldr.w	r5, [r3, #132]	@ 0x84
 8005c4e:	fa91 f7a1 	rbit	r7, r1
 8005c52:	fab7 f787 	clz	r7, r7
 8005c56:	400d      	ands	r5, r1
 8005c58:	40fd      	lsrs	r5, r7
 8005c5a:	6085      	str	r5, [r0, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 8005c5c:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8005c60:	fa96 f7a6 	rbit	r7, r6
 8005c64:	fab7 f787 	clz	r7, r7
 8005c68:	4035      	ands	r5, r6
 8005c6a:	40fd      	lsrs	r5, r7
 8005c6c:	6145      	str	r5, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8005c6e:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8005c72:	fa92 f6a2 	rbit	r6, r2
 8005c76:	fab6 f686 	clz	r6, r6
 8005c7a:	4015      	ands	r5, r2
 8005c7c:	40f5      	lsrs	r5, r6
 8005c7e:	6205      	str	r5, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 8005c80:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8005c84:	fa94 f4a4 	rbit	r4, r4
 8005c88:	f005 6570 	and.w	r5, r5, #251658240	@ 0xf000000
 8005c8c:	fab4 f484 	clz	r4, r4
 8005c90:	fa25 f404 	lsr.w	r4, r5, r4
 8005c94:	6184      	str	r4, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 8005c96:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 8005c9a:	fa91 f1a1 	rbit	r1, r1
 8005c9e:	f004 44e0 	and.w	r4, r4, #1879048192	@ 0x70000000
 8005ca2:	fab1 f181 	clz	r1, r1
 8005ca6:	fa24 f101 	lsr.w	r1, r4, r1
 8005caa:	241f      	movs	r4, #31
 8005cac:	61c1      	str	r1, [r0, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 8005cae:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8005cb2:	fa94 f4a4 	rbit	r4, r4
 8005cb6:	fab4 f484 	clz	r4, r4
 8005cba:	f001 011f 	and.w	r1, r1, #31
 8005cbe:	40e1      	lsrs	r1, r4
 8005cc0:	f44f 54f8 	mov.w	r4, #7936	@ 0x1f00
 8005cc4:	6241      	str	r1, [r0, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 8005cc6:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8005cca:	fa94 f4a4 	rbit	r4, r4
 8005cce:	fab4 f484 	clz	r4, r4
 8005cd2:	f401 51f8 	and.w	r1, r1, #7936	@ 0x1f00
 8005cd6:	40e1      	lsrs	r1, r4
 8005cd8:	6281      	str	r1, [r0, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 8005cda:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8005cde:	fa92 f2a2 	rbit	r2, r2
 8005ce2:	f401 3140 	and.w	r1, r1, #196608	@ 0x30000
 8005ce6:	fab2 f282 	clz	r2, r2
 8005cea:	fa21 f202 	lsr.w	r2, r1, r2
 8005cee:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8005cf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005cf4:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 8005cf8:	63c2      	str	r2, [r0, #60]	@ 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8005cfa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005cfe:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 8005d02:	6402      	str	r2, [r0, #64]	@ 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8005d0a:	6342      	str	r2, [r0, #52]	@ 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8005d0c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d10:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8005d14:	6642      	str	r2, [r0, #100]	@ 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8005d16:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d1a:	f402 2240 	and.w	r2, r2, #786432	@ 0xc0000
 8005d1e:	6682      	str	r2, [r0, #104]	@ 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8005d20:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d24:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 8005d28:	66c2      	str	r2, [r0, #108]	@ 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8005d2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d2e:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 8005d32:	6702      	str	r2, [r0, #112]	@ 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8005d34:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d38:	f002 0203 	and.w	r2, r2, #3
 8005d3c:	6442      	str	r2, [r0, #68]	@ 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8005d3e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d42:	f002 020c 	and.w	r2, r2, #12
 8005d46:	6482      	str	r2, [r0, #72]	@ 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8005d48:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d4c:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8005d50:	64c2      	str	r2, [r0, #76]	@ 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8005d52:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d56:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8005d5a:	6502      	str	r2, [r0, #80]	@ 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8005d5c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d60:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005d64:	6542      	str	r2, [r0, #84]	@ 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8005d66:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d6a:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8005d6e:	6582      	str	r2, [r0, #88]	@ 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8005d70:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d74:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 8005d78:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8005d7a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d7e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8005d82:	6602      	str	r2, [r0, #96]	@ 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005d84:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d88:	f002 7240 	and.w	r2, r2, #50331648	@ 0x3000000
 8005d8c:	6742      	str	r2, [r0, #116]	@ 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8005d8e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d92:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8005d96:	6782      	str	r2, [r0, #120]	@ 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8005d98:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d9c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005da0:	67c2      	str	r2, [r0, #124]	@ 0x7c

  /* Get the SDMMC clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005da2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005da6:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8005daa:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005dae:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005db0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005db2:	f401 11f8 	and.w	r1, r1, #2031616	@ 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005db6:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	6302      	str	r2, [r0, #48]	@ 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8005dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dc6:	6383      	str	r3, [r0, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8005dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	00fffff1 	.word	0x00fffff1
 8005dd0:	40023800 	.word	0x40023800

08005dd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005dd4:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 8005dd8:	d140      	bne.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005dda:	4b2e      	ldr	r3, [pc, #184]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005ddc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005de0:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
    switch (saiclocksource)
 8005de4:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8005de8:	d046      	beq.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8005dea:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;   
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8005dee:	d04c      	beq.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005df0:	2a00      	cmp	r2, #0
 8005df2:	d14c      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    {
    case 0: /* PLLSAI is the clock source for SAI*/ 
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	bf08      	it	eq
 8005dfe:	4b26      	ldreq	r3, [pc, #152]	@ (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8005e00:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005e04:	bf18      	it	ne
 8005e06:	4b25      	ldrne	r3, [pc, #148]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8005e08:	fbb3 f3f2 	udiv	r3, r3, r2
        }   
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005e0c:	4a21      	ldr	r2, [pc, #132]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005e0e:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005e12:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 8005e16:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005e1a:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005e1c:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005e20:	fbb0 f0f3 	udiv	r0, r0, r3
        
        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005e24:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005e28:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8005e2c:	e012      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8005e30:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005e34:	4a17      	ldr	r2, [pc, #92]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005e36:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005e3a:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 8005e3e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005e42:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005e44:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005e48:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8005e4c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005e50:	f003 031f 	and.w	r3, r3, #31
 8005e54:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8005e56:	fbb0 f0f3 	udiv	r0, r0, r3
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005e5a:	4770      	bx	lr
 8005e5c:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 8005e60:	d115      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    saiclocksource = RCC->DCKCFGR1;   
 8005e62:	4b0c      	ldr	r3, [pc, #48]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005e64:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005e68:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
    switch (saiclocksource)
 8005e6c:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8005e70:	d002      	beq.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8005e72:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8005e76:	e7ba      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {  
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005e84:	d1d3      	bne.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e86:	4b04      	ldr	r3, [pc, #16]	@ (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8005e88:	e7d2      	b.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e8a:	4805      	ldr	r0, [pc, #20]	@ (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8005e8c:	4770      	bx	lr
    switch (saiclocksource)
 8005e8e:	2000      	movs	r0, #0
      }
    }
  }
  
  return frequency;
}
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40023800 	.word	0x40023800
 8005e98:	00f42400 	.word	0x00f42400
 8005e9c:	017d7840 	.word	0x017d7840
 8005ea0:	00bb8000 	.word	0x00bb8000

08005ea4 <SAI_InterruptFlag>:
  * @param  mode : SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR; 
 8005ea4:	2901      	cmp	r1, #1
  if(mode == SAI_MODE_IT)
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) && 
 8005ea6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005ea8:	6842      	ldr	r2, [r0, #4]
  uint32_t tmpIT = SAI_IT_OVRUDR; 
 8005eaa:	bf0c      	ite	eq
 8005eac:	2309      	moveq	r3, #9
 8005eae:	2301      	movne	r3, #1
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) && 
 8005eb0:	2908      	cmp	r1, #8
 8005eb2:	d105      	bne.n	8005ec0 <SAI_InterruptFlag+0x1c>
 8005eb4:	f022 0102 	bic.w	r1, r2, #2
 8005eb8:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
 8005eba:	bf08      	it	eq
 8005ebc:	f043 0310 	orreq.w	r3, r3, #16
  }
  
  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005ec0:	3a02      	subs	r2, #2
 8005ec2:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005ec4:	bf94      	ite	ls
 8005ec6:	f043 0060 	orrls.w	r0, r3, #96	@ 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8005eca:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 8005ece:	4770      	bx	lr

08005ed0 <SAI_Disable.isra.0>:
  * @brief  disable the SAI and wait the disabling
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None.
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4604      	mov	r4, r0
{
  uint32_t tickstart = HAL_GetTick();
 8005ed4:	f7fd ff88 	bl	8003de8 <HAL_GetTick>
 8005ed8:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_SAI_DISABLE(hsai);
 8005eda:	6822      	ldr	r2, [r4, #0]
 8005edc:	6813      	ldr	r3, [r2, #0]
 8005ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ee2:	6013      	str	r3, [r2, #0]
  while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET)
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	03db      	lsls	r3, r3, #15
 8005eea:	d50a      	bpl.n	8005f02 <SAI_Disable.isra.0+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > SAI_TIMEOUT_VALUE)
 8005eec:	f7fd ff7c 	bl	8003de8 <HAL_GetTick>
 8005ef0:	1b40      	subs	r0, r0, r5
 8005ef2:	280a      	cmp	r0, #10
 8005ef4:	d9f6      	bls.n	8005ee4 <SAI_Disable.isra.0+0x14>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005ef6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8005efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005efe:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      
      return HAL_TIMEOUT;
    }
  }
  return status;
}
 8005f02:	bd38      	pop	{r3, r4, r5, pc}

08005f04 <HAL_SAI_MspInit>:
}
 8005f04:	4770      	bx	lr
	...

08005f08 <HAL_SAI_Init>:
{ 
 8005f08:	b538      	push	{r3, r4, r5, lr}
  if(hsai == NULL)
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	f000 808b 	beq.w	8006028 <HAL_SAI_Init+0x120>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8005f12:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8005f16:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005f1a:	b91b      	cbnz	r3, 8005f24 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8005f1c:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
    HAL_SAI_MspInit(hsai);
 8005f20:	f7ff fff0 	bl	8005f04 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8005f24:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8005f26:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8005f28:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  SAI_Disable(hsai);
 8005f2c:	f7ff ffd0 	bl	8005ed0 <SAI_Disable.isra.0>
  SAI_BlockSynchroConfig(hsai);
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 f9b1 	bl	8006298 <SAI_BlockSynchroConfig>
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005f36:	69e3      	ldr	r3, [r4, #28]
 8005f38:	b183      	cbz	r3, 8005f5c <HAL_SAI_Init+0x54>
  freq = SAI_GetInputClock(hsai);
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f000 f9ce 	bl	80062dc <SAI_GetInputClock>
    tmpclock = (((freq * 10) / ((hsai->Init.AudioFrequency) * 512)));
 8005f40:	220a      	movs	r2, #10
 8005f42:	69e3      	ldr	r3, [r4, #28]
 8005f44:	4350      	muls	r0, r2
 8005f46:	025b      	lsls	r3, r3, #9
 8005f48:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpclock / 10;
 8005f4c:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpclock % 10) > 8) 
 8005f50:	fb02 0013 	mls	r0, r2, r3, r0
 8005f54:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 8005f56:	bf08      	it	eq
 8005f58:	3301      	addeq	r3, #1
 8005f5a:	6223      	str	r3, [r4, #32]
  switch(hsai->Init.Synchro)
 8005f5c:	68a1      	ldr	r1, [r4, #8]
 8005f5e:	2901      	cmp	r1, #1
 8005f60:	d05f      	beq.n	8006022 <HAL_SAI_Init+0x11a>
 8005f62:	3902      	subs	r1, #2
 8005f64:	2901      	cmp	r1, #1
 8005f66:	bf8c      	ite	hi
 8005f68:	2100      	movhi	r1, #0
 8005f6a:	2101      	movls	r1, #1
 8005f6c:	02c9      	lsls	r1, r1, #11
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005f6e:	6822      	ldr	r2, [r4, #0]
 8005f70:	4b2e      	ldr	r3, [pc, #184]	@ (800602c <HAL_SAI_Init+0x124>)
 8005f72:	6810      	ldr	r0, [r2, #0]
  hsai->Instance->CR1|= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f74:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005f76:	4003      	ands	r3, r0
 8005f78:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR1|= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f7a:	6863      	ldr	r3, [r4, #4]
 8005f7c:	6810      	ldr	r0, [r2, #0]
 8005f7e:	432b      	orrs	r3, r5
 8005f80:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8005f82:	432b      	orrs	r3, r5
 8005f84:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8005f86:	432b      	orrs	r3, r5
 8005f88:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8005f8a:	432b      	orrs	r3, r5
 8005f8c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005f8e:	432b      	orrs	r3, r5
 8005f90:	6925      	ldr	r5, [r4, #16]
 8005f92:	432b      	orrs	r3, r5
 8005f94:	6965      	ldr	r5, [r4, #20]
 8005f96:	432b      	orrs	r3, r5
 8005f98:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));  
 8005f9a:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f9c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005fa0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  hsai->Instance->CR1|= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005fa6:	6853      	ldr	r3, [r2, #4]
 8005fa8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005fac:	f023 030f 	bic.w	r3, r3, #15
 8005fb0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005fb2:	69a3      	ldr	r3, [r4, #24]
 8005fb4:	6851      	ldr	r1, [r2, #4]
 8005fb6:	4303      	orrs	r3, r0
 8005fb8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005fba:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1)  | 
 8005fbc:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006030 <HAL_SAI_Init+0x128>)
 8005fc4:	6891      	ldr	r1, [r2, #8]
 8005fc6:	400b      	ands	r3, r1
 8005fc8:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1)  | 
 8005fca:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005fcc:	6891      	ldr	r1, [r2, #8]
 8005fce:	4303      	orrs	r3, r0
 8005fd0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005fd2:	4303      	orrs	r3, r0
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005fd8:	3901      	subs	r1, #1
 8005fda:	430b      	orrs	r3, r1
                            ((hsai->FrameInit.ActiveFrameLength - 1) << 8));  
 8005fdc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005fde:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1)  | 
 8005fe0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005fe4:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005fe6:	68d3      	ldr	r3, [r2, #12]
 8005fe8:	f423 637d 	bic.w	r3, r3, #4048	@ 0xfd0
 8005fec:	f023 030f 	bic.w	r3, r3, #15
 8005ff0:	041b      	lsls	r3, r3, #16
 8005ff2:	0c1b      	lsrs	r3, r3, #16
 8005ff4:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005ff6:	68d1      	ldr	r1, [r2, #12]
 8005ff8:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	@ 0x54
 8005ffc:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005ffe:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006000:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);           
 8006002:	6e21      	ldr	r1, [r4, #96]	@ 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006004:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);           
 8006008:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800600a:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800600c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006010:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8006012:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006014:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 8006018:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 800601c:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
}
 8006020:	bd38      	pop	{r3, r4, r5, pc}
  switch(hsai->Init.Synchro)
 8006022:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006026:	e7a2      	b.n	8005f6e <HAL_SAI_Init+0x66>
    return HAL_ERROR;
 8006028:	2001      	movs	r0, #1
 800602a:	e7f9      	b.n	8006020 <HAL_SAI_Init+0x118>
 800602c:	ff05c010 	.word	0xff05c010
 8006030:	fff88000 	.word	0xfff88000

08006034 <HAL_SAI_MspDeInit>:
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
 8006034:	4770      	bx	lr

08006036 <HAL_SAI_DeInit>:
{
 8006036:	b538      	push	{r3, r4, r5, lr}
  if(hsai == NULL)
 8006038:	4604      	mov	r4, r0
 800603a:	b1d0      	cbz	r0, 8006072 <HAL_SAI_DeInit+0x3c>
  hsai->State = HAL_SAI_STATE_BUSY;
 800603c:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
 800603e:	2500      	movs	r5, #0
  hsai->Instance->CLRFR = 0xFFFFFFFF;
 8006040:	f04f 32ff 	mov.w	r2, #4294967295
  hsai->State = HAL_SAI_STATE_BUSY;
 8006044:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d
  hsai->Instance->IMR = 0;
 8006048:	6803      	ldr	r3, [r0, #0]
 800604a:	611d      	str	r5, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFF;
 800604c:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 800604e:	f7ff ff3f 	bl	8005ed0 <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006052:	6822      	ldr	r2, [r4, #0]
  HAL_SAI_MspDeInit(hsai);
 8006054:	4620      	mov	r0, r4
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006056:	6853      	ldr	r3, [r2, #4]
 8006058:	f043 0308 	orr.w	r3, r3, #8
 800605c:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 800605e:	f7ff ffe9 	bl	8006034 <HAL_SAI_MspDeInit>
  return HAL_OK;
 8006062:	4628      	mov	r0, r5
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006064:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 8006068:	f884 507c 	strb.w	r5, [r4, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
 800606c:	f884 507d 	strb.w	r5, [r4, #125]	@ 0x7d
}
 8006070:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006072:	2001      	movs	r0, #1
 8006074:	e7fc      	b.n	8006070 <HAL_SAI_DeInit+0x3a>

08006076 <HAL_SAI_DMAStop>:
{
 8006076:	b510      	push	{r4, lr}
  __HAL_LOCK(hsai);
 8006078:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
{
 800607c:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 800607e:	2b01      	cmp	r3, #1
 8006080:	d020      	beq.n	80060c4 <HAL_SAI_DMAStop+0x4e>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006082:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
 8006084:	2301      	movs	r3, #1
 8006086:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800608a:	6813      	ldr	r3, [r2, #0]
  if(hsai->hdmatx != NULL)
 800608c:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800608e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006092:	6013      	str	r3, [r2, #0]
  if(hsai->hdmatx != NULL)
 8006094:	b958      	cbnz	r0, 80060ae <HAL_SAI_DMAStop+0x38>
  if(hsai->hdmarx != NULL)
 8006096:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8006098:	b978      	cbnz	r0, 80060ba <HAL_SAI_DMAStop+0x44>
  SAI_Disable(hsai);
 800609a:	4620      	mov	r0, r4
 800609c:	f7ff ff18 	bl	8005ed0 <SAI_Disable.isra.0>
  hsai->State = HAL_SAI_STATE_READY;
 80060a0:	2301      	movs	r3, #1
  __HAL_UNLOCK(hsai);
 80060a2:	2000      	movs	r0, #0
  hsai->State = HAL_SAI_STATE_READY;
 80060a4:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 80060a8:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
  return HAL_OK;
 80060ac:	e004      	b.n	80060b8 <HAL_SAI_DMAStop+0x42>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80060ae:	f7fd ffaf 	bl	8004010 <HAL_DMA_Abort>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d0ef      	beq.n	8006096 <HAL_SAI_DMAStop+0x20>
      return HAL_ERROR;
 80060b6:	2001      	movs	r0, #1
}
 80060b8:	bd10      	pop	{r4, pc}
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80060ba:	f7fd ffa9 	bl	8004010 <HAL_DMA_Abort>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d0eb      	beq.n	800609a <HAL_SAI_DMAStop+0x24>
 80060c2:	e7f8      	b.n	80060b6 <HAL_SAI_DMAStop+0x40>
  __HAL_LOCK(hsai);
 80060c4:	2002      	movs	r0, #2
 80060c6:	e7f7      	b.n	80060b8 <HAL_SAI_DMAStop+0x42>

080060c8 <HAL_SAI_Transmit_DMA>:
{
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4604      	mov	r4, r0
 80060cc:	4613      	mov	r3, r2
  if((pData == NULL) || (Size == 0)) 
 80060ce:	2900      	cmp	r1, #0
 80060d0:	d039      	beq.n	8006146 <HAL_SAI_Transmit_DMA+0x7e>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d037      	beq.n	8006146 <HAL_SAI_Transmit_DMA+0x7e>
  if(hsai->State == HAL_SAI_STATE_READY)
 80060d6:	f890 007d 	ldrb.w	r0, [r0, #125]	@ 0x7d
 80060da:	2801      	cmp	r0, #1
 80060dc:	b2c5      	uxtb	r5, r0
 80060de:	d134      	bne.n	800614a <HAL_SAI_Transmit_DMA+0x82>
    __HAL_LOCK(hsai);
 80060e0:	f894 007c 	ldrb.w	r0, [r4, #124]	@ 0x7c
 80060e4:	2801      	cmp	r0, #1
 80060e6:	d030      	beq.n	800614a <HAL_SAI_Transmit_DMA+0x82>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80060e8:	2200      	movs	r2, #0
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80060ea:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    __HAL_LOCK(hsai);
 80060ec:	f884 507c 	strb.w	r5, [r4, #124]	@ 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80060f0:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80060f4:	2212      	movs	r2, #18
    hsai->XferSize = Size;
 80060f6:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80060fa:	f884 207d 	strb.w	r2, [r4, #125]	@ 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80060fe:	4a14      	ldr	r2, [pc, #80]	@ (8006150 <HAL_SAI_Transmit_DMA+0x88>)
    hsai->XferCount = Size;
 8006100:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    hsai->pBuffPtr = pData;
 8006104:	6661      	str	r1, [r4, #100]	@ 0x64
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8006106:	6402      	str	r2, [r0, #64]	@ 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8006108:	4a12      	ldr	r2, [pc, #72]	@ (8006154 <HAL_SAI_Transmit_DMA+0x8c>)
 800610a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800610c:	4a12      	ldr	r2, [pc, #72]	@ (8006158 <HAL_SAI_Transmit_DMA+0x90>)
 800610e:	6482      	str	r2, [r0, #72]	@ 0x48
    HAL_DMA_Start_IT(hsai->hdmatx, *(uint32_t*)tmp, (uint32_t)&hsai->Instance->DR, hsai->XferSize);
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	321c      	adds	r2, #28
 8006114:	f7fd ff4f 	bl	8003fb6 <HAL_DMA_Start_IT>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8006118:	6825      	ldr	r5, [r4, #0]
 800611a:	682b      	ldr	r3, [r5, #0]
 800611c:	03db      	lsls	r3, r3, #15
 800611e:	d403      	bmi.n	8006128 <HAL_SAI_Transmit_DMA+0x60>
      __HAL_SAI_ENABLE(hsai);
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006126:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006128:	2100      	movs	r1, #0
 800612a:	4620      	mov	r0, r4
 800612c:	f7ff feba 	bl	8005ea4 <SAI_InterruptFlag>
 8006130:	692b      	ldr	r3, [r5, #16]
 8006132:	4303      	orrs	r3, r0
    __HAL_UNLOCK(hsai);
 8006134:	2000      	movs	r0, #0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006136:	612b      	str	r3, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800613e:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
 8006140:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
}
 8006144:	bd38      	pop	{r3, r4, r5, pc}
    return  HAL_ERROR;
 8006146:	2001      	movs	r0, #1
 8006148:	e7fc      	b.n	8006144 <HAL_SAI_Transmit_DMA+0x7c>
    __HAL_LOCK(hsai);
 800614a:	2002      	movs	r0, #2
 800614c:	e7fa      	b.n	8006144 <HAL_SAI_Transmit_DMA+0x7c>
 800614e:	bf00      	nop
 8006150:	08006229 	.word	0x08006229
 8006154:	080061f1 	.word	0x080061f1
 8006158:	08006275 	.word	0x08006275

0800615c <HAL_SAI_Receive_DMA>:
{
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4613      	mov	r3, r2
 8006160:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
 8006162:	460a      	mov	r2, r1
 8006164:	2900      	cmp	r1, #0
 8006166:	d039      	beq.n	80061dc <HAL_SAI_Receive_DMA+0x80>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d037      	beq.n	80061dc <HAL_SAI_Receive_DMA+0x80>
  if(hsai->State == HAL_SAI_STATE_READY)
 800616c:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
 8006170:	2901      	cmp	r1, #1
 8006172:	b2c8      	uxtb	r0, r1
 8006174:	d134      	bne.n	80061e0 <HAL_SAI_Receive_DMA+0x84>
    __HAL_LOCK(hsai);
 8006176:	f894 107c 	ldrb.w	r1, [r4, #124]	@ 0x7c
 800617a:	2901      	cmp	r1, #1
 800617c:	d030      	beq.n	80061e0 <HAL_SAI_Receive_DMA+0x84>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;    
 800617e:	2100      	movs	r1, #0
    __HAL_LOCK(hsai);
 8006180:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006184:	6f20      	ldr	r0, [r4, #112]	@ 0x70
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;    
 8006186:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800618a:	2122      	movs	r1, #34	@ 0x22
    hsai->XferSize = Size;
 800618c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006190:	f884 107d 	strb.w	r1, [r4, #125]	@ 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006194:	4913      	ldr	r1, [pc, #76]	@ (80061e4 <HAL_SAI_Receive_DMA+0x88>)
    hsai->XferCount = Size;
 8006196:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    hsai->pBuffPtr = pData;
 800619a:	6662      	str	r2, [r4, #100]	@ 0x64
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800619c:	6401      	str	r1, [r0, #64]	@ 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800619e:	4912      	ldr	r1, [pc, #72]	@ (80061e8 <HAL_SAI_Receive_DMA+0x8c>)
 80061a0:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80061a2:	4912      	ldr	r1, [pc, #72]	@ (80061ec <HAL_SAI_Receive_DMA+0x90>)
 80061a4:	6481      	str	r1, [r0, #72]	@ 0x48
    HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, *(uint32_t*)tmp, hsai->XferSize);
 80061a6:	6821      	ldr	r1, [r4, #0]
 80061a8:	311c      	adds	r1, #28
 80061aa:	f7fd ff04 	bl	8003fb6 <HAL_DMA_Start_IT>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80061ae:	6825      	ldr	r5, [r4, #0]
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	03db      	lsls	r3, r3, #15
 80061b4:	d403      	bmi.n	80061be <HAL_SAI_Receive_DMA+0x62>
      __HAL_SAI_ENABLE(hsai);
 80061b6:	682b      	ldr	r3, [r5, #0]
 80061b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061bc:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80061be:	2100      	movs	r1, #0
 80061c0:	4620      	mov	r0, r4
 80061c2:	f7ff fe6f 	bl	8005ea4 <SAI_InterruptFlag>
 80061c6:	692b      	ldr	r3, [r5, #16]
 80061c8:	4303      	orrs	r3, r0
    __HAL_UNLOCK(hsai);
 80061ca:	2000      	movs	r0, #0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80061cc:	612b      	str	r3, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80061ce:	682b      	ldr	r3, [r5, #0]
 80061d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061d4:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
 80061d6:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
}
 80061da:	bd38      	pop	{r3, r4, r5, pc}
    return  HAL_ERROR;
 80061dc:	2001      	movs	r0, #1
 80061de:	e7fc      	b.n	80061da <HAL_SAI_Receive_DMA+0x7e>
    __HAL_LOCK(hsai);
 80061e0:	2002      	movs	r0, #2
 80061e2:	e7fa      	b.n	80061da <HAL_SAI_Receive_DMA+0x7e>
 80061e4:	0800626b 	.word	0x0800626b
 80061e8:	08006233 	.word	0x08006233
 80061ec:	08006275 	.word	0x08006275

080061f0 <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)   
{
 80061f0:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
  
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80061f2:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 80061f4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80061f6:	6819      	ldr	r1, [r3, #0]
 80061f8:	f411 7180 	ands.w	r1, r1, #256	@ 0x100
 80061fc:	d110      	bne.n	8006220 <SAI_DMATxCplt+0x30>
  { 
    hsai->XferCount = 0;
    
    /* Disable SAI Tx DMA Request */  
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80061fe:	6825      	ldr	r5, [r4, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006200:	4620      	mov	r0, r4
    hsai->XferCount = 0;
 8006202:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006206:	682b      	ldr	r3, [r5, #0]
 8006208:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800620c:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800620e:	f7ff fe49 	bl	8005ea4 <SAI_InterruptFlag>
 8006212:	692b      	ldr	r3, [r5, #16]
 8006214:	ea23 0300 	bic.w	r3, r3, r0
 8006218:	612b      	str	r3, [r5, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 800621a:	2301      	movs	r3, #1
 800621c:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 8006220:	4620      	mov	r0, r4
 8006222:	f7fc f8b7 	bl	8002394 <HAL_SAI_TxCpltCallback>
}
 8006226:	bd38      	pop	{r3, r4, r5, pc}

08006228 <SAI_DMATxHalfCplt>:
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_TxHalfCpltCallback(hsai);
 8006228:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800622a:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 800622c:	f7fc f8b6 	bl	800239c <HAL_SAI_TxHalfCpltCallback>
}
 8006230:	bd08      	pop	{r3, pc}

08006232 <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)   
{
 8006232:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8006234:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006236:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	f411 7180 	ands.w	r1, r1, #256	@ 0x100
 800623e:	d110      	bne.n	8006262 <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006240:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
    
    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006242:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800624a:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 800624c:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006250:	f7ff fe28 	bl	8005ea4 <SAI_InterruptFlag>
 8006254:	692b      	ldr	r3, [r5, #16]
 8006256:	ea23 0300 	bic.w	r3, r3, r0
 800625a:	612b      	str	r3, [r5, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 800625c:	2301      	movs	r3, #1
 800625e:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai); 
 8006262:	4620      	mov	r0, r4
 8006264:	f7fc f988 	bl	8002578 <HAL_SAI_RxCpltCallback>
}
 8006268:	bd38      	pop	{r3, r4, r5, pc}

0800626a <SAI_DMARxHalfCplt>:
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_RxHalfCpltCallback(hsai); 
 800626a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800626c:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai); 
 800626e:	f7fc f987 	bl	8002580 <HAL_SAI_RxHalfCpltCallback>
}
 8006272:	bd08      	pop	{r3, pc}

08006274 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006274:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006276:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  
  /* Stop the DMA transfer */
  HAL_SAI_DMAStop(hsai);
 8006278:	4620      	mov	r0, r4
 800627a:	f7ff fefc 	bl	8006076 <HAL_SAI_DMAStop>
  
  /* Set the SAI state ready to be able to start again the process */
  hsai->State= HAL_SAI_STATE_READY;
 800627e:	2301      	movs	r3, #1
  HAL_SAI_ErrorCallback(hsai);
 8006280:	4620      	mov	r0, r4
  hsai->State= HAL_SAI_STATE_READY;
 8006282:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  HAL_SAI_ErrorCallback(hsai);
 8006286:	f7fc f981 	bl	800258c <HAL_SAI_ErrorCallback>
  
  hsai->XferCount = 0;
 800628a:	2300      	movs	r3, #0
 800628c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
}
 8006290:	bd10      	pop	{r4, pc}

08006292 <HAL_SAI_GetState>:
  return hsai->State;
 8006292:	f890 007d 	ldrb.w	r0, [r0, #125]	@ 0x7d
}
 8006296:	4770      	bx	lr

08006298 <SAI_BlockSynchroConfig>:
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
  uint32_t tmpregisterGCR = 0;
 
  /* This setting must be done with both audio block (A & B) disabled     */
  switch(hsai->Init.SynchroExt)
 8006298:	68c3      	ldr	r3, [r0, #12]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d014      	beq.n	80062c8 <SAI_BlockSynchroConfig+0x30>
 800629e:	1e9a      	subs	r2, r3, #2
 80062a0:	4253      	negs	r3, r2
 80062a2:	4153      	adcs	r3, r2
 80062a4:	015b      	lsls	r3, r3, #5
  default:
    tmpregisterGCR = 0;
    break;
  }
    
  if((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 80062a6:	6882      	ldr	r2, [r0, #8]
  {
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
  }
  
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80062a8:	6801      	ldr	r1, [r0, #0]
  if((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 80062aa:	2a03      	cmp	r2, #3
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80062ac:	4a09      	ldr	r2, [pc, #36]	@ (80062d4 <SAI_BlockSynchroConfig+0x3c>)
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80062ae:	bf08      	it	eq
 80062b0:	f043 0301 	orreq.w	r3, r3, #1
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80062b4:	4291      	cmp	r1, r2
 80062b6:	f6a2 0204 	subw	r2, r2, #2052	@ 0x804
 80062ba:	d002      	beq.n	80062c2 <SAI_BlockSynchroConfig+0x2a>
 80062bc:	4806      	ldr	r0, [pc, #24]	@ (80062d8 <SAI_BlockSynchroConfig+0x40>)
 80062be:	4281      	cmp	r1, r0
 80062c0:	d104      	bne.n	80062cc <SAI_BlockSynchroConfig+0x34>
  {
    SAI1->GCR = tmpregisterGCR;
 80062c2:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
 80062c6:	4770      	bx	lr
  switch(hsai->Init.SynchroExt)
 80062c8:	2310      	movs	r3, #16
 80062ca:	e7ec      	b.n	80062a6 <SAI_BlockSynchroConfig+0xe>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 80062cc:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
  }
}
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40015804 	.word	0x40015804
 80062d8:	40015824 	.word	0x40015824

080062dc <SAI_GetInputClock>:
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)   
{
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0;

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80062dc:	6803      	ldr	r3, [r0, #0]
 80062de:	4a06      	ldr	r2, [pc, #24]	@ (80062f8 <SAI_GetInputClock+0x1c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d002      	beq.n	80062ea <SAI_GetInputClock+0xe>
 80062e4:	3220      	adds	r2, #32
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d103      	bne.n	80062f2 <SAI_GetInputClock+0x16>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80062ea:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2); 
 80062ee:	f7ff bd71 	b.w	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq>
 80062f2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80062f6:	e7fa      	b.n	80062ee <SAI_GetInputClock+0x12>
 80062f8:	40015804 	.word	0x40015804

080062fc <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80062fc:	6803      	ldr	r3, [r0, #0]
 80062fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006300:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8006304:	d0fb      	beq.n	80062fe <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006308:	0752      	lsls	r2, r2, #29
 800630a:	d503      	bpl.n	8006314 <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800630c:	2204      	movs	r2, #4
    
    return errorstate;
 800630e:	2003      	movs	r0, #3
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006310:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8006312:	4770      	bx	lr
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8006314:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8006316:	f010 0001 	ands.w	r0, r0, #1
 800631a:	d002      	beq.n	8006322 <SD_CmdResp2Error+0x26>
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 800631c:	2001      	movs	r0, #1
 800631e:	6398      	str	r0, [r3, #56]	@ 0x38
    
    return errorstate;
 8006320:	4770      	bx	lr
  {
    /* No error flag set */
  }  
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006322:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8006326:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return errorstate;
}
 8006328:	4770      	bx	lr
	...

0800632c <SD_CmdResp1Error>:
{
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	4605      	mov	r5, r0
 8006330:	460e      	mov	r6, r1
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006332:	6800      	ldr	r0, [r0, #0]
 8006334:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006336:	f013 0f45 	tst.w	r3, #69	@ 0x45
 800633a:	d0fb      	beq.n	8006334 <SD_CmdResp1Error+0x8>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 800633c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800633e:	075c      	lsls	r4, r3, #29
 8006340:	d503      	bpl.n	800634a <SD_CmdResp1Error+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006342:	2304      	movs	r3, #4
 8006344:	6383      	str	r3, [r0, #56]	@ 0x38
    return errorstate;
 8006346:	2003      	movs	r0, #3
}
 8006348:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 800634a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800634c:	f014 0401 	ands.w	r4, r4, #1
 8006350:	d003      	beq.n	800635a <SD_CmdResp1Error+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8006352:	2301      	movs	r3, #1
 8006354:	6383      	str	r3, [r0, #56]	@ 0x38
    return errorstate;
 8006356:	4618      	mov	r0, r3
 8006358:	e7f6      	b.n	8006348 <SD_CmdResp1Error+0x1c>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 800635a:	f001 f816 	bl	800738a <SDMMC_GetCommandResponse>
 800635e:	42b0      	cmp	r0, r6
 8006360:	d001      	beq.n	8006366 <SD_CmdResp1Error+0x3a>
    return errorstate;
 8006362:	2010      	movs	r0, #16
 8006364:	e7f0      	b.n	8006348 <SD_CmdResp1Error+0x1c>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006366:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 800636a:	6828      	ldr	r0, [r5, #0]
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800636c:	4621      	mov	r1, r4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800636e:	6383      	str	r3, [r0, #56]	@ 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006370:	f001 f80e 	bl	8007390 <SDMMC_GetResponse>
 8006374:	4603      	mov	r3, r0
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8006376:	4828      	ldr	r0, [pc, #160]	@ (8006418 <SD_CmdResp1Error+0xec>)
 8006378:	4018      	ands	r0, r3
 800637a:	2800      	cmp	r0, #0
 800637c:	d0e4      	beq.n	8006348 <SD_CmdResp1Error+0x1c>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 800637e:	2b00      	cmp	r3, #0
 8006380:	db27      	blt.n	80063d2 <SD_CmdResp1Error+0xa6>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8006382:	0059      	lsls	r1, r3, #1
 8006384:	d427      	bmi.n	80063d6 <SD_CmdResp1Error+0xaa>
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8006386:	009a      	lsls	r2, r3, #2
 8006388:	d427      	bmi.n	80063da <SD_CmdResp1Error+0xae>
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 800638a:	00de      	lsls	r6, r3, #3
 800638c:	d427      	bmi.n	80063de <SD_CmdResp1Error+0xb2>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 800638e:	011d      	lsls	r5, r3, #4
 8006390:	d427      	bmi.n	80063e2 <SD_CmdResp1Error+0xb6>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8006392:	015c      	lsls	r4, r3, #5
 8006394:	d427      	bmi.n	80063e6 <SD_CmdResp1Error+0xba>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8006396:	01d9      	lsls	r1, r3, #7
 8006398:	d427      	bmi.n	80063ea <SD_CmdResp1Error+0xbe>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 800639a:	021a      	lsls	r2, r3, #8
 800639c:	d427      	bmi.n	80063ee <SD_CmdResp1Error+0xc2>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 800639e:	025e      	lsls	r6, r3, #9
 80063a0:	d4df      	bmi.n	8006362 <SD_CmdResp1Error+0x36>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 80063a2:	029d      	lsls	r5, r3, #10
 80063a4:	d425      	bmi.n	80063f2 <SD_CmdResp1Error+0xc6>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 80063a6:	02dc      	lsls	r4, r3, #11
 80063a8:	d425      	bmi.n	80063f6 <SD_CmdResp1Error+0xca>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 80063aa:	0319      	lsls	r1, r3, #12
 80063ac:	d425      	bmi.n	80063fa <SD_CmdResp1Error+0xce>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 80063ae:	035a      	lsls	r2, r3, #13
 80063b0:	d425      	bmi.n	80063fe <SD_CmdResp1Error+0xd2>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 80063b2:	039e      	lsls	r6, r3, #14
 80063b4:	d425      	bmi.n	8006402 <SD_CmdResp1Error+0xd6>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 80063b6:	03dd      	lsls	r5, r3, #15
 80063b8:	d425      	bmi.n	8006406 <SD_CmdResp1Error+0xda>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 80063ba:	041c      	lsls	r4, r3, #16
 80063bc:	d425      	bmi.n	800640a <SD_CmdResp1Error+0xde>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 80063be:	0459      	lsls	r1, r3, #17
 80063c0:	d425      	bmi.n	800640e <SD_CmdResp1Error+0xe2>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 80063c2:	049a      	lsls	r2, r3, #18
 80063c4:	d425      	bmi.n	8006412 <SD_CmdResp1Error+0xe6>
    return(SD_AKE_SEQ_ERROR);
 80063c6:	f013 0f08 	tst.w	r3, #8
 80063ca:	bf0c      	ite	eq
 80063cc:	2000      	moveq	r0, #0
 80063ce:	201a      	movne	r0, #26
 80063d0:	e7ba      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_ADDR_OUT_OF_RANGE);
 80063d2:	201c      	movs	r0, #28
 80063d4:	e7b8      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_ADDR_MISALIGNED);
 80063d6:	2009      	movs	r0, #9
 80063d8:	e7b6      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_BLOCK_LEN_ERR);
 80063da:	200a      	movs	r0, #10
 80063dc:	e7b4      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_ERASE_SEQ_ERR);
 80063de:	200b      	movs	r0, #11
 80063e0:	e7b2      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_BAD_ERASE_PARAM);
 80063e2:	200c      	movs	r0, #12
 80063e4:	e7b0      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_WRITE_PROT_VIOLATION);
 80063e6:	200d      	movs	r0, #13
 80063e8:	e7ae      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_LOCK_UNLOCK_FAILED);
 80063ea:	200e      	movs	r0, #14
 80063ec:	e7ac      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_COM_CRC_FAILED);
 80063ee:	200f      	movs	r0, #15
 80063f0:	e7aa      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_CARD_ECC_FAILED);
 80063f2:	2011      	movs	r0, #17
 80063f4:	e7a8      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_CC_ERROR);
 80063f6:	2012      	movs	r0, #18
 80063f8:	e7a6      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_GENERAL_UNKNOWN_ERROR);
 80063fa:	2013      	movs	r0, #19
 80063fc:	e7a4      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_STREAM_READ_UNDERRUN);
 80063fe:	2014      	movs	r0, #20
 8006400:	e7a2      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_STREAM_WRITE_OVERRUN);
 8006402:	2015      	movs	r0, #21
 8006404:	e7a0      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_CID_CSD_OVERWRITE);
 8006406:	2016      	movs	r0, #22
 8006408:	e79e      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_WP_ERASE_SKIP);
 800640a:	2017      	movs	r0, #23
 800640c:	e79c      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_CARD_ECC_DISABLED);
 800640e:	2018      	movs	r0, #24
 8006410:	e79a      	b.n	8006348 <SD_CmdResp1Error+0x1c>
    return(SD_ERASE_RESET);
 8006412:	2019      	movs	r0, #25
 8006414:	e798      	b.n	8006348 <SD_CmdResp1Error+0x1c>
 8006416:	bf00      	nop
 8006418:	fdffe008 	.word	0xfdffe008

0800641c <SD_IsCardProgramming>:
{
  SDMMC_CmdInitTypeDef sdmmc_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  __IO uint32_t responseR1 = 0;
  
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800641c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  __IO uint32_t responseR1 = 0;
 800641e:	2200      	movs	r2, #0
{
 8006420:	b5f0      	push	{r4, r5, r6, r7, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006422:	041b      	lsls	r3, r3, #16
{
 8006424:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006426:	260d      	movs	r6, #13
{
 8006428:	4605      	mov	r5, r0
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800642a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800642c:	2340      	movs	r3, #64	@ 0x40
{
 800642e:	460f      	mov	r7, r1
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006430:	6800      	ldr	r0, [r0, #0]
 8006432:	a901      	add	r1, sp, #4
  __IO uint32_t responseR1 = 0;
 8006434:	9200      	str	r2, [sp, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006436:	9204      	str	r2, [sp, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006438:	e9cd 6302 	strd	r6, r3, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800643c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006440:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006442:	f000 ff8f 	bl	8007364 <SDMMC_SendCommand>
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006446:	6828      	ldr	r0, [r5, #0]
 8006448:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800644a:	f013 0f45 	tst.w	r3, #69	@ 0x45
 800644e:	d0fb      	beq.n	8006448 <SD_IsCardProgramming+0x2c>
  {
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006450:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006452:	075c      	lsls	r4, r3, #29
 8006454:	d505      	bpl.n	8006462 <SD_IsCardProgramming+0x46>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006456:	2304      	movs	r3, #4
    
    return errorstate;
 8006458:	2403      	movs	r4, #3
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800645a:	6383      	str	r3, [r0, #56]	@ 0x38
  {
    return(SD_AKE_SEQ_ERROR);
  }
  
  return errorstate;
}   
 800645c:	4620      	mov	r0, r4
 800645e:	b007      	add	sp, #28
 8006460:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8006462:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8006464:	f016 0601 	ands.w	r6, r6, #1
 8006468:	d002      	beq.n	8006470 <SD_IsCardProgramming+0x54>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 800646a:	2401      	movs	r4, #1
 800646c:	6384      	str	r4, [r0, #56]	@ 0x38
    return errorstate;
 800646e:	e7f5      	b.n	800645c <SD_IsCardProgramming+0x40>
  if((uint32_t)SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD_SEND_STATUS)
 8006470:	f000 ff8b 	bl	800738a <SDMMC_GetCommandResponse>
 8006474:	280d      	cmp	r0, #13
 8006476:	4604      	mov	r4, r0
 8006478:	d001      	beq.n	800647e <SD_IsCardProgramming+0x62>
    return errorstate;
 800647a:	2410      	movs	r4, #16
 800647c:	e7ee      	b.n	800645c <SD_IsCardProgramming+0x40>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800647e:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 8006482:	6828      	ldr	r0, [r5, #0]
  responseR1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006484:	4631      	mov	r1, r6
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006486:	6383      	str	r3, [r0, #56]	@ 0x38
  responseR1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006488:	f000 ff82 	bl	8007390 <SDMMC_GetResponse>
 800648c:	9000      	str	r0, [sp, #0]
  *pStatus = (uint8_t)((responseR1 >> 9) & 0x0000000F);
 800648e:	9b00      	ldr	r3, [sp, #0]
  if((responseR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8006490:	9a00      	ldr	r2, [sp, #0]
  *pStatus = (uint8_t)((responseR1 >> 9) & 0x0000000F);
 8006492:	f3c3 2343 	ubfx	r3, r3, #9, #4
 8006496:	703b      	strb	r3, [r7, #0]
  if((responseR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8006498:	4b31      	ldr	r3, [pc, #196]	@ (8006560 <SD_IsCardProgramming+0x144>)
 800649a:	4013      	ands	r3, r2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d03c      	beq.n	800651a <SD_IsCardProgramming+0xfe>
  if((responseR1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 80064a0:	9b00      	ldr	r3, [sp, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	db3b      	blt.n	800651e <SD_IsCardProgramming+0x102>
  if((responseR1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	0059      	lsls	r1, r3, #1
 80064aa:	d43a      	bmi.n	8006522 <SD_IsCardProgramming+0x106>
  if((responseR1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 80064ac:	9b00      	ldr	r3, [sp, #0]
 80064ae:	009a      	lsls	r2, r3, #2
 80064b0:	d439      	bmi.n	8006526 <SD_IsCardProgramming+0x10a>
  if((responseR1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 80064b2:	9b00      	ldr	r3, [sp, #0]
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	d438      	bmi.n	800652a <SD_IsCardProgramming+0x10e>
  if((responseR1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 80064b8:	9b00      	ldr	r3, [sp, #0]
 80064ba:	011f      	lsls	r7, r3, #4
 80064bc:	d437      	bmi.n	800652e <SD_IsCardProgramming+0x112>
  if((responseR1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 80064be:	9b00      	ldr	r3, [sp, #0]
 80064c0:	015e      	lsls	r6, r3, #5
 80064c2:	d4cb      	bmi.n	800645c <SD_IsCardProgramming+0x40>
  if((responseR1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 80064c4:	9b00      	ldr	r3, [sp, #0]
 80064c6:	01dd      	lsls	r5, r3, #7
 80064c8:	d433      	bmi.n	8006532 <SD_IsCardProgramming+0x116>
  if((responseR1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 80064ca:	9b00      	ldr	r3, [sp, #0]
 80064cc:	0218      	lsls	r0, r3, #8
 80064ce:	d432      	bmi.n	8006536 <SD_IsCardProgramming+0x11a>
  if((responseR1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 80064d0:	9b00      	ldr	r3, [sp, #0]
 80064d2:	0259      	lsls	r1, r3, #9
 80064d4:	d4d1      	bmi.n	800647a <SD_IsCardProgramming+0x5e>
  if((responseR1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 80064d6:	9b00      	ldr	r3, [sp, #0]
 80064d8:	029a      	lsls	r2, r3, #10
 80064da:	d42e      	bmi.n	800653a <SD_IsCardProgramming+0x11e>
  if((responseR1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 80064dc:	9b00      	ldr	r3, [sp, #0]
 80064de:	02db      	lsls	r3, r3, #11
 80064e0:	d42d      	bmi.n	800653e <SD_IsCardProgramming+0x122>
  if((responseR1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 80064e2:	9b00      	ldr	r3, [sp, #0]
 80064e4:	031f      	lsls	r7, r3, #12
 80064e6:	d42c      	bmi.n	8006542 <SD_IsCardProgramming+0x126>
  if((responseR1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 80064e8:	9b00      	ldr	r3, [sp, #0]
 80064ea:	035e      	lsls	r6, r3, #13
 80064ec:	d42b      	bmi.n	8006546 <SD_IsCardProgramming+0x12a>
  if((responseR1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 80064ee:	9b00      	ldr	r3, [sp, #0]
 80064f0:	039d      	lsls	r5, r3, #14
 80064f2:	d42a      	bmi.n	800654a <SD_IsCardProgramming+0x12e>
  if((responseR1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 80064f4:	9b00      	ldr	r3, [sp, #0]
 80064f6:	03d8      	lsls	r0, r3, #15
 80064f8:	d429      	bmi.n	800654e <SD_IsCardProgramming+0x132>
  if((responseR1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 80064fa:	9b00      	ldr	r3, [sp, #0]
 80064fc:	0419      	lsls	r1, r3, #16
 80064fe:	d428      	bmi.n	8006552 <SD_IsCardProgramming+0x136>
  if((responseR1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8006500:	9b00      	ldr	r3, [sp, #0]
 8006502:	045a      	lsls	r2, r3, #17
 8006504:	d427      	bmi.n	8006556 <SD_IsCardProgramming+0x13a>
  if((responseR1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8006506:	9b00      	ldr	r3, [sp, #0]
 8006508:	049b      	lsls	r3, r3, #18
 800650a:	d426      	bmi.n	800655a <SD_IsCardProgramming+0x13e>
  if((responseR1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
 800650c:	9b00      	ldr	r3, [sp, #0]
    return(SD_AKE_SEQ_ERROR);
 800650e:	f013 0f08 	tst.w	r3, #8
 8006512:	bf0c      	ite	eq
 8006514:	2400      	moveq	r4, #0
 8006516:	241a      	movne	r4, #26
 8006518:	e7a0      	b.n	800645c <SD_IsCardProgramming+0x40>
    return errorstate;
 800651a:	461c      	mov	r4, r3
 800651c:	e79e      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_ADDR_OUT_OF_RANGE);
 800651e:	241c      	movs	r4, #28
 8006520:	e79c      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_ADDR_MISALIGNED);
 8006522:	2409      	movs	r4, #9
 8006524:	e79a      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_BLOCK_LEN_ERR);
 8006526:	240a      	movs	r4, #10
 8006528:	e798      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_ERASE_SEQ_ERR);
 800652a:	240b      	movs	r4, #11
 800652c:	e796      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_BAD_ERASE_PARAM);
 800652e:	240c      	movs	r4, #12
 8006530:	e794      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_LOCK_UNLOCK_FAILED);
 8006532:	240e      	movs	r4, #14
 8006534:	e792      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_COM_CRC_FAILED);
 8006536:	240f      	movs	r4, #15
 8006538:	e790      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_CARD_ECC_FAILED);
 800653a:	2411      	movs	r4, #17
 800653c:	e78e      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_CC_ERROR);
 800653e:	2412      	movs	r4, #18
 8006540:	e78c      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_GENERAL_UNKNOWN_ERROR);
 8006542:	2413      	movs	r4, #19
 8006544:	e78a      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_STREAM_READ_UNDERRUN);
 8006546:	2414      	movs	r4, #20
 8006548:	e788      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_STREAM_WRITE_OVERRUN);
 800654a:	2415      	movs	r4, #21
 800654c:	e786      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_CID_CSD_OVERWRITE);
 800654e:	2416      	movs	r4, #22
 8006550:	e784      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_WP_ERASE_SKIP);
 8006552:	2417      	movs	r4, #23
 8006554:	e782      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_CARD_ECC_DISABLED);
 8006556:	2418      	movs	r4, #24
 8006558:	e780      	b.n	800645c <SD_IsCardProgramming+0x40>
    return(SD_ERASE_RESET);
 800655a:	2419      	movs	r4, #25
 800655c:	e77e      	b.n	800645c <SD_IsCardProgramming+0x40>
 800655e:	bf00      	nop
 8006560:	fdffe008 	.word	0xfdffe008

08006564 <SD_FindSCR.constprop.0>:
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8006564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tempscr[2] = {0, 0};
 8006568:	2300      	movs	r3, #0
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 800656a:	b08e      	sub	sp, #56	@ 0x38
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800656c:	2240      	movs	r2, #64	@ 0x40
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800656e:	2410      	movs	r4, #16
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8006570:	4606      	mov	r6, r0
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006572:	2708      	movs	r7, #8
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8006574:	460d      	mov	r5, r1
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006576:	6800      	ldr	r0, [r0, #0]
 8006578:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800657a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  uint32_t tempscr[2] = {0, 0};
 800657e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006586:	e9cd 7403 	strd	r7, r4, [sp, #12]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800658a:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800658c:	f000 feea 	bl	8007364 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006590:	4621      	mov	r1, r4
 8006592:	4630      	mov	r0, r6
 8006594:	f7ff feca 	bl	800632c <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8006598:	4604      	mov	r4, r0
 800659a:	2800      	cmp	r0, #0
 800659c:	d138      	bne.n	8006610 <SD_FindSCR.constprop.0+0xac>
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 800659e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80065a0:	2437      	movs	r4, #55	@ 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80065a2:	a903      	add	r1, sp, #12
 80065a4:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 80065a6:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80065a8:	9404      	str	r4, [sp, #16]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 80065aa:	9303      	str	r3, [sp, #12]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80065ac:	f000 feda 	bl	8007364 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80065b0:	4621      	mov	r1, r4
 80065b2:	4630      	mov	r0, r6
 80065b4:	f7ff feba 	bl	800632c <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 80065b8:	4604      	mov	r4, r0
 80065ba:	bb48      	cbnz	r0, 8006610 <SD_FindSCR.constprop.0+0xac>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 80065bc:	f04f 33ff 	mov.w	r3, #4294967295
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80065c0:	2230      	movs	r2, #48	@ 0x30
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 80065c2:	a908      	add	r1, sp, #32
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80065c4:	900c      	str	r0, [sp, #48]	@ 0x30
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 80065c6:	6830      	ldr	r0, [r6, #0]
  sdmmc_datainitstructure.DataLength    = 8;
 80065c8:	e9cd 3708 	strd	r3, r7, [sp, #32]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80065cc:	2302      	movs	r3, #2
 80065ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80065d2:	2301      	movs	r3, #1
 80065d4:	930d      	str	r3, [sp, #52]	@ 0x34
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 80065d6:	f000 fee5 	bl	80073a4 <SDMMC_DataConfig>
  sdmmc_cmdinitstructure.Argument         = 0;
 80065da:	9403      	str	r4, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 80065dc:	2433      	movs	r4, #51	@ 0x33
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80065de:	a903      	add	r1, sp, #12
 80065e0:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 80065e2:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80065e4:	f000 febe 	bl	8007364 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 80065e8:	4621      	mov	r1, r4
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7ff fe9e 	bl	800632c <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 80065f0:	4604      	mov	r4, r0
 80065f2:	b968      	cbnz	r0, 8006610 <SD_FindSCR.constprop.0+0xac>
 80065f4:	af01      	add	r7, sp, #4
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80065f6:	f240 482a 	movw	r8, #1066	@ 0x42a
 80065fa:	6830      	ldr	r0, [r6, #0]
 80065fc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80065fe:	ea13 0f08 	tst.w	r3, r8
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006602:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006604:	d008      	beq.n	8006618 <SD_FindSCR.constprop.0+0xb4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006606:	0719      	lsls	r1, r3, #28
 8006608:	d50d      	bpl.n	8006626 <SD_FindSCR.constprop.0+0xc2>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800660a:	2308      	movs	r3, #8
    return errorstate;
 800660c:	2404      	movs	r4, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800660e:	6383      	str	r3, [r0, #56]	@ 0x38
}
 8006610:	4620      	mov	r0, r4
 8006612:	b00e      	add	sp, #56	@ 0x38
 8006614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006618:	029b      	lsls	r3, r3, #10
 800661a:	d5ef      	bpl.n	80065fc <SD_FindSCR.constprop.0+0x98>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800661c:	f000 fe92 	bl	8007344 <SDMMC_ReadFIFO>
 8006620:	f847 0b04 	str.w	r0, [r7], #4
      index++;
 8006624:	e7e9      	b.n	80065fa <SD_FindSCR.constprop.0+0x96>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006626:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006628:	079a      	lsls	r2, r3, #30
 800662a:	d502      	bpl.n	8006632 <SD_FindSCR.constprop.0+0xce>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800662c:	2402      	movs	r4, #2
 800662e:	6384      	str	r4, [r0, #56]	@ 0x38
    return errorstate;
 8006630:	e7ee      	b.n	8006610 <SD_FindSCR.constprop.0+0xac>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006632:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006634:	069b      	lsls	r3, r3, #26
 8006636:	d503      	bpl.n	8006640 <SD_FindSCR.constprop.0+0xdc>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006638:	2320      	movs	r3, #32
    return errorstate;
 800663a:	2406      	movs	r4, #6
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800663c:	6383      	str	r3, [r0, #56]	@ 0x38
    return errorstate;
 800663e:	e7e7      	b.n	8006610 <SD_FindSCR.constprop.0+0xac>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006640:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 8006644:	6383      	str	r3, [r0, #56]	@ 0x38
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 8006646:	9b01      	ldr	r3, [sp, #4]
 8006648:	ba1b      	rev	r3, r3
 800664a:	606b      	str	r3, [r5, #4]
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 800664c:	9b02      	ldr	r3, [sp, #8]
 800664e:	ba1b      	rev	r3, r3
 8006650:	602b      	str	r3, [r5, #0]
  return errorstate;
 8006652:	e7dd      	b.n	8006610 <SD_FindSCR.constprop.0+0xac>

08006654 <HAL_SD_MspInit>:
}
 8006654:	4770      	bx	lr

08006656 <HAL_SD_Get_CardInfo>:
{
 8006656:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8006658:	6a06      	ldr	r6, [r0, #32]
{
 800665a:	4605      	mov	r5, r0
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 800665c:	f881 6056 	strb.w	r6, [r1, #86]	@ 0x56
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8006660:	2e01      	cmp	r6, #1
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 8006662:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006664:	f8a1 3054 	strh.w	r3, [r1, #84]	@ 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 8006668:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800666a:	ea4f 7293 	mov.w	r2, r3, lsr #30
 800666e:	700a      	strb	r2, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8006670:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8006674:	704a      	strb	r2, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8006676:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800667a:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 800667c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006680:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8006682:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006686:	b2db      	uxtb	r3, r3
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8006688:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 800668a:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 800668c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800668e:	ea4f 6213 	mov.w	r2, r3, lsr #24
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8006692:	f3c3 5003 	ubfx	r0, r3, #20, #4
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 8006696:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800669a:	80ca      	strh	r2, [r1, #6]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800669c:	88ca      	ldrh	r2, [r1, #6]
 800669e:	b292      	uxth	r2, r2
 80066a0:	ea42 0200 	orr.w	r2, r2, r0
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80066a4:	f3c3 30c0 	ubfx	r0, r3, #15, #1
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80066a8:	80ca      	strh	r2, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80066aa:	f3c3 4203 	ubfx	r2, r3, #16, #4
 80066ae:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 80066b0:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80066b4:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80066b6:	f3c3 3080 	ubfx	r0, r3, #14, #1
 80066ba:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80066bc:	f3c3 3040 	ubfx	r0, r3, #13, #1
 80066c0:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80066c2:	f3c3 3000 	ubfx	r0, r3, #12, #1
 80066c6:	7308      	strb	r0, [r1, #12]
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 80066c8:	f04f 0000 	mov.w	r0, #0
 80066cc:	7348      	strb	r0, [r1, #13]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 80066ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 80066d0:	f200 80dc 	bhi.w	800688c <HAL_SD_Get_CardInfo+0x236>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 80066d4:	0292      	lsls	r2, r2, #10
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80066d6:	f3c4 36c0 	ubfx	r6, r4, #15, #1
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 80066da:	009b      	lsls	r3, r3, #2
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 80066dc:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 80066e0:	f403 737f 	and.w	r3, r3, #1020	@ 0x3fc
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 80066e4:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 80066e6:	690a      	ldr	r2, [r1, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80066ee:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 80066f0:	690b      	ldr	r3, [r1, #16]
 80066f2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80066f6:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80066f8:	f3c4 63c2 	ubfx	r3, r4, #27, #3
 80066fc:	750b      	strb	r3, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 80066fe:	f3c4 6302 	ubfx	r3, r4, #24, #3
 8006702:	754b      	strb	r3, [r1, #21]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8006704:	f3c4 5342 	ubfx	r3, r4, #21, #3
 8006708:	758b      	strb	r3, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800670a:	f3c4 4382 	ubfx	r3, r4, #18, #3
 800670e:	75cb      	strb	r3, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 8006710:	0be3      	lsrs	r3, r4, #15
 8006712:	f003 0306 	and.w	r3, r3, #6
 8006716:	760b      	strb	r3, [r1, #24]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8006718:	7e0b      	ldrb	r3, [r1, #24]
 800671a:	4333      	orrs	r3, r6
 800671c:	760b      	strb	r3, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 800671e:	2301      	movs	r3, #1
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8006720:	f8d1 c010 	ldr.w	ip, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8006724:	7e0e      	ldrb	r6, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8006726:	7a0f      	ldrb	r7, [r1, #8]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8006728:	3602      	adds	r6, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 800672a:	fa03 f707 	lsl.w	r7, r3, r7
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 800672e:	40b3      	lsls	r3, r6
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8006730:	650f      	str	r7, [r1, #80]	@ 0x50
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8006732:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8006736:	fba3 3607 	umull	r3, r6, r3, r7
 800673a:	fb07 660e 	mla	r6, r7, lr, r6
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 800673e:	f10c 0701 	add.w	r7, ip, #1
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8006742:	fb0c 6606 	mla	r6, ip, r6, r6
 8006746:	fba3 3707 	umull	r3, r7, r3, r7
 800674a:	443e      	add	r6, r7
 800674c:	e9c1 3612 	strd	r3, r6, [r1, #72]	@ 0x48
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8006750:	f3c2 1380 	ubfx	r3, r2, #6, #1
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8006754:	0052      	lsls	r2, r2, #1
 8006756:	f002 027e 	and.w	r2, r2, #126	@ 0x7e
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 800675a:	764b      	strb	r3, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 800675c:	768a      	strb	r2, [r1, #26]
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 800675e:	f3c4 12c0 	ubfx	r2, r4, #7, #1
 8006762:	7e8b      	ldrb	r3, [r1, #26]
 8006764:	4313      	orrs	r3, r2
 8006766:	768b      	strb	r3, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8006768:	f004 037f 	and.w	r3, r4, #127	@ 0x7f
 800676c:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 800676e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006770:	0fda      	lsrs	r2, r3, #31
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8006772:	f3c3 5481 	ubfx	r4, r3, #22, #2
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006776:	770a      	strb	r2, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 8006778:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800677c:	774a      	strb	r2, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 800677e:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8006782:	778a      	strb	r2, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 8006784:	0d9a      	lsrs	r2, r3, #22
 8006786:	f002 020c 	and.w	r2, r2, #12
 800678a:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800678c:	7fca      	ldrb	r2, [r1, #31]
 800678e:	4322      	orrs	r2, r4
  pCardInfo->SD_csd.Reserved4 = 1;
 8006790:	2401      	movs	r4, #1
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8006792:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8006794:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8006798:	f881 2020 	strb.w	r2, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 800679c:	2200      	movs	r2, #0
 800679e:	f881 2021 	strb.w	r2, [r1, #33]	@ 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 80067a2:	f3c3 4200 	ubfx	r2, r3, #16, #1
 80067a6:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 80067aa:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80067ae:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 80067b2:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80067b6:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 80067ba:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80067be:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 80067c2:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80067c6:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 80067ca:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80067ce:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 80067d2:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 80067d6:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 80067da:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 80067de:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 80067e2:	f881 402a 	strb.w	r4, [r1, #42]	@ 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 80067e6:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80067e8:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 80067ea:	f3c3 2607 	ubfx	r6, r3, #8, #8
  pCardInfo->SD_cid.ManufacturerID = tmp;
 80067ee:	f881 202c 	strb.w	r2, [r1, #44]	@ 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 80067f2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80067f6:	061b      	lsls	r3, r3, #24
 80067f8:	0212      	lsls	r2, r2, #8
 80067fa:	85ca      	strh	r2, [r1, #46]	@ 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 80067fc:	8dca      	ldrh	r2, [r1, #46]	@ 0x2e
 80067fe:	b292      	uxth	r2, r2
 8006800:	4332      	orrs	r2, r6
 8006802:	85ca      	strh	r2, [r1, #46]	@ 0x2e
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 8006804:	630b      	str	r3, [r1, #48]	@ 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8006806:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 8006808:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 800680a:	0e1e      	lsrs	r6, r3, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 800680c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8006810:	630a      	str	r2, [r1, #48]	@ 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 8006812:	0a1a      	lsrs	r2, r3, #8
 8006814:	6b0e      	ldr	r6, [r1, #48]	@ 0x30
 8006816:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 800681a:	4332      	orrs	r2, r6
 800681c:	630a      	str	r2, [r1, #48]	@ 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 800681e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006822:	6b0e      	ldr	r6, [r1, #48]	@ 0x30
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 8006824:	b2db      	uxtb	r3, r3
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8006826:	4332      	orrs	r2, r6
 8006828:	630a      	str	r2, [r1, #48]	@ 0x30
  pCardInfo->SD_cid.ProdName2 = tmp;
 800682a:	f881 3034 	strb.w	r3, [r1, #52]	@ 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 800682e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8006830:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ProdRev = tmp;
 8006832:	f881 2035 	strb.w	r2, [r1, #53]	@ 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 8006836:	0c1a      	lsrs	r2, r3, #16
 8006838:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 800683a:	638a      	str	r2, [r1, #56]	@ 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 800683c:	021a      	lsls	r2, r3, #8
 800683e:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 8006840:	021b      	lsls	r3, r3, #8
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 8006842:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 8006846:	b29b      	uxth	r3, r3
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 8006848:	4332      	orrs	r2, r6
 800684a:	638a      	str	r2, [r1, #56]	@ 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 800684c:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 800684e:	4313      	orrs	r3, r2
 8006850:	638b      	str	r3, [r1, #56]	@ 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 8006852:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 8006854:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8006856:	f3c3 5503 	ubfx	r5, r3, #20, #4
  pCardInfo->SD_cid.ProdSN |= tmp;
 800685a:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800685e:	638a      	str	r2, [r1, #56]	@ 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8006860:	f891 203c 	ldrb.w	r2, [r1, #60]	@ 0x3c
 8006864:	432a      	orrs	r2, r5
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8006866:	f3c3 2507 	ubfx	r5, r3, #8, #8
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 800686a:	f881 203c 	strb.w	r2, [r1, #60]	@ 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 800686e:	0a1a      	lsrs	r2, r3, #8
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8006870:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8006874:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8006878:	87ca      	strh	r2, [r1, #62]	@ 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 800687a:	8fca      	ldrh	r2, [r1, #62]	@ 0x3e
 800687c:	b292      	uxth	r2, r2
 800687e:	432a      	orrs	r2, r5
 8006880:	87ca      	strh	r2, [r1, #62]	@ 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8006882:	f881 3040 	strb.w	r3, [r1, #64]	@ 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 8006886:	f881 4041 	strb.w	r4, [r1, #65]	@ 0x41
}
 800688a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800688c:	2e02      	cmp	r6, #2
 800688e:	d11d      	bne.n	80068cc <HAL_SD_Get_CardInfo+0x276>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8006890:	041a      	lsls	r2, r3, #16
 8006892:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8006896:	610a      	str	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8006898:	0e22      	lsrs	r2, r4, #24
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 800689a:	690b      	ldr	r3, [r1, #16]
 800689c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068a0:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 80068a2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80068a6:	690a      	ldr	r2, [r1, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80068ae:	610b      	str	r3, [r1, #16]
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 80068b0:	690b      	ldr	r3, [r1, #16]
 80068b2:	3301      	adds	r3, #1
 80068b4:	f140 0600 	adc.w	r6, r0, #0
 80068b8:	04f6      	lsls	r6, r6, #19
 80068ba:	ea46 3653 	orr.w	r6, r6, r3, lsr #13
 80068be:	04db      	lsls	r3, r3, #19
 80068c0:	e9c1 3612 	strd	r3, r6, [r1, #72]	@ 0x48
    pCardInfo->CardBlockSize = 512;
 80068c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068c8:	650b      	str	r3, [r1, #80]	@ 0x50
 80068ca:	e741      	b.n	8006750 <HAL_SD_Get_CardInfo+0xfa>
    errorstate = SD_ERROR;
 80068cc:	2029      	movs	r0, #41	@ 0x29
 80068ce:	e73f      	b.n	8006750 <HAL_SD_Get_CardInfo+0xfa>

080068d0 <HAL_SD_Init>:
{ 
 80068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 80068d4:	2500      	movs	r5, #0
{ 
 80068d6:	b091      	sub	sp, #68	@ 0x44
 80068d8:	4604      	mov	r4, r0
 80068da:	460e      	mov	r6, r1
  hsd->Lock = HAL_UNLOCKED;
 80068dc:	7705      	strb	r5, [r0, #28]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 80068de:	f88d 5012 	strb.w	r5, [sp, #18]
  HAL_SD_MspInit(hsd);
 80068e2:	f7ff feb7 	bl	8006654 <HAL_SD_MspInit>
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80068e6:	2376      	movs	r3, #118	@ 0x76
  tmpinit.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80068e8:	950e      	str	r5, [sp, #56]	@ 0x38
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80068ea:	930f      	str	r3, [sp, #60]	@ 0x3c
  SDMMC_Init(hsd->Instance, tmpinit);
 80068ec:	ab10      	add	r3, sp, #64	@ 0x40
  tmpinit.BusWide             = SDMMC_BUS_WIDE_1B;
 80068ee:	e9cd 550c 	strd	r5, r5, [sp, #48]	@ 0x30
  SDMMC_Init(hsd->Instance, tmpinit);
 80068f2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80068f6:	ab0a      	add	r3, sp, #40	@ 0x28
  tmpinit.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80068f8:	e9cd 550a 	strd	r5, r5, [sp, #40]	@ 0x28
  SDMMC_Init(hsd->Instance, tmpinit);
 80068fc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006902:	6820      	ldr	r0, [r4, #0]
 8006904:	f000 fd02 	bl	800730c <SDMMC_Init>
  __HAL_SD_SDMMC_DISABLE(hsd); 
 8006908:	6820      	ldr	r0, [r4, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 800690a:	f88d 5013 	strb.w	r5, [sp, #19]
  __HAL_SD_SDMMC_DISABLE(hsd); 
 800690e:	6843      	ldr	r3, [r0, #4]
 8006910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006914:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8006916:	f000 fd1d 	bl	8007354 <SDMMC_PowerState_ON>
  HAL_Delay(1);
 800691a:	2001      	movs	r0, #1
 800691c:	f006 fe9e 	bl	800d65c <HAL_Delay>
  __HAL_SD_SDMMC_ENABLE(hsd);
 8006920:	6820      	ldr	r0, [r4, #0]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006922:	a905      	add	r1, sp, #20
  __HAL_SD_SDMMC_ENABLE(hsd);
 8006924:	6843      	ldr	r3, [r0, #4]
 8006926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800692a:	6043      	str	r3, [r0, #4]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800692c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 8006930:	e9cd 5505 	strd	r5, r5, [sp, #20]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006934:	e9cd 5507 	strd	r5, r5, [sp, #28]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006938:	9309      	str	r3, [sp, #36]	@ 0x24
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800693a:	f000 fd13 	bl	8007364 <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 800693e:	6820      	ldr	r0, [r4, #0]
 8006940:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while((timeout > 0) && (!tmp))
 8006942:	061d      	lsls	r5, r3, #24
 8006944:	d408      	bmi.n	8006958 <HAL_SD_Init+0x88>
  timeout = SDMMC_CMD0TIMEOUT;
 8006946:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 800694a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while((timeout > 0) && (!tmp))
 800694c:	3a01      	subs	r2, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 800694e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  while((timeout > 0) && (!tmp))
 8006952:	d01e      	beq.n	8006992 <HAL_SD_Init+0xc2>
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0f8      	beq.n	800694a <HAL_SD_Init+0x7a>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006958:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 800695c:	6383      	str	r3, [r0, #56]	@ 0x38
  return errorstate;
 800695e:	2300      	movs	r3, #0
  errorstate = SD_CmdError(hsd);
 8006960:	f88d 3013 	strb.w	r3, [sp, #19]
  if(errorstate != SD_OK)
 8006964:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006968:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 800696c:	b19b      	cbz	r3, 8006996 <HAL_SD_Init+0xc6>
  return errorstate;
 800696e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006972:	b2db      	uxtb	r3, r3
  errorstate = SD_PowerON(hsd); 
 8006974:	f88d 3012 	strb.w	r3, [sp, #18]
  if(errorstate != SD_OK)     
 8006978:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800697c:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 80b1 	beq.w	8006ae8 <HAL_SD_Init+0x218>
  return errorstate;
 8006986:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800698a:	b2c0      	uxtb	r0, r0
}
 800698c:	b011      	add	sp, #68	@ 0x44
 800698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return errorstate;
 8006992:	2303      	movs	r3, #3
 8006994:	e7e4      	b.n	8006960 <HAL_SD_Init+0x90>
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 8006996:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800699a:	2308      	movs	r3, #8
 800699c:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80069a0:	2340      	movs	r3, #64	@ 0x40
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80069a2:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80069a4:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80069a6:	f000 fcdd 	bl	8007364 <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 80069aa:	6820      	ldr	r0, [r4, #0]
 80069ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80069ae:	f013 0f45 	tst.w	r3, #69	@ 0x45
  uint32_t timeout = SDMMC_CMD0TIMEOUT, tmp;
 80069b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 80069b6:	bf14      	ite	ne
 80069b8:	2201      	movne	r2, #1
 80069ba:	2200      	moveq	r2, #0
  while((!tmp) && (timeout > 0))
 80069bc:	b90a      	cbnz	r2, 80069c2 <HAL_SD_Init+0xf2>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d175      	bne.n	8006aae <HAL_SD_Init+0x1de>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT); 
 80069c2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80069c4:	f002 0204 	and.w	r2, r2, #4
  if((timeout == 0) || tmp)
 80069c8:	b10b      	cbz	r3, 80069ce <HAL_SD_Init+0xfe>
 80069ca:	2a00      	cmp	r2, #0
 80069cc:	d077      	beq.n	8006abe <HAL_SD_Init+0x1ee>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80069ce:	2304      	movs	r3, #4
    return errorstate;
 80069d0:	2503      	movs	r5, #3
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80069d2:	6383      	str	r3, [r0, #56]	@ 0x38
  errorstate = SD_CmdResp7Error(hsd);
 80069d4:	f88d 5013 	strb.w	r5, [sp, #19]
  if (errorstate == SD_OK)
 80069d8:	2300      	movs	r3, #0
 80069da:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80069de:	2a00      	cmp	r2, #0
 80069e0:	d175      	bne.n	8006ace <HAL_SD_Init+0x1fe>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 80069e2:	2201      	movs	r2, #1
    sdtype        = SD_HIGH_CAPACITY;
 80069e4:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 80069e8:	6222      	str	r2, [r4, #32]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80069ea:	2537      	movs	r5, #55	@ 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80069ec:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Argument         = 0;
 80069ee:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80069f0:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80069f2:	f000 fcb7 	bl	8007364 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80069f6:	4629      	mov	r1, r5
 80069f8:	4620      	mov	r0, r4
 80069fa:	f7ff fc97 	bl	800632c <SD_CmdResp1Error>
 80069fe:	f88d 0013 	strb.w	r0, [sp, #19]
  if(errorstate == SD_OK)
 8006a02:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006a06:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1af      	bne.n	800696e <HAL_SD_Init+0x9e>
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8006a0e:	f047 4700 	orr.w	r7, r7, #2147483648	@ 0x80000000
      sdmmc_cmdinitstructure.Argument         = 0;
 8006a12:	46a8      	mov	r8, r5
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8006a14:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006a18:	f04f 0937 	mov.w	r9, #55	@ 0x37
 8006a1c:	f04f 0b40 	mov.w	fp, #64	@ 0x40
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006a20:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a24:	a905      	add	r1, sp, #20
 8006a26:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = 0;
 8006a28:	f8cd 8014 	str.w	r8, [sp, #20]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a2c:	f8cd 8020 	str.w	r8, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006a30:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006a34:	e9cd 9b06 	strd	r9, fp, [sp, #24]
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a38:	f000 fc94 	bl	8007364 <SDMMC_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7ff fc74 	bl	800632c <SD_CmdResp1Error>
 8006a44:	f88d 0013 	strb.w	r0, [sp, #19]
      if(errorstate != SD_OK)
 8006a48:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006a4c:	f003 09ff 	and.w	r9, r3, #255	@ 0xff
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d18c      	bne.n	800696e <HAL_SD_Init+0x9e>
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8006a54:	2329      	movs	r3, #41	@ 0x29
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a56:	a905      	add	r1, sp, #20
 8006a58:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8006a5a:	9705      	str	r7, [sp, #20]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006a5c:	e9cd 3b06 	strd	r3, fp, [sp, #24]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006a60:	e9cd 9a08 	strd	r9, sl, [sp, #32]
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a64:	f000 fc7e 	bl	8007364 <SDMMC_SendCommand>
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006a68:	6820      	ldr	r0, [r4, #0]
 8006a6a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006a6c:	f013 0f45 	tst.w	r3, #69	@ 0x45
 8006a70:	d0fb      	beq.n	8006a6a <HAL_SD_Init+0x19a>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006a72:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006a74:	075b      	lsls	r3, r3, #29
 8006a76:	d52c      	bpl.n	8006ad2 <HAL_SD_Init+0x202>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006a78:	2304      	movs	r3, #4
    return errorstate;
 8006a7a:	f04f 0903 	mov.w	r9, #3
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006a7e:	6383      	str	r3, [r0, #56]	@ 0x38
      errorstate = SD_CmdResp3Error(hsd);
 8006a80:	f88d 9013 	strb.w	r9, [sp, #19]
      if(errorstate != SD_OK)
 8006a84:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006a88:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f47f af6e 	bne.w	800696e <HAL_SD_Init+0x9e>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a92:	f000 fc7d 	bl	8007390 <SDMMC_GetResponse>
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8006a96:	2800      	cmp	r0, #0
      count++;
 8006a98:	f105 0501 	add.w	r5, r5, #1
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8006a9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006aa0:	db1b      	blt.n	8006ada <HAL_SD_Init+0x20a>
 8006aa2:	429d      	cmp	r5, r3
 8006aa4:	d1b8      	bne.n	8006a18 <HAL_SD_Init+0x148>
      errorstate = SD_INVALID_VOLTRANGE;
 8006aa6:	231b      	movs	r3, #27
 8006aa8:	f88d 3013 	strb.w	r3, [sp, #19]
      return errorstate;
 8006aac:	e75f      	b.n	800696e <HAL_SD_Init+0x9e>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 8006aae:	6b42      	ldr	r2, [r0, #52]	@ 0x34
    timeout--;
 8006ab0:	3b01      	subs	r3, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 8006ab2:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8006ab6:	bf14      	ite	ne
 8006ab8:	2201      	movne	r2, #1
 8006aba:	2200      	moveq	r2, #0
    timeout--;
 8006abc:	e77e      	b.n	80069bc <HAL_SD_Init+0xec>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDREND))
 8006abe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006ac0:	065a      	lsls	r2, r3, #25
 8006ac2:	d502      	bpl.n	8006aca <HAL_SD_Init+0x1fa>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CMDREND);
 8006ac4:	2340      	movs	r3, #64	@ 0x40
 8006ac6:	6383      	str	r3, [r0, #56]	@ 0x38
    return errorstate;
 8006ac8:	e784      	b.n	80069d4 <HAL_SD_Init+0x104>
  return errorstate;
 8006aca:	2529      	movs	r5, #41	@ 0x29
 8006acc:	e782      	b.n	80069d4 <HAL_SD_Init+0x104>
  uint32_t sdtype = SD_STD_CAPACITY;
 8006ace:	461f      	mov	r7, r3
 8006ad0:	e78b      	b.n	80069ea <HAL_SD_Init+0x11a>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ad2:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 8006ad6:	6383      	str	r3, [r0, #56]	@ 0x38
  return errorstate;
 8006ad8:	e7d2      	b.n	8006a80 <HAL_SD_Init+0x1b0>
    if(count >= SD_MAX_VOLT_TRIAL)
 8006ada:	429d      	cmp	r5, r3
 8006adc:	d0e3      	beq.n	8006aa6 <HAL_SD_Init+0x1d6>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006ade:	0040      	lsls	r0, r0, #1
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 8006ae0:	bf44      	itt	mi
 8006ae2:	2302      	movmi	r3, #2
 8006ae4:	6223      	strmi	r3, [r4, #32]
 8006ae6:	e742      	b.n	800696e <HAL_SD_Init+0x9e>
  if(SDMMC_GetPowerState(hsd->Instance) == 0) /* Power off */
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	f000 fc37 	bl	800735c <SDMMC_GetPowerState>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	f000 80c2 	beq.w	8006c78 <HAL_SD_Init+0x3a8>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006af4:	6a23      	ldr	r3, [r4, #32]
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d026      	beq.n	8006b48 <HAL_SD_Init+0x278>
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006afa:	2102      	movs	r1, #2
 8006afc:	23c0      	movs	r3, #192	@ 0xc0
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006afe:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = 0;
 8006b00:	9505      	str	r5, [sp, #20]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b02:	9508      	str	r5, [sp, #32]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006b04:	e9cd 1306 	strd	r1, r3, [sp, #24]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006b08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b0c:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006b0e:	9309      	str	r3, [sp, #36]	@ 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b10:	f000 fc28 	bl	8007364 <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7ff fbf1 	bl	80062fc <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d155      	bne.n	8006bcc <HAL_SD_Init+0x2fc>
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b20:	4601      	mov	r1, r0
 8006b22:	6820      	ldr	r0, [r4, #0]
 8006b24:	f000 fc34 	bl	8007390 <SDMMC_GetResponse>
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b28:	2104      	movs	r1, #4
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b2a:	63a0      	str	r0, [r4, #56]	@ 0x38
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	f000 fc2f 	bl	8007390 <SDMMC_GetResponse>
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b32:	2108      	movs	r1, #8
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b34:	63e0      	str	r0, [r4, #60]	@ 0x3c
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b36:	6820      	ldr	r0, [r4, #0]
 8006b38:	f000 fc2a 	bl	8007390 <SDMMC_GetResponse>
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b3c:	210c      	movs	r1, #12
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b3e:	6420      	str	r0, [r4, #64]	@ 0x40
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b40:	6820      	ldr	r0, [r4, #0]
 8006b42:	f000 fc25 	bl	8007390 <SDMMC_GetResponse>
 8006b46:	6460      	str	r0, [r4, #68]	@ 0x44
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8006b48:	6a23      	ldr	r3, [r4, #32]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d92b      	bls.n	8006ba6 <HAL_SD_Init+0x2d6>
 8006b4e:	2b06      	cmp	r3, #6
 8006b50:	d029      	beq.n	8006ba6 <HAL_SD_Init+0x2d6>
  uint16_t sd_rca = 1;
 8006b52:	2001      	movs	r0, #1
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006b54:	6a23      	ldr	r3, [r4, #32]
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	f000 8092 	beq.w	8006c80 <HAL_SD_Init+0x3b0>
    hsd->RCA = sd_rca;
 8006b5c:	6260      	str	r0, [r4, #36]	@ 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006b5e:	0400      	lsls	r0, r0, #16
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006b60:	2209      	movs	r2, #9
 8006b62:	23c0      	movs	r3, #192	@ 0xc0
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006b64:	9005      	str	r0, [sp, #20]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b66:	a905      	add	r1, sp, #20
 8006b68:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006b6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b6e:	f000 fbf9 	bl	8007364 <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8006b72:	4620      	mov	r0, r4
 8006b74:	f7ff fbc2 	bl	80062fc <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8006b78:	4605      	mov	r5, r0
 8006b7a:	bb38      	cbnz	r0, 8006bcc <HAL_SD_Init+0x2fc>
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b7c:	4601      	mov	r1, r0
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	f000 fc06 	bl	8007390 <SDMMC_GetResponse>
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b84:	2104      	movs	r1, #4
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b86:	62a0      	str	r0, [r4, #40]	@ 0x28
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b88:	6820      	ldr	r0, [r4, #0]
 8006b8a:	f000 fc01 	bl	8007390 <SDMMC_GetResponse>
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b8e:	2108      	movs	r1, #8
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b90:	62e0      	str	r0, [r4, #44]	@ 0x2c
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b92:	6820      	ldr	r0, [r4, #0]
 8006b94:	f000 fbfc 	bl	8007390 <SDMMC_GetResponse>
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b98:	210c      	movs	r1, #12
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b9a:	6320      	str	r0, [r4, #48]	@ 0x30
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b9c:	6820      	ldr	r0, [r4, #0]
 8006b9e:	f000 fbf7 	bl	8007390 <SDMMC_GetResponse>
 8006ba2:	6360      	str	r0, [r4, #52]	@ 0x34
 8006ba4:	e012      	b.n	8006bcc <HAL_SD_Init+0x2fc>
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006ba6:	2203      	movs	r2, #3
 8006ba8:	2340      	movs	r3, #64	@ 0x40
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006baa:	a905      	add	r1, sp, #20
 8006bac:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006bae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006bb2:	f000 fbd7 	bl	8007364 <SDMMC_SendCommand>
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006bb6:	6820      	ldr	r0, [r4, #0]
 8006bb8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006bba:	f013 0f45 	tst.w	r3, #69	@ 0x45
 8006bbe:	d0fb      	beq.n	8006bb8 <HAL_SD_Init+0x2e8>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006bc0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006bc2:	075b      	lsls	r3, r3, #29
 8006bc4:	d536      	bpl.n	8006c34 <HAL_SD_Init+0x364>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006bc6:	2304      	movs	r3, #4
    return errorstate;
 8006bc8:	2503      	movs	r5, #3
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006bca:	6383      	str	r3, [r0, #56]	@ 0x38
  errorstate = SD_Initialize_Cards(hsd);
 8006bcc:	f88d 5012 	strb.w	r5, [sp, #18]
  if (errorstate != SD_OK)
 8006bd0:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f47f aed6 	bne.w	8006986 <HAL_SD_Init+0xb6>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f7ff fd3a 	bl	8006656 <HAL_SD_Get_CardInfo>
 8006be2:	f88d 0012 	strb.w	r0, [sp, #18]
  if (errorstate == SD_OK)
 8006be6:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006bea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006bee:	b9ab      	cbnz	r3, 8006c1c <HAL_SD_Init+0x34c>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006bf0:	f8b6 3054 	ldrh.w	r3, [r6, #84]	@ 0x54
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006bf4:	2507      	movs	r5, #7
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006bf6:	a905      	add	r1, sp, #20
 8006bf8:	6820      	ldr	r0, [r4, #0]
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006bfa:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bfc:	9208      	str	r2, [sp, #32]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)addr;
 8006bfe:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006c00:	2340      	movs	r3, #64	@ 0x40
 8006c02:	e9cd 5306 	strd	r5, r3, [sp, #24]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c0a:	9309      	str	r3, [sp, #36]	@ 0x24
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c0c:	f000 fbaa 	bl	8007364 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 8006c10:	4629      	mov	r1, r5
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7ff fb8a 	bl	800632c <SD_CmdResp1Error>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006c18:	f88d 0012 	strb.w	r0, [sp, #18]
  SDMMC_Init(hsd->Instance, hsd->Init);   
 8006c1c:	f104 0310 	add.w	r3, r4, #16
 8006c20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c24:	1d23      	adds	r3, r4, #4
 8006c26:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	f000 fb6d 	bl	800730c <SDMMC_Init>
 8006c32:	e6a8      	b.n	8006986 <HAL_SD_Init+0xb6>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8006c34:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8006c36:	f015 0501 	ands.w	r5, r5, #1
 8006c3a:	d002      	beq.n	8006c42 <HAL_SD_Init+0x372>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8006c3c:	2501      	movs	r5, #1
 8006c3e:	6385      	str	r5, [r0, #56]	@ 0x38
    if(errorstate != SD_OK)
 8006c40:	e7c4      	b.n	8006bcc <HAL_SD_Init+0x2fc>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8006c42:	f000 fba2 	bl	800738a <SDMMC_GetCommandResponse>
 8006c46:	2803      	cmp	r0, #3
 8006c48:	d001      	beq.n	8006c4e <HAL_SD_Init+0x37e>
    return errorstate;
 8006c4a:	2510      	movs	r5, #16
 8006c4c:	e7be      	b.n	8006bcc <HAL_SD_Init+0x2fc>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c4e:	6820      	ldr	r0, [r4, #0]
 8006c50:	f240 53ff 	movw	r3, #1535	@ 0x5ff
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c54:	4629      	mov	r1, r5
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c56:	6383      	str	r3, [r0, #56]	@ 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c58:	f000 fb9a 	bl	8007390 <SDMMC_GetResponse>
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8006c5c:	f410 4f60 	tst.w	r0, #57344	@ 0xe000
 8006c60:	d101      	bne.n	8006c66 <HAL_SD_Init+0x396>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006c62:	0c00      	lsrs	r0, r0, #16
    if(errorstate != SD_OK)
 8006c64:	e776      	b.n	8006b54 <HAL_SD_Init+0x284>
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 8006c66:	0487      	lsls	r7, r0, #18
 8006c68:	d408      	bmi.n	8006c7c <HAL_SD_Init+0x3ac>
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 8006c6a:	0445      	lsls	r5, r0, #17
 8006c6c:	d4ed      	bmi.n	8006c4a <HAL_SD_Init+0x37a>
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 8006c6e:	0401      	lsls	r1, r0, #16
 8006c70:	f57f af6f 	bpl.w	8006b52 <HAL_SD_Init+0x282>
    return(SD_COM_CRC_FAILED);
 8006c74:	250f      	movs	r5, #15
 8006c76:	e7a9      	b.n	8006bcc <HAL_SD_Init+0x2fc>
    return errorstate;
 8006c78:	2525      	movs	r5, #37	@ 0x25
 8006c7a:	e7a7      	b.n	8006bcc <HAL_SD_Init+0x2fc>
    return(SD_GENERAL_UNKNOWN_ERROR);
 8006c7c:	2513      	movs	r5, #19
 8006c7e:	e7a5      	b.n	8006bcc <HAL_SD_Init+0x2fc>
  return errorstate;
 8006c80:	2500      	movs	r5, #0
 8006c82:	e7a3      	b.n	8006bcc <HAL_SD_Init+0x2fc>

08006c84 <HAL_SD_WideBusOperation_Config>:
  if (hsd->CardType == MULTIMEDIA_CARD)
 8006c84:	6a03      	ldr	r3, [r0, #32]
 8006c86:	2b03      	cmp	r3, #3
{
 8006c88:	b570      	push	{r4, r5, r6, lr}
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	b08c      	sub	sp, #48	@ 0x30
 8006c8e:	460d      	mov	r5, r1
  if (hsd->CardType == MULTIMEDIA_CARD)
 8006c90:	d07d      	beq.n	8006d8e <HAL_SD_WideBusOperation_Config+0x10a>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d84c      	bhi.n	8006d30 <HAL_SD_WideBusOperation_Config+0xac>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006c96:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006c9a:	d078      	beq.n	8006d8e <HAL_SD_WideBusOperation_Config+0x10a>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006c9c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006ca0:	d148      	bne.n	8006d34 <HAL_SD_WideBusOperation_Config+0xb0>
  uint32_t scr[2] = {0, 0};
 8006ca2:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006ca4:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8006ca6:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006caa:	f000 fb71 	bl	8007390 <SDMMC_GetResponse>
 8006cae:	0180      	lsls	r0, r0, #6
 8006cb0:	d448      	bmi.n	8006d44 <HAL_SD_WideBusOperation_Config+0xc0>
  errorstate = SD_FindSCR(hsd, scr);
 8006cb2:	a904      	add	r1, sp, #16
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f7ff fc55 	bl	8006564 <SD_FindSCR.constprop.0>
  if(errorstate != SD_OK)
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d143      	bne.n	8006d46 <HAL_SD_WideBusOperation_Config+0xc2>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8006cbe:	9b05      	ldr	r3, [sp, #20]
 8006cc0:	0359      	lsls	r1, r3, #13
 8006cc2:	d562      	bpl.n	8006d8a <HAL_SD_WideBusOperation_Config+0x106>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006cc4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006cc6:	2637      	movs	r6, #55	@ 0x37
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cc8:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cca:	9009      	str	r0, [sp, #36]	@ 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006ccc:	041b      	lsls	r3, r3, #16
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cce:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006cd0:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006cd2:	2340      	movs	r3, #64	@ 0x40
 8006cd4:	e9cd 6307 	strd	r6, r3, [sp, #28]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006cd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cdc:	930a      	str	r3, [sp, #40]	@ 0x28
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cde:	f000 fb41 	bl	8007364 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f7ff fb21 	bl	800632c <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8006cea:	bb60      	cbnz	r0, 8006d46 <HAL_SD_WideBusOperation_Config+0xc2>
    sdmmc_cmdinitstructure.Argument         = 2;
 8006cec:	2302      	movs	r3, #2
 8006cee:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8006cf0:	2606      	movs	r6, #6
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cf2:	a906      	add	r1, sp, #24
 8006cf4:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8006cf6:	9607      	str	r6, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cf8:	f000 fb34 	bl	8007364 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f7ff fb14 	bl	800632c <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8006d04:	b9f8      	cbnz	r0, 8006d46 <HAL_SD_WideBusOperation_Config+0xc2>
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 8006d06:	6863      	ldr	r3, [r4, #4]
 8006d08:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 8006d0a:	68a3      	ldr	r3, [r4, #8]
 8006d0c:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006d0e:	68e3      	ldr	r3, [r4, #12]
      tmpinit.BusWide             = WideMode;
 8006d10:	e9cd 3508 	strd	r3, r5, [sp, #32]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006d14:	6963      	ldr	r3, [r4, #20]
 8006d16:	930a      	str	r3, [sp, #40]	@ 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 8006d18:	69a3      	ldr	r3, [r4, #24]
 8006d1a:	930b      	str	r3, [sp, #44]	@ 0x2c
      SDMMC_Init(hsd->Instance, tmpinit);
 8006d1c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d1e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006d22:	ab06      	add	r3, sp, #24
 8006d24:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d2a:	6820      	ldr	r0, [r4, #0]
 8006d2c:	f000 faee 	bl	800730c <SDMMC_Init>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006d30:	2000      	movs	r0, #0
 8006d32:	e008      	b.n	8006d46 <HAL_SD_WideBusOperation_Config+0xc2>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006d34:	bb69      	cbnz	r1, 8006d92 <HAL_SD_WideBusOperation_Config+0x10e>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006d36:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8006d38:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006d3c:	f000 fb28 	bl	8007390 <SDMMC_GetResponse>
 8006d40:	0182      	lsls	r2, r0, #6
 8006d42:	d502      	bpl.n	8006d4a <HAL_SD_WideBusOperation_Config+0xc6>
    return errorstate;
 8006d44:	200e      	movs	r0, #14
}
 8006d46:	b00c      	add	sp, #48	@ 0x30
 8006d48:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SD_FindSCR(hsd, scr);
 8006d4a:	a904      	add	r1, sp, #16
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f7ff fc09 	bl	8006564 <SD_FindSCR.constprop.0>
  if(errorstate != SD_OK)
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d1f7      	bne.n	8006d46 <HAL_SD_WideBusOperation_Config+0xc2>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8006d56:	9b05      	ldr	r3, [sp, #20]
 8006d58:	03db      	lsls	r3, r3, #15
 8006d5a:	d516      	bpl.n	8006d8a <HAL_SD_WideBusOperation_Config+0x106>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006d5c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006d5e:	2637      	movs	r6, #55	@ 0x37
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d60:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d62:	9009      	str	r0, [sp, #36]	@ 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006d64:	041b      	lsls	r3, r3, #16
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d66:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006d68:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006d6a:	2340      	movs	r3, #64	@ 0x40
 8006d6c:	e9cd 6307 	strd	r6, r3, [sp, #28]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006d70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d74:	930a      	str	r3, [sp, #40]	@ 0x28
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d76:	f000 faf5 	bl	8007364 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f7ff fad5 	bl	800632c <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d1df      	bne.n	8006d46 <HAL_SD_WideBusOperation_Config+0xc2>
    sdmmc_cmdinitstructure.Argument         = 0;
 8006d86:	9006      	str	r0, [sp, #24]
 8006d88:	e7b2      	b.n	8006cf0 <HAL_SD_WideBusOperation_Config+0x6c>
    return errorstate;
 8006d8a:	2025      	movs	r0, #37	@ 0x25
 8006d8c:	e7db      	b.n	8006d46 <HAL_SD_WideBusOperation_Config+0xc2>
    return errorstate;
 8006d8e:	2027      	movs	r0, #39	@ 0x27
 8006d90:	e7d9      	b.n	8006d46 <HAL_SD_WideBusOperation_Config+0xc2>
      errorstate = SD_INVALID_PARAMETER;
 8006d92:	2026      	movs	r0, #38	@ 0x26
 8006d94:	e7d7      	b.n	8006d46 <HAL_SD_WideBusOperation_Config+0xc2>

08006d96 <HAL_SD_StopTransfer>:
{
 8006d96:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006d98:	2240      	movs	r2, #64	@ 0x40
{
 8006d9a:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	250c      	movs	r5, #12
{
 8006da0:	4604      	mov	r4, r0
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006da2:	a901      	add	r1, sp, #4
 8006da4:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006da6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8006daa:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006db2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006db4:	f000 fad6 	bl	8007364 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 8006db8:	4629      	mov	r1, r5
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f7ff fab6 	bl	800632c <SD_CmdResp1Error>
}
 8006dc0:	b007      	add	sp, #28
 8006dc2:	bd30      	pop	{r4, r5, pc}

08006dc4 <HAL_SD_ReadBlocks>:
{
 8006dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc8:	4604      	mov	r4, r0
 8006dca:	4617      	mov	r7, r2
  hsd->Instance->DCTRL = 0;
 8006dcc:	6800      	ldr	r0, [r0, #0]
 8006dce:	2200      	movs	r2, #0
{
 8006dd0:	b08c      	sub	sp, #48	@ 0x30
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006dd2:	2610      	movs	r6, #16
  hsd->Instance->DCTRL = 0;
 8006dd4:	62c2      	str	r2, [r0, #44]	@ 0x2c
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006dd6:	f04f 0c00 	mov.w	ip, #0
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006dda:	6a22      	ldr	r2, [r4, #32]
{
 8006ddc:	460d      	mov	r5, r1
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006dde:	a901      	add	r1, sp, #4
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006de0:	2a02      	cmp	r2, #2
    ReadAddr /= 512;
 8006de2:	bf04      	itt	eq
 8006de4:	0a7f      	lsreq	r7, r7, #9
 8006de6:	ea47 57c3 	orreq.w	r7, r7, r3, lsl #23
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006dea:	f04f 0340 	mov.w	r3, #64	@ 0x40
{
 8006dee:	e9dd 9814 	ldrd	r9, r8, [sp, #80]	@ 0x50
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006df2:	e9cd 6302 	strd	r6, r3, [sp, #8]
    BlockSize = 512;
 8006df6:	bf08      	it	eq
 8006df8:	f44f 7900 	moveq.w	r9, #512	@ 0x200
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006dfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  sdmmc_cmdinitstructure.Argument         = (uint32_t) BlockSize;
 8006e00:	f8cd 9004 	str.w	r9, [sp, #4]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006e04:	e9cd c304 	strd	ip, r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006e08:	f000 faac 	bl	8007364 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f7ff fa8c 	bl	800632c <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8006e14:	4606      	mov	r6, r0
 8006e16:	2800      	cmp	r0, #0
 8006e18:	f040 8088 	bne.w	8006f2c <HAL_SD_ReadBlocks+0x168>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006e1c:	f04f 33ff 	mov.w	r3, #4294967295
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e20:	2090      	movs	r0, #144	@ 0x90
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006e22:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e24:	960a      	str	r6, [sp, #40]	@ 0x28
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006e26:	9306      	str	r3, [sp, #24]
  sdmmc_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 8006e28:	fb08 f309 	mul.w	r3, r8, r9
 8006e2c:	9307      	str	r3, [sp, #28]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e9cd 0308 	strd	r0, r3, [sp, #32]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006e34:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006e36:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006e38:	930b      	str	r3, [sp, #44]	@ 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006e3a:	f000 fab3 	bl	80073a4 <SDMMC_DataConfig>
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8006e3e:	f1b8 0f02 	cmp.w	r8, #2
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006e42:	a901      	add	r1, sp, #4
 8006e44:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8006e46:	bf34      	ite	cc
 8006e48:	2311      	movcc	r3, #17
 8006e4a:	2312      	movcs	r3, #18
  sdmmc_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 8006e4c:	e9cd 7301 	strd	r7, r3, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006e50:	f000 fa88 	bl	8007364 <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006e54:	f1b8 0f01 	cmp.w	r8, #1
 8006e58:	d930      	bls.n	8006ebc <HAL_SD_ReadBlocks+0xf8>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8006e5a:	2112      	movs	r1, #18
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f7ff fa65 	bl	800632c <SD_CmdResp1Error>
    if (errorstate != SD_OK)
 8006e62:	b180      	cbz	r0, 8006e86 <HAL_SD_ReadBlocks+0xc2>
}
 8006e64:	b00c      	add	sp, #48	@ 0x30
 8006e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e6c:	0411      	lsls	r1, r2, #16
 8006e6e:	d50b      	bpl.n	8006e88 <HAL_SD_ReadBlocks+0xc4>
 8006e70:	1f2f      	subs	r7, r5, #4
        for (count = 0; count < 8; count++)
 8006e72:	f105 091c 	add.w	r9, r5, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8006e76:	6820      	ldr	r0, [r4, #0]
 8006e78:	f000 fa64 	bl	8007344 <SDMMC_ReadFIFO>
 8006e7c:	f847 0f04 	str.w	r0, [r7, #4]!
        for (count = 0; count < 8; count++)
 8006e80:	45b9      	cmp	r9, r7
 8006e82:	d1f8      	bne.n	8006e76 <HAL_SD_ReadBlocks+0xb2>
        tempbuff += 8;
 8006e84:	3520      	adds	r5, #32
    while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e8a:	f412 7f95 	tst.w	r2, #298	@ 0x12a
 8006e8e:	d0ec      	beq.n	8006e6a <HAL_SD_ReadBlocks+0xa6>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1))
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e94:	05df      	lsls	r7, r3, #23
 8006e96:	d509      	bpl.n	8006eac <HAL_SD_ReadBlocks+0xe8>
 8006e98:	f1b8 0f01 	cmp.w	r8, #1
 8006e9c:	d906      	bls.n	8006eac <HAL_SD_ReadBlocks+0xe8>
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) ||\
 8006e9e:	6a23      	ldr	r3, [r4, #32]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d803      	bhi.n	8006eac <HAL_SD_ReadBlocks+0xe8>
      errorstate = HAL_SD_StopTransfer(hsd);
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f7ff ff76 	bl	8006d96 <HAL_SD_StopTransfer>
 8006eaa:	4606      	mov	r6, r0
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eb0:	0710      	lsls	r0, r2, #28
 8006eb2:	d51f      	bpl.n	8006ef4 <HAL_SD_ReadBlocks+0x130>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006eb4:	2208      	movs	r2, #8
    return errorstate;
 8006eb6:	2004      	movs	r0, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006eb8:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8006eba:	e7d3      	b.n	8006e64 <HAL_SD_ReadBlocks+0xa0>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK); 
 8006ebc:	2111      	movs	r1, #17
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7ff fa34 	bl	800632c <SD_CmdResp1Error>
    if (errorstate != SD_OK)
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d1cd      	bne.n	8006e64 <HAL_SD_ReadBlocks+0xa0>
    while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006ec8:	f240 492a 	movw	r9, #1066	@ 0x42a
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ed0:	ea12 0f09 	tst.w	r2, r9
 8006ed4:	d1dc      	bne.n	8006e90 <HAL_SD_ReadBlocks+0xcc>
      if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006ed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ed8:	0412      	lsls	r2, r2, #16
 8006eda:	d5f8      	bpl.n	8006ece <HAL_SD_ReadBlocks+0x10a>
 8006edc:	1f2f      	subs	r7, r5, #4
        for (count = 0; count < 8; count++)
 8006ede:	f105 0a1c 	add.w	sl, r5, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8006ee2:	6820      	ldr	r0, [r4, #0]
 8006ee4:	f000 fa2e 	bl	8007344 <SDMMC_ReadFIFO>
 8006ee8:	f847 0f04 	str.w	r0, [r7, #4]!
        for (count = 0; count < 8; count++)
 8006eec:	4557      	cmp	r7, sl
 8006eee:	d1f8      	bne.n	8006ee2 <HAL_SD_ReadBlocks+0x11e>
        tempbuff += 8;
 8006ef0:	3520      	adds	r5, #32
 8006ef2:	e7eb      	b.n	8006ecc <HAL_SD_ReadBlocks+0x108>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ef6:	0791      	lsls	r1, r2, #30
 8006ef8:	d502      	bpl.n	8006f00 <HAL_SD_ReadBlocks+0x13c>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006efa:	2002      	movs	r0, #2
 8006efc:	6398      	str	r0, [r3, #56]	@ 0x38
    return errorstate;
 8006efe:	e7b1      	b.n	8006e64 <HAL_SD_ReadBlocks+0xa0>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f00:	6b5f      	ldr	r7, [r3, #52]	@ 0x34
 8006f02:	f017 0720 	ands.w	r7, r7, #32
 8006f06:	d00a      	beq.n	8006f1e <HAL_SD_ReadBlocks+0x15a>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006f08:	2220      	movs	r2, #32
    return errorstate;
 8006f0a:	2006      	movs	r0, #6
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006f0c:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8006f0e:	e7a9      	b.n	8006e64 <HAL_SD_ReadBlocks+0xa0>
  while ((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (count > 0))
 8006f10:	1c7b      	adds	r3, r7, #1
 8006f12:	d008      	beq.n	8006f26 <HAL_SD_ReadBlocks+0x162>
    *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8006f14:	f000 fa16 	bl	8007344 <SDMMC_ReadFIFO>
 8006f18:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
    count--;
 8006f1c:	3701      	adds	r7, #1
  while ((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (count > 0))
 8006f1e:	6820      	ldr	r0, [r4, #0]
 8006f20:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006f22:	029a      	lsls	r2, r3, #10
 8006f24:	d4f4      	bmi.n	8006f10 <HAL_SD_ReadBlocks+0x14c>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f26:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 8006f2a:	6383      	str	r3, [r0, #56]	@ 0x38
  return errorstate;
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	e799      	b.n	8006e64 <HAL_SD_ReadBlocks+0xa0>

08006f30 <HAL_SD_WriteBlocks>:
{
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	4606      	mov	r6, r0
 8006f36:	b08d      	sub	sp, #52	@ 0x34
 8006f38:	4617      	mov	r7, r2
  hsd->Instance->DCTRL = 0;
 8006f3a:	6800      	ldr	r0, [r0, #0]
  uint8_t cardstate  = 0;
 8006f3c:	2200      	movs	r2, #0
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006f3e:	2410      	movs	r4, #16
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006f40:	f04f 0c00 	mov.w	ip, #0
{
 8006f44:	460d      	mov	r5, r1
  uint8_t cardstate  = 0;
 8006f46:	f88d 2003 	strb.w	r2, [sp, #3]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006f4a:	a901      	add	r1, sp, #4
  hsd->Instance->DCTRL = 0;
 8006f4c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006f4e:	6a32      	ldr	r2, [r6, #32]
 8006f50:	2a02      	cmp	r2, #2
    WriteAddr /= 512;
 8006f52:	bf04      	itt	eq
 8006f54:	0a7f      	lsreq	r7, r7, #9
 8006f56:	ea47 57c3 	orreq.w	r7, r7, r3, lsl #23
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006f5a:	f04f 0340 	mov.w	r3, #64	@ 0x40
{
 8006f5e:	e9dd 9816 	ldrd	r9, r8, [sp, #88]	@ 0x58
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006f62:	e9cd 4302 	strd	r4, r3, [sp, #8]
    BlockSize = 512;
 8006f66:	bf08      	it	eq
 8006f68:	f44f 7900 	moveq.w	r9, #512	@ 0x200
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8006f70:	f8cd 9004 	str.w	r9, [sp, #4]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006f74:	e9cd c304 	strd	ip, r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006f78:	f000 f9f4 	bl	8007364 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f7ff f9d4 	bl	800632c <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8006f84:	4604      	mov	r4, r0
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d164      	bne.n	8007054 <HAL_SD_WriteBlocks+0x124>
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8006f8a:	f1b8 0f02 	cmp.w	r8, #2
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006f8e:	a901      	add	r1, sp, #4
 8006f90:	6830      	ldr	r0, [r6, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8006f92:	bf34      	ite	cc
 8006f94:	2318      	movcc	r3, #24
 8006f96:	2319      	movcs	r3, #25
  sdmmc_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8006f98:	e9cd 7301 	strd	r7, r3, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006f9c:	f000 f9e2 	bl	8007364 <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006fa0:	f1b8 0f01 	cmp.w	r8, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8006fa4:	4630      	mov	r0, r6
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 8006fa6:	bf8c      	ite	hi
 8006fa8:	2119      	movhi	r1, #25
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8006faa:	2118      	movls	r1, #24
 8006fac:	f7ff f9be 	bl	800632c <SD_CmdResp1Error>
 8006fb0:	4604      	mov	r4, r0
  if (errorstate != SD_OK)
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d14e      	bne.n	8007054 <HAL_SD_WriteBlocks+0x124>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006fb6:	f04f 33ff 	mov.w	r3, #4294967295
  totalnumberofbytes = NumberOfBlocks * BlockSize;
 8006fba:	fb08 f709 	mul.w	r7, r8, r9
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006fbe:	900a      	str	r0, [sp, #40]	@ 0x28
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006fc0:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 8006fc2:	e9cd 3706 	strd	r3, r7, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006fc6:	2390      	movs	r3, #144	@ 0x90
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006fc8:	e9cd 3008 	strd	r3, r0, [sp, #32]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006fcc:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006fce:	6830      	ldr	r0, [r6, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006fd2:	f000 f9e7 	bl	80073a4 <SDMMC_DataConfig>
  if(NumberOfBlocks > 1)
 8006fd6:	f1b8 0f01 	cmp.w	r8, #1
 8006fda:	d82b      	bhi.n	8007034 <HAL_SD_WriteBlocks+0x104>
    while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006fdc:	f240 4a1a 	movw	sl, #1050	@ 0x41a
 8006fe0:	6833      	ldr	r3, [r6, #0]
 8006fe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fe4:	ea12 0f0a 	tst.w	r2, sl
 8006fe8:	d129      	bne.n	800703e <HAL_SD_WriteBlocks+0x10e>
      if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8006fea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fec:	0451      	lsls	r1, r2, #17
 8006fee:	d5f8      	bpl.n	8006fe2 <HAL_SD_WriteBlocks+0xb2>
        if ((totalnumberofbytes - bytestransferred) < 32)
 8006ff0:	1b3a      	subs	r2, r7, r4
 8006ff2:	2a1f      	cmp	r2, #31
 8006ff4:	d848      	bhi.n	8007088 <HAL_SD_WriteBlocks+0x158>
          restwords = ((totalnumberofbytes - bytestransferred) % 4 == 0) ? ((totalnumberofbytes - bytestransferred) / 4) : (( totalnumberofbytes -  bytestransferred) / 4 + 1);
 8006ff6:	0893      	lsrs	r3, r2, #2
 8006ff8:	0792      	lsls	r2, r2, #30
 8006ffa:	bf18      	it	ne
 8006ffc:	3301      	addne	r3, #1
          for (count = 0; count < restwords; count++)
 8006ffe:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8007002:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8007006:	45a9      	cmp	r9, r5
            SDMMC_WriteFIFO(hsd->Instance, tempbuff);
 8007008:	6830      	ldr	r0, [r6, #0]
          for (count = 0; count < restwords; count++)
 800700a:	d138      	bne.n	800707e <HAL_SD_WriteBlocks+0x14e>
 800700c:	445c      	add	r4, fp
 800700e:	e7e7      	b.n	8006fe0 <HAL_SD_WriteBlocks+0xb0>
      if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8007010:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007012:	0451      	lsls	r1, r2, #17
 8007014:	d50f      	bpl.n	8007036 <HAL_SD_WriteBlocks+0x106>
        if ((totalnumberofbytes - bytestransferred) < 32)
 8007016:	1b3a      	subs	r2, r7, r4
 8007018:	2a1f      	cmp	r2, #31
 800701a:	d824      	bhi.n	8007066 <HAL_SD_WriteBlocks+0x136>
          restwords = ((totalnumberofbytes - bytestransferred) % 4 == 0) ? ((totalnumberofbytes - bytestransferred) / 4) : (( totalnumberofbytes -  bytestransferred) / 4 + 1);
 800701c:	0893      	lsrs	r3, r2, #2
 800701e:	0792      	lsls	r2, r2, #30
 8007020:	bf18      	it	ne
 8007022:	3301      	addne	r3, #1
          for (count = 0; count < restwords; count++)
 8007024:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8007028:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800702c:	45a9      	cmp	r9, r5
            SDMMC_WriteFIFO(hsd->Instance, tempbuff);
 800702e:	6830      	ldr	r0, [r6, #0]
          for (count = 0; count < restwords; count++)
 8007030:	d114      	bne.n	800705c <HAL_SD_WriteBlocks+0x12c>
 8007032:	4454      	add	r4, sl
    while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007034:	6833      	ldr	r3, [r6, #0]
 8007036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007038:	f412 7f8d 	tst.w	r2, #282	@ 0x11a
 800703c:	d0e8      	beq.n	8007010 <HAL_SD_WriteBlocks+0xe0>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1))
 800703e:	6833      	ldr	r3, [r6, #0]
 8007040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007042:	05d8      	lsls	r0, r3, #23
 8007044:	d42c      	bmi.n	80070a0 <HAL_SD_WriteBlocks+0x170>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007046:	6833      	ldr	r3, [r6, #0]
 8007048:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800704a:	0710      	lsls	r0, r2, #28
 800704c:	d532      	bpl.n	80070b4 <HAL_SD_WriteBlocks+0x184>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800704e:	2208      	movs	r2, #8
    return errorstate;
 8007050:	2404      	movs	r4, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007052:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007054:	4620      	mov	r0, r4
 8007056:	b00d      	add	sp, #52	@ 0x34
 8007058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SDMMC_WriteFIFO(hsd->Instance, tempbuff);
 800705c:	4629      	mov	r1, r5
            tempbuff++;
 800705e:	3504      	adds	r5, #4
            SDMMC_WriteFIFO(hsd->Instance, tempbuff);
 8007060:	f000 f973 	bl	800734a <SDMMC_WriteFIFO>
          for (count = 0; count < restwords; count++)
 8007064:	e7e2      	b.n	800702c <HAL_SD_WriteBlocks+0xfc>
 8007066:	46a9      	mov	r9, r5
 8007068:	3520      	adds	r5, #32
            SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 800706a:	4649      	mov	r1, r9
          for (count = 0; count < 8; count++)
 800706c:	f109 0904 	add.w	r9, r9, #4
            SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8007070:	6830      	ldr	r0, [r6, #0]
 8007072:	f000 f96a 	bl	800734a <SDMMC_WriteFIFO>
          for (count = 0; count < 8; count++)
 8007076:	454d      	cmp	r5, r9
 8007078:	d1f7      	bne.n	800706a <HAL_SD_WriteBlocks+0x13a>
          bytestransferred += 32;
 800707a:	3420      	adds	r4, #32
 800707c:	e7da      	b.n	8007034 <HAL_SD_WriteBlocks+0x104>
            SDMMC_WriteFIFO(hsd->Instance, tempbuff);
 800707e:	4629      	mov	r1, r5
            tempbuff++; 
 8007080:	3504      	adds	r5, #4
            SDMMC_WriteFIFO(hsd->Instance, tempbuff);
 8007082:	f000 f962 	bl	800734a <SDMMC_WriteFIFO>
          for (count = 0; count < restwords; count++)
 8007086:	e7be      	b.n	8007006 <HAL_SD_WriteBlocks+0xd6>
 8007088:	46a9      	mov	r9, r5
 800708a:	3520      	adds	r5, #32
            SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 800708c:	4649      	mov	r1, r9
          for (count = 0; count < 8; count++)
 800708e:	f109 0904 	add.w	r9, r9, #4
            SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8007092:	6830      	ldr	r0, [r6, #0]
 8007094:	f000 f959 	bl	800734a <SDMMC_WriteFIFO>
          for (count = 0; count < 8; count++)
 8007098:	454d      	cmp	r5, r9
 800709a:	d1f7      	bne.n	800708c <HAL_SD_WriteBlocks+0x15c>
          bytestransferred += 32;
 800709c:	3420      	adds	r4, #32
 800709e:	e79f      	b.n	8006fe0 <HAL_SD_WriteBlocks+0xb0>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1))
 80070a0:	f1b8 0f01 	cmp.w	r8, #1
 80070a4:	d9cf      	bls.n	8007046 <HAL_SD_WriteBlocks+0x116>
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80070a6:	6a33      	ldr	r3, [r6, #32]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d8cc      	bhi.n	8007046 <HAL_SD_WriteBlocks+0x116>
      errorstate = HAL_SD_StopTransfer(hsd);
 80070ac:	4630      	mov	r0, r6
 80070ae:	f7ff fe72 	bl	8006d96 <HAL_SD_StopTransfer>
 80070b2:	e7c8      	b.n	8007046 <HAL_SD_WriteBlocks+0x116>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80070b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070b6:	0791      	lsls	r1, r2, #30
 80070b8:	d502      	bpl.n	80070c0 <HAL_SD_WriteBlocks+0x190>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80070ba:	2402      	movs	r4, #2
 80070bc:	639c      	str	r4, [r3, #56]	@ 0x38
    return errorstate;
 80070be:	e7c9      	b.n	8007054 <HAL_SD_WriteBlocks+0x124>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80070c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070c2:	06d2      	lsls	r2, r2, #27
 80070c4:	d503      	bpl.n	80070ce <HAL_SD_WriteBlocks+0x19e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 80070c6:	2210      	movs	r2, #16
    return errorstate;
 80070c8:	2405      	movs	r4, #5
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 80070ca:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 80070cc:	e7c2      	b.n	8007054 <HAL_SD_WriteBlocks+0x124>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070ce:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80070d2:	639a      	str	r2, [r3, #56]	@ 0x38
    errorstate = SD_IsCardProgramming(hsd, &cardstate);
 80070d4:	f10d 0103 	add.w	r1, sp, #3
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff f99f 	bl	800641c <SD_IsCardProgramming>
 80070de:	4604      	mov	r4, r0
  while ((errorstate == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d1b7      	bne.n	8007054 <HAL_SD_WriteBlocks+0x124>
 80070e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80070e8:	3b06      	subs	r3, #6
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d9f2      	bls.n	80070d4 <HAL_SD_WriteBlocks+0x1a4>
 80070ee:	e7b1      	b.n	8007054 <HAL_SD_WriteBlocks+0x124>

080070f0 <HAL_SD_GetStatus>:
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80070f0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80070f2:	2200      	movs	r2, #0
{
 80070f4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80070f6:	041b      	lsls	r3, r3, #16
{
 80070f8:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80070fa:	250d      	movs	r5, #13
{
 80070fc:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80070fe:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007100:	2340      	movs	r3, #64	@ 0x40
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007102:	a901      	add	r1, sp, #4
 8007104:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007106:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800710a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800710e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007112:	f000 f927 	bl	8007364 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 8007116:	4629      	mov	r1, r5
 8007118:	4620      	mov	r0, r4
 800711a:	f7ff f907 	bl	800632c <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 800711e:	4601      	mov	r1, r0
 8007120:	b948      	cbnz	r0, 8007136 <HAL_SD_GetStatus+0x46>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007122:	6820      	ldr	r0, [r4, #0]
 8007124:	f000 f934 	bl	8007390 <SDMMC_GetResponse>
  if (cardstate == SD_CARD_TRANSFER)
 8007128:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800712c:	3804      	subs	r0, #4
 800712e:	bf18      	it	ne
 8007130:	2001      	movne	r0, #1
}
 8007132:	b007      	add	sp, #28
 8007134:	bd30      	pop	{r4, r5, pc}
    return SD_TRANSFER_ERROR;
 8007136:	2002      	movs	r0, #2
 8007138:	e7fb      	b.n	8007132 <HAL_SD_GetStatus+0x42>

0800713a <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800713a:	4770      	bx	lr

0800713c <HAL_SDRAM_Init>:
{   
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	460d      	mov	r5, r1
  if(hsdram == NULL)
 8007140:	4604      	mov	r4, r0
 8007142:	b1c8      	cbz	r0, 8007178 <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007144:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8007148:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800714c:	b91b      	cbnz	r3, 8007156 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 800714e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8007152:	f7ff fff2 	bl	800713a <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007156:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007158:	1d21      	adds	r1, r4, #4
 800715a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800715c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007160:	f000 f836 	bl	80071d0 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007164:	6862      	ldr	r2, [r4, #4]
 8007166:	4629      	mov	r1, r5
 8007168:	6820      	ldr	r0, [r4, #0]
 800716a:	f000 f865 	bl	8007238 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800716e:	2301      	movs	r3, #1
  return HAL_OK;
 8007170:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007172:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8007176:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007178:	2001      	movs	r0, #1
 800717a:	e7fc      	b.n	8007176 <HAL_SDRAM_Init+0x3a>

0800717c <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800717c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800717e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8007182:	4604      	mov	r4, r0
 8007184:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007186:	2b02      	cmp	r3, #2
 8007188:	b2d8      	uxtb	r0, r3
 800718a:	d00c      	beq.n	80071a6 <HAL_SDRAM_SendCommand+0x2a>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800718c:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800718e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007190:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007194:	f000 f88f 	bl	80072b6 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d104      	bne.n	80071a8 <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800719e:	2305      	movs	r3, #5
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 80071a0:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80071a2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_READY;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e7f9      	b.n	80071a0 <HAL_SDRAM_SendCommand+0x24>

080071ac <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate: The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80071ac:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80071ae:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 80071b2:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	b2d8      	uxtb	r0, r3
 80071b8:	d009      	beq.n	80071ce <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071ba:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80071bc:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071be:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80071c2:	f000 f89d 	bl	8007300 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80071c6:	2301      	movs	r3, #1
  
  return HAL_OK;   
 80071c8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80071ca:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 80071ce:	bd10      	pop	{r4, pc}

080071d0 <FMC_SDRAM_Init>:
  * @param  Device: Pointer to SDRAM device instance
  * @param  Init: Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80071d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
                        Init->RowBitsNumber      |\
 80071d4:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
                        Init->MemoryDataWidth    |\
                        Init->InternalBankNumber |\
                        Init->CASLatency         |\
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
 80071d8:	e9d1 3907 	ldrd	r3, r9, [r1, #28]
                        Init->ReadPipeDelay
 80071dc:	f8d1 8024 	ldr.w	r8, [r1, #36]	@ 0x24
 80071e0:	f8df e050 	ldr.w	lr, [pc, #80]	@ 8007234 <FMC_SDRAM_Init+0x64>
 80071e4:	ea43 0309 	orr.w	r3, r3, r9
                        Init->InternalBankNumber |\
 80071e8:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
                        Init->WriteProtection    |\
 80071ec:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80071f0:	6809      	ldr	r1, [r1, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071f2:	ea43 0308 	orr.w	r3, r3, r8
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80071f6:	2901      	cmp	r1, #1
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80071f8:	6801      	ldr	r1, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80071fa:	ea01 010e 	and.w	r1, r1, lr
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80071fe:	d00b      	beq.n	8007218 <FMC_SDRAM_Init+0x48>
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007200:	4313      	orrs	r3, r2
 8007202:	ea43 030c 	orr.w	r3, r3, ip
 8007206:	433b      	orrs	r3, r7
 8007208:	4333      	orrs	r3, r6
 800720a:	432b      	orrs	r3, r5
 800720c:	4323      	orrs	r3, r4
 800720e:	430b      	orrs	r3, r1
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007210:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8007212:	2000      	movs	r0, #0
 8007214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007218:	ea42 020c 	orr.w	r2, r2, ip
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800721c:	430b      	orrs	r3, r1
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800721e:	6841      	ldr	r1, [r0, #4]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007220:	433a      	orrs	r2, r7
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007222:	6003      	str	r3, [r0, #0]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007224:	ea01 010e 	and.w	r1, r1, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007228:	4332      	orrs	r2, r6
 800722a:	432a      	orrs	r2, r5
 800722c:	4322      	orrs	r2, r4
 800722e:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007230:	6042      	str	r2, [r0, #4]
 8007232:	e7ee      	b.n	8007212 <FMC_SDRAM_Init+0x42>
 8007234:	ffff8000 	.word	0xffff8000

08007238 <FMC_SDRAM_Timing_Init>:
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007238:	684b      	ldr	r3, [r1, #4]
  if (Bank != FMC_SDRAM_BANK2) 
 800723a:	2a01      	cmp	r2, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800723c:	f103 3cff 	add.w	ip, r3, #4294967295
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007240:	688b      	ldr	r3, [r1, #8]
{
 8007242:	b5f0      	push	{r4, r5, r6, r7, lr}
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007244:	f103 33ff 	add.w	r3, r3, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007248:	680f      	ldr	r7, [r1, #0]
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800724a:	690e      	ldr	r6, [r1, #16]
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
 800724c:	698d      	ldr	r5, [r1, #24]
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800724e:	ea4f 2303 	mov.w	r3, r3, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007252:	68cc      	ldr	r4, [r1, #12]
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007254:	f106 36ff 	add.w	r6, r6, #4294967295
                       (((Timing->RPDelay)-1) << 20)             |\
 8007258:	6949      	ldr	r1, [r1, #20]
                       (((Timing->RCDDelay)-1) << 24));
 800725a:	f105 35ff 	add.w	r5, r5, #4294967295
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800725e:	f104 34ff 	add.w	r4, r4, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007262:	f107 37ff 	add.w	r7, r7, #4294967295
                       (((Timing->RPDelay)-1) << 20)             |\
 8007266:	f101 31ff 	add.w	r1, r1, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800726a:	ea4f 4606 	mov.w	r6, r6, lsl #16
                       (((Timing->RCDDelay)-1) << 24));
 800726e:	ea4f 6505 	mov.w	r5, r5, lsl #24
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007272:	ea4f 3404 	mov.w	r4, r4, lsl #12
                       (((Timing->RPDelay)-1) << 20)             |\
 8007276:	ea4f 5101 	mov.w	r1, r1, lsl #20
 800727a:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
  if (Bank != FMC_SDRAM_BANK2) 
 800727e:	d00b      	beq.n	8007298 <FMC_SDRAM_Timing_Init+0x60>
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007280:	433b      	orrs	r3, r7
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007282:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007284:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007286:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800728a:	432b      	orrs	r3, r5
 800728c:	4323      	orrs	r3, r4
 800728e:	430b      	orrs	r3, r1
 8007290:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007292:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr2;
  }   
  
  return HAL_OK;
}
 8007294:	2000      	movs	r0, #0
 8007296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007298:	433b      	orrs	r3, r7
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK2];
 800729a:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800729c:	430c      	orrs	r4, r1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800729e:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80072a0:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80072a4:	432b      	orrs	r3, r5
 80072a6:	4313      	orrs	r3, r2
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK1];
 80072a8:	6882      	ldr	r2, [r0, #8]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80072aa:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr1;
 80072ae:	60c3      	str	r3, [r0, #12]
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80072b0:	4314      	orrs	r4, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr2;
 80072b2:	6084      	str	r4, [r0, #8]
 80072b4:	e7ee      	b.n	8007294 <FMC_SDRAM_Timing_Init+0x5c>

080072b6 <FMC_SDRAM_SendCommand>:
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  __IO uint32_t tmpr = 0;
 80072b6:	2300      	movs	r3, #0
{
 80072b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072ba:	4615      	mov	r5, r2
  __IO uint32_t tmpr = 0;
 80072bc:	9301      	str	r3, [sp, #4]
{
 80072be:	4604      	mov	r4, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80072c0:	e9d1 3200 	ldrd	r3, r2, [r1]
 80072c4:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 80072c6:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80072c8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80072cc:	688a      	ldr	r2, [r1, #8]
 80072ce:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80072d0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80072d4:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 80072d6:	9b01      	ldr	r3, [sp, #4]
 80072d8:	6103      	str	r3, [r0, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80072da:	f7fc fd85 	bl	8003de8 <HAL_GetTick>
 80072de:	4606      	mov	r6, r0

  /* wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80072e0:	69a0      	ldr	r0, [r4, #24]
 80072e2:	f010 0020 	ands.w	r0, r0, #32
 80072e6:	d003      	beq.n	80072f0 <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80072e8:	1c6b      	adds	r3, r5, #1
 80072ea:	d0f9      	beq.n	80072e0 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80072ec:	b915      	cbnz	r5, 80072f4 <FMC_SDRAM_SendCommand+0x3e>
      {
        return HAL_TIMEOUT;
 80072ee:	2003      	movs	r0, #3
      }
    }     
  }
  
  return HAL_OK;  
}
 80072f0:	b002      	add	sp, #8
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80072f4:	f7fc fd78 	bl	8003de8 <HAL_GetTick>
 80072f8:	1b80      	subs	r0, r0, r6
 80072fa:	42a8      	cmp	r0, r5
 80072fc:	d9f0      	bls.n	80072e0 <FMC_SDRAM_SendCommand+0x2a>
 80072fe:	e7f6      	b.n	80072ee <FMC_SDRAM_SendCommand+0x38>

08007300 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007300:	6943      	ldr	r3, [r0, #20]
 8007302:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8007306:	6143      	str	r3, [r0, #20]
  
  return HAL_OK;   
}
 8007308:	2000      	movs	r0, #0
 800730a:	4770      	bx	lr

0800730c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800730c:	b084      	sub	sp, #16
 800730e:	b510      	push	{r4, lr}
 8007310:	ac03      	add	r4, sp, #12
 8007312:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007316:	460b      	mov	r3, r1
 8007318:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800731a:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800731c:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 800731e:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007320:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
             Init.ClockBypass         |\
 8007324:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8007326:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007328:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
             Init.ClockPowerSave      |\
 800732c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 800732e:	9907      	ldr	r1, [sp, #28]
 8007330:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8007332:	9908      	ldr	r1, [sp, #32]
 8007334:	430b      	orrs	r3, r1

  return HAL_OK;
}
 8007336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800733a:	4313      	orrs	r3, r2
}
 800733c:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800733e:	6043      	str	r3, [r0, #4]
}
 8007340:	2000      	movs	r0, #0
 8007342:	4770      	bx	lr

08007344 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007344:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8007348:	4770      	bx	lr

0800734a <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800734a:	680b      	ldr	r3, [r1, #0]
 800734c:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 8007350:	2000      	movs	r0, #0
 8007352:	4770      	bx	lr

08007354 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007354:	2303      	movs	r3, #3
 8007356:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 8007358:	2000      	movs	r0, #0
 800735a:	4770      	bx	lr

0800735c <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800735c:	6800      	ldr	r0, [r0, #0]
}
 800735e:	f000 0003 	and.w	r0, r0, #3
 8007362:	4770      	bx	lr

08007364 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007364:	680b      	ldr	r3, [r1, #0]
{
 8007366:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8007368:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800736a:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800736c:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007370:	f422 627f 	bic.w	r2, r2, #4080	@ 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007374:	4323      	orrs	r3, r4
                       Command->Response         |\
 8007376:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8007378:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800737a:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 800737e:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8007380:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007382:	4313      	orrs	r3, r2
 8007384:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8007386:	2000      	movs	r0, #0
 8007388:	bd10      	pop	{r4, pc}

0800738a <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 800738a:	6900      	ldr	r0, [r0, #16]
}
 800738c:	b2c0      	uxtb	r0, r0
 800738e:	4770      	bx	lr

08007390 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007390:	3014      	adds	r0, #20
{
 8007392:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8007394:	2300      	movs	r3, #0
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007396:	4408      	add	r0, r1
  __IO uint32_t tmp = 0;
 8007398:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800739a:	9001      	str	r0, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 800739c:	9b01      	ldr	r3, [sp, #4]
 800739e:	6818      	ldr	r0, [r3, #0]
}  
 80073a0:	b002      	add	sp, #8
 80073a2:	4770      	bx	lr

080073a4 <SDMMC_DataConfig>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80073a4:	680b      	ldr	r3, [r1, #0]
{
 80073a6:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 80073a8:	6243      	str	r3, [r0, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80073aa:	684b      	ldr	r3, [r1, #4]
 80073ac:	6283      	str	r3, [r0, #40]	@ 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80073ae:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80073b0:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80073b4:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80073b8:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80073ba:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 80073bc:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 80073be:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80073c0:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80073c2:	4313      	orrs	r3, r2
 80073c4:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 80073c6:	2000      	movs	r0, #0
 80073c8:	bd10      	pop	{r4, pc}
	...

080073cc <initalize_constants>:
int      CRC_WIDTH;
uint8_t tones[79];


void initalize_constants(void) {
    ND = 58;      // Data symbols
 80073cc:	4b0a      	ldr	r3, [pc, #40]	@ (80073f8 <initalize_constants+0x2c>)
    NS = 21;      // Sync symbols (3 @ Costas 7x7)
 80073ce:	2215      	movs	r2, #21
 80073d0:	213a      	movs	r1, #58	@ 0x3a
   // int NN = NS + ND;   // Total channel symbols (79)
    NN = 79;   // Total channel symbols (79)
    // Define the LDPC sizes
    N = 174;      // Number of bits in the encoded message
 80073d2:	204f      	movs	r0, #79	@ 0x4f
    K = 91;       // Number of payload bits
   // int M = N - K;    // Number of checksum bits
    M = 83;
 80073d4:	f04f 0c5b 	mov.w	ip, #91	@ 0x5b
    NS = 21;      // Sync symbols (3 @ Costas 7x7)
 80073d8:	e9c3 1200 	strd	r1, r2, [r3]
    N = 174;      // Number of bits in the encoded message
 80073dc:	22ae      	movs	r2, #174	@ 0xae
 80073de:	e9c3 0202 	strd	r0, r2, [r3, #8]
    M = 83;
 80073e2:	2253      	movs	r2, #83	@ 0x53
 80073e4:	e9c3 c204 	strd	ip, r2, [r3, #16]
   // int K_BYTES = (K + 7) / 8;    // Number of whole bytes needed to store K bits
    K_BYTES = 12;
 80073e8:	220c      	movs	r2, #12
 80073ea:	619a      	str	r2, [r3, #24]

    // Define CRC parameters
    CRC_POLYNOMIAL = 0x2757;  // CRC-14 polynomial without the leading (MSB) 1
 80073ec:	f242 7257 	movw	r2, #10071	@ 0x2757
 80073f0:	839a      	strh	r2, [r3, #28]
    CRC_WIDTH = 14;
 80073f2:	220e      	movs	r2, #14
 80073f4:	621a      	str	r2, [r3, #32]

}
 80073f6:	4770      	bx	lr
 80073f8:	2000185c 	.word	0x2000185c

080073fc <find_sync>:



// Localize top N candidates in frequency and time according to their sync strength (looking at Costas symbols)
// We treat and organize the candidate list as a min-heap (empty initially).
int find_sync(const uint8_t *power, int num_blocks, int num_bins, const uint8_t *sync_map, int num_candidates, Candidate *heap, int min_score) {
 80073fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007400:	b091      	sub	sp, #68	@ 0x44
    int heap_size = 0;
   // int x = 500;
    // Here we allow time offsets that exceed signal boundaries, as long as we still have all data bits.
    // I.e. we can afford to skip the first 7 or the last 7 Costas symbols, as long as we track how many
    // sync symbols we included in the score, so the score is averaged.
    for (int alt = 0; alt < 4; ++alt) {
 8007402:	2500      	movs	r5, #0
int find_sync(const uint8_t *power, int num_blocks, int num_bins, const uint8_t *sync_map, int num_candidates, Candidate *heap, int min_score) {
 8007404:	9200      	str	r2, [sp, #0]
   // int alt = 0;
        for (int time_offset = -7; time_offset < num_blocks - NN + 7; ++time_offset) {  // NN=79
 8007406:	4a8b      	ldr	r2, [pc, #556]	@ (8007634 <find_sync+0x238>)
int find_sync(const uint8_t *power, int num_blocks, int num_bins, const uint8_t *sync_map, int num_candidates, Candidate *heap, int min_score) {
 8007408:	9106      	str	r1, [sp, #24]
        for (int time_offset = -7; time_offset < num_blocks - NN + 7; ++time_offset) {  // NN=79
 800740a:	6812      	ldr	r2, [r2, #0]
int find_sync(const uint8_t *power, int num_blocks, int num_bins, const uint8_t *sync_map, int num_candidates, Candidate *heap, int min_score) {
 800740c:	930c      	str	r3, [sp, #48]	@ 0x30
        for (int time_offset = -7; time_offset < num_blocks - NN + 7; ++time_offset) {  // NN=79
 800740e:	1a8a      	subs	r2, r1, r2
 8007410:	9900      	ldr	r1, [sp, #0]
int find_sync(const uint8_t *power, int num_blocks, int num_bins, const uint8_t *sync_map, int num_candidates, Candidate *heap, int min_score) {
 8007412:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
        for (int time_offset = -7; time_offset < num_blocks - NN + 7; ++time_offset) {  // NN=79
 8007414:	3206      	adds	r2, #6
int find_sync(const uint8_t *power, int num_blocks, int num_bins, const uint8_t *sync_map, int num_candidates, Candidate *heap, int min_score) {
 8007416:	900b      	str	r0, [sp, #44]	@ 0x2c
    int heap_size = 0;
 8007418:	4628      	mov	r0, r5
        for (int time_offset = -7; time_offset < num_blocks - NN + 7; ++time_offset) {  // NN=79
 800741a:	9209      	str	r2, [sp, #36]	@ 0x24
 800741c:	f06f 021b 	mvn.w	r2, #27
 8007420:	434a      	muls	r2, r1
 8007422:	9204      	str	r2, [sp, #16]
 8007424:	008a      	lsls	r2, r1, #2
 8007426:	9205      	str	r2, [sp, #20]
 8007428:	2290      	movs	r2, #144	@ 0x90
 800742a:	434a      	muls	r2, r1
 800742c:	920a      	str	r2, [sp, #40]	@ 0x28
            for (int freq_offset = ft8_min_bin; freq_offset < num_bins - 8; ++freq_offset) {
 800742e:	f1a1 0208 	sub.w	r2, r1, #8
 8007432:	920e      	str	r2, [sp, #56]	@ 0x38
                if (score < min_score) continue;

                // If the heap is full AND the current candidate is better than
                // the worst in the heap, we remove the worst and make space
                if (heap_size == num_candidates && score > heap[0].score) {
                    heap[0] = heap[heap_size - 1];
 8007434:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007436:	f102 5200 	add.w	r2, r2, #536870912	@ 0x20000000
 800743a:	3a01      	subs	r2, #1
 800743c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007440:	9207      	str	r2, [sp, #28]
                    --heap_size;
 8007442:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007444:	3a01      	subs	r2, #1
 8007446:	9201      	str	r2, [sp, #4]
                // If there's free space in the heap, we add the current candidate
                if (heap_size < num_candidates) {
                    heap[heap_size].score = score;
                    heap[heap_size].time_offset = time_offset;
                    heap[heap_size].freq_offset = freq_offset;
                    heap[heap_size].time_sub = alt / 2;
 8007448:	f3c5 0247 	ubfx	r2, r5, #1, #8
        for (int time_offset = -7; time_offset < num_blocks - NN + 7; ++time_offset) {  // NN=79
 800744c:	f06f 0706 	mvn.w	r7, #6
                    heap[heap_size].time_sub = alt / 2;
 8007450:	9208      	str	r2, [sp, #32]
 8007452:	9a04      	ldr	r2, [sp, #16]
 8007454:	9203      	str	r2, [sp, #12]
                    heap[heap_size].freq_sub = alt % 2;
 8007456:	f005 0201 	and.w	r2, r5, #1
 800745a:	920f      	str	r2, [sp, #60]	@ 0x3c
 800745c:	e0d0      	b.n	8007600 <find_sync+0x204>
                        if (time_offset + k + m < 0) continue;
 800745e:	f1be 0f00 	cmp.w	lr, #0
 8007462:	db26      	blt.n	80074b2 <find_sync+0xb6>
                        if (time_offset + k + m >= num_blocks) break;
 8007464:	9e06      	ldr	r6, [sp, #24]
 8007466:	4576      	cmp	r6, lr
 8007468:	dd2c      	ble.n	80074c4 <find_sync+0xc8>
                        score += 8 * p8[sync_map[k]] -
 800746a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
                        ++num_symbols;
 800746c:	f108 0801 	add.w	r8, r8, #1
                        score += 8 * p8[sync_map[k]] -
 8007470:	f816 600c 	ldrb.w	r6, [r6, ip]
 8007474:	f812 a006 	ldrb.w	sl, [r2, r6]
                                     p8[0] - p8[1] - p8[2] - p8[3] -
 8007478:	7816      	ldrb	r6, [r2, #0]
                        score += 8 * p8[sync_map[k]] -
 800747a:	ebc6 06ca 	rsb	r6, r6, sl, lsl #3
                                     p8[0] - p8[1] - p8[2] - p8[3] -
 800747e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8007482:	eba6 0a0a 	sub.w	sl, r6, sl
 8007486:	7896      	ldrb	r6, [r2, #2]
 8007488:	ebaa 0606 	sub.w	r6, sl, r6
 800748c:	f892 a003 	ldrb.w	sl, [r2, #3]
 8007490:	eba6 0a0a 	sub.w	sl, r6, sl
                                     p8[4] - p8[5] - p8[6] - p8[7];
 8007494:	7916      	ldrb	r6, [r2, #4]
                                     p8[0] - p8[1] - p8[2] - p8[3] -
 8007496:	ebaa 0606 	sub.w	r6, sl, r6
                                     p8[4] - p8[5] - p8[6] - p8[7];
 800749a:	f892 a005 	ldrb.w	sl, [r2, #5]
 800749e:	eba6 0a0a 	sub.w	sl, r6, sl
 80074a2:	7996      	ldrb	r6, [r2, #6]
 80074a4:	ebaa 0606 	sub.w	r6, sl, r6
 80074a8:	f892 a007 	ldrb.w	sl, [r2, #7]
 80074ac:	eba6 060a 	sub.w	r6, r6, sl
                        score += 8 * p8[sync_map[k]] -
 80074b0:	4434      	add	r4, r6
                    for (int k = 0; k < 7; ++k) {
 80074b2:	f10c 0c01 	add.w	ip, ip, #1
 80074b6:	9e05      	ldr	r6, [sp, #20]
 80074b8:	f10e 0e01 	add.w	lr, lr, #1
 80074bc:	f1bc 0f07 	cmp.w	ip, #7
 80074c0:	4432      	add	r2, r6
 80074c2:	d1cc      	bne.n	800745e <find_sync+0x62>
                for (int m = 0; m <= 72; m += 36) {
 80074c4:	3124      	adds	r1, #36	@ 0x24
 80074c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074c8:	296c      	cmp	r1, #108	@ 0x6c
 80074ca:	4491      	add	r9, r2
 80074cc:	d005      	beq.n	80074da <find_sync+0xde>
                    for (int k = 0; k < 7; ++k) {
 80074ce:	eb01 0e07 	add.w	lr, r1, r7
int find_sync(const uint8_t *power, int num_blocks, int num_bins, const uint8_t *sync_map, int num_candidates, Candidate *heap, int min_score) {
 80074d2:	464a      	mov	r2, r9
                    for (int k = 0; k < 7; ++k) {
 80074d4:	f04f 0c00 	mov.w	ip, #0
 80074d8:	e7c1      	b.n	800745e <find_sync+0x62>
                score /= num_symbols;
 80074da:	fb94 f2f8 	sdiv	r2, r4, r8
 80074de:	9202      	str	r2, [sp, #8]
                if (score < min_score) continue;
 80074e0:	9902      	ldr	r1, [sp, #8]
 80074e2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80074e4:	4291      	cmp	r1, r2
 80074e6:	db4f      	blt.n	8007588 <find_sync+0x18c>
                if (heap_size == num_candidates && score > heap[0].score) {
 80074e8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80074ea:	4290      	cmp	r0, r2
 80074ec:	d13b      	bne.n	8007566 <find_sync+0x16a>
 80074ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80074f2:	428a      	cmp	r2, r1
 80074f4:	da48      	bge.n	8007588 <find_sync+0x18c>
                    heap[0] = heap[heap_size - 1];
 80074f6:	9a07      	ldr	r2, [sp, #28]
}


static void heapify_down(Candidate *heap, int heap_size) {
    // heapify from the root down
    int current = 0;
 80074f8:	2000      	movs	r0, #0
                    --heap_size;
 80074fa:	9901      	ldr	r1, [sp, #4]
                    heap[0] = heap[heap_size - 1];
 80074fc:	6812      	ldr	r2, [r2, #0]
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	9a07      	ldr	r2, [sp, #28]
 8007502:	6852      	ldr	r2, [r2, #4]
 8007504:	605a      	str	r2, [r3, #4]
    while (true) {
        int largest = current;
        int left = 2 * current + 1;
 8007506:	0042      	lsls	r2, r0, #1
        int right = left + 1;

        if (left < heap_size && heap[left].score < heap[largest].score) {
 8007508:	9c01      	ldr	r4, [sp, #4]
        int left = 2 * current + 1;
 800750a:	1c56      	adds	r6, r2, #1
        int right = left + 1;
 800750c:	3202      	adds	r2, #2
        if (left < heap_size && heap[left].score < heap[largest].score) {
 800750e:	42b4      	cmp	r4, r6
 8007510:	f340 8084 	ble.w	800761c <find_sync+0x220>
 8007514:	f933 e036 	ldrsh.w	lr, [r3, r6, lsl #3]
 8007518:	f933 c030 	ldrsh.w	ip, [r3, r0, lsl #3]
 800751c:	45e6      	cmp	lr, ip
 800751e:	da7d      	bge.n	800761c <find_sync+0x220>
            largest = left;
        }
        if (right < heap_size && heap[right].score < heap[largest].score) {
 8007520:	4294      	cmp	r4, r2
 8007522:	dc7f      	bgt.n	8007624 <find_sync+0x228>
 8007524:	4632      	mov	r2, r6
            largest = right;
        }
        if (largest == current) {
 8007526:	4290      	cmp	r0, r2
 8007528:	d01f      	beq.n	800756a <find_sync+0x16e>
            break;
        }

        Candidate tmp = heap[largest];
        heap[largest] = heap[current];
 800752a:	f853 e030 	ldr.w	lr, [r3, r0, lsl #3]
 800752e:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
        Candidate tmp = heap[largest];
 8007532:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
 8007536:	f933 4032 	ldrsh.w	r4, [r3, r2, lsl #3]
 800753a:	f9bc 9004 	ldrsh.w	r9, [ip, #4]
 800753e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8007542:	f9bc a002 	ldrsh.w	sl, [ip, #2]
        heap[largest] = heap[current];
 8007546:	f843 e032 	str.w	lr, [r3, r2, lsl #3]
 800754a:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800754e:	f8cc e004 	str.w	lr, [ip, #4]
        heap[current] = tmp;
 8007552:	f823 4030 	strh.w	r4, [r3, r0, lsl #3]
    while (true) {
 8007556:	4610      	mov	r0, r2
        heap[current] = tmp;
 8007558:	f8a6 a002 	strh.w	sl, [r6, #2]
 800755c:	f8a6 9004 	strh.w	r9, [r6, #4]
 8007560:	f8a6 8006 	strh.w	r8, [r6, #6]
    while (true) {
 8007564:	e7cf      	b.n	8007506 <find_sync+0x10a>
                if (heap_size < num_candidates) {
 8007566:	da0f      	bge.n	8007588 <find_sync+0x18c>
 8007568:	4601      	mov	r1, r0
                    heap[heap_size].score = score;
 800756a:	9802      	ldr	r0, [sp, #8]
 800756c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8007570:	f823 0031 	strh.w	r0, [r3, r1, lsl #3]
                    heap[heap_size].time_sub = alt / 2;
 8007574:	9808      	ldr	r0, [sp, #32]
                    heap[heap_size].time_offset = time_offset;
 8007576:	8057      	strh	r7, [r2, #2]
                    heap[heap_size].time_sub = alt / 2;
 8007578:	7190      	strb	r0, [r2, #6]
                    heap[heap_size].freq_sub = alt % 2;
 800757a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
                    heap[heap_size].freq_offset = freq_offset;
 800757c:	f8a2 b004 	strh.w	fp, [r2, #4]
                    heap[heap_size].freq_sub = alt % 2;
 8007580:	71d0      	strb	r0, [r2, #7]
                    ++heap_size;
 8007582:	1c48      	adds	r0, r1, #1


static void heapify_up(Candidate *heap, int heap_size) {
    // heapify from the last node up
    int current = heap_size - 1;
    while (current > 0) {
 8007584:	2900      	cmp	r1, #0
 8007586:	dc0b      	bgt.n	80075a0 <find_sync+0x1a4>
            for (int freq_offset = ft8_min_bin; freq_offset < num_bins - 8; ++freq_offset) {
 8007588:	f10b 0b01 	add.w	fp, fp, #1
 800758c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800758e:	455a      	cmp	r2, fp
 8007590:	dd31      	ble.n	80075f6 <find_sync+0x1fa>
                for (int m = 0; m <= 72; m += 36) {
 8007592:	2100      	movs	r1, #0
 8007594:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
                int num_symbols = 0;
 8007596:	4688      	mov	r8, r1
 8007598:	eb02 090b 	add.w	r9, r2, fp
                int score = 0;
 800759c:	460c      	mov	r4, r1
 800759e:	e796      	b.n	80074ce <find_sync+0xd2>
        int parent = (current - 1) / 2;
 80075a0:	1e4a      	subs	r2, r1, #1
        if (heap[current].score >= heap[parent].score) {
 80075a2:	f933 c031 	ldrsh.w	ip, [r3, r1, lsl #3]
 80075a6:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
        int parent = (current - 1) / 2;
 80075aa:	1052      	asrs	r2, r2, #1
        if (heap[current].score >= heap[parent].score) {
 80075ac:	f933 e032 	ldrsh.w	lr, [r3, r2, lsl #3]
 80075b0:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80075b4:	45f4      	cmp	ip, lr
 80075b6:	dae7      	bge.n	8007588 <find_sync+0x18c>
            break;
        }

        Candidate tmp = heap[parent];
        heap[parent] = heap[current];
 80075b8:	f853 c031 	ldr.w	ip, [r3, r1, lsl #3]
        Candidate tmp = heap[parent];
 80075bc:	f9b6 9004 	ldrsh.w	r9, [r6, #4]
 80075c0:	f8b6 8006 	ldrh.w	r8, [r6, #6]
 80075c4:	f9b6 a002 	ldrsh.w	sl, [r6, #2]
        heap[parent] = heap[current];
 80075c8:	f843 c032 	str.w	ip, [r3, r2, lsl #3]
 80075cc:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80075d0:	f8c6 c004 	str.w	ip, [r6, #4]
        heap[current] = tmp;
 80075d4:	f823 e031 	strh.w	lr, [r3, r1, lsl #3]
        current = parent;
 80075d8:	4611      	mov	r1, r2
        heap[current] = tmp;
 80075da:	f8a4 a002 	strh.w	sl, [r4, #2]
 80075de:	f8a4 9004 	strh.w	r9, [r4, #4]
 80075e2:	f8a4 8006 	strh.w	r8, [r4, #6]
        current = parent;
 80075e6:	e7cd      	b.n	8007584 <find_sync+0x188>
 80075e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
            for (int freq_offset = ft8_min_bin; freq_offset < num_bins - 8; ++freq_offset) {
 80075ea:	f04f 0b30 	mov.w	fp, #48	@ 0x30
 80075ee:	9903      	ldr	r1, [sp, #12]
 80075f0:	440a      	add	r2, r1
 80075f2:	920d      	str	r2, [sp, #52]	@ 0x34
 80075f4:	e7ca      	b.n	800758c <find_sync+0x190>
        for (int time_offset = -7; time_offset < num_blocks - NN + 7; ++time_offset) {  // NN=79
 80075f6:	9a03      	ldr	r2, [sp, #12]
 80075f8:	3701      	adds	r7, #1
 80075fa:	9905      	ldr	r1, [sp, #20]
 80075fc:	440a      	add	r2, r1
 80075fe:	9203      	str	r2, [sp, #12]
 8007600:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007602:	42ba      	cmp	r2, r7
 8007604:	daf0      	bge.n	80075e8 <find_sync+0x1ec>
    for (int alt = 0; alt < 4; ++alt) {
 8007606:	9a04      	ldr	r2, [sp, #16]
 8007608:	3501      	adds	r5, #1
 800760a:	9900      	ldr	r1, [sp, #0]
 800760c:	2d04      	cmp	r5, #4
 800760e:	440a      	add	r2, r1
 8007610:	9204      	str	r2, [sp, #16]
 8007612:	f47f af19 	bne.w	8007448 <find_sync+0x4c>
}
 8007616:	b011      	add	sp, #68	@ 0x44
 8007618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (right < heap_size && heap[right].score < heap[largest].score) {
 800761c:	9c01      	ldr	r4, [sp, #4]
 800761e:	4294      	cmp	r4, r2
 8007620:	dda3      	ble.n	800756a <find_sync+0x16e>
 8007622:	4606      	mov	r6, r0
 8007624:	f933 e032 	ldrsh.w	lr, [r3, r2, lsl #3]
 8007628:	f933 c036 	ldrsh.w	ip, [r3, r6, lsl #3]
 800762c:	45e6      	cmp	lr, ip
 800762e:	f6bf af79 	bge.w	8007524 <find_sync+0x128>
 8007632:	e778      	b.n	8007526 <find_sync+0x12a>
 8007634:	20001864 	.word	0x20001864

08007638 <extract_likelihood>:
void extract_likelihood(const uint8_t *power, int num_bins, Candidate cand, const uint8_t *code_map, float *log174) {
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	b08b      	sub	sp, #44	@ 0x2c
 800763e:	466c      	mov	r4, sp
 8007640:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
    int offset = (cand.time_offset * 4 + cand.time_sub * 2 + cand.freq_sub) * num_bins + cand.freq_offset;
 8007644:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8007646:	f10c 0807 	add.w	r8, ip, #7
void extract_likelihood(const uint8_t *power, int num_bins, Candidate cand, const uint8_t *code_map, float *log174) {
 800764a:	e884 000c 	stmia.w	r4, {r2, r3}
    int offset = (cand.time_offset * 4 + cand.time_sub * 2 + cand.freq_sub) * num_bins + cand.freq_offset;
 800764e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
    for (int k = 0; k < ND; k += n_syms) {
 8007652:	462c      	mov	r4, r5
    int offset = (cand.time_offset * 4 + cand.time_sub * 2 + cand.freq_sub) * num_bins + cand.freq_offset;
 8007654:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007658:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800765c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8007660:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007664:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    for (int k = 0; k < ND; k += n_syms) {
 8007668:	2200      	movs	r2, #0
    int offset = (cand.time_offset * 4 + cand.time_sub * 2 + cand.freq_sub) * num_bins + cand.freq_offset;
 800766a:	fb01 6603 	mla	r6, r1, r3, r6
    for (int k = 0; k < ND; k += n_syms) {
 800766e:	4b66      	ldr	r3, [pc, #408]	@ (8007808 <extract_likelihood+0x1d0>)
 8007670:	681f      	ldr	r7, [r3, #0]
        int sym_idx = (k < ND / 2) ? (k + 7) : (k + 14);
 8007672:	ea4f 0e67 	mov.w	lr, r7, asr #1
    for (int k = 0; k < ND; k += n_syms) {
 8007676:	4297      	cmp	r7, r2
 8007678:	dc26      	bgt.n	80076c8 <extract_likelihood+0x90>
    float inv_n = 1.0f / N;
 800767a:	4c64      	ldr	r4, [pc, #400]	@ (800780c <extract_likelihood+0x1d4>)
 800767c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    float sum2  = 0;
 8007680:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 8007810 <extract_likelihood+0x1d8>
    for (int i = 0; i < N; ++i) {
 8007684:	2200      	movs	r2, #0
    float inv_n = 1.0f / N;
 8007686:	6821      	ldr	r1, [r4, #0]
    for (int i = 0; i < N; ++i) {
 8007688:	9b15      	ldr	r3, [sp, #84]	@ 0x54
    float inv_n = 1.0f / N;
 800768a:	ee07 1a90 	vmov	s15, r1
 800768e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007692:	eec7 6a27 	vdiv.f32	s13, s14, s15
    float sum   = 0;
 8007696:	eef0 7a40 	vmov.f32	s15, s0
    for (int i = 0; i < N; ++i) {
 800769a:	4291      	cmp	r1, r2
 800769c:	f300 80a4 	bgt.w	80077e8 <extract_likelihood+0x1b0>
    float variance = (sum2 - sum * sum * inv_n) * inv_n;
 80076a0:	ee67 7ae7 	vnmul.f32	s15, s15, s15
 80076a4:	eea6 0aa7 	vfma.f32	s0, s13, s15
    float norm_factor = sqrtf(16.0f / variance);
 80076a8:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
    float variance = (sum2 - sum * sum * inv_n) * inv_n;
 80076ac:	ee20 0a26 	vmul.f32	s0, s0, s13
    float norm_factor = sqrtf(16.0f / variance);
 80076b0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80076b4:	f007 fe9e 	bl	800f3f4 <sqrtf>
    for (int i = 0; i < N; ++i) {
 80076b8:	6822      	ldr	r2, [r4, #0]
 80076ba:	2300      	movs	r3, #0
 80076bc:	429a      	cmp	r2, r3
 80076be:	f300 809b 	bgt.w	80077f8 <extract_likelihood+0x1c0>
}
 80076c2:	b00b      	add	sp, #44	@ 0x2c
 80076c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int sym_idx = (k < ND / 2) ? (k + 7) : (k + 14);
 80076c8:	4596      	cmp	lr, r2
 80076ca:	f10c 39ff 	add.w	r9, ip, #4294967295
 80076ce:	f10d 0a08 	add.w	sl, sp, #8
 80076d2:	bfcc      	ite	gt
 80076d4:	1dd3      	addgt	r3, r2, #7
 80076d6:	f102 030e 	addle.w	r3, r2, #14
        const uint8_t *ps = power + (offset + sym_idx * 4 * num_bins);
 80076da:	434b      	muls	r3, r1
 80076dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2

// Cleaned up code for the simple case of n_syms==1
    float s2[8];

    for (int j = 0; j < 8; ++j) {
        s2[j] = (float)power[code_map[j]];
 80076e0:	4403      	add	r3, r0
 80076e2:	f819 bf01 	ldrb.w	fp, [r9, #1]!
 80076e6:	f813 b00b 	ldrb.w	fp, [r3, fp]
    for (int j = 0; j < 8; ++j) {
 80076ea:	45c8      	cmp	r8, r9
        s2[j] = (float)power[code_map[j]];
 80076ec:	ee07 ba90 	vmov	s15, fp
 80076f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f4:	ecea 7a01 	vstmia	sl!, {s15}
    for (int j = 0; j < 8; ++j) {
 80076f8:	d1f3      	bne.n	80076e2 <extract_likelihood+0xaa>
        //s2[j] = (float)work_fft_power[offset+code_map[j]];
    }

    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 80076fa:	eddd 4a06 	vldr	s9, [sp, #24]
    for (int k = 0; k < ND; k += n_syms) {
 80076fe:	3201      	adds	r2, #1
    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 8007700:	eddd 3a07 	vldr	s7, [sp, #28]
 8007704:	340c      	adds	r4, #12
 8007706:	ed9d 7a08 	vldr	s14, [sp, #32]
    return (a >= b) ? a : b;
 800770a:	eef4 4ae3 	vcmpe.f32	s9, s7
    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 800770e:	eddd 7a09 	vldr	s15, [sp, #36]	@ 0x24
 8007712:	ed9d 4a02 	vldr	s8, [sp, #8]
 8007716:	ed9d 3a03 	vldr	s6, [sp, #12]
    return (a >= b) ? a : b;
 800771a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 800771e:	ed9d 6a04 	vldr	s12, [sp, #16]
    return (a >= b) ? a : b;
 8007722:	eeb4 7ae7 	vcmpe.f32	s14, s15
    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 8007726:	eddd 5a05 	vldr	s11, [sp, #20]
    return (a >= b) ? a : b;
 800772a:	fe24 5aa3 	vselge.f32	s10, s9, s7
 800772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007732:	fe67 6a27 	vselge.f32	s13, s14, s15
 8007736:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800773a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773e:	eeb4 4ac3 	vcmpe.f32	s8, s6
 8007742:	fe65 1a26 	vselge.f32	s3, s10, s13
 8007746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774a:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800774e:	fe64 2a03 	vselge.f32	s5, s8, s6
 8007752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007756:	fe26 2a25 	vselge.f32	s4, s12, s11
 800775a:	eef4 2ac2 	vcmpe.f32	s5, s4
 800775e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007762:	eef4 6a42 	vcmp.f32	s13, s4
 8007766:	fe22 1a82 	vselge.f32	s2, s5, s4
    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 800776a:	ee71 1ac1 	vsub.f32	s3, s3, s2
    return (a >= b) ? a : b;
 800776e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007772:	eeb4 5a62 	vcmp.f32	s10, s5
    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 8007776:	ed44 1a03 	vstr	s3, [r4, #-12]
    return (a >= b) ? a : b;
 800777a:	bf98      	it	ls
 800777c:	eef0 6a42 	vmovls.f32	s13, s4
 8007780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007784:	eeb4 3a65 	vcmp.f32	s6, s11
 8007788:	bf98      	it	ls
 800778a:	eeb0 5a62 	vmovls.f32	s10, s5
 800778e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007792:	eef4 3a67 	vcmp.f32	s7, s15
    log174[bit_idx + 1] = max4(s2[2], s2[3], s2[6], s2[7]) - max4(s2[0], s2[1], s2[4], s2[5]);
 8007796:	ee76 6ac5 	vsub.f32	s13, s13, s10
    return (a >= b) ? a : b;
 800779a:	fe63 5a25 	vselge.f32	s11, s6, s11
 800779e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    log174[bit_idx + 1] = max4(s2[2], s2[3], s2[6], s2[7]) - max4(s2[0], s2[1], s2[4], s2[5]);
 80077a2:	ed44 6a02 	vstr	s13, [r4, #-8]
    return (a >= b) ? a : b;
 80077a6:	fe63 7aa7 	vselge.f32	s15, s7, s15
 80077aa:	eef4 7a65 	vcmp.f32	s15, s11
 80077ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b2:	eeb4 4a46 	vcmp.f32	s8, s12
 80077b6:	bf98      	it	ls
 80077b8:	eef0 7a65 	vmovls.f32	s15, s11
 80077bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c0:	eef4 4a47 	vcmp.f32	s9, s14
 80077c4:	fe24 6a06 	vselge.f32	s12, s8, s12
 80077c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077cc:	fe24 7a87 	vselge.f32	s14, s9, s14
 80077d0:	eeb4 7a46 	vcmp.f32	s14, s12
 80077d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d8:	bf98      	it	ls
 80077da:	eeb0 7a46 	vmovls.f32	s14, s12
    log174[bit_idx + 2] = max4(s2[1], s2[3], s2[5], s2[7]) - max4(s2[0], s2[2], s2[4], s2[6]);
 80077de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077e2:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (int k = 0; k < ND; k += n_syms) {
 80077e6:	e746      	b.n	8007676 <extract_likelihood+0x3e>
        sum  += log174[i];
 80077e8:	ecb3 7a01 	vldmia	r3!, {s14}
    for (int i = 0; i < N; ++i) {
 80077ec:	3201      	adds	r2, #1
        sum2 += log174[i] * log174[i];
 80077ee:	eea7 0a07 	vfma.f32	s0, s14, s14
        sum  += log174[i];
 80077f2:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int i = 0; i < N; ++i) {
 80077f6:	e750      	b.n	800769a <extract_likelihood+0x62>
        log174[i] *= norm_factor;
 80077f8:	edd5 7a00 	vldr	s15, [r5]
    for (int i = 0; i < N; ++i) {
 80077fc:	3301      	adds	r3, #1
        log174[i] *= norm_factor;
 80077fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007802:	ece5 7a01 	vstmia	r5!, {s15}
    for (int i = 0; i < N; ++i) {
 8007806:	e759      	b.n	80076bc <extract_likelihood+0x84>
 8007808:	2000185c 	.word	0x2000185c
 800780c:	20001868 	.word	0x20001868
 8007810:	00000000 	.word	0x00000000

08007814 <parity8>:



// Returns 1 if an odd number of bits are set in x, zero otherwise
uint8_t parity8(uint8_t x) {
    x ^= x >> 4;    // a b c d ae bf cg dh
 8007814:	ea80 1010 	eor.w	r0, r0, r0, lsr #4
    x ^= x >> 2;    // a b ac bd cae dbf aecg bfdh
 8007818:	ea80 0090 	eor.w	r0, r0, r0, lsr #2
    x ^= x >> 1;    // a ab bac acbd bdcae caedbf aecgbfdh
 800781c:	ea80 0050 	eor.w	r0, r0, r0, lsr #1
    return (x) & 1;
}
 8007820:	f000 0001 	and.w	r0, r0, #1
 8007824:	4770      	bx	lr
	...

08007828 <encode174>:
// The code is a (174,91) regular ldpc code with column weight 3.
// The code was generated using the PEG algorithm.
// Arguments:
// [IN] message   - array of 91 bits stored as 12 bytes (MSB first)
// [OUT] codeword - array of 174 bits stored as 22 bytes (MSB first)
void encode174(const uint8_t *message, uint8_t *codeword) {
 8007828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	4606      	mov	r6, r0
    //     printf("%02x ", message[i]);
    // }
    // printf("\n");

    // Fill the codeword with message and zeros, as we will only update binary ones later
    for (int j = 0; j < (7 + N) / 8; ++j) {
 800782e:	2200      	movs	r2, #0
        codeword[j] = (j < K_BYTES) ? message[j] : 0;
 8007830:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 80078d4 <encode174+0xac>
    for (int j = 0; j < (7 + N) / 8; ++j) {
 8007834:	4d24      	ldr	r5, [pc, #144]	@ (80078c8 <encode174+0xa0>)
 8007836:	6828      	ldr	r0, [r5, #0]
        codeword[j] = (j < K_BYTES) ? message[j] : 0;
 8007838:	f8d9 3000 	ldr.w	r3, [r9]
    for (int j = 0; j < (7 + N) / 8; ++j) {
 800783c:	1dc4      	adds	r4, r0, #7
 800783e:	bf48      	it	mi
 8007840:	f100 040e 	addmi.w	r4, r0, #14
 8007844:	ebb2 0fe4 	cmp.w	r2, r4, asr #3
 8007848:	db1a      	blt.n	8007880 <encode174+0x58>
    }

    uint8_t col_mask = (0x80 >> (K % 8));   // bitmask of current byte
 800784a:	4a20      	ldr	r2, [pc, #128]	@ (80078cc <encode174+0xa4>)
    uint8_t col_idx = K_BYTES - 1;          // index into byte array
 800784c:	3b01      	subs	r3, #1

    // Compute the first part of itmp (1:M) and store the result in codeword
    for (int i = 0; i < M; ++i) { // do i=1,M
 800784e:	2500      	movs	r5, #0
 8007850:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80078d8 <encode174+0xb0>
    uint8_t col_mask = (0x80 >> (K % 8));   // bitmask of current byte
 8007854:	6810      	ldr	r0, [r2, #0]
 8007856:	2280      	movs	r2, #128	@ 0x80
    uint8_t col_idx = K_BYTES - 1;          // index into byte array
 8007858:	b2db      	uxtb	r3, r3
 800785a:	f04f 0a0c 	mov.w	sl, #12
    uint8_t col_mask = (0x80 >> (K % 8));   // bitmask of current byte
 800785e:	f000 0007 	and.w	r0, r0, #7
 8007862:	4102      	asrs	r2, r0
 8007864:	b2d2      	uxtb	r2, r2
    for (int i = 0; i < M; ++i) { // do i=1,M
 8007866:	f8db 0000 	ldr.w	r0, [fp]
 800786a:	42a8      	cmp	r0, r5
 800786c:	dd29      	ble.n	80078c2 <encode174+0x9a>
        // Fast implementation of bitwise multiplication and parity checking
        // Normally nsum would contain the result of dot product between message and kGenerator[i],
        // but we only compute the sum modulo 2.
        uint8_t nsum = 0;
        for (int j = 0; j < K_BYTES; ++j) {
 800786e:	f8d9 0000 	ldr.w	r0, [r9]
 8007872:	2400      	movs	r4, #0
 8007874:	9001      	str	r0, [sp, #4]
        uint8_t nsum = 0;
 8007876:	4627      	mov	r7, r4
 8007878:	4815      	ldr	r0, [pc, #84]	@ (80078d0 <encode174+0xa8>)
 800787a:	fb0a 0805 	mla	r8, sl, r5, r0
 800787e:	e010      	b.n	80078a2 <encode174+0x7a>
        codeword[j] = (j < K_BYTES) ? message[j] : 0;
 8007880:	429a      	cmp	r2, r3
 8007882:	bfb4      	ite	lt
 8007884:	5cb3      	ldrblt	r3, [r6, r2]
 8007886:	2300      	movge	r3, #0
 8007888:	548b      	strb	r3, [r1, r2]
    for (int j = 0; j < (7 + N) / 8; ++j) {
 800788a:	3201      	adds	r2, #1
 800788c:	e7d3      	b.n	8007836 <encode174+0xe>
            uint8_t bits = message[j] & kGenerator[i][j];    // bitwise AND (bitwise multiplication)
 800788e:	f818 cb01 	ldrb.w	ip, [r8], #1
 8007892:	5d30      	ldrb	r0, [r6, r4]
        for (int j = 0; j < K_BYTES; ++j) {
 8007894:	3401      	adds	r4, #1
            nsum ^= parity8(bits);                  // bitwise XOR (addition modulo 2)
 8007896:	ea0c 0000 	and.w	r0, ip, r0
 800789a:	f7ff ffbb 	bl	8007814 <parity8>
 800789e:	4078      	eors	r0, r7
 80078a0:	b2c7      	uxtb	r7, r0
        for (int j = 0; j < K_BYTES; ++j) {
 80078a2:	9801      	ldr	r0, [sp, #4]
 80078a4:	42a0      	cmp	r0, r4
 80078a6:	dcf2      	bgt.n	800788e <encode174+0x66>
        }
        // Check if we need to set a bit in codeword
        if (nsum % 2) { // pchecks(i)=mod(nsum,2)
 80078a8:	07f8      	lsls	r0, r7, #31
    for (int i = 0; i < M; ++i) { // do i=1,M
 80078aa:	f105 0501 	add.w	r5, r5, #1
            codeword[col_idx] |= col_mask;
 80078ae:	bf42      	ittt	mi
 80078b0:	5cc8      	ldrbmi	r0, [r1, r3]
 80078b2:	4310      	orrmi	r0, r2
 80078b4:	54c8      	strbmi	r0, [r1, r3]
        }

        col_mask >>= 1;
        if (col_mask == 0) {
 80078b6:	0852      	lsrs	r2, r2, #1
            col_mask = 0x80;
            ++col_idx;
 80078b8:	bf02      	ittt	eq
 80078ba:	3301      	addeq	r3, #1
            col_mask = 0x80;
 80078bc:	2280      	moveq	r2, #128	@ 0x80
            ++col_idx;
 80078be:	b2db      	uxtbeq	r3, r3
    for (int i = 0; i < M; ++i) { // do i=1,M
 80078c0:	e7d1      	b.n	8007866 <encode174+0x3e>
    // printf("Result ");
    // for (int i = 0; i < (N + 7) / 8; ++i) {
    //     printf("%02x ", codeword[i]);
    // }
    // printf("\n");
}
 80078c2:	b003      	add	sp, #12
 80078c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c8:	20001868 	.word	0x20001868
 80078cc:	2000186c 	.word	0x2000186c
 80078d0:	200005f0 	.word	0x200005f0
 80078d4:	20001874 	.word	0x20001874
 80078d8:	20001870 	.word	0x20001870

080078dc <crc>:
// [IN] message  - byte sequence (MSB first)
// [IN] num_bits - number of bits in the sequence
uint16_t crc(uint8_t *message, int num_bits) {
    // Adapted from https://barrgroup.com/Embedded-Systems/How-To/CRC-Calculation-C-Code
    //constexpr uint16_t  TOPBIT = (1 << (CRC_WIDTH - 1));
    uint16_t  TOPBIT = (1 << (CRC_WIDTH - 1));
 80078dc:	4b13      	ldr	r3, [pc, #76]	@ (800792c <crc+0x50>)

    uint16_t remainder = 0;
    int idx_byte = 0;

    // Perform modulo-2 division, a bit at a time.
    for (int idx_bit = 0; idx_bit < num_bits; ++idx_bit) {
 80078de:	2200      	movs	r2, #0
uint16_t crc(uint8_t *message, int num_bits) {
 80078e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t  TOPBIT = (1 << (CRC_WIDTH - 1));
 80078e2:	681f      	ldr	r7, [r3, #0]
 80078e4:	2401      	movs	r4, #1
    int idx_byte = 0;
 80078e6:	4615      	mov	r5, r2
    uint16_t  TOPBIT = (1 << (CRC_WIDTH - 1));
 80078e8:	1e7b      	subs	r3, r7, #1
        if (idx_bit % 8 == 0) {
            // Bring the next byte into the remainder.
            remainder ^= (message[idx_byte] << (CRC_WIDTH - 8));
 80078ea:	f1a7 0e08 	sub.w	lr, r7, #8
    uint16_t  TOPBIT = (1 << (CRC_WIDTH - 1));
 80078ee:	409c      	lsls	r4, r3
            ++idx_byte;
        }

        // Try to divide the current data bit.
        if (remainder & TOPBIT) {
            remainder = (remainder << 1) ^ CRC_POLYNOMIAL;
 80078f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007930 <crc+0x54>)
    uint16_t  TOPBIT = (1 << (CRC_WIDTH - 1));
 80078f2:	b2a4      	uxth	r4, r4
            remainder = (remainder << 1) ^ CRC_POLYNOMIAL;
 80078f4:	f8b3 c000 	ldrh.w	ip, [r3]
    uint16_t remainder = 0;
 80078f8:	4613      	mov	r3, r2
    for (int idx_bit = 0; idx_bit < num_bits; ++idx_bit) {
 80078fa:	428a      	cmp	r2, r1
 80078fc:	db04      	blt.n	8007908 <crc+0x2c>
        else {
            remainder = (remainder << 1);
        }
    }
    // printf("CRC = %04xh\n", remainder & ((1 << CRC_WIDTH) - 1));
    return remainder & ((1 << CRC_WIDTH) - 1);
 80078fe:	2001      	movs	r0, #1
 8007900:	40b8      	lsls	r0, r7
 8007902:	3801      	subs	r0, #1
}
 8007904:	4018      	ands	r0, r3
 8007906:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (idx_bit % 8 == 0) {
 8007908:	0756      	lsls	r6, r2, #29
 800790a:	d105      	bne.n	8007918 <crc+0x3c>
            remainder ^= (message[idx_byte] << (CRC_WIDTH - 8));
 800790c:	5d46      	ldrb	r6, [r0, r5]
            ++idx_byte;
 800790e:	3501      	adds	r5, #1
            remainder ^= (message[idx_byte] << (CRC_WIDTH - 8));
 8007910:	fa06 f60e 	lsl.w	r6, r6, lr
 8007914:	4073      	eors	r3, r6
 8007916:	b29b      	uxth	r3, r3
        if (remainder & TOPBIT) {
 8007918:	4223      	tst	r3, r4
 800791a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    for (int idx_bit = 0; idx_bit < num_bits; ++idx_bit) {
 800791e:	f102 0201 	add.w	r2, r2, #1
 8007922:	b29b      	uxth	r3, r3
            remainder = (remainder << 1) ^ CRC_POLYNOMIAL;
 8007924:	bf18      	it	ne
 8007926:	ea8c 0303 	eorne.w	r3, ip, r3
    for (int idx_bit = 0; idx_bit < num_bits; ++idx_bit) {
 800792a:	e7e6      	b.n	80078fa <crc+0x1e>
 800792c:	2000187c 	.word	0x2000187c
 8007930:	20001878 	.word	0x20001878

08007934 <genft8>:


// Generate FT8 tone sequence from payload data
// [IN] payload - 10 byte array consisting of 77 bit payload (MSB first)
// [OUT] itone  - array of NN (79) bytes to store the generated tones (encoded as 0..7)
void genft8(const uint8_t *payload, uint8_t *itone) {
 8007934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007936:	4602      	mov	r2, r0
 8007938:	b08b      	sub	sp, #44	@ 0x2c
 800793a:	460c      	mov	r4, r1
    uint8_t a91[12];    // Store 77 bits of payload + 14 bits CRC

    // Copy 77 bits of payload data
    for (int i = 0; i < 10; i++)
        a91[i] = payload[i];
 800793c:	6800      	ldr	r0, [r0, #0]
 800793e:	6851      	ldr	r1, [r2, #4]
 8007940:	ab01      	add	r3, sp, #4
 8007942:	8912      	ldrh	r2, [r2, #8]

    // Clear 3 bits after the payload to make 80 bits
    a91[9] &= 0xF8;
    a91[10] = 0;
 8007944:	2600      	movs	r6, #0
        if (codeword[i_byte] & mask) bits3 |= 2;
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }
        if (codeword[i_byte] & mask) bits3 |= 1;
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }

        itone[k] = kGray_map[bits3];
 8007946:	4f35      	ldr	r7, [pc, #212]	@ (8007a1c <genft8+0xe8>)
        a91[i] = payload[i];
 8007948:	c303      	stmia	r3!, {r0, r1}
 800794a:	801a      	strh	r2, [r3, #0]
    uint16_t checksum = crc(a91, 96 - 14);
 800794c:	2152      	movs	r1, #82	@ 0x52
    a91[9] &= 0xF8;
 800794e:	f89d 500d 	ldrb.w	r5, [sp, #13]
    uint16_t checksum = crc(a91, 96 - 14);
 8007952:	a801      	add	r0, sp, #4
    a91[10] = 0;
 8007954:	f8ad 600e 	strh.w	r6, [sp, #14]
    a91[9] &= 0xF8;
 8007958:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 800795c:	f88d 500d 	strb.w	r5, [sp, #13]
    uint16_t checksum = crc(a91, 96 - 14);
 8007960:	f7ff ffbc 	bl	80078dc <crc>
    a91[10] = (uint8_t)(checksum >> 3);
 8007964:	08c3      	lsrs	r3, r0, #3
    encode174(a91, codeword);
 8007966:	a904      	add	r1, sp, #16
    a91[9] |= (uint8_t)(checksum >> 11);
 8007968:	ea45 25d0 	orr.w	r5, r5, r0, lsr #11
    a91[11] = (uint8_t)(checksum << 5);
 800796c:	0140      	lsls	r0, r0, #5
    a91[10] = (uint8_t)(checksum >> 3);
 800796e:	f88d 300e 	strb.w	r3, [sp, #14]
    a91[9] |= (uint8_t)(checksum >> 11);
 8007972:	f88d 500d 	strb.w	r5, [sp, #13]
    int k = 7;          // Skip over the first set of Costas symbols
 8007976:	2507      	movs	r5, #7
    a91[11] = (uint8_t)(checksum << 5);
 8007978:	f88d 000f 	strb.w	r0, [sp, #15]
    encode174(a91, codeword);
 800797c:	a801      	add	r0, sp, #4
 800797e:	f7ff ff53 	bl	8007828 <encode174>
        itone[i]      = kCostas_map[i];
 8007982:	4b27      	ldr	r3, [pc, #156]	@ (8007a20 <genft8+0xec>)
    for (int j = 0; j < ND; ++j) { // do j=1,ND
 8007984:	4630      	mov	r0, r6
        itone[i]      = kCostas_map[i];
 8007986:	889a      	ldrh	r2, [r3, #4]
 8007988:	6819      	ldr	r1, [r3, #0]
 800798a:	799b      	ldrb	r3, [r3, #6]
 800798c:	80a2      	strh	r2, [r4, #4]
 800798e:	71a3      	strb	r3, [r4, #6]
        itone[36 + i] = kCostas_map[i];
 8007990:	8522      	strh	r2, [r4, #40]	@ 0x28
 8007992:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
        itone[72 + i] = kCostas_map[i];
 8007996:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
    int i_byte = 0;
 800799a:	4632      	mov	r2, r6
        itone[72 + i] = kCostas_map[i];
 800799c:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e
    uint8_t mask = 0x80;
 80079a0:	2380      	movs	r3, #128	@ 0x80
    for (int j = 0; j < ND; ++j) { // do j=1,ND
 80079a2:	4e20      	ldr	r6, [pc, #128]	@ (8007a24 <genft8+0xf0>)
        itone[i]      = kCostas_map[i];
 80079a4:	6021      	str	r1, [r4, #0]
        itone[36 + i] = kCostas_map[i];
 80079a6:	6261      	str	r1, [r4, #36]	@ 0x24
        itone[72 + i] = kCostas_map[i];
 80079a8:	64a1      	str	r1, [r4, #72]	@ 0x48
    for (int j = 0; j < ND; ++j) { // do j=1,ND
 80079aa:	6831      	ldr	r1, [r6, #0]
 80079ac:	4281      	cmp	r1, r0
 80079ae:	dc01      	bgt.n	80079b4 <genft8+0x80>
        ++k;
    }
}
 80079b0:	b00b      	add	sp, #44	@ 0x2c
 80079b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (codeword[i_byte] & mask) bits3 |= 4;
 80079b4:	f102 0128 	add.w	r1, r2, #40	@ 0x28
        if (j == 29) {
 80079b8:	281d      	cmp	r0, #29
    for (int j = 0; j < ND; ++j) { // do j=1,ND
 80079ba:	f100 0001 	add.w	r0, r0, #1
        if (codeword[i_byte] & mask) bits3 |= 4;
 80079be:	4469      	add	r1, sp
            k += 7;     // Skip over the second set of Costas symbols
 80079c0:	bf08      	it	eq
 80079c2:	3507      	addeq	r5, #7
        if (codeword[i_byte] & mask) bits3 |= 4;
 80079c4:	f811 1c18 	ldrb.w	r1, [r1, #-24]
 80079c8:	420b      	tst	r3, r1
 80079ca:	bf14      	ite	ne
 80079cc:	2101      	movne	r1, #1
 80079ce:	2100      	moveq	r1, #0
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }
 80079d0:	085b      	lsrs	r3, r3, #1
        if (codeword[i_byte] & mask) bits3 |= 4;
 80079d2:	ea4f 0181 	mov.w	r1, r1, lsl #2
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }
 80079d6:	bf04      	itt	eq
 80079d8:	3201      	addeq	r2, #1
 80079da:	2380      	moveq	r3, #128	@ 0x80
        if (codeword[i_byte] & mask) bits3 |= 2;
 80079dc:	f102 0c28 	add.w	ip, r2, #40	@ 0x28
 80079e0:	44ec      	add	ip, sp
 80079e2:	f81c cc18 	ldrb.w	ip, [ip, #-24]
 80079e6:	ea13 0f0c 	tst.w	r3, ip
 80079ea:	bf18      	it	ne
 80079ec:	f041 0102 	orrne.w	r1, r1, #2
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }
 80079f0:	085b      	lsrs	r3, r3, #1
 80079f2:	bf04      	itt	eq
 80079f4:	3201      	addeq	r2, #1
 80079f6:	2380      	moveq	r3, #128	@ 0x80
        if (codeword[i_byte] & mask) bits3 |= 1;
 80079f8:	f102 0c28 	add.w	ip, r2, #40	@ 0x28
 80079fc:	44ec      	add	ip, sp
 80079fe:	f81c cc18 	ldrb.w	ip, [ip, #-24]
 8007a02:	ea13 0f0c 	tst.w	r3, ip
 8007a06:	bf18      	it	ne
 8007a08:	f041 0101 	orrne.w	r1, r1, #1
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }
 8007a0c:	085b      	lsrs	r3, r3, #1
        itone[k] = kGray_map[bits3];
 8007a0e:	5c79      	ldrb	r1, [r7, r1]
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }
 8007a10:	bf04      	itt	eq
 8007a12:	3201      	addeq	r2, #1
 8007a14:	2380      	moveq	r3, #128	@ 0x80
        itone[k] = kGray_map[bits3];
 8007a16:	5561      	strb	r1, [r4, r5]
        ++k;
 8007a18:	3501      	adds	r5, #1
    for (int j = 0; j < ND; ++j) { // do j=1,ND
 8007a1a:	e7c6      	b.n	80079aa <genft8+0x76>
 8007a1c:	08051064 	.word	0x08051064
 8007a20:	0805106c 	.word	0x0805106c
 8007a24:	2000185c 	.word	0x2000185c

08007a28 <ldpc_check>:
// 0 means total success.
//
static int ldpc_check(uint8_t codeword[]) {
    int errors = 0;

    for (int j = 0; j < M; ++j) {
 8007a28:	4b11      	ldr	r3, [pc, #68]	@ (8007a70 <ldpc_check+0x48>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8df c048 	ldr.w	ip, [pc, #72]	@ 8007a78 <ldpc_check+0x50>
static int ldpc_check(uint8_t codeword[]) {
 8007a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a34:	4605      	mov	r5, r0
    for (int j = 0; j < M; ++j) {
 8007a36:	f8d3 8000 	ldr.w	r8, [r3]
 8007a3a:	4c0e      	ldr	r4, [pc, #56]	@ (8007a74 <ldpc_check+0x4c>)
    int errors = 0;
 8007a3c:	4610      	mov	r0, r2
    for (int j = 0; j < M; ++j) {
 8007a3e:	4590      	cmp	r8, r2
 8007a40:	dd13      	ble.n	8007a6a <ldpc_check+0x42>
        uint8_t x = 0;
        for (int i = 0; i < kNrw[j]; ++i) {
 8007a42:	2300      	movs	r3, #0
 8007a44:	f81c eb01 	ldrb.w	lr, [ip], #1
 8007a48:	4627      	mov	r7, r4
        uint8_t x = 0;
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	e006      	b.n	8007a5c <ldpc_check+0x34>
            x ^= codeword[kNm[j][i] - 1];
 8007a4e:	f817 6b01 	ldrb.w	r6, [r7], #1
        for (int i = 0; i < kNrw[j]; ++i) {
 8007a52:	3301      	adds	r3, #1
            x ^= codeword[kNm[j][i] - 1];
 8007a54:	442e      	add	r6, r5
 8007a56:	f816 6c01 	ldrb.w	r6, [r6, #-1]
 8007a5a:	4071      	eors	r1, r6
        for (int i = 0; i < kNrw[j]; ++i) {
 8007a5c:	459e      	cmp	lr, r3
 8007a5e:	dcf6      	bgt.n	8007a4e <ldpc_check+0x26>
        }
        if (x != 0) {
 8007a60:	b101      	cbz	r1, 8007a64 <ldpc_check+0x3c>
            ++errors;
 8007a62:	3001      	adds	r0, #1
    for (int j = 0; j < M; ++j) {
 8007a64:	3201      	adds	r2, #1
 8007a66:	3407      	adds	r4, #7
 8007a68:	e7e9      	b.n	8007a3e <ldpc_check+0x16>
        }
    }
    return errors;
}
 8007a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a6e:	bf00      	nop
 8007a70:	20001870 	.word	0x20001870
 8007a74:	200002fd 	.word	0x200002fd
 8007a78:	200000a0 	.word	0x200000a0

08007a7c <fast_tanh>:


// thank you Douglas Bagnall
// https://math.stackexchange.com/a/446411
static float fast_tanh(float x) {
    if (x < -4.97f) {
 8007a7c:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8007ad8 <fast_tanh+0x5c>
 8007a80:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a88:	d41f      	bmi.n	8007aca <fast_tanh+0x4e>
        return -1.0f;
    }
    if (x > 4.97f) {
 8007a8a:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8007adc <fast_tanh+0x60>
 8007a8e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a96:	dc1b      	bgt.n	8007ad0 <fast_tanh+0x54>
        return 1.0f;
    }
    float x2 = x * x;
 8007a98:	ee60 6a00 	vmul.f32	s13, s0, s0
    float a = x * (945.0f + x2 * (105.0f + x2));
 8007a9c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8007ae0 <fast_tanh+0x64>
 8007aa0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8007ae4 <fast_tanh+0x68>
    float b = 945.0f + x2 * (420.0f + x2 * 15.0f);
 8007aa4:	eef2 5a0e 	vmov.f32	s11, #46	@ 0x41700000  15.0
    float a = x * (945.0f + x2 * (105.0f + x2));
 8007aa8:	eeb0 6a47 	vmov.f32	s12, s14
 8007aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8007ab4:	ee60 7a06 	vmul.f32	s15, s0, s12
    float b = 945.0f + x2 * (420.0f + x2 * 15.0f);
 8007ab8:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8007ae8 <fast_tanh+0x6c>
 8007abc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8007ac0:	eea6 7a86 	vfma.f32	s14, s13, s12
    return a / b;
 8007ac4:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8007ac8:	4770      	bx	lr
        return -1.0f;
 8007aca:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8007ace:	4770      	bx	lr
        return 1.0f;
 8007ad0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
}
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	c09f0a3d 	.word	0xc09f0a3d
 8007adc:	409f0a3d 	.word	0x409f0a3d
 8007ae0:	446c4000 	.word	0x446c4000
 8007ae4:	42d20000 	.word	0x42d20000
 8007ae8:	43d20000 	.word	0x43d20000

08007aec <pack_bits>:
void pack_bits(const uint8_t plain[], int num_bits, uint8_t packed[]) {
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	4615      	mov	r5, r2
    int num_bytes = (num_bits + 7) / 8;
 8007af0:	1dca      	adds	r2, r1, #7
void pack_bits(const uint8_t plain[], int num_bits, uint8_t packed[]) {
 8007af2:	4606      	mov	r6, r0
 8007af4:	460c      	mov	r4, r1
    int num_bytes = (num_bits + 7) / 8;
 8007af6:	bf48      	it	mi
 8007af8:	f101 020e 	addmi.w	r2, r1, #14
        packed[i] = 0;
 8007afc:	4628      	mov	r0, r5
 8007afe:	2100      	movs	r1, #0
    int num_bytes = (num_bits + 7) / 8;
 8007b00:	10d2      	asrs	r2, r2, #3
        packed[i] = 0;
 8007b02:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007b06:	f006 fc1a 	bl	800e33e <memset>
    for (int i = 0; i < num_bits; ++i) {
 8007b0a:	2300      	movs	r3, #0
    uint8_t mask = 0x80;
 8007b0c:	2180      	movs	r1, #128	@ 0x80
    int     byte_idx = 0;
 8007b0e:	461a      	mov	r2, r3
    for (int i = 0; i < num_bits; ++i) {
 8007b10:	42a3      	cmp	r3, r4
 8007b12:	db00      	blt.n	8007b16 <pack_bits+0x2a>
}
 8007b14:	bd70      	pop	{r4, r5, r6, pc}
        if (plain[i]) {
 8007b16:	5cf0      	ldrb	r0, [r6, r3]
 8007b18:	b110      	cbz	r0, 8007b20 <pack_bits+0x34>
            packed[byte_idx] |= mask;
 8007b1a:	5ca8      	ldrb	r0, [r5, r2]
 8007b1c:	4308      	orrs	r0, r1
 8007b1e:	54a8      	strb	r0, [r5, r2]
        if (!mask) {
 8007b20:	0849      	lsrs	r1, r1, #1
    for (int i = 0; i < num_bits; ++i) {
 8007b22:	f103 0301 	add.w	r3, r3, #1
            ++byte_idx;
 8007b26:	bf04      	itt	eq
 8007b28:	3201      	addeq	r2, #1
            mask = 0x80;
 8007b2a:	2180      	moveq	r1, #128	@ 0x80
    for (int i = 0; i < num_bits; ++i) {
 8007b2c:	e7f0      	b.n	8007b10 <pack_bits+0x24>
	...

08007b30 <bp_decode>:
void bp_decode(float codeword[], int max_iters, uint8_t plain[], int *ok) {
 8007b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b34:	b08b      	sub	sp, #44	@ 0x2c
    float toc[M][7];
 8007b36:	f04f 0c1c 	mov.w	ip, #28
    for (int i = 0; i < M; ++i) {
 8007b3a:	f8df e29c 	ldr.w	lr, [pc, #668]	@ 8007dd8 <bp_decode+0x2a8>
            toc[i][j] = codeword[kNm[i][j] - 1];
 8007b3e:	f06f 4940 	mvn.w	r9, #3221225472	@ 0xc0000000
void bp_decode(float codeword[], int max_iters, uint8_t plain[], int *ok) {
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	603b      	str	r3, [r7, #0]
    float tov[N][3];
 8007b46:	4ba0      	ldr	r3, [pc, #640]	@ (8007dc8 <bp_decode+0x298>)
void bp_decode(float codeword[], int max_iters, uint8_t plain[], int *ok) {
 8007b48:	6138      	str	r0, [r7, #16]
    float tov[N][3];
 8007b4a:	681c      	ldr	r4, [r3, #0]
 8007b4c:	230c      	movs	r3, #12
void bp_decode(float codeword[], int max_iters, uint8_t plain[], int *ok) {
 8007b4e:	60fa      	str	r2, [r7, #12]
    for (int i = 0; i < M; ++i) {
 8007b50:	2200      	movs	r2, #0
    float tov[N][3];
 8007b52:	4363      	muls	r3, r4
    for (int i = 0; i < M; ++i) {
 8007b54:	489d      	ldr	r0, [pc, #628]	@ (8007dcc <bp_decode+0x29c>)
void bp_decode(float codeword[], int max_iters, uint8_t plain[], int *ok) {
 8007b56:	6079      	str	r1, [r7, #4]
    float tov[N][3];
 8007b58:	3307      	adds	r3, #7
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	ebad 0d03 	sub.w	sp, sp, r3
    float toc[M][7];
 8007b62:	4b9b      	ldr	r3, [pc, #620]	@ (8007dd0 <bp_decode+0x2a0>)
 8007b64:	f8d3 b000 	ldr.w	fp, [r3]
    float tov[N][3];
 8007b68:	46ea      	mov	sl, sp
    float toc[M][7];
 8007b6a:	fb0c f30b 	mul.w	r3, ip, fp
 8007b6e:	3307      	adds	r3, #7
 8007b70:	f023 0307 	bic.w	r3, r3, #7
 8007b74:	ebad 0d03 	sub.w	sp, sp, r3
 8007b78:	f8c7 d024 	str.w	sp, [r7, #36]	@ 0x24
    for (int i = 0; i < M; ++i) {
 8007b7c:	455a      	cmp	r2, fp
 8007b7e:	da18      	bge.n	8007bb2 <bp_decode+0x82>
 8007b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        for (int j = 0; j < kNrw[i]; ++j) {
 8007b82:	2100      	movs	r1, #0
 8007b84:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8007b88:	fb0c 3602 	mla	r6, ip, r2, r3
 8007b8c:	6238      	str	r0, [r7, #32]
 8007b8e:	e00b      	b.n	8007ba8 <bp_decode+0x78>
            toc[i][j] = codeword[kNm[i][j] - 1];
 8007b90:	6a3d      	ldr	r5, [r7, #32]
        for (int j = 0; j < kNrw[i]; ++j) {
 8007b92:	3101      	adds	r1, #1
            toc[i][j] = codeword[kNm[i][j] - 1];
 8007b94:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b98:	444b      	add	r3, r9
 8007b9a:	623d      	str	r5, [r7, #32]
 8007b9c:	693d      	ldr	r5, [r7, #16]
 8007b9e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f846 3b04 	str.w	r3, [r6], #4
        for (int j = 0; j < kNrw[i]; ++j) {
 8007ba8:	4588      	cmp	r8, r1
 8007baa:	dcf1      	bgt.n	8007b90 <bp_decode+0x60>
    for (int i = 0; i < M; ++i) {
 8007bac:	3201      	adds	r2, #1
 8007bae:	3007      	adds	r0, #7
 8007bb0:	e7e4      	b.n	8007b7c <bp_decode+0x4c>
 8007bb2:	4653      	mov	r3, sl
    for (int i = 0; i < N; ++i) {
 8007bb4:	2200      	movs	r2, #0
            tov[i][j] = 0;
 8007bb6:	2100      	movs	r1, #0
    for (int i = 0; i < N; ++i) {
 8007bb8:	42a2      	cmp	r2, r4
 8007bba:	f103 030c 	add.w	r3, r3, #12
 8007bbe:	f280 80fe 	bge.w	8007dbe <bp_decode+0x28e>
 8007bc2:	3201      	adds	r2, #1
            tov[i][j] = 0;
 8007bc4:	f843 1c0c 	str.w	r1, [r3, #-12]
 8007bc8:	f843 1c08 	str.w	r1, [r3, #-8]
 8007bcc:	f843 1c04 	str.w	r1, [r3, #-4]
    for (int i = 0; i < N; ++i) {
 8007bd0:	e7f2      	b.n	8007bb8 <bp_decode+0x88>
            zn[i] = codeword[i] + tov[i][0] + tov[i][1] + tov[i][2];
 8007bd2:	ecf0 7a01 	vldmia	r0!, {s15}
 8007bd6:	ed13 7a03 	vldr	s14, [r3, #-12]
            plain[i] = (zn[i] > 0) ? 1 : 0;
 8007bda:	68fe      	ldr	r6, [r7, #12]
            zn[i] = codeword[i] + tov[i][0] + tov[i][1] + tov[i][2];
 8007bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007be0:	ed13 7a02 	vldr	s14, [r3, #-8]
 8007be4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007be8:	ed13 7a01 	vldr	s14, [r3, #-4]
 8007bec:	ee77 7a87 	vadd.f32	s15, s15, s14
            plain[i] = (zn[i] > 0) ? 1 : 0;
 8007bf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
            zn[i] = codeword[i] + tov[i][0] + tov[i][1] + tov[i][2];
 8007bf4:	ece4 7a01 	vstmia	r4!, {s15}
            plain[i] = (zn[i] > 0) ? 1 : 0;
 8007bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bfc:	bfcc      	ite	gt
 8007bfe:	2501      	movgt	r5, #1
 8007c00:	2500      	movle	r5, #0
 8007c02:	54b5      	strb	r5, [r6, r2]
        for (int i = 0; i < N; ++i) {
 8007c04:	3201      	adds	r2, #1
 8007c06:	e06c      	b.n	8007ce2 <bp_decode+0x1b2>
                int ibj = kNm[i][j] - 1;
 8007c08:	f81e 3b01 	ldrb.w	r3, [lr], #1
                toc[i][j] = zn[ibj];
 8007c0c:	6978      	ldr	r0, [r7, #20]
                int ibj = kNm[i][j] - 1;
 8007c0e:	3b01      	subs	r3, #1
                toc[i][j] = zn[ibj];
 8007c10:	4e70      	ldr	r6, [pc, #448]	@ (8007dd4 <bp_decode+0x2a4>)
 8007c12:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007c16:	6800      	ldr	r0, [r0, #0]
 8007c18:	6010      	str	r0, [r2, #0]
                for (int kk = 0; kk < 3; ++kk) {
 8007c1a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8007c1e:	4430      	add	r0, r6
 8007c20:	260c      	movs	r6, #12
 8007c22:	fb06 a303 	mla	r3, r6, r3, sl
 8007c26:	2600      	movs	r6, #0
                    if (kMn[ibj][kk] - 1 == i) {
 8007c28:	f810 cb01 	ldrb.w	ip, [r0], #1
                for (int kk = 0; kk < 3; ++kk) {
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	3304      	adds	r3, #4
                    if (kMn[ibj][kk] - 1 == i) {
 8007c30:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c34:	458c      	cmp	ip, r1
                        toc[i][j] -= tov[ibj][kk];
 8007c36:	bf01      	itttt	eq
 8007c38:	edd2 7a00 	vldreq	s15, [r2]
 8007c3c:	ed13 7a01 	vldreq	s14, [r3, #-4]
 8007c40:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007c44:	edc2 7a00 	vstreq	s15, [r2]
                for (int kk = 0; kk < 3; ++kk) {
 8007c48:	2e03      	cmp	r6, #3
 8007c4a:	d1ed      	bne.n	8007c28 <bp_decode+0xf8>
            for (int j = 0; j < kNrw[i]; ++j) {
 8007c4c:	3401      	adds	r4, #1
 8007c4e:	3204      	adds	r2, #4
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	42a3      	cmp	r3, r4
 8007c54:	dcd8      	bgt.n	8007c08 <bp_decode+0xd8>
        for (int i = 0; i < M; ++i) {
 8007c56:	3101      	adds	r1, #1
 8007c58:	3507      	adds	r5, #7
 8007c5a:	e057      	b.n	8007d0c <bp_decode+0x1dc>
                toc[i][j] = fast_tanh(-toc[i][j] / 2);
 8007c5c:	ed91 0a00 	vldr	s0, [r1]
            for (int j = 0; j < kNrw[i]; ++j) {
 8007c60:	3201      	adds	r2, #1
                toc[i][j] = fast_tanh(-toc[i][j] / 2);
 8007c62:	ee20 0a45 	vnmul.f32	s0, s0, s10
 8007c66:	f7ff ff09 	bl	8007a7c <fast_tanh>
 8007c6a:	eca1 0a01 	vstmia	r1!, {s0}
            for (int j = 0; j < kNrw[i]; ++j) {
 8007c6e:	4295      	cmp	r5, r2
 8007c70:	dcf4      	bgt.n	8007c5c <bp_decode+0x12c>
        for (int i = 0; i < M; ++i) {
 8007c72:	3301      	adds	r3, #1
 8007c74:	4598      	cmp	r8, r3
 8007c76:	dd0a      	ble.n	8007c8e <bp_decode+0x15e>
 8007c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
            for (int j = 0; j < kNrw[i]; ++j) {
 8007c7a:	f810 5b01 	ldrb.w	r5, [r0], #1
 8007c7e:	fb04 2103 	mla	r1, r4, r3, r2
 8007c82:	2200      	movs	r2, #0
 8007c84:	e7f3      	b.n	8007c6e <bp_decode+0x13e>
 8007c86:	4854      	ldr	r0, [pc, #336]	@ (8007dd8 <bp_decode+0x2a8>)
        for (int i = 0; i < M; ++i) {
 8007c88:	2300      	movs	r3, #0
 8007c8a:	241c      	movs	r4, #28
 8007c8c:	e7f2      	b.n	8007c74 <bp_decode+0x144>
 8007c8e:	4951      	ldr	r1, [pc, #324]	@ (8007dd4 <bp_decode+0x2a4>)
        for (int i = 0; i < N; ++i) {
 8007c90:	2200      	movs	r2, #0
 8007c92:	f04f 081c 	mov.w	r8, #28


static float fast_atanh(float x) {
    float x2 = x * x;
    float a = x * (945.0f + x2 * (-735.0f + x2 * 64.0f));
 8007c96:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 8007ddc <bp_decode+0x2ac>
 8007c9a:	eddf 5a51 	vldr	s11, [pc, #324]	@ 8007de0 <bp_decode+0x2b0>
 8007c9e:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8007de4 <bp_decode+0x2b4>
    float b = (945.0f + x2 * (-1050.0f + x2 * 225.0f));
 8007ca2:	eddf 4a51 	vldr	s9, [pc, #324]	@ 8007de8 <bp_decode+0x2b8>
 8007ca6:	ed9f 4a51 	vldr	s8, [pc, #324]	@ 8007dec <bp_decode+0x2bc>
        for (int i = 0; i < N; ++i) {
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	4293      	cmp	r3, r2
 8007cae:	dc39      	bgt.n	8007d24 <bp_decode+0x1f4>
    for (int iter = 0; iter < max_iters; ++iter) {
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	f8d7 d018 	ldr.w	sp, [r7, #24]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	623b      	str	r3, [r7, #32]
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	da76      	bge.n	8007db0 <bp_decode+0x280>
        float   zn[N];
 8007cc2:	4941      	ldr	r1, [pc, #260]	@ (8007dc8 <bp_decode+0x298>)
        for (int i = 0; i < N; ++i) {
 8007cc4:	2200      	movs	r2, #0
    for (int iter = 0; iter < max_iters; ++iter) {
 8007cc6:	f8c7 d018 	str.w	sp, [r7, #24]
        float   zn[N];
 8007cca:	680b      	ldr	r3, [r1, #0]
 8007ccc:	6938      	ldr	r0, [r7, #16]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	3307      	adds	r3, #7
 8007cd2:	f023 0307 	bic.w	r3, r3, #7
 8007cd6:	ebad 0d03 	sub.w	sp, sp, r3
        for (int i = 0; i < N; ++i) {
 8007cda:	4653      	mov	r3, sl
 8007cdc:	466c      	mov	r4, sp
        float   zn[N];
 8007cde:	f8c7 d014 	str.w	sp, [r7, #20]
        for (int i = 0; i < N; ++i) {
 8007ce2:	680d      	ldr	r5, [r1, #0]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	4295      	cmp	r5, r2
 8007ce8:	61fd      	str	r5, [r7, #28]
 8007cea:	f73f af72 	bgt.w	8007bd2 <bp_decode+0xa2>
        int errors = ldpc_check(plain);
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7ff fe9a 	bl	8007a28 <ldpc_check>
        if (errors < min_errors) {
 8007cf4:	4583      	cmp	fp, r0
 8007cf6:	dd02      	ble.n	8007cfe <bp_decode+0x1ce>
            if (errors == 0) {
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d056      	beq.n	8007daa <bp_decode+0x27a>
 8007cfc:	4683      	mov	fp, r0
        for (int i = 0; i < M; ++i) {
 8007cfe:	4b34      	ldr	r3, [pc, #208]	@ (8007dd0 <bp_decode+0x2a0>)
 8007d00:	2100      	movs	r1, #0
 8007d02:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 8007dd8 <bp_decode+0x2a8>
 8007d06:	f8d3 8000 	ldr.w	r8, [r3]
 8007d0a:	4d30      	ldr	r5, [pc, #192]	@ (8007dcc <bp_decode+0x29c>)
 8007d0c:	4588      	cmp	r8, r1
 8007d0e:	ddba      	ble.n	8007c86 <bp_decode+0x156>
            for (int j = 0; j < kNrw[i]; ++j) {
 8007d10:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007d14:	221c      	movs	r2, #28
 8007d16:	46ae      	mov	lr, r5
 8007d18:	2400      	movs	r4, #0
 8007d1a:	60bb      	str	r3, [r7, #8]
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1e:	fb02 3201 	mla	r2, r2, r1, r3
 8007d22:	e795      	b.n	8007c50 <bp_decode+0x120>
 8007d24:	230c      	movs	r3, #12
        for (int i = 0; i < N; ++i) {
 8007d26:	468e      	mov	lr, r1
            for (int j = 0; j < 3; ++j) {
 8007d28:	2000      	movs	r0, #0
 8007d2a:	fb03 ac02 	mla	ip, r3, r2, sl
                int ichk = kMn[i][j] - 1; // kMn(:,j) are the checks that include bit j
 8007d2e:	f81e 3b01 	ldrb.w	r3, [lr], #1
                float Tmn = 1.0f;
 8007d32:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
                for (int k = 0; k < kNrw[ichk]; ++k) {
 8007d36:	4c28      	ldr	r4, [pc, #160]	@ (8007dd8 <bp_decode+0x2a8>)
                int ichk = kMn[i][j] - 1; // kMn(:,j) are the checks that include bit j
 8007d38:	3b01      	subs	r3, #1
                for (int k = 0; k < kNrw[ichk]; ++k) {
 8007d3a:	f814 9003 	ldrb.w	r9, [r4, r3]
 8007d3e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8007d40:	fb08 4503 	mla	r5, r8, r3, r4
 8007d44:	4c21      	ldr	r4, [pc, #132]	@ (8007dcc <bp_decode+0x29c>)
 8007d46:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007d4a:	4423      	add	r3, r4
 8007d4c:	2400      	movs	r4, #0
 8007d4e:	45a1      	cmp	r9, r4
 8007d50:	dc1f      	bgt.n	8007d92 <bp_decode+0x262>
    float x2 = x * x;
 8007d52:	ee27 7aa7 	vmul.f32	s14, s15, s15
            for (int j = 0; j < 3; ++j) {
 8007d56:	3001      	adds	r0, #1
    float a = x * (945.0f + x2 * (-735.0f + x2 * 64.0f));
 8007d58:	eeb0 3a65 	vmov.f32	s6, s11
 8007d5c:	eef0 3a66 	vmov.f32	s7, s13
            for (int j = 0; j < 3; ++j) {
 8007d60:	2803      	cmp	r0, #3
    float a = x * (945.0f + x2 * (-735.0f + x2 * 64.0f));
 8007d62:	eea7 3a06 	vfma.f32	s6, s14, s12
 8007d66:	eee7 3a03 	vfma.f32	s7, s14, s6
    float b = (945.0f + x2 * (-1050.0f + x2 * 225.0f));
 8007d6a:	eeb0 3a44 	vmov.f32	s6, s8
 8007d6e:	eea7 3a24 	vfma.f32	s6, s14, s9
    float a = x * (945.0f + x2 * (-735.0f + x2 * 64.0f));
 8007d72:	ee67 7ae3 	vnmul.f32	s15, s15, s7
    float b = (945.0f + x2 * (-1050.0f + x2 * 225.0f));
 8007d76:	eef0 3a66 	vmov.f32	s7, s13
 8007d7a:	eee7 3a03 	vfma.f32	s7, s14, s6
    return a / b;
 8007d7e:	ee87 7aa3 	vdiv.f32	s14, s15, s7
                tov[i][j] = 2 * fast_atanh(-Tmn);
 8007d82:	ee37 7a07 	vadd.f32	s14, s14, s14
 8007d86:	ecac 7a01 	vstmia	ip!, {s14}
            for (int j = 0; j < 3; ++j) {
 8007d8a:	d1d0      	bne.n	8007d2e <bp_decode+0x1fe>
        for (int i = 0; i < N; ++i) {
 8007d8c:	3201      	adds	r2, #1
 8007d8e:	3103      	adds	r1, #3
 8007d90:	e78b      	b.n	8007caa <bp_decode+0x17a>
                    if (kNm[ichk][k] - 1 != i) {
 8007d92:	f813 6b01 	ldrb.w	r6, [r3], #1
                for (int k = 0; k < kNrw[ichk]; ++k) {
 8007d96:	3401      	adds	r4, #1
 8007d98:	3504      	adds	r5, #4
                    if (kNm[ichk][k] - 1 != i) {
 8007d9a:	3e01      	subs	r6, #1
 8007d9c:	4296      	cmp	r6, r2
                        Tmn *= toc[ichk][k];
 8007d9e:	bf1c      	itt	ne
 8007da0:	ed15 7a01 	vldrne	s14, [r5, #-4]
 8007da4:	ee67 7a87 	vmulne.f32	s15, s15, s14
                for (int k = 0; k < kNrw[ichk]; ++k) {
 8007da8:	e7d1      	b.n	8007d4e <bp_decode+0x21e>
        int errors = ldpc_check(plain);
 8007daa:	4683      	mov	fp, r0
 8007dac:	f8d7 d018 	ldr.w	sp, [r7, #24]
    *ok = min_errors;
 8007db0:	683b      	ldr	r3, [r7, #0]
}
 8007db2:	372c      	adds	r7, #44	@ 0x2c
    *ok = min_errors;
 8007db4:	f8c3 b000 	str.w	fp, [r3]
}
 8007db8:	46bd      	mov	sp, r7
 8007dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (int iter = 0; iter < max_iters; ++iter) {
 8007dbe:	2300      	movs	r3, #0
                toc[i][j] = fast_tanh(-toc[i][j] / 2);
 8007dc0:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
    for (int iter = 0; iter < max_iters; ++iter) {
 8007dc4:	623b      	str	r3, [r7, #32]
 8007dc6:	e778      	b.n	8007cba <bp_decode+0x18a>
 8007dc8:	20001868 	.word	0x20001868
 8007dcc:	200002fd 	.word	0x200002fd
 8007dd0:	20001870 	.word	0x20001870
 8007dd4:	200000f3 	.word	0x200000f3
 8007dd8:	200000a0 	.word	0x200000a0
 8007ddc:	42800000 	.word	0x42800000
 8007de0:	c437c000 	.word	0xc437c000
 8007de4:	446c4000 	.word	0x446c4000
 8007de8:	43610000 	.word	0x43610000
 8007dec:	c4834000 	.word	0xc4834000

08007df0 <pack28>:
const char A4[] = " ABCDEFGHIJKLMNOPQRSTUVWXYZ";


// Pack a special token, a 22-bit hash code, or a valid base call
// into a 28-bit integer.
int32_t pack28(const char *callsign) {
 8007df0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    int32_t NTOKENS = 2063592L;
    int32_t MAX22   = 4194304L;

    // Check for special tokens first
    if (starts_with(callsign, "DE ")) return 0;
 8007df4:	4953      	ldr	r1, [pc, #332]	@ (8007f44 <pack28+0x154>)
int32_t pack28(const char *callsign) {
 8007df6:	4605      	mov	r5, r0
    if (starts_with(callsign, "DE ")) return 0;
 8007df8:	f000 f9a8 	bl	800814c <starts_with>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	f040 809a 	bne.w	8007f36 <pack28+0x146>
    if (starts_with(callsign, "QRZ ")) return 1;
 8007e02:	4951      	ldr	r1, [pc, #324]	@ (8007f48 <pack28+0x158>)
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 f9a1 	bl	800814c <starts_with>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	f040 8095 	bne.w	8007f3a <pack28+0x14a>
    if (starts_with(callsign, "CQ ")) return 2;
 8007e10:	494e      	ldr	r1, [pc, #312]	@ (8007f4c <pack28+0x15c>)
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 f99a 	bl	800814c <starts_with>
 8007e18:	4604      	mov	r4, r0
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	f040 808f 	bne.w	8007f3e <pack28+0x14e>

    if (starts_with(callsign, "CQ_")) {
 8007e20:	494b      	ldr	r1, [pc, #300]	@ (8007f50 <pack28+0x160>)
 8007e22:	4628      	mov	r0, r5
 8007e24:	f000 f992 	bl	800814c <starts_with>
    // TODO: Check for <...> callsign
    // if(text(1:1).eq.'<')then
    //   call save_hash_call(text,n10,n12,n22)   !Save callsign in hash table
    //   n28=NTOKENS + n22

    char c6[6] = {' ', ' ', ' ', ' ', ' ', ' '};
 8007e28:	4b4a      	ldr	r3, [pc, #296]	@ (8007f54 <pack28+0x164>)
 8007e2a:	6818      	ldr	r0, [r3, #0]
 8007e2c:	889b      	ldrh	r3, [r3, #4]
 8007e2e:	9000      	str	r0, [sp, #0]
 8007e30:	f8ad 3004 	strh.w	r3, [sp, #4]

    int length = 0; // strlen(callsign);  // We will need it later
    while (callsign[length] != ' ' && callsign[length] != 0) {
 8007e34:	5d2b      	ldrb	r3, [r5, r4]
 8007e36:	f013 0fdf 	tst.w	r3, #223	@ 0xdf
 8007e3a:	d120      	bne.n	8007e7e <pack28+0x8e>
        length++;
    }

    // Copy callsign to 6 character buffer
    if (starts_with(callsign, "3DA0") && length <= 7) {
 8007e3c:	4946      	ldr	r1, [pc, #280]	@ (8007f58 <pack28+0x168>)
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 f984 	bl	800814c <starts_with>
 8007e44:	b1e8      	cbz	r0, 8007e82 <pack28+0x92>
 8007e46:	2c07      	cmp	r4, #7
 8007e48:	dc1b      	bgt.n	8007e82 <pack28+0x92>
        // Work-around for Swaziland prefix: 3DA0XYZ -> 3D0XYZ
        memcpy(c6, "3D0", 3);
 8007e4a:	4b44      	ldr	r3, [pc, #272]	@ (8007f5c <pack28+0x16c>)
        memcpy(c6 + 3, callsign + 4, length - 4);
 8007e4c:	1d29      	adds	r1, r5, #4
 8007e4e:	f10d 0003 	add.w	r0, sp, #3
        memcpy(c6, "3D0", 3);
 8007e52:	881a      	ldrh	r2, [r3, #0]
 8007e54:	789b      	ldrb	r3, [r3, #2]
 8007e56:	f8ad 2000 	strh.w	r2, [sp]
        memcpy(c6 + 3, callsign + 4, length - 4);
 8007e5a:	1f22      	subs	r2, r4, #4
        memcpy(c6, "3D0", 3);
 8007e5c:	f88d 3002 	strb.w	r3, [sp, #2]
            // AB0XYZ
            memcpy(c6, callsign, length);
        }
        else if (is_digit(callsign[1]) && length <= 5) {
            // A0XYZ -> " A0XYZ"
            memcpy(c6 + 1, callsign, length);
 8007e60:	f006 fb79 	bl	800e556 <memcpy>
        }
    }

    // Check for standard callsign
    int i0, i1, i2, i3, i4, i5;
    if ((i0 = char_index(A1, c6[0])) >= 0 && (i1 = char_index(A2, c6[1])) >= 0 &&
 8007e64:	f89d 1000 	ldrb.w	r1, [sp]
 8007e68:	483d      	ldr	r0, [pc, #244]	@ (8007f60 <pack28+0x170>)
 8007e6a:	f000 f985 	bl	8008178 <char_index>
 8007e6e:	f1b0 0800 	subs.w	r8, r0, #0
 8007e72:	da2d      	bge.n	8007ed0 <pack28+0xe0>
    // Treat this as a nonstandard callsign: compute its 22-bit hash
    // call save_hash_call(text,n10,n12,n22)   !Save callsign in hash table
    // n28=NTOKENS + n22

    // n28=iand(n28,ishft(1,28)-1)
    return -1;
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007e78:	b002      	add	sp, #8
 8007e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        length++;
 8007e7e:	3401      	adds	r4, #1
 8007e80:	e7d8      	b.n	8007e34 <pack28+0x44>
    else if (starts_with(callsign, "3X") && is_letter(callsign[2]) && length <= 7) {
 8007e82:	4938      	ldr	r1, [pc, #224]	@ (8007f64 <pack28+0x174>)
 8007e84:	4628      	mov	r0, r5
 8007e86:	f000 f961 	bl	800814c <starts_with>
 8007e8a:	b168      	cbz	r0, 8007ea8 <pack28+0xb8>
 8007e8c:	78a8      	ldrb	r0, [r5, #2]
 8007e8e:	f000 f94c 	bl	800812a <is_letter>
 8007e92:	b148      	cbz	r0, 8007ea8 <pack28+0xb8>
 8007e94:	2c07      	cmp	r4, #7
 8007e96:	dc07      	bgt.n	8007ea8 <pack28+0xb8>
        memcpy(c6, "Q", 1);
 8007e98:	2351      	movs	r3, #81	@ 0x51
        memcpy(c6 + 1, callsign + 2, length - 2);
 8007e9a:	1ea2      	subs	r2, r4, #2
 8007e9c:	1ca9      	adds	r1, r5, #2
        memcpy(c6, "Q", 1);
 8007e9e:	f88d 3000 	strb.w	r3, [sp]
            memcpy(c6 + 1, callsign, length);
 8007ea2:	f10d 0001 	add.w	r0, sp, #1
 8007ea6:	e7db      	b.n	8007e60 <pack28+0x70>
        if (is_digit(callsign[2]) && length <= 6) {
 8007ea8:	78a8      	ldrb	r0, [r5, #2]
 8007eaa:	f000 f938 	bl	800811e <is_digit>
 8007eae:	b128      	cbz	r0, 8007ebc <pack28+0xcc>
 8007eb0:	2c06      	cmp	r4, #6
 8007eb2:	dc03      	bgt.n	8007ebc <pack28+0xcc>
            memcpy(c6, callsign, length);
 8007eb4:	4622      	mov	r2, r4
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4668      	mov	r0, sp
 8007eba:	e7d1      	b.n	8007e60 <pack28+0x70>
        else if (is_digit(callsign[1]) && length <= 5) {
 8007ebc:	7868      	ldrb	r0, [r5, #1]
 8007ebe:	f000 f92e 	bl	800811e <is_digit>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d0ce      	beq.n	8007e64 <pack28+0x74>
 8007ec6:	2c05      	cmp	r4, #5
 8007ec8:	dccc      	bgt.n	8007e64 <pack28+0x74>
            memcpy(c6 + 1, callsign, length);
 8007eca:	4622      	mov	r2, r4
 8007ecc:	4629      	mov	r1, r5
 8007ece:	e7e8      	b.n	8007ea2 <pack28+0xb2>
    if ((i0 = char_index(A1, c6[0])) >= 0 && (i1 = char_index(A2, c6[1])) >= 0 &&
 8007ed0:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8007ed4:	4824      	ldr	r0, [pc, #144]	@ (8007f68 <pack28+0x178>)
 8007ed6:	f000 f94f 	bl	8008178 <char_index>
 8007eda:	1e06      	subs	r6, r0, #0
 8007edc:	dbca      	blt.n	8007e74 <pack28+0x84>
        (i2 = char_index(A3, c6[2])) >= 0 && (i3 = char_index(A4, c6[3])) >= 0 &&
 8007ede:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8007ee2:	4822      	ldr	r0, [pc, #136]	@ (8007f6c <pack28+0x17c>)
 8007ee4:	f000 f948 	bl	8008178 <char_index>
    if ((i0 = char_index(A1, c6[0])) >= 0 && (i1 = char_index(A2, c6[1])) >= 0 &&
 8007ee8:	1e05      	subs	r5, r0, #0
 8007eea:	dbc3      	blt.n	8007e74 <pack28+0x84>
        (i2 = char_index(A3, c6[2])) >= 0 && (i3 = char_index(A4, c6[3])) >= 0 &&
 8007eec:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8007ef0:	481f      	ldr	r0, [pc, #124]	@ (8007f70 <pack28+0x180>)
 8007ef2:	f000 f941 	bl	8008178 <char_index>
 8007ef6:	1e07      	subs	r7, r0, #0
 8007ef8:	dbbc      	blt.n	8007e74 <pack28+0x84>
        (i4 = char_index(A4, c6[4])) >= 0 && (i5 = char_index(A4, c6[5])) >= 0)
 8007efa:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8007efe:	481c      	ldr	r0, [pc, #112]	@ (8007f70 <pack28+0x180>)
 8007f00:	f000 f93a 	bl	8008178 <char_index>
        (i2 = char_index(A3, c6[2])) >= 0 && (i3 = char_index(A4, c6[3])) >= 0 &&
 8007f04:	1e04      	subs	r4, r0, #0
 8007f06:	dbb5      	blt.n	8007e74 <pack28+0x84>
        (i4 = char_index(A4, c6[4])) >= 0 && (i5 = char_index(A4, c6[5])) >= 0)
 8007f08:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8007f0c:	4818      	ldr	r0, [pc, #96]	@ (8007f70 <pack28+0x180>)
 8007f0e:	f000 f933 	bl	8008178 <char_index>
 8007f12:	1e03      	subs	r3, r0, #0
 8007f14:	dbae      	blt.n	8007e74 <pack28+0x84>
        n28 = n28 * 36 + i1;
 8007f16:	2224      	movs	r2, #36	@ 0x24
        return NTOKENS + MAX22 + n28;
 8007f18:	4816      	ldr	r0, [pc, #88]	@ (8007f74 <pack28+0x184>)
        n28 = n28 * 36 + i1;
 8007f1a:	fb02 6608 	mla	r6, r2, r8, r6
        n28 = n28 * 10 + i2;
 8007f1e:	220a      	movs	r2, #10
 8007f20:	fb02 5506 	mla	r5, r2, r6, r5
        n28 = n28 * 27 + i3;
 8007f24:	221b      	movs	r2, #27
 8007f26:	fb02 7705 	mla	r7, r2, r5, r7
        n28 = n28 * 27 + i4;
 8007f2a:	fb02 4407 	mla	r4, r2, r7, r4
        n28 = n28 * 27 + i5;
 8007f2e:	fb02 3304 	mla	r3, r2, r4, r3
        return NTOKENS + MAX22 + n28;
 8007f32:	4418      	add	r0, r3
 8007f34:	e7a0      	b.n	8007e78 <pack28+0x88>
    if (starts_with(callsign, "DE ")) return 0;
 8007f36:	2000      	movs	r0, #0
 8007f38:	e79e      	b.n	8007e78 <pack28+0x88>
    if (starts_with(callsign, "QRZ ")) return 1;
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	e79c      	b.n	8007e78 <pack28+0x88>
    if (starts_with(callsign, "CQ ")) return 2;
 8007f3e:	2002      	movs	r0, #2
 8007f40:	e79a      	b.n	8007e78 <pack28+0x88>
 8007f42:	bf00      	nop
 8007f44:	080557a8 	.word	0x080557a8
 8007f48:	080557ac 	.word	0x080557ac
 8007f4c:	080557b1 	.word	0x080557b1
 8007f50:	080557b5 	.word	0x080557b5
 8007f54:	080559d0 	.word	0x080559d0
 8007f58:	080557b9 	.word	0x080557b9
 8007f5c:	080557be 	.word	0x080557be
 8007f60:	08051073 	.word	0x08051073
 8007f64:	080557c2 	.word	0x080557c2
 8007f68:	08051099 	.word	0x08051099
 8007f6c:	080510be 	.word	0x080510be
 8007f70:	080510c9 	.word	0x080510c9
 8007f74:	005f7ce8 	.word	0x005f7ce8

08007f78 <packgrid>:

    return true;
}


uint16_t packgrid(const char *grid4) {
 8007f78:	b510      	push	{r4, lr}
    //constexpr uint16_t MAXGRID4 = 32400;
    uint16_t MAXGRID4 = 32400;

    if (grid4 == 0) {
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d052      	beq.n	8008026 <packgrid+0xae>
        // Two callsigns only, no report/grid
        return MAXGRID4 + 1;
    }

    // Take care of special cases
    if (equals(grid4, "RRR")) return MAXGRID4 + 2;
 8007f80:	492f      	ldr	r1, [pc, #188]	@ (8008040 <packgrid+0xc8>)
 8007f82:	f000 f8f2 	bl	800816a <equals>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d150      	bne.n	800802c <packgrid+0xb4>
    if (equals(grid4, "RR73")) return MAXGRID4 + 3;
 8007f8a:	492e      	ldr	r1, [pc, #184]	@ (8008044 <packgrid+0xcc>)
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f000 f8ec 	bl	800816a <equals>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d14d      	bne.n	8008032 <packgrid+0xba>
    if (equals(grid4, "73")) return MAXGRID4 + 4;
 8007f96:	492c      	ldr	r1, [pc, #176]	@ (8008048 <packgrid+0xd0>)
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f000 f8e6 	bl	800816a <equals>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d14a      	bne.n	8008038 <packgrid+0xc0>

    // Check for standard 4 letter grid
    if (in_range(grid4[0], 'A', 'R') &&
 8007fa2:	2252      	movs	r2, #82	@ 0x52
 8007fa4:	2141      	movs	r1, #65	@ 0x41
 8007fa6:	7820      	ldrb	r0, [r4, #0]
 8007fa8:	f000 f8c7 	bl	800813a <in_range>
 8007fac:	b328      	cbz	r0, 8007ffa <packgrid+0x82>
        in_range(grid4[1], 'A', 'R') &&
 8007fae:	2252      	movs	r2, #82	@ 0x52
 8007fb0:	2141      	movs	r1, #65	@ 0x41
 8007fb2:	7860      	ldrb	r0, [r4, #1]
 8007fb4:	f000 f8c1 	bl	800813a <in_range>
    if (in_range(grid4[0], 'A', 'R') &&
 8007fb8:	b1f8      	cbz	r0, 8007ffa <packgrid+0x82>
        is_digit(grid4[2]) && is_digit(grid4[3]))
 8007fba:	78a0      	ldrb	r0, [r4, #2]
 8007fbc:	f000 f8af 	bl	800811e <is_digit>
        in_range(grid4[1], 'A', 'R') &&
 8007fc0:	b1d8      	cbz	r0, 8007ffa <packgrid+0x82>
        is_digit(grid4[2]) && is_digit(grid4[3]))
 8007fc2:	78e0      	ldrb	r0, [r4, #3]
 8007fc4:	f000 f8ab 	bl	800811e <is_digit>
 8007fc8:	b1b8      	cbz	r0, 8007ffa <packgrid+0x82>
    {
        //if (w(3).eq.'R ') ir=1
        uint16_t igrid4 = (grid4[0] - 'A');
 8007fca:	7823      	ldrb	r3, [r4, #0]
        igrid4 = igrid4 * 18 + (grid4[1] - 'A');
 8007fcc:	7862      	ldrb	r2, [r4, #1]
        uint16_t igrid4 = (grid4[0] - 'A');
 8007fce:	3b41      	subs	r3, #65	@ 0x41
        igrid4 = igrid4 * 10 + (grid4[2] - '0');
        igrid4 = igrid4 * 10 + (grid4[3] - '0');
 8007fd0:	78e0      	ldrb	r0, [r4, #3]
        igrid4 = igrid4 * 18 + (grid4[1] - 'A');
 8007fd2:	3a41      	subs	r2, #65	@ 0x41
 8007fd4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
        igrid4 = igrid4 * 10 + (grid4[3] - '0');
 8007fd8:	3830      	subs	r0, #48	@ 0x30
        igrid4 = igrid4 * 18 + (grid4[1] - 'A');
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	4413      	add	r3, r2
        igrid4 = igrid4 * 10 + (grid4[2] - '0');
 8007fe0:	78a2      	ldrb	r2, [r4, #2]
 8007fe2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007fe6:	3a30      	subs	r2, #48	@ 0x30
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	4413      	add	r3, r2
        igrid4 = igrid4 * 10 + (grid4[3] - '0');
 8007fee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007ff2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        return (MAXGRID4 + irpt) | 0x8000;  // ir = 1
    }
    else {
        int dd = dd_to_int(grid4, 3);
        uint16_t irpt = 35 + dd;
        return (MAXGRID4 + irpt);           // ir = 0
 8007ff6:	b280      	uxth	r0, r0
    }

    return MAXGRID4 + 1;
}
 8007ff8:	bd10      	pop	{r4, pc}
    if (grid4[0] == 'R') {
 8007ffa:	7823      	ldrb	r3, [r4, #0]
        int dd = dd_to_int(grid4 + 1, 3);
 8007ffc:	2103      	movs	r1, #3
    if (grid4[0] == 'R') {
 8007ffe:	2b52      	cmp	r3, #82	@ 0x52
 8008000:	d10a      	bne.n	8008018 <packgrid+0xa0>
        int dd = dd_to_int(grid4 + 1, 3);
 8008002:	1c60      	adds	r0, r4, #1
 8008004:	f000 f8c4 	bl	8008190 <dd_to_int>
        return (MAXGRID4 + irpt) | 0x8000;  // ir = 1
 8008008:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 800800c:	3033      	adds	r0, #51	@ 0x33
 800800e:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8008012:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8008016:	e7ee      	b.n	8007ff6 <packgrid+0x7e>
        int dd = dd_to_int(grid4, 3);
 8008018:	4620      	mov	r0, r4
 800801a:	f000 f8b9 	bl	8008190 <dd_to_int>
        return (MAXGRID4 + irpt);           // ir = 0
 800801e:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 8008022:	3033      	adds	r0, #51	@ 0x33
 8008024:	e7e7      	b.n	8007ff6 <packgrid+0x7e>
        return MAXGRID4 + 1;
 8008026:	f647 6091 	movw	r0, #32401	@ 0x7e91
 800802a:	e7e5      	b.n	8007ff8 <packgrid+0x80>
    if (equals(grid4, "RRR")) return MAXGRID4 + 2;
 800802c:	f647 6092 	movw	r0, #32402	@ 0x7e92
 8008030:	e7e2      	b.n	8007ff8 <packgrid+0x80>
    if (equals(grid4, "RR73")) return MAXGRID4 + 3;
 8008032:	f647 6093 	movw	r0, #32403	@ 0x7e93
 8008036:	e7df      	b.n	8007ff8 <packgrid+0x80>
    if (equals(grid4, "73")) return MAXGRID4 + 4;
 8008038:	f647 6094 	movw	r0, #32404	@ 0x7e94
 800803c:	e7dc      	b.n	8007ff8 <packgrid+0x80>
 800803e:	bf00      	nop
 8008040:	080557c5 	.word	0x080557c5
 8008044:	080557c9 	.word	0x080557c9
 8008048:	080557cb 	.word	0x080557cb

0800804c <pack77_1>:

// Pack Type 1 (Standard 77-bit message) and Type 2 (ditto, with a "/P" call)
int pack77_1(const char *msg, uint8_t *b77) {
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	460c      	mov	r4, r1
    // Locate the first delimiter
    const char *s1 = strchr(msg, ' ');
 8008050:	2120      	movs	r1, #32
int pack77_1(const char *msg, uint8_t *b77) {
 8008052:	4605      	mov	r5, r0
    const char *s1 = strchr(msg, ' ');
 8008054:	f006 f98a 	bl	800e36c <strchr>
    if (s1 == 0) return -1;
 8008058:	b910      	cbnz	r0, 8008060 <pack77_1+0x14>
 800805a:	f04f 30ff 	mov.w	r0, #4294967295
    b77[7] = (uint8_t)(n28b << 6) | (uint8_t)(igrid4 >> 10);
    b77[8] = (igrid4 >> 2);
    b77[9] = (uint8_t)(igrid4 << 6) | (uint8_t)(i3 << 3);

    return 0;
}
 800805e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const char *call2 = s1 + 1;     // 2nd call
 8008060:	1c47      	adds	r7, r0, #1
    int32_t n28a = pack28(call1);
 8008062:	4628      	mov	r0, r5
 8008064:	f7ff fec4 	bl	8007df0 <pack28>
 8008068:	4606      	mov	r6, r0
    int32_t n28b = pack28(call2);
 800806a:	4638      	mov	r0, r7
 800806c:	f7ff fec0 	bl	8007df0 <pack28>
    if (n28a < 0 || n28b < 0) return -1;
 8008070:	ea56 0300 	orrs.w	r3, r6, r0
    int32_t n28b = pack28(call2);
 8008074:	4605      	mov	r5, r0
    if (n28a < 0 || n28b < 0) return -1;
 8008076:	d4f0      	bmi.n	800805a <pack77_1+0xe>
    const char *s2 = strchr(s1 + 1, ' ');
 8008078:	2120      	movs	r1, #32
 800807a:	4638      	mov	r0, r7
 800807c:	f006 f976 	bl	800e36c <strchr>
    if (s2 != 0) {
 8008080:	b330      	cbz	r0, 80080d0 <pack77_1+0x84>
        igrid4 = packgrid(s2 + 1);
 8008082:	3001      	adds	r0, #1
 8008084:	f7ff ff78 	bl	8007f78 <packgrid>
 8008088:	4603      	mov	r3, r0
    b77[0] = (n28a >> 21);
 800808a:	f346 520a 	sbfx	r2, r6, #20, #11
    return 0;
 800808e:	2000      	movs	r0, #0
    b77[0] = (n28a >> 21);
 8008090:	7022      	strb	r2, [r4, #0]
    b77[1] = (n28a >> 13);
 8008092:	f346 3212 	sbfx	r2, r6, #12, #19
 8008096:	7062      	strb	r2, [r4, #1]
    b77[2] = (n28a >> 5);
 8008098:	f346 121a 	sbfx	r2, r6, #4, #27
 800809c:	70a2      	strb	r2, [r4, #2]
    b77[3] = (uint8_t)(n28a << 3) | (uint8_t)(n28b >> 26);
 800809e:	f345 6245 	sbfx	r2, r5, #25, #6
 80080a2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 80080a6:	70e2      	strb	r2, [r4, #3]
    b77[4] = (n28b >> 18);
 80080a8:	f345 424d 	sbfx	r2, r5, #17, #14
 80080ac:	7122      	strb	r2, [r4, #4]
    b77[5] = (n28b >> 10);
 80080ae:	f345 2255 	sbfx	r2, r5, #9, #22
 80080b2:	7162      	strb	r2, [r4, #5]
    b77[6] = (n28b >> 2);
 80080b4:	f345 025d 	sbfx	r2, r5, #1, #30
 80080b8:	71a2      	strb	r2, [r4, #6]
    b77[7] = (uint8_t)(n28b << 6) | (uint8_t)(igrid4 >> 10);
 80080ba:	0a9a      	lsrs	r2, r3, #10
 80080bc:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
 80080c0:	71e2      	strb	r2, [r4, #7]
    b77[8] = (igrid4 >> 2);
 80080c2:	089a      	lsrs	r2, r3, #2
    b77[9] = (uint8_t)(igrid4 << 6) | (uint8_t)(i3 << 3);
 80080c4:	019b      	lsls	r3, r3, #6
    b77[8] = (igrid4 >> 2);
 80080c6:	7222      	strb	r2, [r4, #8]
    b77[9] = (uint8_t)(igrid4 << 6) | (uint8_t)(i3 << 3);
 80080c8:	f043 0308 	orr.w	r3, r3, #8
 80080cc:	7263      	strb	r3, [r4, #9]
    return 0;
 80080ce:	e7c6      	b.n	800805e <pack77_1+0x12>
        igrid4 = packgrid(0);
 80080d0:	f647 6391 	movw	r3, #32401	@ 0x7e91
 80080d4:	e7d9      	b.n	800808a <pack77_1+0x3e>

080080d6 <pack77>:
    b77[8] &= 0xFE;
    b77[9] &= 0x00;
}


int pack77(const char *msg, uint8_t *c77) {
 80080d6:	b508      	push	{r3, lr}
    // Check Type 1 (Standard 77-bit message) or Type 2, with optional "/P"
    if (0 == pack77_1(msg, c77)) {
 80080d8:	f7ff ffb8 	bl	800804c <pack77_1>

    // Default to free text
    // i3=0 n3=0
  //  packtext77(msg, c77);
    return 0;
}
 80080dc:	2000      	movs	r0, #0
 80080de:	bd08      	pop	{r3, pc}

080080e0 <trim_front>:

extern _Bool true;
extern _Bool false;


const char * trim_front(const char *str) {
 80080e0:	4603      	mov	r3, r0
    // Skip leading whitespace
    while (*str == ' ') {
 80080e2:	4618      	mov	r0, r3
 80080e4:	3301      	adds	r3, #1
 80080e6:	7802      	ldrb	r2, [r0, #0]
 80080e8:	2a20      	cmp	r2, #32
 80080ea:	d0fa      	beq.n	80080e2 <trim_front+0x2>
        str++;
    }
    return str;
}
 80080ec:	4770      	bx	lr

080080ee <trim_back>:

void trim_back(char *str) {
 80080ee:	b510      	push	{r4, lr}
 80080f0:	4604      	mov	r4, r0
    // Skip trailing whitespace by replacing it with '\0' characters
    int idx = strlen(str) - 1;
 80080f2:	f7f8 f8f7 	bl	80002e4 <strlen>
    while (idx >= 0 && str[idx] == ' ') {
        str[idx--] = '\0';
 80080f6:	2100      	movs	r1, #0
 80080f8:	1823      	adds	r3, r4, r0
    while (idx >= 0 && str[idx] == ' ') {
 80080fa:	42a3      	cmp	r3, r4
 80080fc:	d003      	beq.n	8008106 <trim_back+0x18>
 80080fe:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8008102:	2a20      	cmp	r2, #32
 8008104:	d000      	beq.n	8008108 <trim_back+0x1a>
    }
}
 8008106:	bd10      	pop	{r4, pc}
        str[idx--] = '\0';
 8008108:	f803 1d01 	strb.w	r1, [r3, #-1]!
 800810c:	e7f5      	b.n	80080fa <trim_back+0xc>

0800810e <trim>:

// 1) trims a string from the back by changing whitespaces to '\0'
// 2) trims a string from the front by skipping whitespaces
char * trim(char *str) {
 800810e:	b510      	push	{r4, lr}
    str = (char *)trim_front(str);
 8008110:	f7ff ffe6 	bl	80080e0 <trim_front>
 8008114:	4604      	mov	r4, r0
    trim_back(str);
 8008116:	f7ff ffea 	bl	80080ee <trim_back>
    // return a pointer to the first non-whitespace character
    return str;
}
 800811a:	4620      	mov	r0, r4
 800811c:	bd10      	pop	{r4, pc}

0800811e <is_digit>:
char to_upper(char c) {
    return (c >= 'a' && c <= 'z') ? (c - 'a' + 'A') : c;
}

_Bool is_digit(char c) {
    return (c >= '0') && (c <= '9');
 800811e:	3830      	subs	r0, #48	@ 0x30
}
 8008120:	2809      	cmp	r0, #9
 8008122:	bf8c      	ite	hi
 8008124:	2000      	movhi	r0, #0
 8008126:	2001      	movls	r0, #1
 8008128:	4770      	bx	lr

0800812a <is_letter>:

_Bool is_letter(char c) {
    return ((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'));
 800812a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800812e:	3841      	subs	r0, #65	@ 0x41
}
 8008130:	2819      	cmp	r0, #25
 8008132:	bf8c      	ite	hi
 8008134:	2000      	movhi	r0, #0
 8008136:	2001      	movls	r0, #1
 8008138:	4770      	bx	lr

0800813a <in_range>:
_Bool is_space(char c) {
    return (c == ' ');
}

_Bool in_range(char c, char min, char max) {
    return (c >= min) && (c <= max);
 800813a:	4288      	cmp	r0, r1
 800813c:	d304      	bcc.n	8008148 <in_range+0xe>
 800813e:	4290      	cmp	r0, r2
 8008140:	bf8c      	ite	hi
 8008142:	2000      	movhi	r0, #0
 8008144:	2001      	movls	r0, #1
 8008146:	4770      	bx	lr
 8008148:	2000      	movs	r0, #0
}
 800814a:	4770      	bx	lr

0800814c <starts_with>:

_Bool starts_with(const char *string, const char *prefix) {
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4605      	mov	r5, r0
 8008150:	460c      	mov	r4, r1
    return 0 == memcmp(string, prefix, strlen(prefix));
 8008152:	4608      	mov	r0, r1
 8008154:	f7f8 f8c6 	bl	80002e4 <strlen>
 8008158:	4621      	mov	r1, r4
 800815a:	4602      	mov	r2, r0
 800815c:	4628      	mov	r0, r5
 800815e:	f006 f8de 	bl	800e31e <memcmp>
}
 8008162:	fab0 f080 	clz	r0, r0
 8008166:	0940      	lsrs	r0, r0, #5
 8008168:	bd38      	pop	{r3, r4, r5, pc}

0800816a <equals>:

_Bool equals(const char *string1, const char *string2) {
 800816a:	b508      	push	{r3, lr}
    return 0 == strcmp(string1, string2);
 800816c:	f7f8 f8b0 	bl	80002d0 <strcmp>
}
 8008170:	fab0 f080 	clz	r0, r0
 8008174:	0940      	lsrs	r0, r0, #5
 8008176:	bd08      	pop	{r3, pc}

08008178 <char_index>:


int char_index(const char *string, char c) {
 8008178:	4603      	mov	r3, r0
    for (int i = 0; *string; ++i, ++string) {
 800817a:	2000      	movs	r0, #0
 800817c:	5c1a      	ldrb	r2, [r3, r0]
 800817e:	b912      	cbnz	r2, 8008186 <char_index+0xe>
        if (c == *string) {
            return i;
        }
    }
    return -1;  // Not found
 8008180:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008184:	4770      	bx	lr
        if (c == *string) {
 8008186:	428a      	cmp	r2, r1
 8008188:	d0fc      	beq.n	8008184 <char_index+0xc>
    for (int i = 0; *string; ++i, ++string) {
 800818a:	3001      	adds	r0, #1
 800818c:	e7f6      	b.n	800817c <char_index+0x4>
	...

08008190 <dd_to_int>:
    *msg_out = 0; // Add zero termination
}


// Parse a 2 digit integer from string
int dd_to_int(const char *str, int length) {
 8008190:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = 0;
    _Bool negative;
    int i;
    if (str[0] == '-') {
 8008192:	7803      	ldrb	r3, [r0, #0]
int dd_to_int(const char *str, int length) {
 8008194:	4602      	mov	r2, r0
    if (str[0] == '-') {
 8008196:	2b2d      	cmp	r3, #45	@ 0x2d
 8008198:	d105      	bne.n	80081a6 <dd_to_int+0x16>
        negative = true;
 800819a:	4b0d      	ldr	r3, [pc, #52]	@ (80081d0 <dd_to_int+0x40>)
 800819c:	781d      	ldrb	r5, [r3, #0]
        i = 1;                          // Consume the - sign
 800819e:	2301      	movs	r3, #1
 80081a0:	2000      	movs	r0, #0
    }

    while (i < length) {
        if (str[i] == 0) break;
        if (!is_digit(str[i])) break;
        result *= 10;
 80081a2:	260a      	movs	r6, #10
 80081a4:	e009      	b.n	80081ba <dd_to_int+0x2a>
        negative = false;
 80081a6:	480b      	ldr	r0, [pc, #44]	@ (80081d4 <dd_to_int+0x44>)
 80081a8:	7805      	ldrb	r5, [r0, #0]
        i = (str[0] == '+') ? 1 : 0;    // Consume a + sign if found
 80081aa:	f1a3 002b 	sub.w	r0, r3, #43	@ 0x2b
 80081ae:	4243      	negs	r3, r0
 80081b0:	4143      	adcs	r3, r0
 80081b2:	e7f5      	b.n	80081a0 <dd_to_int+0x10>
        result += (str[i] - '0');
 80081b4:	fb06 4000 	mla	r0, r6, r0, r4
        ++i;
 80081b8:	3301      	adds	r3, #1
    while (i < length) {
 80081ba:	428b      	cmp	r3, r1
 80081bc:	da04      	bge.n	80081c8 <dd_to_int+0x38>
        if (str[i] == 0) break;
 80081be:	5cd4      	ldrb	r4, [r2, r3]
 80081c0:	3c30      	subs	r4, #48	@ 0x30
 80081c2:	b2e7      	uxtb	r7, r4
 80081c4:	2f09      	cmp	r7, #9
 80081c6:	d9f5      	bls.n	80081b4 <dd_to_int+0x24>
    }

    return negative ? -result : result;
 80081c8:	b905      	cbnz	r5, 80081cc <dd_to_int+0x3c>
}
 80081ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return negative ? -result : result;
 80081cc:	4240      	negs	r0, r0
 80081ce:	e7fc      	b.n	80081ca <dd_to_int+0x3a>
 80081d0:	200009d4 	.word	0x200009d4
 80081d4:	200018cf 	.word	0x200018cf

080081d8 <int_to_dd>:


// Convert a 2 digit integer to string
void int_to_dd(char *str, int value, int width, _Bool full_sign) {
    if (value < 0) {
 80081d8:	2900      	cmp	r1, #0
void int_to_dd(char *str, int value, int width, _Bool full_sign) {
 80081da:	b530      	push	{r4, r5, lr}
        *str = '-';
        ++str;
 80081dc:	f100 0401 	add.w	r4, r0, #1
    if (value < 0) {
 80081e0:	da17      	bge.n	8008212 <int_to_dd+0x3a>
        *str = '-';
 80081e2:	232d      	movs	r3, #45	@ 0x2d
        value = -value;
 80081e4:	4249      	negs	r1, r1
        *str = '-';
 80081e6:	7003      	strb	r3, [r0, #0]
        *str = '+';
        ++str;
    }

    int divisor = 1;
    for (int i = 0; i < width - 1; ++i) {
 80081e8:	2000      	movs	r0, #0
    int divisor = 1;
 80081ea:	2301      	movs	r3, #1
    for (int i = 0; i < width - 1; ++i) {
 80081ec:	3a01      	subs	r2, #1
        divisor *= 10;
 80081ee:	250a      	movs	r5, #10
    for (int i = 0; i < width - 1; ++i) {
 80081f0:	4282      	cmp	r2, r0
 80081f2:	dc14      	bgt.n	800821e <int_to_dd+0x46>

        *str = '0' + digit;
        ++str;

        value -= digit * divisor;
        divisor /= 10;
 80081f4:	200a      	movs	r0, #10
        int digit = value / divisor;
 80081f6:	fbb1 f2f3 	udiv	r2, r1, r3
 80081fa:	fb03 1112 	mls	r1, r3, r2, r1
        *str = '0' + digit;
 80081fe:	f102 0530 	add.w	r5, r2, #48	@ 0x30
        divisor /= 10;
 8008202:	fbb3 f3f0 	udiv	r3, r3, r0
        *str = '0' + digit;
 8008206:	f804 5b01 	strb.w	r5, [r4], #1
    while (divisor >= 1) {
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1f3      	bne.n	80081f6 <int_to_dd+0x1e>
    }
    *str = 0;   // Add zero terminator
 800820e:	7023      	strb	r3, [r4, #0]
}
 8008210:	bd30      	pop	{r4, r5, pc}
    else if (full_sign) {
 8008212:	b113      	cbz	r3, 800821a <int_to_dd+0x42>
        *str = '+';
 8008214:	232b      	movs	r3, #43	@ 0x2b
 8008216:	7003      	strb	r3, [r0, #0]
        ++str;
 8008218:	e7e6      	b.n	80081e8 <int_to_dd+0x10>
 800821a:	4604      	mov	r4, r0
 800821c:	e7e4      	b.n	80081e8 <int_to_dd+0x10>
        divisor *= 10;
 800821e:	436b      	muls	r3, r5
    for (int i = 0; i < width - 1; ++i) {
 8008220:	3001      	adds	r0, #1
 8008222:	e7e5      	b.n	80081f0 <int_to_dd+0x18>

08008224 <charn>:
// table 2: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
// table 3: "0123456789"
// table 4: " ABCDEFGHIJKLMNOPQRSTUVWXYZ"
// table 5: " 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ/"
char charn(int c, int table_idx) {
    if (table_idx != 2 && table_idx != 3) {
 8008224:	1e8b      	subs	r3, r1, #2
 8008226:	2b01      	cmp	r3, #1
 8008228:	d908      	bls.n	800823c <charn+0x18>
        if (c == 0) return ' ';
 800822a:	b1f0      	cbz	r0, 800826a <charn+0x46>
        c -= 1;
    }
    if (table_idx != 4) {
 800822c:	2904      	cmp	r1, #4
        c -= 1;
 800822e:	f100 30ff 	add.w	r0, r0, #4294967295
    if (table_idx != 4) {
 8008232:	d11e      	bne.n	8008272 <charn+0x4e>
        if (c < 10) return '0' + c;
        c -= 10;
    }
    if (table_idx != 3) {
        if (c < 26) return 'A' + c;
 8008234:	2819      	cmp	r0, #25
 8008236:	dc0a      	bgt.n	800824e <charn+0x2a>
 8008238:	3041      	adds	r0, #65	@ 0x41
 800823a:	e002      	b.n	8008242 <charn+0x1e>
        if (c < 10) return '0' + c;
 800823c:	2809      	cmp	r0, #9
 800823e:	dc02      	bgt.n	8008246 <charn+0x22>
 8008240:	3030      	adds	r0, #48	@ 0x30
        if (c < 26) return 'A' + c;
 8008242:	b2c0      	uxtb	r0, r0
 8008244:	4770      	bx	lr
    if (table_idx != 3) {
 8008246:	2903      	cmp	r1, #3
 8008248:	d011      	beq.n	800826e <charn+0x4a>
        c -= 10;
 800824a:	380a      	subs	r0, #10
 800824c:	e7f2      	b.n	8008234 <charn+0x10>
        c -= 26;
 800824e:	381a      	subs	r0, #26
    }

    if (table_idx == 0) {
 8008250:	b921      	cbnz	r1, 800825c <charn+0x38>
        if (c < 5) return "+-./?" [c];
 8008252:	2804      	cmp	r0, #4
 8008254:	dc0b      	bgt.n	800826e <charn+0x4a>
 8008256:	4b08      	ldr	r3, [pc, #32]	@ (8008278 <charn+0x54>)
 8008258:	5c18      	ldrb	r0, [r3, r0]
 800825a:	4770      	bx	lr
    }
    else if (table_idx == 5) {
 800825c:	2905      	cmp	r1, #5
 800825e:	d106      	bne.n	800826e <charn+0x4a>
        if (c == 0) return '/';
 8008260:	2800      	cmp	r0, #0
 8008262:	bf14      	ite	ne
 8008264:	205f      	movne	r0, #95	@ 0x5f
 8008266:	202f      	moveq	r0, #47	@ 0x2f
 8008268:	4770      	bx	lr
        if (c == 0) return ' ';
 800826a:	2020      	movs	r0, #32
 800826c:	4770      	bx	lr
    }

    return '_'; // unknown character, should never get here
 800826e:	205f      	movs	r0, #95	@ 0x5f
}
 8008270:	4770      	bx	lr
        if (c < 10) return '0' + c;
 8008272:	2809      	cmp	r0, #9
 8008274:	dce9      	bgt.n	800824a <charn+0x26>
 8008276:	e7e3      	b.n	8008240 <charn+0x1c>
 8008278:	080557ce 	.word	0x080557ce

0800827c <unpack28>:
const uint16_t MAXGRID4 = 32400L;


// n28 is a 28-bit integer, e.g. n28a or n28b, containing all the
// call sign bits from a packed message.
int unpack28(uint32_t n28, uint8_t ip, uint8_t i3, char *result) {
 800827c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008280:	460f      	mov	r7, r1
    // Check for special tokens DE, QRZ, CQ, CQ_nnn, CQ_aaaa
    if (n28 < NTOKENS) {
 8008282:	4959      	ldr	r1, [pc, #356]	@ (80083e8 <unpack28+0x16c>)
int unpack28(uint32_t n28, uint8_t ip, uint8_t i3, char *result) {
 8008284:	4605      	mov	r5, r0
 8008286:	4616      	mov	r6, r2
    if (n28 < NTOKENS) {
 8008288:	4288      	cmp	r0, r1
int unpack28(uint32_t n28, uint8_t ip, uint8_t i3, char *result) {
 800828a:	461c      	mov	r4, r3
    if (n28 < NTOKENS) {
 800828c:	d245      	bcs.n	800831a <unpack28+0x9e>
        if (n28 <= 2) {
 800828e:	2802      	cmp	r0, #2
 8008290:	d80d      	bhi.n	80082ae <unpack28+0x32>
            if (n28 == 0) strcpy(result, "DE");
 8008292:	b938      	cbnz	r0, 80082a4 <unpack28+0x28>
 8008294:	4955      	ldr	r1, [pc, #340]	@ (80083ec <unpack28+0x170>)
            if (n28 == 1) strcpy(result, "QRZ");
            if (n28 == 2) strcpy(result, "CQ");
 8008296:	4620      	mov	r0, r4
 8008298:	f006 f955 	bl	800e546 <strcpy>
            return 0;   // Success
 800829c:	2000      	movs	r0, #0
            strcat(result, "/P");
        }
    }

    return 0;   // Success
}
 800829e:	b003      	add	sp, #12
 80082a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if (n28 == 1) strcpy(result, "QRZ");
 80082a4:	2801      	cmp	r0, #1
 80082a6:	bf0c      	ite	eq
 80082a8:	4951      	ldreq	r1, [pc, #324]	@ (80083f0 <unpack28+0x174>)
            if (n28 == 2) strcpy(result, "CQ");
 80082aa:	4952      	ldrne	r1, [pc, #328]	@ (80083f4 <unpack28+0x178>)
 80082ac:	e7f3      	b.n	8008296 <unpack28+0x1a>
        if (n28 <= 1002) {
 80082ae:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 80082b2:	4298      	cmp	r0, r3
 80082b4:	d80b      	bhi.n	80082ce <unpack28+0x52>
            strcpy(result, "CQ ");
 80082b6:	4950      	ldr	r1, [pc, #320]	@ (80083f8 <unpack28+0x17c>)
 80082b8:	4620      	mov	r0, r4
 80082ba:	f006 f944 	bl	800e546 <strcpy>
            int_to_dd(result + 3, n28 - 3, 3, true);
 80082be:	2203      	movs	r2, #3
 80082c0:	4b4e      	ldr	r3, [pc, #312]	@ (80083fc <unpack28+0x180>)
 80082c2:	1ee9      	subs	r1, r5, #3
 80082c4:	18a0      	adds	r0, r4, r2
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	f7ff ff86 	bl	80081d8 <int_to_dd>
            return 0;   // Success
 80082cc:	e7e6      	b.n	800829c <unpack28+0x20>
        if (n28 <= 532443L) {
 80082ce:	4b4c      	ldr	r3, [pc, #304]	@ (8008400 <unpack28+0x184>)
 80082d0:	4298      	cmp	r0, r3
 80082d2:	d902      	bls.n	80082da <unpack28+0x5e>
        return -1;
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	e7e1      	b.n	800829e <unpack28+0x22>
            aaaa[4] = '\0';
 80082da:	2300      	movs	r3, #0
            uint32_t n = n28 - 1003;
 80082dc:	f2a0 30eb 	subw	r0, r0, #1003	@ 0x3eb
            for (int i = 3; /* */; --i) {
 80082e0:	2603      	movs	r6, #3
                aaaa[i] = charn(n % 27, 4);
 80082e2:	271b      	movs	r7, #27
            aaaa[4] = '\0';
 80082e4:	f88d 3004 	strb.w	r3, [sp, #4]
                aaaa[i] = charn(n % 27, 4);
 80082e8:	2104      	movs	r1, #4
 80082ea:	fbb0 f5f7 	udiv	r5, r0, r7
 80082ee:	fb07 0015 	mls	r0, r7, r5, r0
 80082f2:	f7ff ff97 	bl	8008224 <charn>
 80082f6:	f80d 0006 	strb.w	r0, [sp, r6]
                if (i == 0) break;
 80082fa:	b116      	cbz	r6, 8008302 <unpack28+0x86>
                n /= 27;
 80082fc:	4628      	mov	r0, r5
            for (int i = 3; /* */; --i) {
 80082fe:	3e01      	subs	r6, #1
                aaaa[i] = charn(n % 27, 4);
 8008300:	e7f2      	b.n	80082e8 <unpack28+0x6c>
            strcpy(result, "CQ ");
 8008302:	493d      	ldr	r1, [pc, #244]	@ (80083f8 <unpack28+0x17c>)
 8008304:	4620      	mov	r0, r4
 8008306:	f006 f91e 	bl	800e546 <strcpy>
            strcat(result, trim_front(aaaa));
 800830a:	4668      	mov	r0, sp
 800830c:	f7ff fee8 	bl	80080e0 <trim_front>
 8008310:	4601      	mov	r1, r0
            strcat(result, "/P");
 8008312:	4620      	mov	r0, r4
 8008314:	f006 f81b 	bl	800e34e <strcat>
 8008318:	e7c0      	b.n	800829c <unpack28+0x20>
    n28 = n28 - NTOKENS;
 800831a:	1a41      	subs	r1, r0, r1
    if (n28 < MAX22) {
 800831c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8008320:	d20d      	bcs.n	800833e <unpack28+0xc2>
        result[0] = '<';
 8008322:	4618      	mov	r0, r3
 8008324:	233c      	movs	r3, #60	@ 0x3c
        int_to_dd(result + 1, n28, 7, true);
 8008326:	2207      	movs	r2, #7
        result[0] = '<';
 8008328:	f800 3b01 	strb.w	r3, [r0], #1
        int_to_dd(result + 1, n28, 7, true);
 800832c:	4b33      	ldr	r3, [pc, #204]	@ (80083fc <unpack28+0x180>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	f7ff ff52 	bl	80081d8 <int_to_dd>
        result[8] = '>';
 8008334:	233e      	movs	r3, #62	@ 0x3e
 8008336:	7223      	strb	r3, [r4, #8]
        result[9] = '\0';
 8008338:	2300      	movs	r3, #0
 800833a:	7263      	strb	r3, [r4, #9]
        return 0;
 800833c:	e7ae      	b.n	800829c <unpack28+0x20>
    uint32_t n = n28 - MAX22;
 800833e:	4831      	ldr	r0, [pc, #196]	@ (8008404 <unpack28+0x188>)
    callsign[6] = '\0';
 8008340:	2300      	movs	r3, #0
    callsign[5] = charn(n % 27, 4);
 8008342:	2104      	movs	r1, #4
    uint32_t n = n28 - MAX22;
 8008344:	4428      	add	r0, r5
    callsign[5] = charn(n % 27, 4);
 8008346:	251b      	movs	r5, #27
    callsign[6] = '\0';
 8008348:	f88d 3006 	strb.w	r3, [sp, #6]
    callsign[5] = charn(n % 27, 4);
 800834c:	fbb0 f9f5 	udiv	r9, r0, r5
 8008350:	fb05 0019 	mls	r0, r5, r9, r0
 8008354:	f7ff ff66 	bl	8008224 <charn>
    callsign[4] = charn(n % 27, 4);
 8008358:	2104      	movs	r1, #4
    callsign[5] = charn(n % 27, 4);
 800835a:	f88d 0005 	strb.w	r0, [sp, #5]
    callsign[4] = charn(n % 27, 4);
 800835e:	fbb9 f8f5 	udiv	r8, r9, r5
 8008362:	fb05 9018 	mls	r0, r5, r8, r9
 8008366:	f7ff ff5d 	bl	8008224 <charn>
    callsign[3] = charn(n % 27, 4);
 800836a:	2104      	movs	r1, #4
    callsign[4] = charn(n % 27, 4);
 800836c:	f88d 0004 	strb.w	r0, [sp, #4]
    callsign[3] = charn(n % 27, 4);
 8008370:	fbb8 f9f5 	udiv	r9, r8, r5
 8008374:	fb05 8019 	mls	r0, r5, r9, r8
 8008378:	f7ff ff54 	bl	8008224 <charn>
 800837c:	f88d 0003 	strb.w	r0, [sp, #3]
    callsign[2] = charn(n % 10, 3);
 8008380:	200a      	movs	r0, #10
 8008382:	2103      	movs	r1, #3
 8008384:	fbb9 f8f0 	udiv	r8, r9, r0
 8008388:	fb00 9018 	mls	r0, r0, r8, r9
 800838c:	f7ff ff4a 	bl	8008224 <charn>
 8008390:	f88d 0002 	strb.w	r0, [sp, #2]
    callsign[1] = charn(n % 36, 2);
 8008394:	2024      	movs	r0, #36	@ 0x24
 8008396:	2102      	movs	r1, #2
 8008398:	fbb8 f5f0 	udiv	r5, r8, r0
 800839c:	fb00 8015 	mls	r0, r0, r5, r8
 80083a0:	f7ff ff40 	bl	8008224 <charn>
    callsign[0] = charn(n % 37, 1);
 80083a4:	2325      	movs	r3, #37	@ 0x25
    callsign[1] = charn(n % 36, 2);
 80083a6:	f88d 0001 	strb.w	r0, [sp, #1]
    callsign[0] = charn(n % 37, 1);
 80083aa:	2101      	movs	r1, #1
 80083ac:	fbb5 f0f3 	udiv	r0, r5, r3
 80083b0:	fb03 5010 	mls	r0, r3, r0, r5
 80083b4:	f7ff ff36 	bl	8008224 <charn>
 80083b8:	f88d 0000 	strb.w	r0, [sp]
    strcpy(result, trim(callsign));
 80083bc:	4668      	mov	r0, sp
 80083be:	f7ff fea6 	bl	800810e <trim>
 80083c2:	4601      	mov	r1, r0
 80083c4:	4620      	mov	r0, r4
 80083c6:	f006 f8be 	bl	800e546 <strcpy>
    if (strlen(result) == 0) return -1;
 80083ca:	7823      	ldrb	r3, [r4, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d081      	beq.n	80082d4 <unpack28+0x58>
    if (ip) {
 80083d0:	2f00      	cmp	r7, #0
 80083d2:	f43f af63 	beq.w	800829c <unpack28+0x20>
        if (i3 == 1) {
 80083d6:	2e01      	cmp	r6, #1
 80083d8:	d101      	bne.n	80083de <unpack28+0x162>
            strcat(result, "/R");
 80083da:	490b      	ldr	r1, [pc, #44]	@ (8008408 <unpack28+0x18c>)
 80083dc:	e799      	b.n	8008312 <unpack28+0x96>
        else if (i3 == 2) {
 80083de:	2e02      	cmp	r6, #2
 80083e0:	f47f af5c 	bne.w	800829c <unpack28+0x20>
            strcat(result, "/P");
 80083e4:	4909      	ldr	r1, [pc, #36]	@ (800840c <unpack28+0x190>)
 80083e6:	e794      	b.n	8008312 <unpack28+0x96>
 80083e8:	001f7ce8 	.word	0x001f7ce8
 80083ec:	080557d4 	.word	0x080557d4
 80083f0:	080557d7 	.word	0x080557d7
 80083f4:	080557db 	.word	0x080557db
 80083f8:	080557b1 	.word	0x080557b1
 80083fc:	200009d4 	.word	0x200009d4
 8008400:	00081fdb 	.word	0x00081fdb
 8008404:	ffa08318 	.word	0xffa08318
 8008408:	080557de 	.word	0x080557de
 800840c:	080557e1 	.word	0x080557e1

08008410 <unpack_type1>:


int unpack_type1(const uint8_t *a77, uint8_t i3, char *field1, char *field2, char *field3) {
 8008410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    // Extract packed fields
    // read(c77,1000) n28a,ipa,n28b,ipb,ir,igrid4,i3
    // 1000 format(2(b28,b1),b1,b15,b3)
    n28a  = (a77[0] << 21);
    n28a |= (a77[1] << 13);
 8008414:	f890 c001 	ldrb.w	ip, [r0, #1]
int unpack_type1(const uint8_t *a77, uint8_t i3, char *field1, char *field2, char *field3) {
 8008418:	4698      	mov	r8, r3
    n28a |= (a77[2] << 5);
    n28a |= (a77[3] >> 3);
    n28b  = ((a77[3] & 0x07) << 26);
    n28b |= (a77[4] << 18);
    n28b |= (a77[5] << 10);
 800841a:	7946      	ldrb	r6, [r0, #5]
int unpack_type1(const uint8_t *a77, uint8_t i3, char *field1, char *field2, char *field3) {
 800841c:	460f      	mov	r7, r1
    n28a  = (a77[0] << 21);
 800841e:	7803      	ldrb	r3, [r0, #0]
    n28a |= (a77[1] << 13);
 8008420:	ea4f 3c4c 	mov.w	ip, ip, lsl #13
    n28b |= (a77[4] << 18);
 8008424:	f890 e004 	ldrb.w	lr, [r0, #4]
    n28b |= (a77[5] << 10);
 8008428:	02b6      	lsls	r6, r6, #10
    n28a |= (a77[3] >> 3);
 800842a:	78c1      	ldrb	r1, [r0, #3]
    n28a |= (a77[1] << 13);
 800842c:	ea4c 5c43 	orr.w	ip, ip, r3, lsl #21
    n28b |= (a77[6] << 2);
    n28b |= (a77[7] >> 6);
 8008430:	ea46 468e 	orr.w	r6, r6, lr, lsl #18
    n28a |= (a77[2] << 5);
 8008434:	7883      	ldrb	r3, [r0, #2]
    n28b |= (a77[6] << 2);
 8008436:	f890 e006 	ldrb.w	lr, [r0, #6]
    n28b |= (a77[7] >> 6);
 800843a:	79c4      	ldrb	r4, [r0, #7]
    n28a |= (a77[2] << 5);
 800843c:	ea4c 1c43 	orr.w	ip, ip, r3, lsl #5
    n28b |= (a77[7] >> 6);
 8008440:	ea46 068e 	orr.w	r6, r6, lr, lsl #2
    ir      = ((a77[7] & 0x20) >> 5);
    igrid4  = ((a77[7] & 0x1F) << 10);
    igrid4 |= (a77[8] << 2);
    igrid4 |= (a77[9] >> 6);
 8008444:	f890 e009 	ldrb.w	lr, [r0, #9]
    n28b  = ((a77[3] & 0x07) << 26);
 8008448:	068b      	lsls	r3, r1, #26
    ir      = ((a77[7] & 0x20) >> 5);
 800844a:	f3c4 1940 	ubfx	r9, r4, #5, #1
    n28b |= (a77[7] >> 6);
 800844e:	ea46 1694 	orr.w	r6, r6, r4, lsr #6
int unpack_type1(const uint8_t *a77, uint8_t i3, char *field1, char *field2, char *field3) {
 8008452:	9d08      	ldr	r5, [sp, #32]
    n28b  = ((a77[3] & 0x07) << 26);
 8008454:	f003 53e0 	and.w	r3, r3, #469762048	@ 0x1c000000
    igrid4  = ((a77[7] & 0x1F) << 10);
 8008458:	02a4      	lsls	r4, r4, #10
    n28a |= (a77[3] >> 3);
 800845a:	ea4c 0cd1 	orr.w	ip, ip, r1, lsr #3

    // Unpack both callsigns
    if (unpack28(n28a >> 1, n28a & 0x01, i3, field1) < 0) {
 800845e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    n28b |= (a77[7] >> 6);
 8008462:	431e      	orrs	r6, r3
    igrid4 |= (a77[8] << 2);
 8008464:	7a03      	ldrb	r3, [r0, #8]
    igrid4  = ((a77[7] & 0x1F) << 10);
 8008466:	f404 44f8 	and.w	r4, r4, #31744	@ 0x7c00
    if (unpack28(n28a >> 1, n28a & 0x01, i3, field1) < 0) {
 800846a:	ea4f 005c 	mov.w	r0, ip, lsr #1
    igrid4 |= (a77[8] << 2);
 800846e:	009b      	lsls	r3, r3, #2
    igrid4 |= (a77[9] >> 6);
 8008470:	ea43 139e 	orr.w	r3, r3, lr, lsr #6
 8008474:	431c      	orrs	r4, r3
    if (unpack28(n28a >> 1, n28a & 0x01, i3, field1) < 0) {
 8008476:	4613      	mov	r3, r2
 8008478:	463a      	mov	r2, r7
 800847a:	f7ff feff 	bl	800827c <unpack28>
 800847e:	2800      	cmp	r0, #0
 8008480:	db5a      	blt.n	8008538 <unpack_type1+0x128>
        return -1;
    }
    if (unpack28(n28b >> 1, n28b & 0x01, i3, field2) < 0) {
 8008482:	4643      	mov	r3, r8
 8008484:	463a      	mov	r2, r7
 8008486:	f006 0101 	and.w	r1, r6, #1
 800848a:	0870      	lsrs	r0, r6, #1
 800848c:	f7ff fef6 	bl	800827c <unpack28>
 8008490:	2800      	cmp	r0, #0
 8008492:	db54      	blt.n	800853e <unpack_type1+0x12e>
    // }
    // if (field2[0] != '<' && strlen(field2) >= 4) {
    //     save_hash_call(field2)
    // }

    if (igrid4 <= MAXGRID4) {
 8008494:	f647 6390 	movw	r3, #32400	@ 0x7e90
 8008498:	429c      	cmp	r4, r3
 800849a:	d828      	bhi.n	80084ee <unpack_type1+0xde>
        // Extract 4 symbol grid locator
        char *dst = field3;
        uint16_t n = igrid4;
        if (ir > 0) {
 800849c:	f1b9 0f00 	cmp.w	r9, #0
 80084a0:	d005      	beq.n	80084ae <unpack_type1+0x9e>
            // In case of ir=1 add an "R" before grid
            dst = stpcpy(dst, "R ");
 80084a2:	4b28      	ldr	r3, [pc, #160]	@ (8008544 <unpack_type1+0x134>)
 80084a4:	881a      	ldrh	r2, [r3, #0]
 80084a6:	789b      	ldrb	r3, [r3, #2]
 80084a8:	802a      	strh	r2, [r5, #0]
 80084aa:	f805 3f02 	strb.w	r3, [r5, #2]!
        }

        dst[4] = '\0';
        dst[3] = '0' + (n % 10);
 80084ae:	200a      	movs	r0, #10
        dst[4] = '\0';
 80084b0:	2300      	movs	r3, #0
        n /= 10;
        dst[2] = '0' + (n % 10);
        n /= 10;
        dst[1] = 'A' + (n % 18);
 80084b2:	2112      	movs	r1, #18
        dst[4] = '\0';
 80084b4:	712b      	strb	r3, [r5, #4]
        dst[3] = '0' + (n % 10);
 80084b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80084ba:	fb00 4413 	mls	r4, r0, r3, r4
        n /= 10;
 80084be:	b29b      	uxth	r3, r3
        dst[2] = '0' + (n % 10);
 80084c0:	fbb3 f2f0 	udiv	r2, r3, r0
 80084c4:	fb00 3312 	mls	r3, r0, r2, r3
        dst[3] = '0' + (n % 10);
 80084c8:	3430      	adds	r4, #48	@ 0x30
        dst[2] = '0' + (n % 10);
 80084ca:	3330      	adds	r3, #48	@ 0x30
        dst[3] = '0' + (n % 10);
 80084cc:	70ec      	strb	r4, [r5, #3]
        dst[2] = '0' + (n % 10);
 80084ce:	70ab      	strb	r3, [r5, #2]
        dst[1] = 'A' + (n % 18);
 80084d0:	fbb2 f3f1 	udiv	r3, r2, r1
 80084d4:	fb01 2213 	mls	r2, r1, r3, r2
 80084d8:	3241      	adds	r2, #65	@ 0x41
 80084da:	706a      	strb	r2, [r5, #1]
        n /= 18;
        dst[0] = 'A' + (n % 18);
 80084dc:	fbb3 f2f1 	udiv	r2, r3, r1
 80084e0:	fb01 3312 	mls	r3, r1, r2, r3
 80084e4:	3341      	adds	r3, #65	@ 0x41
 80084e6:	702b      	strb	r3, [r5, #0]
        }
        // if(msg(1:3).eq.'CQ ' .and. irpt.ge.2) unpk77_success=.false.
        // if (irpt >= 2 && strncmp(field1, "CQ", 2) == 0) return -1;
    }

    return 0;       // Success
 80084e8:	2000      	movs	r0, #0
}
 80084ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        int irpt = igrid4 - MAXGRID4;
 80084ee:	f5a4 41fd 	sub.w	r1, r4, #32384	@ 0x7e80
        if (irpt == 1) field3[0] = '\0';
 80084f2:	2911      	cmp	r1, #17
        int irpt = igrid4 - MAXGRID4;
 80084f4:	f1a1 0310 	sub.w	r3, r1, #16
        if (irpt == 1) field3[0] = '\0';
 80084f8:	d101      	bne.n	80084fe <unpack_type1+0xee>
 80084fa:	2300      	movs	r3, #0
 80084fc:	e7f3      	b.n	80084e6 <unpack_type1+0xd6>
        else if (irpt == 2) strcpy(field3, "RRR");
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d104      	bne.n	800850c <unpack_type1+0xfc>
 8008502:	4911      	ldr	r1, [pc, #68]	@ (8008548 <unpack_type1+0x138>)
        else if (irpt == 4) strcpy(field3, "73");
 8008504:	4628      	mov	r0, r5
 8008506:	f006 f81e 	bl	800e546 <strcpy>
 800850a:	e7ed      	b.n	80084e8 <unpack_type1+0xd8>
        else if (irpt == 3) strcpy(field3, "RR73");
 800850c:	2b03      	cmp	r3, #3
 800850e:	d101      	bne.n	8008514 <unpack_type1+0x104>
 8008510:	490e      	ldr	r1, [pc, #56]	@ (800854c <unpack_type1+0x13c>)
 8008512:	e7f7      	b.n	8008504 <unpack_type1+0xf4>
        else if (irpt == 4) strcpy(field3, "73");
 8008514:	2b04      	cmp	r3, #4
 8008516:	d101      	bne.n	800851c <unpack_type1+0x10c>
 8008518:	490d      	ldr	r1, [pc, #52]	@ (8008550 <unpack_type1+0x140>)
 800851a:	e7f3      	b.n	8008504 <unpack_type1+0xf4>
            if (ir > 0) {
 800851c:	f1b9 0f00 	cmp.w	r9, #0
 8008520:	d002      	beq.n	8008528 <unpack_type1+0x118>
                *dst++ = 'R'; // Add "R" before report
 8008522:	2352      	movs	r3, #82	@ 0x52
 8008524:	f805 3b01 	strb.w	r3, [r5], #1
            int_to_dd(dst, irpt - 35, 2, true);
 8008528:	4b0a      	ldr	r3, [pc, #40]	@ (8008554 <unpack_type1+0x144>)
 800852a:	2202      	movs	r2, #2
 800852c:	3933      	subs	r1, #51	@ 0x33
 800852e:	4628      	mov	r0, r5
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	f7ff fe51 	bl	80081d8 <int_to_dd>
 8008536:	e7d7      	b.n	80084e8 <unpack_type1+0xd8>
        return -1;
 8008538:	f04f 30ff 	mov.w	r0, #4294967295
 800853c:	e7d5      	b.n	80084ea <unpack_type1+0xda>
        return -2;
 800853e:	f06f 0001 	mvn.w	r0, #1
 8008542:	e7d2      	b.n	80084ea <unpack_type1+0xda>
 8008544:	080557e4 	.word	0x080557e4
 8008548:	080557c5 	.word	0x080557c5
 800854c:	080557c9 	.word	0x080557c9
 8008550:	080557cb 	.word	0x080557cb
 8008554:	200009d4 	.word	0x200009d4

08008558 <unpack_text>:


int unpack_text(const uint8_t *a71, char *text) {
 8008558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800855a:	b089      	sub	sp, #36	@ 0x24
 800855c:	460c      	mov	r4, r1
    // TODO: test
    uint8_t b71[9];

    uint8_t carry = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	1e41      	subs	r1, r0, #1
int unpack_text(const uint8_t *a71, char *text) {
 8008562:	ad01      	add	r5, sp, #4
 8008564:	3008      	adds	r0, #8
    for (int i = 0; i < 9; ++i) {
        b71[i] = carry | (a71[i] >> 1);
 8008566:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800856a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
    for (int i = 0; i < 9; ++i) {
 800856e:	4288      	cmp	r0, r1
        carry = (a71[i] & 1) ? 0x80 : 0;
 8008570:	ea4f 12c2 	mov.w	r2, r2, lsl #7
        b71[i] = carry | (a71[i] >> 1);
 8008574:	f805 3b01 	strb.w	r3, [r5], #1
        carry = (a71[i] & 1) ? 0x80 : 0;
 8008578:	b2d3      	uxtb	r3, r2
    for (int i = 0; i < 9; ++i) {
 800857a:	d1f4      	bne.n	8008566 <unpack_text+0xe>
    }

	char c14[14];
	c14[13] = 0;
 800857c:	2300      	movs	r3, #0
    for (int idx = 12; idx >= 0; --idx) {
 800857e:	250c      	movs	r5, #12
        // Divide the long integer in b71 by 42
        uint16_t rem = 0;
        for (int i = 0; i < 9; ++i) {
            rem = (rem << 8) | b71[i];
            b71[i] = rem / 42;
 8008580:	272a      	movs	r7, #42	@ 0x2a
            rem    = rem % 42;
        }
        c14[idx] = charn(rem, 0);
 8008582:	ae04      	add	r6, sp, #16
	c14[13] = 0;
 8008584:	f88d 301d 	strb.w	r3, [sp, #29]
        for (int i = 0; i < 9; ++i) {
 8008588:	2200      	movs	r2, #0
    uint8_t carry = 0;
 800858a:	a901      	add	r1, sp, #4
        uint16_t rem = 0;
 800858c:	4610      	mov	r0, r2
            rem = (rem << 8) | b71[i];
 800858e:	780b      	ldrb	r3, [r1, #0]
        for (int i = 0; i < 9; ++i) {
 8008590:	3201      	adds	r2, #1
            rem = (rem << 8) | b71[i];
 8008592:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
        for (int i = 0; i < 9; ++i) {
 8008596:	2a09      	cmp	r2, #9
            rem = (rem << 8) | b71[i];
 8008598:	b29b      	uxth	r3, r3
            b71[i] = rem / 42;
 800859a:	fbb3 f0f7 	udiv	r0, r3, r7
            rem    = rem % 42;
 800859e:	fb07 3310 	mls	r3, r7, r0, r3
            b71[i] = rem / 42;
 80085a2:	f801 0b01 	strb.w	r0, [r1], #1
            rem    = rem % 42;
 80085a6:	b298      	uxth	r0, r3
        for (int i = 0; i < 9; ++i) {
 80085a8:	d1f1      	bne.n	800858e <unpack_text+0x36>
        c14[idx] = charn(rem, 0);
 80085aa:	2100      	movs	r1, #0
 80085ac:	f7ff fe3a 	bl	8008224 <charn>
 80085b0:	5570      	strb	r0, [r6, r5]
    for (int idx = 12; idx >= 0; --idx) {
 80085b2:	3d01      	subs	r5, #1
 80085b4:	d2e8      	bcs.n	8008588 <unpack_text+0x30>
    }

	strcpy(text, trim(c14));
 80085b6:	4630      	mov	r0, r6
 80085b8:	f7ff fda9 	bl	800810e <trim>
 80085bc:	4601      	mov	r1, r0
 80085be:	4620      	mov	r0, r4
 80085c0:	f005 ffc1 	bl	800e546 <strcpy>
    return 0;       // Success
}
 80085c4:	2000      	movs	r0, #0
 80085c6:	b009      	add	sp, #36	@ 0x24
 80085c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085ca <unpack_telemetry>:


int unpack_telemetry(const uint8_t *a71, char *telemetry) {
 80085ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80085cc:	ac01      	add	r4, sp, #4
 80085ce:	1e42      	subs	r2, r0, #1
    uint8_t b71[9];

    // Shift bits in a71 right by 1
    uint8_t carry = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	3008      	adds	r0, #8
int unpack_telemetry(const uint8_t *a71, char *telemetry) {
 80085d4:	4626      	mov	r6, r4
    for (int i = 0; i < 9; ++i) {
        b71[i] = (carry << 7) | (a71[i] >> 1);
 80085d6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80085da:	01db      	lsls	r3, r3, #7
    for (int i = 0; i < 9; ++i) {
 80085dc:	4282      	cmp	r2, r0
        b71[i] = (carry << 7) | (a71[i] >> 1);
 80085de:	ea43 0355 	orr.w	r3, r3, r5, lsr #1
 80085e2:	f806 3b01 	strb.w	r3, [r6], #1
        carry = (a71[i] & 0x01);
 80085e6:	f005 0301 	and.w	r3, r5, #1
    for (int i = 0; i < 9; ++i) {
 80085ea:	d1f4      	bne.n	80085d6 <unpack_telemetry+0xc>
    }

    // Convert b71 to hexadecimal string
    for (int i = 0; i < 9; ++i) {
 80085ec:	2200      	movs	r2, #0
        uint8_t nibble1 = (b71[i] >> 4);
        uint8_t nibble2 = (b71[i] & 0x0F);
        char c1 = (nibble1 > 9) ? (nibble1 - 10 + 'A') : nibble1 + '0';
        char c2 = (nibble2 > 9) ? (nibble2 - 10 + 'A') : nibble2 + '0';
        telemetry[i * 2] = c1;
        telemetry[i * 2 + 1] = c2;
 80085ee:	1c4e      	adds	r6, r1, #1
        uint8_t nibble1 = (b71[i] >> 4);
 80085f0:	f814 5b01 	ldrb.w	r5, [r4], #1
        uint8_t nibble2 = (b71[i] & 0x0F);
 80085f4:	f005 030f 	and.w	r3, r5, #15
        uint8_t nibble1 = (b71[i] >> 4);
 80085f8:	0928      	lsrs	r0, r5, #4
        char c1 = (nibble1 > 9) ? (nibble1 - 10 + 'A') : nibble1 + '0';
 80085fa:	2d9f      	cmp	r5, #159	@ 0x9f
 80085fc:	bf8c      	ite	hi
 80085fe:	3037      	addhi	r0, #55	@ 0x37
 8008600:	3030      	addls	r0, #48	@ 0x30
        char c2 = (nibble2 > 9) ? (nibble2 - 10 + 'A') : nibble2 + '0';
 8008602:	2b09      	cmp	r3, #9
        telemetry[i * 2] = c1;
 8008604:	f801 0012 	strb.w	r0, [r1, r2, lsl #1]
        char c2 = (nibble2 > 9) ? (nibble2 - 10 + 'A') : nibble2 + '0';
 8008608:	bf8c      	ite	hi
 800860a:	3337      	addhi	r3, #55	@ 0x37
 800860c:	3330      	addls	r3, #48	@ 0x30
        telemetry[i * 2 + 1] = c2;
 800860e:	f806 3012 	strb.w	r3, [r6, r2, lsl #1]
    for (int i = 0; i < 9; ++i) {
 8008612:	3201      	adds	r2, #1
 8008614:	2a09      	cmp	r2, #9
 8008616:	d1eb      	bne.n	80085f0 <unpack_telemetry+0x26>
    }

    telemetry[18] = '\0';
 8008618:	2000      	movs	r0, #0
 800861a:	7488      	strb	r0, [r1, #18]
    return 0;
}
 800861c:	b004      	add	sp, #16
 800861e:	bd70      	pop	{r4, r5, r6, pc}

08008620 <unpack_nonstandard>:


//none standard for wsjt-x 2.0
//by KD8CEC
int unpack_nonstandard(const uint8_t *a77, char *field1, char *field2, char *field3)
{
 8008620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	461e      	mov	r6, r3
 8008626:	b08d      	sub	sp, #52	@ 0x34
	1050 format(b12,b58,b1,b2,b1)
*/
	uint32_t n12, iflip, nrpt, icq;
	uint64_t n58;
	n12 = (a77[0] << 4);   //11 ~4  : 8
	n12 |= (a77[1] >> 4);  //3~0 : 12
 8008628:	7843      	ldrb	r3, [r0, #1]
{
 800862a:	4688      	mov	r8, r1
 800862c:	9202      	str	r2, [sp, #8]
 800862e:	4607      	mov	r7, r0
	n12 = (a77[0] << 4);   //11 ~4  : 8
 8008630:	7801      	ldrb	r1, [r0, #0]
	n12 |= (a77[1] >> 4);  //3~0 : 12
 8008632:	091a      	lsrs	r2, r3, #4

	n58 = ((uint64_t)(a77[1] & 0x0F) << 54); //57 ~ 54 : 4
	n58 |= ((uint64_t)a77[2] << 46); //53 ~ 46 : 12
	n58 |= ((uint64_t)a77[3] << 38); //45 ~ 38 : 12
	n58 |= ((uint64_t)a77[4] << 30); //37 ~ 30 : 12
	n58 |= ((uint64_t)a77[5] << 22); //29 ~ 22 : 12
 8008634:	7944      	ldrb	r4, [r0, #5]
	n58 = ((uint64_t)(a77[1] & 0x0F) << 54); //57 ~ 54 : 4
 8008636:	059b      	lsls	r3, r3, #22
	n12 |= (a77[1] >> 4);  //3~0 : 12
 8008638:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
	n58 |= ((uint64_t)a77[3] << 38); //45 ~ 38 : 12
 800863c:	78c1      	ldrb	r1, [r0, #3]
	n58 |= ((uint64_t)a77[5] << 22); //29 ~ 22 : 12
 800863e:	05a4      	lsls	r4, r4, #22
	n58 |= ((uint64_t)a77[6] << 14); //21 ~ 14 : 12
	n58 |= ((uint64_t)a77[7] << 6);  //13 ~ 6 : 12
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 8008640:	7a05      	ldrb	r5, [r0, #8]
	n58 |= ((uint64_t)a77[3] << 38); //45 ~ 38 : 12
 8008642:	0189      	lsls	r1, r1, #6
	n12 |= (a77[1] >> 4);  //3~0 : 12
 8008644:	9200      	str	r2, [sp, #0]
	n58 |= ((uint64_t)a77[2] << 46); //53 ~ 46 : 12
 8008646:	7882      	ldrb	r2, [r0, #2]
	n58 = ((uint64_t)(a77[1] & 0x0F) << 54); //57 ~ 54 : 4
 8008648:	f003 7370 	and.w	r3, r3, #62914560	@ 0x3c00000

	iflip = (a77[8] >> 1) & 0x01;	//76543210
	nrpt  = ((a77[8] & 0x01) << 1);
	nrpt  |= (a77[9] >> 7);	//76543210
 800864c:	f897 b009 	ldrb.w	fp, [r7, #9]

	char c11[12];
	c11[11] = '\0';

    for (int i = 10; /* no condition */ ; --i) {
    	c11[i] = charn(n58 % 38, 5);
 8008650:	f10d 0914 	add.w	r9, sp, #20
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 8008654:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
	n58 |= ((uint64_t)a77[4] << 30); //37 ~ 30 : 12
 8008658:	7902      	ldrb	r2, [r0, #4]
	n58 |= ((uint64_t)a77[6] << 14); //21 ~ 14 : 12
 800865a:	7980      	ldrb	r0, [r0, #6]
 800865c:	f3cb 1a80 	ubfx	sl, fp, #6, #1
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 8008660:	ea44 7482 	orr.w	r4, r4, r2, lsl #30
 8008664:	ea41 0192 	orr.w	r1, r1, r2, lsr #2
 8008668:	ea44 3480 	orr.w	r4, r4, r0, lsl #14
	n58 |= ((uint64_t)a77[7] << 6);  //13 ~ 6 : 12
 800866c:	79f8      	ldrb	r0, [r7, #7]
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 800866e:	4319      	orrs	r1, r3
 8008670:	f3c5 0340 	ubfx	r3, r5, #1, #1
 8008674:	ea44 1480 	orr.w	r4, r4, r0, lsl #6
    for (int i = 10; /* no condition */ ; --i) {
 8008678:	270a      	movs	r7, #10
 800867a:	9301      	str	r3, [sp, #4]
	c11[11] = '\0';
 800867c:	2300      	movs	r3, #0
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 800867e:	ea44 0095 	orr.w	r0, r4, r5, lsr #2
	c11[11] = '\0';
 8008682:	f88d 301f 	strb.w	r3, [sp, #31]
    	c11[i] = charn(n58 % 38, 5);
 8008686:	2226      	movs	r2, #38	@ 0x26
 8008688:	2300      	movs	r3, #0
 800868a:	f7f8 fbdd 	bl	8000e48 <__aeabi_uldivmod>
 800868e:	9103      	str	r1, [sp, #12]
 8008690:	4604      	mov	r4, r0
 8008692:	2105      	movs	r1, #5
 8008694:	4610      	mov	r0, r2
 8008696:	f7ff fdc5 	bl	8008224 <charn>
 800869a:	f809 0007 	strb.w	r0, [r9, r7]
        if (i == 0) break;
 800869e:	b127      	cbz	r7, 80086aa <unpack_nonstandard+0x8a>
    	n58 /= 38;
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	4620      	mov	r0, r4
    for (int i = 10; /* no condition */ ; --i) {
 80086a4:	3f01      	subs	r7, #1
    	n58 /= 38;
 80086a6:	4619      	mov	r1, r3
    	c11[i] = charn(n58 % 38, 5);
 80086a8:	e7ed      	b.n	8008686 <unpack_nonstandard+0x66>
    }

	char call_3[15];
    // should replace with hash12(n12, call_3);
    // strcpy(call_3, "<...>");
    call_3[0] = '<';
 80086aa:	233c      	movs	r3, #60	@ 0x3c
    int_to_dd(call_3 + 1, n12, 4, true);
 80086ac:	2204      	movs	r2, #4
 80086ae:	9900      	ldr	r1, [sp, #0]
 80086b0:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
    call_3[0] = '<';
 80086b4:	f88d 3020 	strb.w	r3, [sp, #32]
    int_to_dd(call_3 + 1, n12, 4, true);
 80086b8:	4b20      	ldr	r3, [pc, #128]	@ (800873c <unpack_nonstandard+0x11c>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	f7ff fd8c 	bl	80081d8 <int_to_dd>
    call_3[5] = '>';
 80086c0:	233e      	movs	r3, #62	@ 0x3e
    call_3[6] = '\0';
 80086c2:	f88d 7026 	strb.w	r7, [sp, #38]	@ 0x26
    call_3[5] = '>';
 80086c6:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25

	char * call_1 = (iflip) ? c11 : call_3;
 80086ca:	9b01      	ldr	r3, [sp, #4]
 80086cc:	b30b      	cbz	r3, 8008712 <unpack_nonstandard+0xf2>
 80086ce:	4648      	mov	r0, r9
    char * call_2 = (iflip) ? call_3 : c11;
 80086d0:	f10d 0920 	add.w	r9, sp, #32
	//save_hash_call(c11_trimmed);

	if (icq == 0) {
 80086d4:	f1ba 0f00 	cmp.w	sl, #0
 80086d8:	d128      	bne.n	800872c <unpack_nonstandard+0x10c>
	nrpt  = ((a77[8] & 0x01) << 1);
 80086da:	006d      	lsls	r5, r5, #1
		strcpy(field1, trim(call_1));
 80086dc:	f7ff fd17 	bl	800810e <trim>
 80086e0:	4601      	mov	r1, r0
	nrpt  = ((a77[8] & 0x01) << 1);
 80086e2:	f005 0502 	and.w	r5, r5, #2
		strcpy(field1, trim(call_1));
 80086e6:	4640      	mov	r0, r8
 80086e8:	f005 ff2d 	bl	800e546 <strcpy>
	nrpt  |= (a77[9] >> 7);	//76543210
 80086ec:	ea45 15db 	orr.w	r5, r5, fp, lsr #7
		if (nrpt == 1)
 80086f0:	2d01      	cmp	r5, #1
 80086f2:	d110      	bne.n	8008716 <unpack_nonstandard+0xf6>
			strcpy(field3, "RRR");
 80086f4:	4912      	ldr	r1, [pc, #72]	@ (8008740 <unpack_nonstandard+0x120>)
		else if (nrpt == 2)
			strcpy(field3, "RR73");
 80086f6:	4630      	mov	r0, r6
 80086f8:	f005 ff25 	bl	800e546 <strcpy>
        }
	} else {
		strcpy(field1, "CQ");
        field3[0] = '\0';
	}
    strcpy(field2, trim(call_2));
 80086fc:	4648      	mov	r0, r9
 80086fe:	f7ff fd06 	bl	800810e <trim>
 8008702:	4601      	mov	r1, r0
 8008704:	9802      	ldr	r0, [sp, #8]
 8008706:	f005 ff1e 	bl	800e546 <strcpy>

    return 0;
}
 800870a:	2000      	movs	r0, #0
 800870c:	b00d      	add	sp, #52	@ 0x34
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char * call_1 = (iflip) ? c11 : call_3;
 8008712:	a808      	add	r0, sp, #32
 8008714:	e7de      	b.n	80086d4 <unpack_nonstandard+0xb4>
		else if (nrpt == 2)
 8008716:	2d02      	cmp	r5, #2
 8008718:	d101      	bne.n	800871e <unpack_nonstandard+0xfe>
			strcpy(field3, "RR73");
 800871a:	490a      	ldr	r1, [pc, #40]	@ (8008744 <unpack_nonstandard+0x124>)
 800871c:	e7eb      	b.n	80086f6 <unpack_nonstandard+0xd6>
		else if (nrpt == 3)
 800871e:	2d03      	cmp	r5, #3
 8008720:	d101      	bne.n	8008726 <unpack_nonstandard+0x106>
			strcpy(field3, "73");
 8008722:	4909      	ldr	r1, [pc, #36]	@ (8008748 <unpack_nonstandard+0x128>)
 8008724:	e7e7      	b.n	80086f6 <unpack_nonstandard+0xd6>
            field3[0] = '\0';
 8008726:	f886 a000 	strb.w	sl, [r6]
 800872a:	e7e7      	b.n	80086fc <unpack_nonstandard+0xdc>
		strcpy(field1, "CQ");
 800872c:	4907      	ldr	r1, [pc, #28]	@ (800874c <unpack_nonstandard+0x12c>)
 800872e:	4640      	mov	r0, r8
 8008730:	f005 ff09 	bl	800e546 <strcpy>
        field3[0] = '\0';
 8008734:	2300      	movs	r3, #0
 8008736:	7033      	strb	r3, [r6, #0]
 8008738:	e7e0      	b.n	80086fc <unpack_nonstandard+0xdc>
 800873a:	bf00      	nop
 800873c:	200009d4 	.word	0x200009d4
 8008740:	080557c5 	.word	0x080557c5
 8008744:	080557c9 	.word	0x080557c9
 8008748:	080557cb 	.word	0x080557cb
 800874c:	080557db 	.word	0x080557db

08008750 <unpack77_fields>:

int unpack77_fields(const uint8_t *a77, char *field1, char *field2, char *field3) {
 8008750:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t  n3, i3;

    // Extract n3 (bits 71..73) and i3 (bits 74..76)
    n3 = ((a77[8] << 2) & 0x04) | ((a77[9] >> 6) & 0x03);
 8008754:	f890 c009 	ldrb.w	ip, [r0, #9]
    i3 = (a77[9] >> 3) & 0x07;

    field1[0] = field2[0] = field3[0] = '\0';
 8008758:	f04f 0800 	mov.w	r8, #0
    n3 = ((a77[8] << 2) & 0x04) | ((a77[9] >> 6) & 0x03);
 800875c:	7a04      	ldrb	r4, [r0, #8]

    if (i3 == 0 && n3 == 0) {
 800875e:	f01c 0f38 	tst.w	ip, #56	@ 0x38
    field1[0] = field2[0] = field3[0] = '\0';
 8008762:	f883 8000 	strb.w	r8, [r3]
    i3 = (a77[9] >> 3) & 0x07;
 8008766:	f3cc 0ec2 	ubfx	lr, ip, #3, #3
    field1[0] = field2[0] = field3[0] = '\0';
 800876a:	f882 8000 	strb.w	r8, [r2]
 800876e:	f881 8000 	strb.w	r8, [r1]
    if (i3 == 0 && n3 == 0) {
 8008772:	d111      	bne.n	8008798 <unpack77_fields+0x48>
    n3 = ((a77[8] << 2) & 0x04) | ((a77[9] >> 6) & 0x03);
 8008774:	00a3      	lsls	r3, r4, #2
 8008776:	f003 0304 	and.w	r3, r3, #4
    if (i3 == 0 && n3 == 0) {
 800877a:	ea53 139c 	orrs.w	r3, r3, ip, lsr #6
 800877e:	d104      	bne.n	800878a <unpack77_fields+0x3a>
    //     // Type 5: TU; W9XYZ K1ABC R-09 FN             1 28 28 1 7 9       74   WWROF contest
    // }

    // unknown type, should never get here
    return -1;
}
 8008780:	b002      	add	sp, #8
 8008782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return unpack_text(a77, field1);
 8008786:	f7ff bee7 	b.w	8008558 <unpack_text>
    else if (i3 == 0 && n3 == 5) {
 800878a:	2b05      	cmp	r3, #5
 800878c:	d119      	bne.n	80087c2 <unpack77_fields+0x72>
}
 800878e:	b002      	add	sp, #8
 8008790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return unpack_telemetry(a77, field1);
 8008794:	f7ff bf19 	b.w	80085ca <unpack_telemetry>
    else if (i3 == 1 || i3 == 2) {
 8008798:	f10e 34ff 	add.w	r4, lr, #4294967295
 800879c:	2c01      	cmp	r4, #1
 800879e:	d808      	bhi.n	80087b2 <unpack77_fields+0x62>
        return unpack_type1(a77, i3, field1, field2, field3);
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	4613      	mov	r3, r2
 80087a4:	460a      	mov	r2, r1
 80087a6:	4671      	mov	r1, lr
 80087a8:	f7ff fe32 	bl	8008410 <unpack_type1>
}
 80087ac:	b002      	add	sp, #8
 80087ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (i3 == 4) {
 80087b2:	f1be 0f04 	cmp.w	lr, #4
 80087b6:	d104      	bne.n	80087c2 <unpack77_fields+0x72>
}
 80087b8:	b002      	add	sp, #8
 80087ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	    return unpack_nonstandard(a77, field1, field2, field3);
 80087be:	f7ff bf2f 	b.w	8008620 <unpack_nonstandard>
    return -1;
 80087c2:	f04f 30ff 	mov.w	r0, #4294967295
 80087c6:	e7f1      	b.n	80087ac <unpack77_fields+0x5c>

080087c8 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80087c8:	4b03      	ldr	r3, [pc, #12]	@ (80087d8 <disk_status+0x10>)
 80087ca:	181a      	adds	r2, r3, r0
 80087cc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	7a10      	ldrb	r0, [r2, #8]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	4718      	bx	r3
 80087d8:	200018f0 	.word	0x200018f0

080087dc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 80087dc:	4b06      	ldr	r3, [pc, #24]	@ (80087f8 <disk_initialize+0x1c>)
 80087de:	5c1a      	ldrb	r2, [r3, r0]
 80087e0:	b942      	cbnz	r2, 80087f4 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 80087e2:	2201      	movs	r2, #1
 80087e4:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80087e6:	181a      	adds	r2, r3, r0
 80087e8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80087ec:	7a10      	ldrb	r0, [r2, #8]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4718      	bx	r3
  }
  return stat;
}
 80087f4:	2000      	movs	r0, #0
 80087f6:	4770      	bx	lr
 80087f8:	200018f0 	.word	0x200018f0

080087fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80087fc:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80087fe:	4c05      	ldr	r4, [pc, #20]	@ (8008814 <disk_read+0x18>)
 8008800:	1825      	adds	r5, r4, r0
 8008802:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008806:	6860      	ldr	r0, [r4, #4]
 8008808:	6884      	ldr	r4, [r0, #8]
 800880a:	7a28      	ldrb	r0, [r5, #8]
 800880c:	46a4      	mov	ip, r4
  return res;
}
 800880e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008810:	4760      	bx	ip
 8008812:	bf00      	nop
 8008814:	200018f0 	.word	0x200018f0

08008818 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008818:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800881a:	4c05      	ldr	r4, [pc, #20]	@ (8008830 <disk_write+0x18>)
 800881c:	1825      	adds	r5, r4, r0
 800881e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008822:	6860      	ldr	r0, [r4, #4]
 8008824:	68c4      	ldr	r4, [r0, #12]
 8008826:	7a28      	ldrb	r0, [r5, #8]
 8008828:	46a4      	mov	ip, r4
  return res;
}
 800882a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800882c:	4760      	bx	ip
 800882e:	bf00      	nop
 8008830:	200018f0 	.word	0x200018f0

08008834 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008834:	4b05      	ldr	r3, [pc, #20]	@ (800884c <disk_ioctl+0x18>)
{
 8008836:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008838:	181c      	adds	r4, r3, r0
 800883a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	7a20      	ldrb	r0, [r4, #8]
 8008842:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8008844:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008848:	4718      	bx	r3
 800884a:	bf00      	nop
 800884c:	200018f0 	.word	0x200018f0

08008850 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8008850:	2000      	movs	r0, #0
 8008852:	4770      	bx	lr

08008854 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008854:	3801      	subs	r0, #1
 8008856:	440a      	add	r2, r1
		*d++ = *s++;
 8008858:	f811 3b01 	ldrb.w	r3, [r1], #1
	while (cnt--)
 800885c:	4291      	cmp	r1, r2
		*d++ = *s++;
 800885e:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
 8008862:	d1f9      	bne.n	8008858 <mem_cpy+0x4>
}
 8008864:	4770      	bx	lr

08008866 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8008866:	4402      	add	r2, r0
		*d++ = (BYTE)val;
 8008868:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
 800886c:	4290      	cmp	r0, r2
 800886e:	d1fb      	bne.n	8008868 <mem_set+0x2>
}
 8008870:	4770      	bx	lr
	...

08008874 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8008874:	4b1e      	ldr	r3, [pc, #120]	@ (80088f0 <chk_lock+0x7c>)
{
 8008876:	4602      	mov	r2, r0
		if (Files[i].fs) {	/* Existing entry */
 8008878:	6818      	ldr	r0, [r3, #0]
{
 800887a:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 800887c:	b178      	cbz	r0, 800889e <chk_lock+0x2a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800887e:	f8d2 4200 	ldr.w	r4, [r2, #512]	@ 0x200
 8008882:	42a0      	cmp	r0, r4
 8008884:	d109      	bne.n	800889a <chk_lock+0x26>
 8008886:	685c      	ldr	r4, [r3, #4]
 8008888:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800888c:	4284      	cmp	r4, r0
 800888e:	d104      	bne.n	800889a <chk_lock+0x26>
				Files[i].clu == dp->sclust &&
 8008890:	891c      	ldrh	r4, [r3, #8]
 8008892:	f8b2 0206 	ldrh.w	r0, [r2, #518]	@ 0x206
 8008896:	4284      	cmp	r4, r0
 8008898:	d015      	beq.n	80088c6 <chk_lock+0x52>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800889a:	2400      	movs	r4, #0
 800889c:	e000      	b.n	80088a0 <chk_lock+0x2c>
				Files[i].idx == dp->index) break;
		} else {			/* Blank entry */
			be = 1;
 800889e:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 80088a0:	68d8      	ldr	r0, [r3, #12]
 80088a2:	b1d0      	cbz	r0, 80088da <chk_lock+0x66>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80088a4:	f8d2 5200 	ldr.w	r5, [r2, #512]	@ 0x200
 80088a8:	42a8      	cmp	r0, r5
 80088aa:	d109      	bne.n	80088c0 <chk_lock+0x4c>
 80088ac:	691d      	ldr	r5, [r3, #16]
 80088ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80088b2:	4285      	cmp	r5, r0
 80088b4:	d104      	bne.n	80088c0 <chk_lock+0x4c>
				Files[i].clu == dp->sclust &&
 80088b6:	8a98      	ldrh	r0, [r3, #20]
 80088b8:	f8b2 2206 	ldrh.w	r2, [r2, #518]	@ 0x206
 80088bc:	4290      	cmp	r0, r2
 80088be:	d006      	beq.n	80088ce <chk_lock+0x5a>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80088c0:	b13c      	cbz	r4, 80088d2 <chk_lock+0x5e>
 80088c2:	2000      	movs	r0, #0
 80088c4:	e009      	b.n	80088da <chk_lock+0x66>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088c6:	2200      	movs	r2, #0

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80088c8:	b141      	cbz	r1, 80088dc <chk_lock+0x68>
 80088ca:	2010      	movs	r0, #16
 80088cc:	e005      	b.n	80088da <chk_lock+0x66>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088ce:	2201      	movs	r2, #1
 80088d0:	e7fa      	b.n	80088c8 <chk_lock+0x54>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80088d2:	2902      	cmp	r1, #2
 80088d4:	bf14      	ite	ne
 80088d6:	2012      	movne	r0, #18
 80088d8:	2000      	moveq	r0, #0
}
 80088da:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80088dc:	210c      	movs	r1, #12
 80088de:	fb01 3302 	mla	r3, r1, r2, r3
 80088e2:	8958      	ldrh	r0, [r3, #10]
 80088e4:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80088e8:	4258      	negs	r0, r3
 80088ea:	4158      	adcs	r0, r3
 80088ec:	0100      	lsls	r0, r0, #4
 80088ee:	e7f4      	b.n	80088da <chk_lock+0x66>
 80088f0:	200018d0 	.word	0x200018d0

080088f4 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80088f4:	4a24      	ldr	r2, [pc, #144]	@ (8008988 <inc_lock+0x94>)
{
 80088f6:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->fs &&
 80088f8:	6813      	ldr	r3, [r2, #0]
 80088fa:	f8d0 6200 	ldr.w	r6, [r0, #512]	@ 0x200
 80088fe:	429e      	cmp	r6, r3
 8008900:	d109      	bne.n	8008916 <inc_lock+0x22>
 8008902:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
 8008906:	6854      	ldr	r4, [r2, #4]
 8008908:	42a5      	cmp	r5, r4
 800890a:	d104      	bne.n	8008916 <inc_lock+0x22>
			Files[i].clu == dp->sclust &&
 800890c:	8915      	ldrh	r5, [r2, #8]
 800890e:	f8b0 4206 	ldrh.w	r4, [r0, #518]	@ 0x206
 8008912:	42a5      	cmp	r5, r4
 8008914:	d01e      	beq.n	8008954 <inc_lock+0x60>
		if (Files[i].fs == dp->fs &&
 8008916:	68d4      	ldr	r4, [r2, #12]
 8008918:	42b4      	cmp	r4, r6
 800891a:	d11d      	bne.n	8008958 <inc_lock+0x64>
 800891c:	6917      	ldr	r7, [r2, #16]
 800891e:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
 8008922:	42af      	cmp	r7, r5
 8008924:	d118      	bne.n	8008958 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 8008926:	8a97      	ldrh	r7, [r2, #20]
 8008928:	f8b0 5206 	ldrh.w	r5, [r0, #518]	@ 0x206
 800892c:	42af      	cmp	r7, r5
 800892e:	d113      	bne.n	8008958 <inc_lock+0x64>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008930:	2301      	movs	r3, #1
		Files[i].clu = dp->sclust;
		Files[i].idx = dp->index;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008932:	200c      	movs	r0, #12
 8008934:	fb00 2003 	mla	r0, r0, r3, r2
 8008938:	8940      	ldrh	r0, [r0, #10]
 800893a:	bb09      	cbnz	r1, 8008980 <inc_lock+0x8c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800893c:	210c      	movs	r1, #12
 800893e:	fb01 2103 	mla	r1, r1, r3, r2
 8008942:	8949      	ldrh	r1, [r1, #10]
 8008944:	3101      	adds	r1, #1
 8008946:	b289      	uxth	r1, r1
 8008948:	200c      	movs	r0, #12
 800894a:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 800894e:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008950:	8151      	strh	r1, [r2, #10]
}
 8008952:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008954:	2300      	movs	r3, #0
 8008956:	e7ec      	b.n	8008932 <inc_lock+0x3e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008958:	b10b      	cbz	r3, 800895e <inc_lock+0x6a>
 800895a:	b99c      	cbnz	r4, 8008984 <inc_lock+0x90>
 800895c:	2301      	movs	r3, #1
		Files[i].fs = dp->fs;
 800895e:	240c      	movs	r4, #12
 8008960:	435c      	muls	r4, r3
 8008962:	1915      	adds	r5, r2, r4
 8008964:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 8008966:	f8d0 4208 	ldr.w	r4, [r0, #520]	@ 0x208
		Files[i].idx = dp->index;
 800896a:	f8b0 0206 	ldrh.w	r0, [r0, #518]	@ 0x206
		Files[i].clu = dp->sclust;
 800896e:	606c      	str	r4, [r5, #4]
		Files[i].idx = dp->index;
 8008970:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8008972:	2000      	movs	r0, #0
 8008974:	8168      	strh	r0, [r5, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008976:	2900      	cmp	r1, #0
 8008978:	d0e0      	beq.n	800893c <inc_lock+0x48>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800897a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800897e:	e7e3      	b.n	8008948 <inc_lock+0x54>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008980:	2800      	cmp	r0, #0
 8008982:	d0fa      	beq.n	800897a <inc_lock+0x86>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008984:	2000      	movs	r0, #0
 8008986:	e7e4      	b.n	8008952 <inc_lock+0x5e>
 8008988:	200018d0 	.word	0x200018d0

0800898c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800898c:	3801      	subs	r0, #1
 800898e:	2801      	cmp	r0, #1
 8008990:	d817      	bhi.n	80089c2 <dec_lock+0x36>
		n = Files[i].ctr;
 8008992:	490d      	ldr	r1, [pc, #52]	@ (80089c8 <dec_lock+0x3c>)
 8008994:	220c      	movs	r2, #12
 8008996:	fb02 1200 	mla	r2, r2, r0, r1
 800899a:	8953      	ldrh	r3, [r2, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800899c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089a0:	d106      	bne.n	80089b0 <dec_lock+0x24>
		if (n) n--;					/* Decrement read mode open count */
		Files[i].ctr = n;
 80089a2:	2300      	movs	r3, #0
 80089a4:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80089a6:	230c      	movs	r3, #12
 80089a8:	4358      	muls	r0, r3
 80089aa:	2300      	movs	r3, #0
 80089ac:	500b      	str	r3, [r1, r0]
 80089ae:	e006      	b.n	80089be <dec_lock+0x32>
		if (n) n--;					/* Decrement read mode open count */
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f8      	beq.n	80089a6 <dec_lock+0x1a>
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 80089b8:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0f3      	beq.n	80089a6 <dec_lock+0x1a>
		res = FR_OK;
 80089be:	2000      	movs	r0, #0
 80089c0:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80089c2:	2002      	movs	r0, #2
	}
	return res;
}
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	200018d0 	.word	0x200018d0

080089cc <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 80089cc:	4b05      	ldr	r3, [pc, #20]	@ (80089e4 <clear_lock+0x18>)
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	4290      	cmp	r0, r2
 80089d2:	bf04      	itt	eq
 80089d4:	2200      	moveq	r2, #0
 80089d6:	601a      	streq	r2, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	4290      	cmp	r0, r2
 80089dc:	bf04      	itt	eq
 80089de:	2200      	moveq	r2, #0
 80089e0:	60da      	streq	r2, [r3, #12]
	}
}
 80089e2:	4770      	bx	lr
 80089e4:	200018d0 	.word	0x200018d0

080089e8 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80089e8:	f8d0 2200 	ldr.w	r2, [r0, #512]	@ 0x200
 80089ec:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089ee:	f8d0 3224 	ldr.w	r3, [r0, #548]	@ 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80089f2:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089f6:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80089f8:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80089fc:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 80089fe:	b130      	cbz	r0, 8008a0e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008a00:	4281      	cmp	r1, r0
 8008a02:	d302      	bcc.n	8008a0a <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a04:	1a09      	subs	r1, r1, r0
 8008a06:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a08:	e7f8      	b.n	80089fc <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a0a:	6858      	ldr	r0, [r3, #4]
 8008a0c:	4408      	add	r0, r1
}
 8008a0e:	4770      	bx	lr

08008a10 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008a10:	4603      	mov	r3, r0
 8008a12:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8008a16:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8008a18:	01c2      	lsls	r2, r0, #7
 8008a1a:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
 8008a1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a22:	fa50 f282 	uxtab	r2, r0, r2
 8008a26:	428b      	cmp	r3, r1
 8008a28:	b2d0      	uxtb	r0, r2
 8008a2a:	d1f5      	bne.n	8008a18 <sum_sfn+0x8>
	return sum;
}
 8008a2c:	4770      	bx	lr

08008a2e <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008a2e:	6803      	ldr	r3, [r0, #0]
{
 8008a30:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8008a32:	b153      	cbz	r3, 8008a4a <get_ldnumber+0x1c>
 8008a34:	4619      	mov	r1, r3
 8008a36:	460a      	mov	r2, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008a38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a3c:	2c1f      	cmp	r4, #31
 8008a3e:	d90c      	bls.n	8008a5a <get_ldnumber+0x2c>
 8008a40:	2c3a      	cmp	r4, #58	@ 0x3a
 8008a42:	d1f8      	bne.n	8008a36 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008a44:	7819      	ldrb	r1, [r3, #0]
 8008a46:	2930      	cmp	r1, #48	@ 0x30
 8008a48:	d002      	beq.n	8008a50 <get_ldnumber+0x22>
	int vol = -1;
 8008a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4e:	e005      	b.n	8008a5c <get_ldnumber+0x2e>
			i = *tp++ - '0'; 
 8008a50:	3301      	adds	r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d1f9      	bne.n	8008a4a <get_ldnumber+0x1c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
					*path = ++tt;
 8008a56:	3201      	adds	r2, #1
 8008a58:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 8008a5a:	2000      	movs	r0, #0
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8008a5c:	bd10      	pop	{r4, pc}

08008a5e <sync_window>:
{
 8008a5e:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a60:	f890 3204 	ldrb.w	r3, [r0, #516]	@ 0x204
{
 8008a64:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a66:	b90b      	cbnz	r3, 8008a6c <sync_window+0xe>
	FRESULT res = FR_OK;
 8008a68:	2000      	movs	r0, #0
}
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
		wsect = fs->winsect;	/* Current sector number */
 8008a6c:	f8d0 522c 	ldr.w	r5, [r0, #556]	@ 0x22c
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8008a70:	4601      	mov	r1, r0
 8008a72:	2301      	movs	r3, #1
 8008a74:	f890 0201 	ldrb.w	r0, [r0, #513]	@ 0x201
 8008a78:	462a      	mov	r2, r5
 8008a7a:	f7ff fecd 	bl	8008818 <disk_write>
 8008a7e:	b9c0      	cbnz	r0, 8008ab2 <sync_window+0x54>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a80:	f8d4 3220 	ldr.w	r3, [r4, #544]	@ 0x220
 8008a84:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 8008a88:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 8008a8a:	f884 0204 	strb.w	r0, [r4, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d2ea      	bcs.n	8008a68 <sync_window+0xa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a92:	f894 6203 	ldrb.w	r6, [r4, #515]	@ 0x203
 8008a96:	2e01      	cmp	r6, #1
 8008a98:	d9e6      	bls.n	8008a68 <sync_window+0xa>
					wsect += fs->fsize;
 8008a9a:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	f894 0201 	ldrb.w	r0, [r4, #513]	@ 0x201
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008aa4:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 8008aa6:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	462a      	mov	r2, r5
 8008aac:	f7ff feb4 	bl	8008818 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ab0:	e7f1      	b.n	8008a96 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	e7d9      	b.n	8008a6a <sync_window+0xc>

08008ab6 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008ab6:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008ab8:	b190      	cbz	r0, 8008ae0 <validate+0x2a>
 8008aba:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8008abe:	b17b      	cbz	r3, 8008ae0 <validate+0x2a>
 8008ac0:	f893 2200 	ldrb.w	r2, [r3, #512]	@ 0x200
 8008ac4:	b162      	cbz	r2, 8008ae0 <validate+0x2a>
 8008ac6:	f8b3 1206 	ldrh.w	r1, [r3, #518]	@ 0x206
 8008aca:	f8b0 2204 	ldrh.w	r2, [r0, #516]	@ 0x204
 8008ace:	4291      	cmp	r1, r2
 8008ad0:	d106      	bne.n	8008ae0 <validate+0x2a>
 8008ad2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8008ad6:	f7ff fe77 	bl	80087c8 <disk_status>
 8008ada:	f010 0001 	ands.w	r0, r0, #1
 8008ade:	d000      	beq.n	8008ae2 <validate+0x2c>
		return FR_INVALID_OBJECT;
 8008ae0:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8008ae2:	bd08      	pop	{r3, pc}

08008ae4 <move_window>:
{
 8008ae4:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ae6:	f8d0 322c 	ldr.w	r3, [r0, #556]	@ 0x22c
{
 8008aea:	4605      	mov	r5, r0
 8008aec:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008aee:	428b      	cmp	r3, r1
 8008af0:	d011      	beq.n	8008b16 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8008af2:	f7ff ffb4 	bl	8008a5e <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008af6:	b968      	cbnz	r0, 8008b14 <move_window+0x30>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008af8:	4622      	mov	r2, r4
 8008afa:	2301      	movs	r3, #1
 8008afc:	4629      	mov	r1, r5
 8008afe:	f895 0201 	ldrb.w	r0, [r5, #513]	@ 0x201
 8008b02:	f7ff fe7b 	bl	80087fc <disk_read>
				res = FR_DISK_ERR;
 8008b06:	2800      	cmp	r0, #0
 8008b08:	bf1c      	itt	ne
 8008b0a:	f04f 34ff 	movne.w	r4, #4294967295
 8008b0e:	2001      	movne	r0, #1
			fs->winsect = sector;
 8008b10:	f8c5 422c 	str.w	r4, [r5, #556]	@ 0x22c
}
 8008b14:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8008b16:	2000      	movs	r0, #0
 8008b18:	e7fc      	b.n	8008b14 <move_window+0x30>
	...

08008b1c <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008b1c:	2300      	movs	r3, #0
{
 8008b1e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008b20:	f880 3204 	strb.w	r3, [r0, #516]	@ 0x204
 8008b24:	f04f 33ff 	mov.w	r3, #4294967295
{
 8008b28:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008b2a:	f8c0 322c 	str.w	r3, [r0, #556]	@ 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008b2e:	f7ff ffd9 	bl	8008ae4 <move_window>
 8008b32:	b9a0      	cbnz	r0, 8008b5e <check_fs+0x42>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008b34:	f8b4 21fe 	ldrh.w	r2, [r4, #510]	@ 0x1fe
 8008b38:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d110      	bne.n	8008b62 <check_fs+0x46>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008b40:	f8d4 3036 	ldr.w	r3, [r4, #54]	@ 0x36
 8008b44:	4a08      	ldr	r2, [pc, #32]	@ (8008b68 <check_fs+0x4c>)
 8008b46:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d006      	beq.n	8008b5c <check_fs+0x40>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008b4e:	f8d4 0052 	ldr.w	r0, [r4, #82]	@ 0x52
 8008b52:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8008b56:	1a80      	subs	r0, r0, r2
 8008b58:	bf18      	it	ne
 8008b5a:	2001      	movne	r0, #1
}
 8008b5c:	bd10      	pop	{r4, pc}
		return 3;
 8008b5e:	2003      	movs	r0, #3
 8008b60:	e7fc      	b.n	8008b5c <check_fs+0x40>
		return 2;
 8008b62:	2002      	movs	r0, #2
 8008b64:	e7fa      	b.n	8008b5c <check_fs+0x40>
 8008b66:	bf00      	nop
 8008b68:	00544146 	.word	0x00544146

08008b6c <find_volume>:
{
 8008b6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8008b70:	2300      	movs	r3, #0
{
 8008b72:	4680      	mov	r8, r0
 8008b74:	4617      	mov	r7, r2
	*rfs = 0;
 8008b76:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
 8008b78:	4608      	mov	r0, r1
 8008b7a:	f7ff ff58 	bl	8008a2e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008b7e:	1e05      	subs	r5, r0, #0
 8008b80:	f2c0 8105 	blt.w	8008d8e <find_volume+0x222>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008b84:	4e85      	ldr	r6, [pc, #532]	@ (8008d9c <find_volume+0x230>)
 8008b86:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8008b8a:	699c      	ldr	r4, [r3, #24]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008b8c:	2c00      	cmp	r4, #0
 8008b8e:	f000 8100 	beq.w	8008d92 <find_volume+0x226>
	*rfs = fs;							/* Return pointer to the file system object */
 8008b92:	f8c8 4000 	str.w	r4, [r8]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008b96:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8008b9a:	b173      	cbz	r3, 8008bba <find_volume+0x4e>
		stat = disk_status(fs->drv);
 8008b9c:	f894 0201 	ldrb.w	r0, [r4, #513]	@ 0x201
 8008ba0:	f7ff fe12 	bl	80087c8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008ba4:	07c3      	lsls	r3, r0, #31
 8008ba6:	d408      	bmi.n	8008bba <find_volume+0x4e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008ba8:	b10f      	cbz	r7, 8008bae <find_volume+0x42>
 8008baa:	0741      	lsls	r1, r0, #29
 8008bac:	d403      	bmi.n	8008bb6 <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 8008bae:	2000      	movs	r0, #0
}
 8008bb0:	b004      	add	sp, #16
 8008bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_WRITE_PROTECTED;
 8008bb6:	200a      	movs	r0, #10
 8008bb8:	e7fa      	b.n	8008bb0 <find_volume+0x44>
	fs->fs_type = 0;					/* Clear the file system object */
 8008bba:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008bbc:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 8008bbe:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008bc2:	f884 0201 	strb.w	r0, [r4, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008bc6:	f7ff fe09 	bl	80087dc <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008bca:	07c2      	lsls	r2, r0, #31
 8008bcc:	f100 80e3 	bmi.w	8008d96 <find_volume+0x22a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008bd0:	b10f      	cbz	r7, 8008bd6 <find_volume+0x6a>
 8008bd2:	0743      	lsls	r3, r0, #29
 8008bd4:	d4ef      	bmi.n	8008bb6 <find_volume+0x4a>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f7ff ff9f 	bl	8008b1c <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008bde:	2801      	cmp	r0, #1
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008be0:	4605      	mov	r5, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008be2:	f040 80bb 	bne.w	8008d5c <find_volume+0x1f0>
 8008be6:	46e8      	mov	r8, sp
 8008be8:	f504 73df 	add.w	r3, r4, #446	@ 0x1be
 8008bec:	f504 70ff 	add.w	r0, r4, #510	@ 0x1fe
 8008bf0:	4641      	mov	r1, r8
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008bf2:	791a      	ldrb	r2, [r3, #4]
 8008bf4:	b102      	cbz	r2, 8008bf8 <find_volume+0x8c>
 8008bf6:	689a      	ldr	r2, [r3, #8]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008bf8:	3310      	adds	r3, #16
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008bfa:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008bfe:	4298      	cmp	r0, r3
 8008c00:	d1f7      	bne.n	8008bf2 <find_volume+0x86>
 8008c02:	2700      	movs	r7, #0
			bsect = br[i];
 8008c04:	f858 5b04 	ldr.w	r5, [r8], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008c08:	2d00      	cmp	r5, #0
 8008c0a:	f000 809e 	beq.w	8008d4a <find_volume+0x1de>
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4620      	mov	r0, r4
 8008c12:	f7ff ff83 	bl	8008b1c <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f040 8098 	bne.w	8008d4c <find_volume+0x1e0>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008c1c:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 8008c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c24:	f040 809f 	bne.w	8008d66 <find_volume+0x1fa>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008c28:	8ae0      	ldrh	r0, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008c2a:	b900      	cbnz	r0, 8008c2e <find_volume+0xc2>
 8008c2c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008c2e:	f894 c010 	ldrb.w	ip, [r4, #16]
	fs->fsize = fasize;
 8008c32:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008c36:	f10c 33ff 	add.w	r3, ip, #4294967295
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008c3a:	f884 c203 	strb.w	ip, [r4, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	f200 8091 	bhi.w	8008d66 <find_volume+0x1fa>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008c44:	7b67      	ldrb	r7, [r4, #13]
 8008c46:	f884 7202 	strb.w	r7, [r4, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008c4a:	2f00      	cmp	r7, #0
 8008c4c:	f000 808b 	beq.w	8008d66 <find_volume+0x1fa>
 8008c50:	1e7b      	subs	r3, r7, #1
 8008c52:	423b      	tst	r3, r7
 8008c54:	f040 8087 	bne.w	8008d66 <find_volume+0x1fa>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c58:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008c5c:	f01e 0f0f 	tst.w	lr, #15
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c60:	f8a4 e208 	strh.w	lr, [r4, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008c64:	d17f      	bne.n	8008d66 <find_volume+0x1fa>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008c66:	f8b4 3013 	ldrh.w	r3, [r4, #19]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008c6a:	b903      	cbnz	r3, 8008c6e <find_volume+0x102>
 8008c6c:	6a23      	ldr	r3, [r4, #32]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008c6e:	89e2      	ldrh	r2, [r4, #14]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008c70:	2a00      	cmp	r2, #0
 8008c72:	d078      	beq.n	8008d66 <find_volume+0x1fa>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008c74:	fb00 fc0c 	mul.w	ip, r0, ip
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008c78:	eb02 111e 	add.w	r1, r2, lr, lsr #4
 8008c7c:	4461      	add	r1, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008c7e:	428b      	cmp	r3, r1
 8008c80:	d371      	bcc.n	8008d66 <find_volume+0x1fa>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008c82:	1a5b      	subs	r3, r3, r1
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008c84:	42bb      	cmp	r3, r7
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008c86:	fbb3 f8f7 	udiv	r8, r3, r7
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008c8a:	d36c      	bcc.n	8008d66 <find_volume+0x1fa>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008c8c:	f640 73f5 	movw	r3, #4085	@ 0xff5
 8008c90:	4598      	cmp	r8, r3
 8008c92:	d96a      	bls.n	8008d6a <find_volume+0x1fe>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008c94:	f64f 77f5 	movw	r7, #65525	@ 0xfff5
 8008c98:	45b8      	cmp	r8, r7
 8008c9a:	bf94      	ite	ls
 8008c9c:	2702      	movls	r7, #2
 8008c9e:	2703      	movhi	r7, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008ca0:	f108 0302 	add.w	r3, r8, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008ca4:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 8008ca6:	4429      	add	r1, r5
	if (fmt == FS_FAT32) {
 8008ca8:	2f03      	cmp	r7, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008caa:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8008cae:	f8c4 521c 	str.w	r5, [r4, #540]	@ 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008cb2:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8008cb6:	f8c4 1228 	str.w	r1, [r4, #552]	@ 0x228
	if (fmt == FS_FAT32) {
 8008cba:	d158      	bne.n	8008d6e <find_volume+0x202>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008cbc:	f1be 0f00 	cmp.w	lr, #0
 8008cc0:	d151      	bne.n	8008d66 <find_volume+0x1fa>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008cc2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008cc4:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008cc6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008cca:	f8c4 1224 	str.w	r1, [r4, #548]	@ 0x224
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008cce:	ebb0 2f53 	cmp.w	r0, r3, lsr #9
 8008cd2:	d348      	bcc.n	8008d66 <find_volume+0x1fa>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008cd4:	f04f 33ff 	mov.w	r3, #4294967295
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008cd8:	2f03      	cmp	r7, #3
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008cda:	e9c4 3383 	strd	r3, r3, [r4, #524]	@ 0x20c
	fs->fsi_flag = 0x80;
 8008cde:	f04f 0380 	mov.w	r3, #128	@ 0x80
 8008ce2:	f884 3205 	strb.w	r3, [r4, #517]	@ 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008ce6:	d124      	bne.n	8008d32 <find_volume+0x1c6>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008ce8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d121      	bne.n	8008d32 <find_volume+0x1c6>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008cee:	1c69      	adds	r1, r5, #1
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f7ff fef7 	bl	8008ae4 <move_window>
 8008cf6:	b9e0      	cbnz	r0, 8008d32 <find_volume+0x1c6>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008cf8:	f8b4 21fe 	ldrh.w	r2, [r4, #510]	@ 0x1fe
 8008cfc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
		fs->fsi_flag = 0;
 8008d00:	f884 0205 	strb.w	r0, [r4, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d114      	bne.n	8008d32 <find_volume+0x1c6>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008d08:	6822      	ldr	r2, [r4, #0]
 8008d0a:	4b25      	ldr	r3, [pc, #148]	@ (8008da0 <find_volume+0x234>)
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d110      	bne.n	8008d32 <find_volume+0x1c6>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008d10:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
 8008d14:	f8d4 21e4 	ldr.w	r2, [r4, #484]	@ 0x1e4
 8008d18:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8008d1c:	3320      	adds	r3, #32
 8008d1e:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008d20:	bf01      	itttt	eq
 8008d22:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	@ 0x1e8
 8008d26:	f8c4 3210 	streq.w	r3, [r4, #528]	@ 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008d2a:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	@ 0x1ec
 8008d2e:	f8c4 320c 	streq.w	r3, [r4, #524]	@ 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8008d32:	8bb3      	ldrh	r3, [r6, #28]
	clear_lock(fs);
 8008d34:	4620      	mov	r0, r4
	fs->fs_type = fmt;	/* FAT sub-type */
 8008d36:	f884 7200 	strb.w	r7, [r4, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	f8a4 3206 	strh.w	r3, [r4, #518]	@ 0x206
 8008d42:	83b3      	strh	r3, [r6, #28]
	clear_lock(fs);
 8008d44:	f7ff fe42 	bl	80089cc <clear_lock>
	return FR_OK;
 8008d48:	e731      	b.n	8008bae <find_volume+0x42>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008d4a:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008d4c:	3701      	adds	r7, #1
 8008d4e:	2f04      	cmp	r7, #4
 8008d50:	f47f af58 	bne.w	8008c04 <find_volume+0x98>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008d54:	2803      	cmp	r0, #3
 8008d56:	d106      	bne.n	8008d66 <find_volume+0x1fa>
 8008d58:	2001      	movs	r0, #1
 8008d5a:	e729      	b.n	8008bb0 <find_volume+0x44>
 8008d5c:	2803      	cmp	r0, #3
 8008d5e:	d0fb      	beq.n	8008d58 <find_volume+0x1ec>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008d60:	2800      	cmp	r0, #0
 8008d62:	f43f af5b 	beq.w	8008c1c <find_volume+0xb0>
 8008d66:	200d      	movs	r0, #13
 8008d68:	e722      	b.n	8008bb0 <find_volume+0x44>
	fmt = FS_FAT12;
 8008d6a:	2701      	movs	r7, #1
 8008d6c:	e798      	b.n	8008ca0 <find_volume+0x134>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008d6e:	f1be 0f00 	cmp.w	lr, #0
 8008d72:	d0f8      	beq.n	8008d66 <find_volume+0x1fa>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d74:	2f02      	cmp	r7, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008d76:	eb02 010c 	add.w	r1, r2, ip
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008d7a:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d7e:	bf1b      	ittet	ne
 8008d80:	18d2      	addne	r2, r2, r3
 8008d82:	f003 0301 	andne.w	r3, r3, #1
 8008d86:	4613      	moveq	r3, r2
 8008d88:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8008d8c:	e79b      	b.n	8008cc6 <find_volume+0x15a>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d8e:	200b      	movs	r0, #11
 8008d90:	e70e      	b.n	8008bb0 <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008d92:	200c      	movs	r0, #12
 8008d94:	e70c      	b.n	8008bb0 <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008d96:	2003      	movs	r0, #3
 8008d98:	e70a      	b.n	8008bb0 <find_volume+0x44>
 8008d9a:	bf00      	nop
 8008d9c:	200018d0 	.word	0x200018d0
 8008da0:	41615252 	.word	0x41615252

08008da4 <sync_fs>:
{
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008da8:	f7ff fe59 	bl	8008a5e <sync_window>
 8008dac:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8008dae:	bbb8      	cbnz	r0, 8008e20 <sync_fs+0x7c>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008db0:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d12a      	bne.n	8008e0e <sync_fs+0x6a>
 8008db8:	f894 3205 	ldrb.w	r3, [r4, #517]	@ 0x205
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d126      	bne.n	8008e0e <sync_fs+0x6a>
			mem_set(fs->win.d8, 0, SS(fs));
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f7ff fd4d 	bl	8008866 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008dcc:	f64a 2255 	movw	r2, #43605	@ 0xaa55
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	f894 0201 	ldrb.w	r0, [r4, #513]	@ 0x201
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008dd6:	f8a4 21fe 	strh.w	r2, [r4, #510]	@ 0x1fe
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008dda:	4a12      	ldr	r2, [pc, #72]	@ (8008e24 <sync_fs+0x80>)
 8008ddc:	6022      	str	r2, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008dde:	f102 52ff 	add.w	r2, r2, #534773760	@ 0x1fe00000
 8008de2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8008de6:	3220      	adds	r2, #32
 8008de8:	f8c4 21e4 	str.w	r2, [r4, #484]	@ 0x1e4
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008dec:	f8d4 2210 	ldr.w	r2, [r4, #528]	@ 0x210
 8008df0:	f8c4 21e8 	str.w	r2, [r4, #488]	@ 0x1e8
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008df4:	f8d4 220c 	ldr.w	r2, [r4, #524]	@ 0x20c
 8008df8:	f8c4 21ec 	str.w	r2, [r4, #492]	@ 0x1ec
			fs->winsect = fs->volbase + 1;
 8008dfc:	f8d4 221c 	ldr.w	r2, [r4, #540]	@ 0x21c
 8008e00:	3201      	adds	r2, #1
 8008e02:	f8c4 222c 	str.w	r2, [r4, #556]	@ 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008e06:	f7ff fd07 	bl	8008818 <disk_write>
			fs->fsi_flag = 0;
 8008e0a:	f884 5205 	strb.w	r5, [r4, #517]	@ 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f894 0201 	ldrb.w	r0, [r4, #513]	@ 0x201
 8008e14:	4611      	mov	r1, r2
 8008e16:	f7ff fd0d 	bl	8008834 <disk_ioctl>
 8008e1a:	3800      	subs	r0, #0
 8008e1c:	bf18      	it	ne
 8008e1e:	2001      	movne	r0, #1
}
 8008e20:	bd38      	pop	{r3, r4, r5, pc}
 8008e22:	bf00      	nop
 8008e24:	41615252 	.word	0x41615252

08008e28 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32)
 8008e28:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008e2a:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008e2c:	bf04      	itt	eq
 8008e2e:	8a8a      	ldrheq	r2, [r1, #20]
 8008e30:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	4770      	bx	lr

08008e38 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e38:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
	clst -= 2;
 8008e3c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e3e:	3b02      	subs	r3, #2
 8008e40:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8008e42:	bf83      	ittte	hi
 8008e44:	f890 3202 	ldrbhi.w	r3, [r0, #514]	@ 0x202
 8008e48:	f8d0 0228 	ldrhi.w	r0, [r0, #552]	@ 0x228
 8008e4c:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e50:	2000      	movls	r0, #0
}
 8008e52:	4770      	bx	lr

08008e54 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008e54:	2901      	cmp	r1, #1
{
 8008e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e58:	4606      	mov	r6, r0
 8008e5a:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008e5c:	d959      	bls.n	8008f12 <get_fat+0xbe>
 8008e5e:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8008e62:	428b      	cmp	r3, r1
 8008e64:	d955      	bls.n	8008f12 <get_fat+0xbe>
		switch (fs->fs_type) {
 8008e66:	f890 3200 	ldrb.w	r3, [r0, #512]	@ 0x200
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d027      	beq.n	8008ebe <get_fat+0x6a>
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d036      	beq.n	8008ee0 <get_fat+0x8c>
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d14d      	bne.n	8008f12 <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 8008e76:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e7a:	f8d0 1220 	ldr.w	r1, [r0, #544]	@ 0x220
 8008e7e:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8008e82:	f7ff fe2f 	bl	8008ae4 <move_window>
 8008e86:	b110      	cbz	r0, 8008e8e <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win.d8[bc++ % SS(fs)];
 8008e8e:	1c67      	adds	r7, r4, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e90:	f8d6 1220 	ldr.w	r1, [r6, #544]	@ 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 8008e94:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e98:	4630      	mov	r0, r6
 8008e9a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8008e9e:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ea0:	f7ff fe20 	bl	8008ae4 <move_window>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d1ef      	bne.n	8008e88 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8008ea8:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8008eac:	5df3      	ldrb	r3, [r6, r7]
 8008eae:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008eb2:	07eb      	lsls	r3, r5, #31
 8008eb4:	bf4c      	ite	mi
 8008eb6:	0900      	lsrmi	r0, r0, #4
 8008eb8:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8008ebc:	e7e6      	b.n	8008e8c <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ebe:	f8d0 1220 	ldr.w	r1, [r0, #544]	@ 0x220
 8008ec2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8008ec6:	f7ff fe0d 	bl	8008ae4 <move_window>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d1dc      	bne.n	8008e88 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008ece:	006d      	lsls	r5, r5, #1
 8008ed0:	f405 75ff 	and.w	r5, r5, #510	@ 0x1fe
			val = LD_WORD(p);
 8008ed4:	1973      	adds	r3, r6, r5
 8008ed6:	5d70      	ldrb	r0, [r6, r5]
 8008ed8:	785b      	ldrb	r3, [r3, #1]
 8008eda:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 8008ede:	e7d5      	b.n	8008e8c <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ee0:	f8d0 1220 	ldr.w	r1, [r0, #544]	@ 0x220
 8008ee4:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8008ee8:	f7ff fdfc 	bl	8008ae4 <move_window>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d1cb      	bne.n	8008e88 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008ef0:	00ad      	lsls	r5, r5, #2
 8008ef2:	f405 75fe 	and.w	r5, r5, #508	@ 0x1fc
 8008ef6:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8008ef8:	7898      	ldrb	r0, [r3, #2]
 8008efa:	78da      	ldrb	r2, [r3, #3]
 8008efc:	0400      	lsls	r0, r0, #16
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8008f04:	5d72      	ldrb	r2, [r6, r5]
 8008f06:	4310      	orrs	r0, r2
 8008f08:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008f0c:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8008f10:	e7bc      	b.n	8008e8c <get_fat+0x38>
		val = 1;	/* Internal error */
 8008f12:	2001      	movs	r0, #1
	return val;
 8008f14:	e7ba      	b.n	8008e8c <get_fat+0x38>

08008f16 <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8008f16:	f8d0 2208 	ldr.w	r2, [r0, #520]	@ 0x208
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008f1a:	2a01      	cmp	r2, #1
{
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	4604      	mov	r4, r0
 8008f20:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 8008f22:	f8a0 1206 	strh.w	r1, [r0, #518]	@ 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008f26:	d101      	bne.n	8008f2c <dir_sdi+0x16>
		return FR_INT_ERR;
 8008f28:	2002      	movs	r0, #2
}
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008f2c:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8008f30:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 8008f34:	4291      	cmp	r1, r2
 8008f36:	d9f7      	bls.n	8008f28 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8008f38:	b9f2      	cbnz	r2, 8008f78 <dir_sdi+0x62>
 8008f3a:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 8008f3e:	2903      	cmp	r1, #3
 8008f40:	d102      	bne.n	8008f48 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 8008f42:	f8d3 1224 	ldr.w	r1, [r3, #548]	@ 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008f46:	b9c1      	cbnz	r1, 8008f7a <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008f48:	f8b3 1208 	ldrh.w	r1, [r3, #520]	@ 0x208
 8008f4c:	42a9      	cmp	r1, r5
 8008f4e:	d9eb      	bls.n	8008f28 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8008f50:	f8d3 0224 	ldr.w	r0, [r3, #548]	@ 0x224
	dp->clust = clst;	/* Current cluster# */
 8008f54:	f8c4 220c 	str.w	r2, [r4, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d0e5      	beq.n	8008f28 <dir_sdi+0x12>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8008f5c:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8008f60:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8008f64:	f005 050f 	and.w	r5, r5, #15
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8008f68:	f8c4 0210 	str.w	r0, [r4, #528]	@ 0x210
	return FR_OK;
 8008f6c:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8008f6e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8008f72:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
	return FR_OK;
 8008f76:	e7d8      	b.n	8008f2a <dir_sdi+0x14>
 8008f78:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8008f7a:	f893 6202 	ldrb.w	r6, [r3, #514]	@ 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 8008f7e:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8008f80:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8008f82:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8008f84:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8008f88:	4611      	mov	r1, r2
		while (idx >= ic) {	/* Follow cluster chain */
 8008f8a:	d202      	bcs.n	8008f92 <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 8008f8c:	f7ff ff54 	bl	8008e38 <clust2sect>
 8008f90:	e7e0      	b.n	8008f54 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8008f92:	f7ff ff5f 	bl	8008e54 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f96:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8008f98:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f9a:	d009      	beq.n	8008fb0 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8008f9c:	2801      	cmp	r0, #1
 8008f9e:	d9c3      	bls.n	8008f28 <dir_sdi+0x12>
 8008fa0:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8008fa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008fa8:	4283      	cmp	r3, r0
 8008faa:	d9bd      	bls.n	8008f28 <dir_sdi+0x12>
			idx -= ic;
 8008fac:	1bad      	subs	r5, r5, r6
 8008fae:	e7e8      	b.n	8008f82 <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008fb0:	2001      	movs	r0, #1
 8008fb2:	e7ba      	b.n	8008f2a <dir_sdi+0x14>

08008fb4 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008fb4:	2901      	cmp	r1, #1
{
 8008fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fba:	4604      	mov	r4, r0
 8008fbc:	460e      	mov	r6, r1
 8008fbe:	4615      	mov	r5, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008fc0:	d970      	bls.n	80090a4 <put_fat+0xf0>
 8008fc2:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8008fc6:	428b      	cmp	r3, r1
 8008fc8:	d96c      	bls.n	80090a4 <put_fat+0xf0>
		switch (fs->fs_type) {
 8008fca:	f890 3200 	ldrb.w	r3, [r0, #512]	@ 0x200
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d03d      	beq.n	800904e <put_fat+0x9a>
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d04c      	beq.n	8009070 <put_fat+0xbc>
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d164      	bne.n	80090a4 <put_fat+0xf0>
			bc = (UINT)clst; bc += bc / 2;
 8008fda:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fde:	f8d0 1220 	ldr.w	r1, [r0, #544]	@ 0x220
 8008fe2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8008fe6:	f7ff fd7d 	bl	8008ae4 <move_window>
			if (res != FR_OK) break;
 8008fea:	bb30      	cbnz	r0, 800903a <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008fec:	f016 0601 	ands.w	r6, r6, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 8008ff0:	f107 0801 	add.w	r8, r7, #1
 8008ff4:	f3c7 0708 	ubfx	r7, r7, #0, #9
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008ff8:	4620      	mov	r0, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008ffa:	bf1b      	ittet	ne
 8008ffc:	012b      	lslne	r3, r5, #4
 8008ffe:	5de2      	ldrbne	r2, [r4, r7]
 8009000:	b2eb      	uxtbeq	r3, r5
 8009002:	f003 03f0 	andne.w	r3, r3, #240	@ 0xf0
 8009006:	bf1c      	itt	ne
 8009008:	f002 020f 	andne.w	r2, r2, #15
 800900c:	4313      	orrne	r3, r2
 800900e:	55e3      	strb	r3, [r4, r7]
			fs->wflag = 1;
 8009010:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009012:	f8d4 1220 	ldr.w	r1, [r4, #544]	@ 0x220
			fs->wflag = 1;
 8009016:	f884 3204 	strb.w	r3, [r4, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800901a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800901e:	f7ff fd61 	bl	8008ae4 <move_window>
			if (res != FR_OK) break;
 8009022:	b950      	cbnz	r0, 800903a <put_fat+0x86>
			p = &fs->win.d8[bc % SS(fs)];
 8009024:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009028:	b14e      	cbz	r6, 800903e <put_fat+0x8a>
 800902a:	f3c5 1507 	ubfx	r5, r5, #4, #8
 800902e:	f804 5008 	strb.w	r5, [r4, r8]
			fs->wflag = 1;
 8009032:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009034:	2000      	movs	r0, #0
			fs->wflag = 1;
 8009036:	f884 3204 	strb.w	r3, [r4, #516]	@ 0x204
}
 800903a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800903e:	f814 3008 	ldrb.w	r3, [r4, r8]
 8009042:	f3c5 2503 	ubfx	r5, r5, #8, #4
 8009046:	f023 030f 	bic.w	r3, r3, #15
 800904a:	431d      	orrs	r5, r3
 800904c:	e7ef      	b.n	800902e <put_fat+0x7a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800904e:	f8d0 1220 	ldr.w	r1, [r0, #544]	@ 0x220
 8009052:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8009056:	f7ff fd45 	bl	8008ae4 <move_window>
			if (res != FR_OK) break;
 800905a:	2800      	cmp	r0, #0
 800905c:	d1ed      	bne.n	800903a <put_fat+0x86>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800905e:	0076      	lsls	r6, r6, #1
 8009060:	f406 76ff 	and.w	r6, r6, #510	@ 0x1fe
			ST_WORD(p, (WORD)val);
 8009064:	55a5      	strb	r5, [r4, r6]
 8009066:	4426      	add	r6, r4
 8009068:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800906c:	7075      	strb	r5, [r6, #1]
			break;
 800906e:	e7e0      	b.n	8009032 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009070:	f8d0 1220 	ldr.w	r1, [r0, #544]	@ 0x220
 8009074:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
 8009078:	f7ff fd34 	bl	8008ae4 <move_window>
			if (res != FR_OK) break;
 800907c:	2800      	cmp	r0, #0
 800907e:	d1dc      	bne.n	800903a <put_fat+0x86>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009080:	00b6      	lsls	r6, r6, #2
 8009082:	f406 76fe 	and.w	r6, r6, #508	@ 0x1fc
 8009086:	19a2      	adds	r2, r4, r6
			val |= LD_DWORD(p) & 0xF0000000;
 8009088:	78d3      	ldrb	r3, [r2, #3]
 800908a:	061b      	lsls	r3, r3, #24
 800908c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009090:	432b      	orrs	r3, r5
			ST_DWORD(p, val);
 8009092:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009096:	55a3      	strb	r3, [r4, r6]
 8009098:	7051      	strb	r1, [r2, #1]
 800909a:	0c19      	lsrs	r1, r3, #16
 800909c:	0e1b      	lsrs	r3, r3, #24
 800909e:	7091      	strb	r1, [r2, #2]
 80090a0:	70d3      	strb	r3, [r2, #3]
			break;
 80090a2:	e7c6      	b.n	8009032 <put_fat+0x7e>
		res = FR_INT_ERR;
 80090a4:	2002      	movs	r0, #2
 80090a6:	e7c8      	b.n	800903a <put_fat+0x86>

080090a8 <create_chain>:
{
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 80090ac:	460f      	mov	r7, r1
 80090ae:	b989      	cbnz	r1, 80090d4 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 80090b0:	f8d0 620c 	ldr.w	r6, [r0, #524]	@ 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80090b4:	b1f6      	cbz	r6, 80090f4 <create_chain+0x4c>
 80090b6:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 80090ba:	42b3      	cmp	r3, r6
 80090bc:	bf98      	it	ls
 80090be:	2601      	movls	r6, #1
 80090c0:	4634      	mov	r4, r6
		ncl++;							/* Next cluster */
 80090c2:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80090c4:	f8d5 3214 	ldr.w	r3, [r5, #532]	@ 0x214
 80090c8:	42a3      	cmp	r3, r4
 80090ca:	d816      	bhi.n	80090fa <create_chain+0x52>
			if (ncl > scl) return 0;	/* No free cluster */
 80090cc:	2e01      	cmp	r6, #1
 80090ce:	d113      	bne.n	80090f8 <create_chain+0x50>
 80090d0:	2400      	movs	r4, #0
 80090d2:	e005      	b.n	80090e0 <create_chain+0x38>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80090d4:	f7ff febe 	bl	8008e54 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 80090d8:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80090da:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 80090dc:	d802      	bhi.n	80090e4 <create_chain+0x3c>
 80090de:	2401      	movs	r4, #1
}
 80090e0:	4620      	mov	r0, r4
 80090e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80090e4:	1c60      	adds	r0, r4, #1
 80090e6:	d035      	beq.n	8009154 <create_chain+0xac>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80090e8:	f8d5 3214 	ldr.w	r3, [r5, #532]	@ 0x214
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	d8f7      	bhi.n	80090e0 <create_chain+0x38>
 80090f0:	463e      	mov	r6, r7
 80090f2:	e7e5      	b.n	80090c0 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80090f4:	2601      	movs	r6, #1
 80090f6:	e7e3      	b.n	80090c0 <create_chain+0x18>
			ncl = 2;
 80090f8:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80090fa:	4621      	mov	r1, r4
 80090fc:	4628      	mov	r0, r5
 80090fe:	f7ff fea9 	bl	8008e54 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8009102:	b130      	cbz	r0, 8009112 <create_chain+0x6a>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8009104:	1c41      	adds	r1, r0, #1
 8009106:	d025      	beq.n	8009154 <create_chain+0xac>
 8009108:	2801      	cmp	r0, #1
 800910a:	d0e8      	beq.n	80090de <create_chain+0x36>
		if (ncl == scl) return 0;		/* No free cluster */
 800910c:	42b4      	cmp	r4, r6
 800910e:	d1d8      	bne.n	80090c2 <create_chain+0x1a>
 8009110:	e7de      	b.n	80090d0 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8009112:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8009116:	4621      	mov	r1, r4
 8009118:	4628      	mov	r0, r5
 800911a:	f7ff ff4b 	bl	8008fb4 <put_fat>
	if (res == FR_OK && clst != 0) {
 800911e:	b9b8      	cbnz	r0, 8009150 <create_chain+0xa8>
 8009120:	b97f      	cbnz	r7, 8009142 <create_chain+0x9a>
		if (fs->free_clust != 0xFFFFFFFF) {
 8009122:	f8d5 3210 	ldr.w	r3, [r5, #528]	@ 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 8009126:	f8c5 420c 	str.w	r4, [r5, #524]	@ 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	d0d8      	beq.n	80090e0 <create_chain+0x38>
			fs->free_clust--;
 800912e:	3b01      	subs	r3, #1
 8009130:	f8c5 3210 	str.w	r3, [r5, #528]	@ 0x210
			fs->fsi_flag |= 1;
 8009134:	f895 3205 	ldrb.w	r3, [r5, #517]	@ 0x205
 8009138:	f043 0301 	orr.w	r3, r3, #1
 800913c:	f885 3205 	strb.w	r3, [r5, #517]	@ 0x205
 8009140:	e7ce      	b.n	80090e0 <create_chain+0x38>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009142:	4622      	mov	r2, r4
 8009144:	4639      	mov	r1, r7
 8009146:	4628      	mov	r0, r5
 8009148:	f7ff ff34 	bl	8008fb4 <put_fat>
	if (res == FR_OK) {
 800914c:	2800      	cmp	r0, #0
 800914e:	d0e8      	beq.n	8009122 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009150:	2801      	cmp	r0, #1
 8009152:	d1c4      	bne.n	80090de <create_chain+0x36>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009154:	f04f 34ff 	mov.w	r4, #4294967295
 8009158:	e7c2      	b.n	80090e0 <create_chain+0x38>

0800915a <dir_next>:
{
 800915a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 800915e:	f8b0 6206 	ldrh.w	r6, [r0, #518]	@ 0x206
{
 8009162:	4604      	mov	r4, r0
 8009164:	4689      	mov	r9, r1
	i = dp->index + 1;
 8009166:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009168:	b2b3      	uxth	r3, r6
 800916a:	b913      	cbnz	r3, 8009172 <dir_next+0x18>
		return FR_NO_FILE;
 800916c:	2004      	movs	r0, #4
}
 800916e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009172:	f8d0 3210 	ldr.w	r3, [r0, #528]	@ 0x210
 8009176:	2b00      	cmp	r3, #0
 8009178:	d0f8      	beq.n	800916c <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800917a:	f016 080f 	ands.w	r8, r6, #15
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800917e:	f8d0 0200 	ldr.w	r0, [r0, #512]	@ 0x200
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8009182:	d109      	bne.n	8009198 <dir_next+0x3e>
		dp->sect++;					/* Next sector */
 8009184:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8009186:	f8d4 120c 	ldr.w	r1, [r4, #524]	@ 0x20c
		dp->sect++;					/* Next sector */
 800918a:	f8c4 3210 	str.w	r3, [r4, #528]	@ 0x210
		if (!dp->clust) {		/* Static table */
 800918e:	b969      	cbnz	r1, 80091ac <dir_next+0x52>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8009190:	f8b0 3208 	ldrh.w	r3, [r0, #520]	@ 0x208
 8009194:	42b3      	cmp	r3, r6
 8009196:	d9e9      	bls.n	800916c <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009198:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
	return FR_OK;
 800919c:	2000      	movs	r0, #0
	dp->index = (WORD)i;	/* Current index */
 800919e:	f8a4 6206 	strh.w	r6, [r4, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80091a2:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80091a6:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
	return FR_OK;
 80091aa:	e7e0      	b.n	800916e <dir_next+0x14>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80091ac:	f890 7202 	ldrb.w	r7, [r0, #514]	@ 0x202
 80091b0:	3f01      	subs	r7, #1
 80091b2:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 80091b6:	d1ef      	bne.n	8009198 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80091b8:	f7ff fe4c 	bl	8008e54 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 80091bc:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80091be:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 80091c0:	d801      	bhi.n	80091c6 <dir_next+0x6c>
 80091c2:	2002      	movs	r0, #2
 80091c4:	e7d3      	b.n	800916e <dir_next+0x14>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80091c6:	1c42      	adds	r2, r0, #1
 80091c8:	d101      	bne.n	80091ce <dir_next+0x74>
 80091ca:	2001      	movs	r0, #1
 80091cc:	e7cf      	b.n	800916e <dir_next+0x14>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80091ce:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 80091d2:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 80091d6:	42ab      	cmp	r3, r5
 80091d8:	d82f      	bhi.n	800923a <dir_next+0xe0>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80091da:	f1b9 0f00 	cmp.w	r9, #0
 80091de:	d0c5      	beq.n	800916c <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80091e0:	f8d4 120c 	ldr.w	r1, [r4, #524]	@ 0x20c
 80091e4:	f7ff ff60 	bl	80090a8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80091e8:	4605      	mov	r5, r0
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d03e      	beq.n	800926c <dir_next+0x112>
					if (clst == 1) return FR_INT_ERR;
 80091ee:	2801      	cmp	r0, #1
 80091f0:	d0e7      	beq.n	80091c2 <dir_next+0x68>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	d0e9      	beq.n	80091ca <dir_next+0x70>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80091f6:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 80091fa:	f7ff fc30 	bl	8008a5e <sync_window>
 80091fe:	4601      	mov	r1, r0
 8009200:	2800      	cmp	r0, #0
 8009202:	d1e2      	bne.n	80091ca <dir_next+0x70>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8009204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009208:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 800920c:	f7ff fb2b 	bl	8008866 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009210:	f8d4 2200 	ldr.w	r2, [r4, #512]	@ 0x200
						dp->fs->wflag = 1;
 8009214:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009218:	4629      	mov	r1, r5
 800921a:	4610      	mov	r0, r2
 800921c:	f7ff fe0c 	bl	8008e38 <clust2sect>
 8009220:	f8c2 022c 	str.w	r0, [r2, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009224:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8009228:	f890 3202 	ldrb.w	r3, [r0, #514]	@ 0x202
 800922c:	42bb      	cmp	r3, r7
 800922e:	d80e      	bhi.n	800924e <dir_next+0xf4>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009230:	f8d0 322c 	ldr.w	r3, [r0, #556]	@ 0x22c
 8009234:	1bdb      	subs	r3, r3, r7
 8009236:	f8c0 322c 	str.w	r3, [r0, #556]	@ 0x22c
				dp->sect = clust2sect(dp->fs, clst);
 800923a:	4629      	mov	r1, r5
 800923c:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
				dp->clust = clst;				/* Initialize data for new cluster */
 8009240:	f8c4 520c 	str.w	r5, [r4, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8009244:	f7ff fdf8 	bl	8008e38 <clust2sect>
 8009248:	f8c4 0210 	str.w	r0, [r4, #528]	@ 0x210
 800924c:	e7a4      	b.n	8009198 <dir_next+0x3e>
						dp->fs->wflag = 1;
 800924e:	f880 9204 	strb.w	r9, [r0, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8009252:	f7ff fc04 	bl	8008a5e <sync_window>
 8009256:	2800      	cmp	r0, #0
 8009258:	d1b7      	bne.n	80091ca <dir_next+0x70>
						dp->fs->winsect++;
 800925a:	f8d4 2200 	ldr.w	r2, [r4, #512]	@ 0x200
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800925e:	3701      	adds	r7, #1
						dp->fs->winsect++;
 8009260:	f8d2 322c 	ldr.w	r3, [r2, #556]	@ 0x22c
 8009264:	3301      	adds	r3, #1
 8009266:	f8c2 322c 	str.w	r3, [r2, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800926a:	e7db      	b.n	8009224 <dir_next+0xca>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800926c:	2007      	movs	r0, #7
 800926e:	e77e      	b.n	800916e <dir_next+0x14>

08009270 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009270:	2901      	cmp	r1, #1
{
 8009272:	b570      	push	{r4, r5, r6, lr}
 8009274:	4604      	mov	r4, r0
 8009276:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009278:	d801      	bhi.n	800927e <remove_chain+0xe>
		res = FR_INT_ERR;
 800927a:	2002      	movs	r0, #2
}
 800927c:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800927e:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8009282:	428b      	cmp	r3, r1
 8009284:	d9f9      	bls.n	800927a <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009286:	f8d4 3214 	ldr.w	r3, [r4, #532]	@ 0x214
 800928a:	42ab      	cmp	r3, r5
 800928c:	d905      	bls.n	800929a <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800928e:	4629      	mov	r1, r5
 8009290:	4620      	mov	r0, r4
 8009292:	f7ff fddf 	bl	8008e54 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8009296:	4606      	mov	r6, r0
 8009298:	b908      	cbnz	r0, 800929e <remove_chain+0x2e>
		res = FR_INT_ERR;
 800929a:	2000      	movs	r0, #0
 800929c:	e7ee      	b.n	800927c <remove_chain+0xc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800929e:	2801      	cmp	r0, #1
 80092a0:	d0eb      	beq.n	800927a <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80092a2:	1c41      	adds	r1, r0, #1
 80092a4:	d015      	beq.n	80092d2 <remove_chain+0x62>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80092a6:	2200      	movs	r2, #0
 80092a8:	4629      	mov	r1, r5
 80092aa:	4620      	mov	r0, r4
 80092ac:	f7ff fe82 	bl	8008fb4 <put_fat>
			if (res != FR_OK) break;
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d1e3      	bne.n	800927c <remove_chain+0xc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80092b4:	f8d4 3210 	ldr.w	r3, [r4, #528]	@ 0x210
 80092b8:	1c5a      	adds	r2, r3, #1
 80092ba:	d008      	beq.n	80092ce <remove_chain+0x5e>
				fs->free_clust++;
 80092bc:	3301      	adds	r3, #1
 80092be:	f8c4 3210 	str.w	r3, [r4, #528]	@ 0x210
				fs->fsi_flag |= 1;
 80092c2:	f894 3205 	ldrb.w	r3, [r4, #517]	@ 0x205
 80092c6:	f043 0301 	orr.w	r3, r3, #1
 80092ca:	f884 3205 	strb.w	r3, [r4, #517]	@ 0x205
{
 80092ce:	4635      	mov	r5, r6
 80092d0:	e7d9      	b.n	8009286 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80092d2:	2001      	movs	r0, #1
 80092d4:	e7d2      	b.n	800927c <remove_chain+0xc>
	...

080092d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80092d8:	b530      	push	{r4, r5, lr}
 80092da:	b085      	sub	sp, #20
 80092dc:	4614      	mov	r4, r2
 80092de:	e9cd 1000 	strd	r1, r0, [sp]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 80092e2:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 80092e4:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80092e6:	f7ff fba2 	bl	8008a2e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80092ea:	2800      	cmp	r0, #0
 80092ec:	db1d      	blt.n	800932a <f_mount+0x52>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80092ee:	4910      	ldr	r1, [pc, #64]	@ (8009330 <f_mount+0x58>)
 80092f0:	0085      	lsls	r5, r0, #2
 80092f2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80092f6:	6980      	ldr	r0, [r0, #24]

	if (cfs) {
 80092f8:	b120      	cbz	r0, 8009304 <f_mount+0x2c>
#if _FS_LOCK
		clear_lock(cfs);
 80092fa:	f7ff fb67 	bl	80089cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80092fe:	2300      	movs	r3, #0
 8009300:	f880 3200 	strb.w	r3, [r0, #512]	@ 0x200
	}

	if (fs) {
 8009304:	9b01      	ldr	r3, [sp, #4]
 8009306:	b923      	cbnz	r3, 8009312 <f_mount+0x3a>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009308:	4429      	add	r1, r5
 800930a:	618b      	str	r3, [r1, #24]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800930c:	2000      	movs	r0, #0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800930e:	b005      	add	sp, #20
 8009310:	bd30      	pop	{r4, r5, pc}
		fs->fs_type = 0;				/* Clear new fs object */
 8009312:	2200      	movs	r2, #0
	FatFs[vol] = fs;					/* Register new fs object */
 8009314:	4429      	add	r1, r5
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009316:	2c01      	cmp	r4, #1
		fs->fs_type = 0;				/* Clear new fs object */
 8009318:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	FatFs[vol] = fs;					/* Register new fs object */
 800931c:	618b      	str	r3, [r1, #24]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800931e:	d1f5      	bne.n	800930c <f_mount+0x34>
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8009320:	4669      	mov	r1, sp
 8009322:	a801      	add	r0, sp, #4
 8009324:	f7ff fc22 	bl	8008b6c <find_volume>
	LEAVE_FF(fs, res);
 8009328:	e7f1      	b.n	800930e <f_mount+0x36>
	if (vol < 0) return FR_INVALID_DRIVE;
 800932a:	200b      	movs	r0, #11
 800932c:	e7ef      	b.n	800930e <f_mount+0x36>
 800932e:	bf00      	nop
 8009330:	200018d0 	.word	0x200018d0

08009334 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8009334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009338:	469a      	mov	sl, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800933a:	2300      	movs	r3, #0
{
 800933c:	4604      	mov	r4, r0
 800933e:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8009340:	f8ca 3000 	str.w	r3, [sl]
{
 8009344:	4617      	mov	r7, r2

	res = validate(fp);							/* Check validity */
 8009346:	f7ff fbb6 	bl	8008ab6 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800934a:	4605      	mov	r5, r0
 800934c:	bb50      	cbnz	r0, 80093a4 <f_read+0x70>
	if (fp->err)								/* Check error */
 800934e:	f894 5207 	ldrb.w	r5, [r4, #519]	@ 0x207
 8009352:	bb3d      	cbnz	r5, 80093a4 <f_read+0x70>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8009354:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 8009358:	f013 0301 	ands.w	r3, r3, #1
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	f000 80ad 	beq.w	80094bc <f_read+0x188>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8009362:	e9d4 3682 	ldrd	r3, r6, [r4, #520]	@ 0x208
 8009366:	1af6      	subs	r6, r6, r3
 8009368:	42be      	cmp	r6, r7
 800936a:	bf28      	it	cs
 800936c:	463e      	movcs	r6, r7
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 800936e:	b1ce      	cbz	r6, 80093a4 <f_read+0x70>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8009370:	f8d4 1208 	ldr.w	r1, [r4, #520]	@ 0x208
 8009374:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8009378:	2b00      	cmp	r3, #0
 800937a:	f040 8090 	bne.w	800949e <f_read+0x16a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800937e:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8009382:	f890 8202 	ldrb.w	r8, [r0, #514]	@ 0x202
 8009386:	f108 38ff 	add.w	r8, r8, #4294967295
 800938a:	ea08 2851 	and.w	r8, r8, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 800938e:	f018 08ff 	ands.w	r8, r8, #255	@ 0xff
 8009392:	d120      	bne.n	80093d6 <f_read+0xa2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009394:	b951      	cbnz	r1, 80093ac <f_read+0x78>
					clst = fp->sclust;			/* Follow from the origin */
 8009396:	f8d4 0210 	ldr.w	r0, [r4, #528]	@ 0x210
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800939a:	2801      	cmp	r0, #1
 800939c:	d812      	bhi.n	80093c4 <f_read+0x90>
 800939e:	2502      	movs	r5, #2
 80093a0:	f884 5207 	strb.w	r5, [r4, #519]	@ 0x207
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 80093a4:	4628      	mov	r0, r5
 80093a6:	b003      	add	sp, #12
 80093a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl)
 80093ac:	f8d4 3224 	ldr.w	r3, [r4, #548]	@ 0x224
 80093b0:	b11b      	cbz	r3, 80093ba <f_read+0x86>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80093b2:	4620      	mov	r0, r4
 80093b4:	f7ff fb18 	bl	80089e8 <clmt_clust>
 80093b8:	e7ef      	b.n	800939a <f_read+0x66>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80093ba:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
 80093be:	f7ff fd49 	bl	8008e54 <get_fat>
 80093c2:	e7ea      	b.n	800939a <f_read+0x66>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80093c4:	1c42      	adds	r2, r0, #1
 80093c6:	d104      	bne.n	80093d2 <f_read+0x9e>
 80093c8:	2301      	movs	r3, #1
 80093ca:	9d00      	ldr	r5, [sp, #0]
 80093cc:	f884 3207 	strb.w	r3, [r4, #519]	@ 0x207
 80093d0:	e7e8      	b.n	80093a4 <f_read+0x70>
				fp->clust = clst;				/* Update current cluster */
 80093d2:	f8c4 0214 	str.w	r0, [r4, #532]	@ 0x214
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80093d6:	f8d4 b200 	ldr.w	fp, [r4, #512]	@ 0x200
 80093da:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
 80093de:	4658      	mov	r0, fp
 80093e0:	f7ff fd2a 	bl	8008e38 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d0da      	beq.n	800939e <f_read+0x6a>
			if (cc) {							/* Read maximum contiguous sectors directly */
 80093e8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 80093ec:	eb00 0708 	add.w	r7, r0, r8
			if (cc) {							/* Read maximum contiguous sectors directly */
 80093f0:	d332      	bcc.n	8009458 <f_read+0x124>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80093f2:	f89b 2202 	ldrb.w	r2, [fp, #514]	@ 0x202
 80093f6:	eb08 2156 	add.w	r1, r8, r6, lsr #9
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80093fa:	0a73      	lsrs	r3, r6, #9
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80093fc:	f89b 0201 	ldrb.w	r0, [fp, #513]	@ 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009400:	4291      	cmp	r1, r2
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8009402:	4649      	mov	r1, r9
					cc = fp->fs->csize - csect;
 8009404:	bf88      	it	hi
 8009406:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800940a:	463a      	mov	r2, r7
 800940c:	9301      	str	r3, [sp, #4]
 800940e:	f7ff f9f5 	bl	80087fc <disk_read>
 8009412:	2800      	cmp	r0, #0
 8009414:	d1d8      	bne.n	80093c8 <f_read+0x94>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8009416:	f894 2206 	ldrb.w	r2, [r4, #518]	@ 0x206
 800941a:	9b01      	ldr	r3, [sp, #4]
 800941c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8009420:	d00c      	beq.n	800943c <f_read+0x108>
 8009422:	f8d4 0218 	ldr.w	r0, [r4, #536]	@ 0x218
 8009426:	1bc0      	subs	r0, r0, r7
 8009428:	4283      	cmp	r3, r0
 800942a:	d907      	bls.n	800943c <f_read+0x108>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800942c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009430:	4621      	mov	r1, r4
 8009432:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8009436:	f7ff fa0d 	bl	8008854 <mem_cpy>
 800943a:	9b01      	ldr	r3, [sp, #4]
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800943c:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800943e:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 8009442:	44b9      	add	r9, r7
 8009444:	1bf6      	subs	r6, r6, r7
 8009446:	443b      	add	r3, r7
 8009448:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
 800944c:	f8da 3000 	ldr.w	r3, [sl]
 8009450:	443b      	add	r3, r7
 8009452:	f8ca 3000 	str.w	r3, [sl]
 8009456:	e78a      	b.n	800936e <f_read+0x3a>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8009458:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800945c:	4297      	cmp	r7, r2
 800945e:	d01c      	beq.n	800949a <f_read+0x166>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009460:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8009464:	f89b 0201 	ldrb.w	r0, [fp, #513]	@ 0x201
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009468:	065b      	lsls	r3, r3, #25
 800946a:	d50b      	bpl.n	8009484 <f_read+0x150>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800946c:	2301      	movs	r3, #1
 800946e:	4621      	mov	r1, r4
 8009470:	f7ff f9d2 	bl	8008818 <disk_write>
 8009474:	2800      	cmp	r0, #0
 8009476:	d1a7      	bne.n	80093c8 <f_read+0x94>
					fp->flag &= ~FA__DIRTY;
 8009478:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 800947c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009480:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8009484:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8009488:	2301      	movs	r3, #1
 800948a:	463a      	mov	r2, r7
 800948c:	4621      	mov	r1, r4
 800948e:	f890 0201 	ldrb.w	r0, [r0, #513]	@ 0x201
 8009492:	f7ff f9b3 	bl	80087fc <disk_read>
 8009496:	2800      	cmp	r0, #0
 8009498:	d196      	bne.n	80093c8 <f_read+0x94>
			fp->dsect = sect;
 800949a:	f8c4 7218 	str.w	r7, [r4, #536]	@ 0x218
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800949e:	f8d4 1208 	ldr.w	r1, [r4, #520]	@ 0x208
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80094a2:	4648      	mov	r0, r9
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80094a4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80094a8:	f5c1 7700 	rsb	r7, r1, #512	@ 0x200
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80094ac:	4421      	add	r1, r4
 80094ae:	42b7      	cmp	r7, r6
 80094b0:	bf28      	it	cs
 80094b2:	4637      	movcs	r7, r6
 80094b4:	463a      	mov	r2, r7
 80094b6:	f7ff f9cd 	bl	8008854 <mem_cpy>
 80094ba:	e7c0      	b.n	800943e <f_read+0x10a>
		LEAVE_FF(fp->fs, FR_DENIED);
 80094bc:	2507      	movs	r5, #7
 80094be:	e771      	b.n	80093a4 <f_read+0x70>

080094c0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80094c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80094c6:	2300      	movs	r3, #0
{
 80094c8:	4604      	mov	r4, r0
 80094ca:	4688      	mov	r8, r1
	*bw = 0;	/* Clear write byte counter */
 80094cc:	f8c9 3000 	str.w	r3, [r9]
{
 80094d0:	4616      	mov	r6, r2

	res = validate(fp);						/* Check validity */
 80094d2:	f7ff faf0 	bl	8008ab6 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80094d6:	4605      	mov	r5, r0
 80094d8:	2800      	cmp	r0, #0
 80094da:	d142      	bne.n	8009562 <f_write+0xa2>
	if (fp->err)							/* Check error */
 80094dc:	f894 5207 	ldrb.w	r5, [r4, #519]	@ 0x207
 80094e0:	2d00      	cmp	r5, #0
 80094e2:	d13e      	bne.n	8009562 <f_write+0xa2>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80094e4:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 80094e8:	0799      	lsls	r1, r3, #30
 80094ea:	f140 80ce 	bpl.w	800968a <f_write+0x1ca>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80094ee:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 80094f2:	42de      	cmn	r6, r3
 80094f4:	bf28      	it	cs
 80094f6:	2600      	movcs	r6, #0

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80094f8:	f8d4 1208 	ldr.w	r1, [r4, #520]	@ 0x208
	for ( ;  btw;							/* Repeat until all data written */
 80094fc:	b1ee      	cbz	r6, 800953a <f_write+0x7a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80094fe:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8009502:	2b00      	cmp	r3, #0
 8009504:	f040 80a9 	bne.w	800965a <f_write+0x19a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009508:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 800950c:	f890 7202 	ldrb.w	r7, [r0, #514]	@ 0x202
 8009510:	3f01      	subs	r7, #1
 8009512:	ea07 2751 	and.w	r7, r7, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 8009516:	f017 07ff 	ands.w	r7, r7, #255	@ 0xff
 800951a:	d131      	bne.n	8009580 <f_write+0xc0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800951c:	b929      	cbnz	r1, 800952a <f_write+0x6a>
					clst = fp->sclust;		/* Follow from the origin */
 800951e:	f8d4 1210 	ldr.w	r1, [r4, #528]	@ 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 8009522:	b9c9      	cbnz	r1, 8009558 <f_write+0x98>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009524:	f7ff fdc0 	bl	80090a8 <create_chain>
 8009528:	e005      	b.n	8009536 <f_write+0x76>
					if (fp->cltbl)
 800952a:	f8d4 3224 	ldr.w	r3, [r4, #548]	@ 0x224
 800952e:	b183      	cbz	r3, 8009552 <f_write+0x92>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009530:	4620      	mov	r0, r4
 8009532:	f7ff fa59 	bl	80089e8 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009536:	4601      	mov	r1, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009538:	b970      	cbnz	r0, 8009558 <f_write+0x98>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800953a:	e9d4 3282 	ldrd	r3, r2, [r4, #520]	@ 0x208
 800953e:	4293      	cmp	r3, r2
 8009540:	f200 80a0 	bhi.w	8009684 <f_write+0x1c4>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009544:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 8009548:	f043 0320 	orr.w	r3, r3, #32
 800954c:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8009550:	e007      	b.n	8009562 <f_write+0xa2>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009552:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
 8009556:	e7e5      	b.n	8009524 <f_write+0x64>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009558:	2901      	cmp	r1, #1
 800955a:	d106      	bne.n	800956a <f_write+0xaa>
 800955c:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800955e:	f884 5207 	strb.w	r5, [r4, #519]	@ 0x207
}
 8009562:	4628      	mov	r0, r5
 8009564:	b003      	add	sp, #12
 8009566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800956a:	1c4a      	adds	r2, r1, #1
 800956c:	d101      	bne.n	8009572 <f_write+0xb2>
 800956e:	2501      	movs	r5, #1
 8009570:	e7f5      	b.n	800955e <f_write+0x9e>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009572:	f8d4 3210 	ldr.w	r3, [r4, #528]	@ 0x210
				fp->clust = clst;			/* Update current cluster */
 8009576:	f8c4 1214 	str.w	r1, [r4, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800957a:	b90b      	cbnz	r3, 8009580 <f_write+0xc0>
 800957c:	f8c4 1210 	str.w	r1, [r4, #528]	@ 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009580:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009584:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009588:	065b      	lsls	r3, r3, #25
 800958a:	d50f      	bpl.n	80095ac <f_write+0xec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800958c:	2301      	movs	r3, #1
 800958e:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 8009592:	4621      	mov	r1, r4
 8009594:	f890 0201 	ldrb.w	r0, [r0, #513]	@ 0x201
 8009598:	f7ff f93e 	bl	8008818 <disk_write>
 800959c:	2800      	cmp	r0, #0
 800959e:	d1e6      	bne.n	800956e <f_write+0xae>
				fp->flag &= ~FA__DIRTY;
 80095a0:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 80095a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095a8:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80095ac:	f8d4 b200 	ldr.w	fp, [r4, #512]	@ 0x200
 80095b0:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
 80095b4:	4658      	mov	r0, fp
 80095b6:	f7ff fc3f 	bl	8008e38 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d0ce      	beq.n	800955c <f_write+0x9c>
			if (cc) {						/* Write maximum contiguous sectors directly */
 80095be:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 80095c2:	eb00 0a07 	add.w	sl, r0, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
 80095c6:	d333      	bcc.n	8009630 <f_write+0x170>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80095c8:	f89b 2202 	ldrb.w	r2, [fp, #514]	@ 0x202
 80095cc:	eb07 2156 	add.w	r1, r7, r6, lsr #9
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80095d0:	0a73      	lsrs	r3, r6, #9
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80095d2:	f89b 0201 	ldrb.w	r0, [fp, #513]	@ 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80095d6:	4291      	cmp	r1, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80095d8:	4641      	mov	r1, r8
					cc = fp->fs->csize - csect;
 80095da:	bf88      	it	hi
 80095dc:	1bd3      	subhi	r3, r2, r7
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80095de:	4652      	mov	r2, sl
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	f7ff f919 	bl	8008818 <disk_write>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d1c1      	bne.n	800956e <f_write+0xae>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80095ea:	f8d4 1218 	ldr.w	r1, [r4, #536]	@ 0x218
 80095ee:	9b01      	ldr	r3, [sp, #4]
 80095f0:	eba1 010a 	sub.w	r1, r1, sl
 80095f4:	428b      	cmp	r3, r1
 80095f6:	d90d      	bls.n	8009614 <f_write+0x154>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80095f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095fc:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8009600:	4620      	mov	r0, r4
 8009602:	f7ff f927 	bl	8008854 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8009606:	f894 2206 	ldrb.w	r2, [r4, #518]	@ 0x206
 800960a:	9b01      	ldr	r3, [sp, #4]
 800960c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009610:	f884 2206 	strb.w	r2, [r4, #518]	@ 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009614:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009616:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 800961a:	44b8      	add	r8, r7
 800961c:	1bf6      	subs	r6, r6, r7
 800961e:	443b      	add	r3, r7
 8009620:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
 8009624:	f8d9 3000 	ldr.w	r3, [r9]
 8009628:	443b      	add	r3, r7
 800962a:	f8c9 3000 	str.w	r3, [r9]
 800962e:	e763      	b.n	80094f8 <f_write+0x38>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009630:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
				if (fp->fptr < fp->fsize &&
 8009634:	f8d4 2208 	ldr.w	r2, [r4, #520]	@ 0x208
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009638:	459a      	cmp	sl, r3
 800963a:	d00c      	beq.n	8009656 <f_write+0x196>
				if (fp->fptr < fp->fsize &&
 800963c:	f8d4 320c 	ldr.w	r3, [r4, #524]	@ 0x20c
 8009640:	429a      	cmp	r2, r3
 8009642:	d208      	bcs.n	8009656 <f_write+0x196>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009644:	2301      	movs	r3, #1
 8009646:	4652      	mov	r2, sl
 8009648:	4621      	mov	r1, r4
 800964a:	f89b 0201 	ldrb.w	r0, [fp, #513]	@ 0x201
 800964e:	f7ff f8d5 	bl	80087fc <disk_read>
				if (fp->fptr < fp->fsize &&
 8009652:	2800      	cmp	r0, #0
 8009654:	d18b      	bne.n	800956e <f_write+0xae>
			fp->dsect = sect;
 8009656:	f8c4 a218 	str.w	sl, [r4, #536]	@ 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800965a:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800965e:	4641      	mov	r1, r8
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009660:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8009664:	f5c0 7700 	rsb	r7, r0, #512	@ 0x200
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009668:	4420      	add	r0, r4
 800966a:	42b7      	cmp	r7, r6
 800966c:	bf28      	it	cs
 800966e:	4637      	movcs	r7, r6
 8009670:	463a      	mov	r2, r7
 8009672:	f7ff f8ef 	bl	8008854 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009676:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 800967a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800967e:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206
 8009682:	e7c8      	b.n	8009616 <f_write+0x156>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009684:	f8c4 320c 	str.w	r3, [r4, #524]	@ 0x20c
 8009688:	e75c      	b.n	8009544 <f_write+0x84>
		LEAVE_FF(fp->fs, FR_DENIED);
 800968a:	2507      	movs	r5, #7
 800968c:	e769      	b.n	8009562 <f_write+0xa2>

0800968e <putc_bfd>:
{
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800968e:	290a      	cmp	r1, #10
{
 8009690:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009692:	4604      	mov	r4, r0
 8009694:	460e      	mov	r6, r1
	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8009696:	d102      	bne.n	800969e <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 8009698:	210d      	movs	r1, #13
 800969a:	f7ff fff8 	bl	800968e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800969e:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	db14      	blt.n	80096ce <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80096a4:	1c5d      	adds	r5, r3, #1
 80096a6:	4423      	add	r3, r4
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80096a8:	2d3c      	cmp	r5, #60	@ 0x3c
	pb->buf[i++] = (BYTE)c;
 80096aa:	731e      	strb	r6, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80096ac:	dd0b      	ble.n	80096c6 <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80096ae:	ab01      	add	r3, sp, #4
 80096b0:	462a      	mov	r2, r5
 80096b2:	f104 010c 	add.w	r1, r4, #12
 80096b6:	6820      	ldr	r0, [r4, #0]
 80096b8:	f7ff ff02 	bl	80094c0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80096bc:	9b01      	ldr	r3, [sp, #4]
 80096be:	1b5d      	subs	r5, r3, r5
 80096c0:	bf18      	it	ne
 80096c2:	f04f 35ff 	movne.w	r5, #4294967295
	}
	pb->idx = i;
	pb->nchr++;
 80096c6:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 80096c8:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 80096ca:	3301      	adds	r3, #1
 80096cc:	60a3      	str	r3, [r4, #8]
}
 80096ce:	b002      	add	sp, #8
 80096d0:	bd70      	pop	{r4, r5, r6, pc}

080096d2 <f_sync>:
{
 80096d2:	b570      	push	{r4, r5, r6, lr}
 80096d4:	4604      	mov	r4, r0
	res = validate(fp);					/* Check validity of the object */
 80096d6:	f7ff f9ee 	bl	8008ab6 <validate>
	if (res == FR_OK) {
 80096da:	2800      	cmp	r0, #0
 80096dc:	d159      	bne.n	8009792 <f_sync+0xc0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80096de:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 80096e2:	f013 0020 	ands.w	r0, r3, #32
 80096e6:	d054      	beq.n	8009792 <f_sync+0xc0>
			if (fp->flag & FA__DIRTY) {
 80096e8:	065b      	lsls	r3, r3, #25
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80096ea:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
			if (fp->flag & FA__DIRTY) {
 80096ee:	d50f      	bpl.n	8009710 <f_sync+0x3e>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80096f0:	2301      	movs	r3, #1
 80096f2:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 80096f6:	4621      	mov	r1, r4
 80096f8:	f890 0201 	ldrb.w	r0, [r0, #513]	@ 0x201
 80096fc:	f7ff f88c 	bl	8008818 <disk_write>
 8009700:	2800      	cmp	r0, #0
 8009702:	d145      	bne.n	8009790 <f_sync+0xbe>
				fp->flag &= ~FA__DIRTY;
 8009704:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 8009708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800970c:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206
			res = move_window(fp->fs, fp->dir_sect);
 8009710:	f8d4 121c 	ldr.w	r1, [r4, #540]	@ 0x21c
 8009714:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8009718:	f7ff f9e4 	bl	8008ae4 <move_window>
 800971c:	4606      	mov	r6, r0
			if (res == FR_OK) {
 800971e:	bbc0      	cbnz	r0, 8009792 <f_sync+0xc0>
				dir = fp->dir_ptr;
 8009720:	f8d4 5220 	ldr.w	r5, [r4, #544]	@ 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009724:	7aeb      	ldrb	r3, [r5, #11]
 8009726:	f043 0320 	orr.w	r3, r3, #32
 800972a:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800972c:	f8d4 320c 	ldr.w	r3, [r4, #524]	@ 0x20c
 8009730:	772b      	strb	r3, [r5, #28]
 8009732:	f8b4 320c 	ldrh.w	r3, [r4, #524]	@ 0x20c
 8009736:	0a1b      	lsrs	r3, r3, #8
 8009738:	776b      	strb	r3, [r5, #29]
 800973a:	f8b4 320e 	ldrh.w	r3, [r4, #526]	@ 0x20e
 800973e:	77ab      	strb	r3, [r5, #30]
 8009740:	f894 320f 	ldrb.w	r3, [r4, #527]	@ 0x20f
 8009744:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009746:	f8d4 3210 	ldr.w	r3, [r4, #528]	@ 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 800974a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800974e:	76ab      	strb	r3, [r5, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009750:	0c1b      	lsrs	r3, r3, #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009752:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009754:	752b      	strb	r3, [r5, #20]
 8009756:	0a1b      	lsrs	r3, r3, #8
 8009758:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update updated time */
 800975a:	f7ff f879 	bl	8008850 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 800975e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009762:	75a8      	strb	r0, [r5, #22]
 8009764:	75eb      	strb	r3, [r5, #23]
 8009766:	0c03      	lsrs	r3, r0, #16
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009768:	74ae      	strb	r6, [r5, #18]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800976a:	762b      	strb	r3, [r5, #24]
 800976c:	0e03      	lsrs	r3, r0, #24
				ST_WORD(dir + DIR_LstAccDate, 0);
 800976e:	74ee      	strb	r6, [r5, #19]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009770:	766b      	strb	r3, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
 8009772:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
				fp->fs->wflag = 1;
 8009776:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
				fp->flag &= ~FA__WRITTEN;
 800977a:	f023 0320 	bic.w	r3, r3, #32
 800977e:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206
				fp->fs->wflag = 1;
 8009782:	2301      	movs	r3, #1
 8009784:	f880 3204 	strb.w	r3, [r0, #516]	@ 0x204
}
 8009788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 800978c:	f7ff bb0a 	b.w	8008da4 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009790:	2001      	movs	r0, #1
}
 8009792:	bd70      	pop	{r4, r5, r6, pc}

08009794 <f_close>:
{
 8009794:	b510      	push	{r4, lr}
 8009796:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8009798:	f7ff ff9b 	bl	80096d2 <f_sync>
	if (res == FR_OK)
 800979c:	b950      	cbnz	r0, 80097b4 <f_close+0x20>
		res = validate(fp);				/* Lock volume */
 800979e:	4620      	mov	r0, r4
 80097a0:	f7ff f989 	bl	8008ab6 <validate>
		if (res == FR_OK) {
 80097a4:	b930      	cbnz	r0, 80097b4 <f_close+0x20>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80097a6:	f8d4 0228 	ldr.w	r0, [r4, #552]	@ 0x228
 80097aa:	f7ff f8ef 	bl	800898c <dec_lock>
			if (res == FR_OK)
 80097ae:	b908      	cbnz	r0, 80097b4 <f_close+0x20>
				fp->fs = 0;				/* Invalidate file object */
 80097b0:	f8c4 0200 	str.w	r0, [r4, #512]	@ 0x200
}
 80097b4:	bd10      	pop	{r4, pc}

080097b6 <f_lseek>:
{
 80097b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ba:	4604      	mov	r4, r0
 80097bc:	460d      	mov	r5, r1
	res = validate(fp);					/* Check validity of the object */
 80097be:	f7ff f97a 	bl	8008ab6 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80097c2:	4606      	mov	r6, r0
 80097c4:	bb10      	cbnz	r0, 800980c <f_lseek+0x56>
	if (fp->err)						/* Check error */
 80097c6:	f894 6207 	ldrb.w	r6, [r4, #519]	@ 0x207
 80097ca:	b9fe      	cbnz	r6, 800980c <f_lseek+0x56>
	if (fp->cltbl) {	/* Fast seek */
 80097cc:	f8d4 3224 	ldr.w	r3, [r4, #548]	@ 0x224
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 8087 	beq.w	80098e4 <f_lseek+0x12e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80097d6:	1c6a      	adds	r2, r5, #1
 80097d8:	d13d      	bne.n	8009856 <f_lseek+0xa0>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80097da:	461d      	mov	r5, r3
			cl = fp->sclust;			/* Top of the chain */
 80097dc:	f8d4 8210 	ldr.w	r8, [r4, #528]	@ 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80097e0:	2702      	movs	r7, #2
 80097e2:	f855 bb04 	ldr.w	fp, [r5], #4
			if (cl) {
 80097e6:	f1b8 0f00 	cmp.w	r8, #0
 80097ea:	d02b      	beq.n	8009844 <f_lseek+0x8e>
						cl = get_fat(fp->fs, cl);
 80097ec:	4640      	mov	r0, r8
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80097ee:	f04f 0a00 	mov.w	sl, #0
						cl = get_fat(fp->fs, cl);
 80097f2:	4601      	mov	r1, r0
 80097f4:	4681      	mov	r9, r0
 80097f6:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
						pcl = cl; ncl++;
 80097fa:	f10a 0a01 	add.w	sl, sl, #1
						cl = get_fat(fp->fs, cl);
 80097fe:	f7ff fb29 	bl	8008e54 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009802:	2801      	cmp	r0, #1
 8009804:	d807      	bhi.n	8009816 <f_lseek+0x60>
 8009806:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009808:	f884 6207 	strb.w	r6, [r4, #519]	@ 0x207
}
 800980c:	4630      	mov	r0, r6
 800980e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						cl = get_fat(fp->fs, cl);
 8009812:	4680      	mov	r8, r0
 8009814:	e7ea      	b.n	80097ec <f_lseek+0x36>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009816:	1c43      	adds	r3, r0, #1
 8009818:	d101      	bne.n	800981e <f_lseek+0x68>
 800981a:	2601      	movs	r6, #1
 800981c:	e7f4      	b.n	8009808 <f_lseek+0x52>
					} while (cl == pcl + 1);
 800981e:	f109 0901 	add.w	r9, r9, #1
 8009822:	4581      	cmp	r9, r0
 8009824:	d0e5      	beq.n	80097f2 <f_lseek+0x3c>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009826:	3702      	adds	r7, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009828:	45bb      	cmp	fp, r7
						*tbl++ = ncl; *tbl++ = tcl;
 800982a:	bf21      	itttt	cs
 800982c:	462b      	movcs	r3, r5
 800982e:	f843 ab08 	strcs.w	sl, [r3], #8
 8009832:	f8c5 8004 	strcs.w	r8, [r5, #4]
 8009836:	461d      	movcs	r5, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009838:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 800983c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009840:	4283      	cmp	r3, r0
 8009842:	d8e6      	bhi.n	8009812 <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 8009844:	f8d4 3224 	ldr.w	r3, [r4, #548]	@ 0x224
			if (ulen <= tlen)
 8009848:	455f      	cmp	r7, fp
			*fp->cltbl = ulen;	/* Number of items used */
 800984a:	601f      	str	r7, [r3, #0]
			if (ulen <= tlen)
 800984c:	f200 80f9 	bhi.w	8009a42 <f_lseek+0x28c>
				*tbl = 0;		/* Terminate table */
 8009850:	2300      	movs	r3, #0
 8009852:	602b      	str	r3, [r5, #0]
 8009854:	e7da      	b.n	800980c <f_lseek+0x56>
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8009856:	f8d4 720c 	ldr.w	r7, [r4, #524]	@ 0x20c
 800985a:	42af      	cmp	r7, r5
 800985c:	bf28      	it	cs
 800985e:	462f      	movcs	r7, r5
			fp->fptr = ofs;				/* Set file pointer */
 8009860:	f8c4 7208 	str.w	r7, [r4, #520]	@ 0x208
			if (ofs) {
 8009864:	2f00      	cmp	r7, #0
 8009866:	d0d1      	beq.n	800980c <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009868:	f107 39ff 	add.w	r9, r7, #4294967295
 800986c:	4620      	mov	r0, r4
 800986e:	4649      	mov	r1, r9
 8009870:	f7ff f8ba 	bl	80089e8 <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 8009874:	f8d4 8200 	ldr.w	r8, [r4, #512]	@ 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 8009878:	4601      	mov	r1, r0
 800987a:	f8c4 0214 	str.w	r0, [r4, #532]	@ 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800987e:	4640      	mov	r0, r8
 8009880:	f7ff fada 	bl	8008e38 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8009884:	2800      	cmp	r0, #0
 8009886:	d0be      	beq.n	8009806 <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009888:	f3c7 0708 	ubfx	r7, r7, #0, #9
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800988c:	f898 5202 	ldrb.w	r5, [r8, #514]	@ 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009890:	2f00      	cmp	r7, #0
 8009892:	d0bb      	beq.n	800980c <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009894:	3d01      	subs	r5, #1
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009896:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800989a:	ea05 2559 	and.w	r5, r5, r9, lsr #9
 800989e:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80098a0:	42aa      	cmp	r2, r5
 80098a2:	d0b3      	beq.n	800980c <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80098a4:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80098a8:	f898 0201 	ldrb.w	r0, [r8, #513]	@ 0x201
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80098ac:	0659      	lsls	r1, r3, #25
 80098ae:	d50b      	bpl.n	80098c8 <f_lseek+0x112>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80098b0:	2301      	movs	r3, #1
 80098b2:	4621      	mov	r1, r4
 80098b4:	f7fe ffb0 	bl	8008818 <disk_write>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d1ae      	bne.n	800981a <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 80098bc:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 80098c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098c4:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80098c8:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 80098cc:	2301      	movs	r3, #1
 80098ce:	462a      	mov	r2, r5
 80098d0:	4621      	mov	r1, r4
 80098d2:	f890 0201 	ldrb.w	r0, [r0, #513]	@ 0x201
 80098d6:	f7fe ff91 	bl	80087fc <disk_read>
 80098da:	2800      	cmp	r0, #0
 80098dc:	d19d      	bne.n	800981a <f_lseek+0x64>
					fp->dsect = dsc;
 80098de:	f8c4 5218 	str.w	r5, [r4, #536]	@ 0x218
 80098e2:	e793      	b.n	800980c <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80098e4:	f8d4 320c 	ldr.w	r3, [r4, #524]	@ 0x20c
 80098e8:	42ab      	cmp	r3, r5
 80098ea:	d205      	bcs.n	80098f8 <f_lseek+0x142>
			 && !(fp->flag & FA_WRITE)
 80098ec:	f894 2206 	ldrb.w	r2, [r4, #518]	@ 0x206
 80098f0:	f012 0f02 	tst.w	r2, #2
 80098f4:	bf08      	it	eq
 80098f6:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 80098f8:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 80098fa:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
		fp->fptr = nsect = 0;
 80098fe:	f8c4 2208 	str.w	r2, [r4, #520]	@ 0x208
		if (ofs) {
 8009902:	b96d      	cbnz	r5, 8009920 <f_lseek+0x16a>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009904:	e9d4 3282 	ldrd	r3, r2, [r4, #520]	@ 0x208
 8009908:	4293      	cmp	r3, r2
 800990a:	f67f af7f 	bls.w	800980c <f_lseek+0x56>
			fp->fsize = fp->fptr;
 800990e:	f8c4 320c 	str.w	r3, [r4, #524]	@ 0x20c
			fp->flag |= FA__WRITTEN;
 8009912:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 8009916:	f043 0320 	orr.w	r3, r3, #32
 800991a:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206
 800991e:	e775      	b.n	800980c <f_lseek+0x56>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009920:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8009924:	f890 7202 	ldrb.w	r7, [r0, #514]	@ 0x202
 8009928:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800992a:	2b00      	cmp	r3, #0
 800992c:	d03f      	beq.n	80099ae <f_lseek+0x1f8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800992e:	3b01      	subs	r3, #1
 8009930:	1e6a      	subs	r2, r5, #1
 8009932:	fbb3 f1f7 	udiv	r1, r3, r7
 8009936:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800993a:	428a      	cmp	r2, r1
 800993c:	d337      	bcc.n	80099ae <f_lseek+0x1f8>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800993e:	427a      	negs	r2, r7
				clst = fp->clust;
 8009940:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009944:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 8009946:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009948:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
			if (clst != 0) {
 800994c:	2900      	cmp	r1, #0
 800994e:	d163      	bne.n	8009a18 <f_lseek+0x262>
		fp->fptr = nsect = 0;
 8009950:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009952:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 8009956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0d2      	beq.n	8009904 <f_lseek+0x14e>
 800995e:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 8009962:	42aa      	cmp	r2, r5
 8009964:	d0ce      	beq.n	8009904 <f_lseek+0x14e>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009966:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 800996a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800996e:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 8009972:	065b      	lsls	r3, r3, #25
 8009974:	d50c      	bpl.n	8009990 <f_lseek+0x1da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009976:	2301      	movs	r3, #1
 8009978:	4621      	mov	r1, r4
 800997a:	f7fe ff4d 	bl	8008818 <disk_write>
 800997e:	2800      	cmp	r0, #0
 8009980:	f47f af4b 	bne.w	800981a <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 8009984:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 8009988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800998c:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009990:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8009994:	2301      	movs	r3, #1
 8009996:	462a      	mov	r2, r5
 8009998:	4621      	mov	r1, r4
 800999a:	f890 0201 	ldrb.w	r0, [r0, #513]	@ 0x201
 800999e:	f7fe ff2d 	bl	80087fc <disk_read>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	f47f af39 	bne.w	800981a <f_lseek+0x64>
			fp->dsect = nsect;
 80099a8:	f8c4 5218 	str.w	r5, [r4, #536]	@ 0x218
 80099ac:	e7aa      	b.n	8009904 <f_lseek+0x14e>
				clst = fp->sclust;						/* start from the first cluster */
 80099ae:	f8d4 1210 	ldr.w	r1, [r4, #528]	@ 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80099b2:	b951      	cbnz	r1, 80099ca <f_lseek+0x214>
					clst = create_chain(fp->fs, 0);
 80099b4:	f7ff fb78 	bl	80090a8 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80099b8:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 80099ba:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80099bc:	f43f af23 	beq.w	8009806 <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80099c0:	1c42      	adds	r2, r0, #1
 80099c2:	f43f af2a 	beq.w	800981a <f_lseek+0x64>
					fp->sclust = clst;
 80099c6:	f8c4 0210 	str.w	r0, [r4, #528]	@ 0x210
				fp->clust = clst;
 80099ca:	f8c4 1214 	str.w	r1, [r4, #532]	@ 0x214
 80099ce:	e7bd      	b.n	800994c <f_lseek+0x196>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80099d0:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80099d4:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80099d8:	079b      	lsls	r3, r3, #30
 80099da:	d505      	bpl.n	80099e8 <f_lseek+0x232>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80099dc:	f7ff fb64 	bl	80090a8 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 80099e0:	4601      	mov	r1, r0
 80099e2:	b920      	cbnz	r0, 80099ee <f_lseek+0x238>
 80099e4:	463d      	mov	r5, r7
 80099e6:	e019      	b.n	8009a1c <f_lseek+0x266>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80099e8:	f7ff fa34 	bl	8008e54 <get_fat>
 80099ec:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80099ee:	1c4a      	adds	r2, r1, #1
 80099f0:	f43f af13 	beq.w	800981a <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80099f4:	2901      	cmp	r1, #1
 80099f6:	f67f af06 	bls.w	8009806 <f_lseek+0x50>
 80099fa:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 80099fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009a02:	428b      	cmp	r3, r1
 8009a04:	f67f aeff 	bls.w	8009806 <f_lseek+0x50>
					fp->fptr += bcs;
 8009a08:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
					ofs -= bcs;
 8009a0c:	1bed      	subs	r5, r5, r7
					fp->clust = clst;
 8009a0e:	f8c4 1214 	str.w	r1, [r4, #532]	@ 0x214
					fp->fptr += bcs;
 8009a12:	443b      	add	r3, r7
 8009a14:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
				while (ofs > bcs) {						/* Cluster following loop */
 8009a18:	42bd      	cmp	r5, r7
 8009a1a:	d8d9      	bhi.n	80099d0 <f_lseek+0x21a>
				fp->fptr += ofs;
 8009a1c:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 8009a20:	442b      	add	r3, r5
 8009a22:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
				if (ofs % SS(fp->fs)) {
 8009a26:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d090      	beq.n	8009950 <f_lseek+0x19a>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009a2e:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8009a32:	f7ff fa01 	bl	8008e38 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f43f aee5 	beq.w	8009806 <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 8009a3c:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 8009a40:	e787      	b.n	8009952 <f_lseek+0x19c>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009a42:	2611      	movs	r6, #17
 8009a44:	e6e2      	b.n	800980c <f_lseek+0x56>

08009a46 <f_gets>:
{
 8009a46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4690      	mov	r8, r2
	TCHAR c, *p = buff;
 8009a4e:	4606      	mov	r6, r0
	int n = 0;
 8009a50:	2500      	movs	r5, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009a52:	1e4f      	subs	r7, r1, #1
 8009a54:	42af      	cmp	r7, r5
 8009a56:	dd12      	ble.n	8009a7e <f_gets+0x38>
		f_read(fp, s, 1, &rc);
 8009a58:	ab01      	add	r3, sp, #4
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	4669      	mov	r1, sp
 8009a5e:	4640      	mov	r0, r8
 8009a60:	f7ff fc68 	bl	8009334 <f_read>
		if (rc != 1) break;
 8009a64:	9b01      	ldr	r3, [sp, #4]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d109      	bne.n	8009a7e <f_gets+0x38>
		c = s[0];
 8009a6a:	f89d 3000 	ldrb.w	r3, [sp]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009a6e:	2b0d      	cmp	r3, #13
 8009a70:	d0f0      	beq.n	8009a54 <f_gets+0xe>
		if (c == '\n') break;		/* Break on EOL */
 8009a72:	2b0a      	cmp	r3, #10
		n++;
 8009a74:	f105 0501 	add.w	r5, r5, #1
		*p++ = c;
 8009a78:	f806 3b01 	strb.w	r3, [r6], #1
		if (c == '\n') break;		/* Break on EOL */
 8009a7c:	d1ea      	bne.n	8009a54 <f_gets+0xe>
	*p = 0;
 8009a7e:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009a80:	429d      	cmp	r5, r3
	*p = 0;
 8009a82:	7033      	strb	r3, [r6, #0]
}
 8009a84:	bf14      	ite	ne
 8009a86:	4620      	movne	r0, r4
 8009a88:	4618      	moveq	r0, r3
 8009a8a:	b002      	add	sp, #8
 8009a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a90 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009a90:	b510      	push	{r4, lr}
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 8009a92:	2300      	movs	r3, #0
{
 8009a94:	b094      	sub	sp, #80	@ 0x50
 8009a96:	1e44      	subs	r4, r0, #1
	pb.fp = fp;				/* Initialize output buffer */
 8009a98:	9101      	str	r1, [sp, #4]
	pb.nchr = pb.idx = 0;
 8009a9a:	e9cd 3302 	strd	r3, r3, [sp, #8]

	while (*str)			/* Put the string */
 8009a9e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8009aa2:	b931      	cbnz	r1, 8009ab2 <f_puts+0x22>
		putc_bfd(&pb, *str++);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009aa4:	9a02      	ldr	r2, [sp, #8]
 8009aa6:	2a00      	cmp	r2, #0
 8009aa8:	da07      	bge.n	8009aba <f_puts+0x2a>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
 8009aaa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009aae:	b014      	add	sp, #80	@ 0x50
 8009ab0:	bd10      	pop	{r4, pc}
		putc_bfd(&pb, *str++);
 8009ab2:	a801      	add	r0, sp, #4
 8009ab4:	f7ff fdeb 	bl	800968e <putc_bfd>
 8009ab8:	e7f1      	b.n	8009a9e <f_puts+0xe>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8009aba:	466b      	mov	r3, sp
 8009abc:	a904      	add	r1, sp, #16
 8009abe:	9801      	ldr	r0, [sp, #4]
 8009ac0:	f7ff fcfe 	bl	80094c0 <f_write>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d1f0      	bne.n	8009aaa <f_puts+0x1a>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8009ac8:	9a02      	ldr	r2, [sp, #8]
 8009aca:	9b00      	ldr	r3, [sp, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d1ec      	bne.n	8009aaa <f_puts+0x1a>
 8009ad0:	9803      	ldr	r0, [sp, #12]
 8009ad2:	e7ec      	b.n	8009aae <f_puts+0x1e>

08009ad4 <ff_convert>:
	)
{
	WCHAR c;


	if (chr < 0x80) {
 8009ad4:	287f      	cmp	r0, #127	@ 0x7f
 8009ad6:	d916      	bls.n	8009b06 <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {
 8009ad8:	b139      	cbz	r1, 8009aea <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009ada:	28ff      	cmp	r0, #255	@ 0xff
 8009adc:	d812      	bhi.n	8009b04 <ff_convert+0x30>
 8009ade:	4b0a      	ldr	r3, [pc, #40]	@ (8009b08 <ff_convert+0x34>)
 8009ae0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009ae4:	f833 0c46 	ldrh.w	r0, [r3, #-70]
 8009ae8:	4770      	bx	lr
 8009aea:	4b08      	ldr	r3, [pc, #32]	@ (8009b0c <ff_convert+0x38>)

		} else {
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
 8009aec:	f833 2b02 	ldrh.w	r2, [r3], #2
 8009af0:	4290      	cmp	r0, r2
 8009af2:	d005      	beq.n	8009b00 <ff_convert+0x2c>
			for (c = 0; c < 0x80; c++) {
 8009af4:	3101      	adds	r1, #1
 8009af6:	2980      	cmp	r1, #128	@ 0x80
 8009af8:	d1f8      	bne.n	8009aec <ff_convert+0x18>
			}
			c = (c + 0x80) & 0xFF;
 8009afa:	3180      	adds	r1, #128	@ 0x80
 8009afc:	b2c8      	uxtb	r0, r1
		}
	}

	return c;
 8009afe:	4770      	bx	lr
 8009b00:	b289      	uxth	r1, r1
 8009b02:	e7fa      	b.n	8009afa <ff_convert+0x26>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009b04:	2000      	movs	r0, #0

}
 8009b06:	4770      	bx	lr
 8009b08:	08051110 	.word	0x08051110
 8009b0c:	080511ca 	.word	0x080511ca

08009b10 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009b10:	4907      	ldr	r1, [pc, #28]	@ (8009b30 <ff_wtoupper+0x20>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	f831 3b02 	ldrh.w	r3, [r1], #2
 8009b18:	b133      	cbz	r3, 8009b28 <ff_wtoupper+0x18>
 8009b1a:	4283      	cmp	r3, r0
 8009b1c:	d105      	bne.n	8009b2a <ff_wtoupper+0x1a>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8009b1e:	4b05      	ldr	r3, [pc, #20]	@ (8009b34 <ff_wtoupper+0x24>)
 8009b20:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8009b24:	f8b3 039a 	ldrh.w	r0, [r3, #922]	@ 0x39a
}
 8009b28:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009b2a:	3201      	adds	r2, #1
 8009b2c:	e7f2      	b.n	8009b14 <ff_wtoupper+0x4>
 8009b2e:	bf00      	nop
 8009b30:	080512ca 	.word	0x080512ca
 8009b34:	08051110 	.word	0x08051110

08009b38 <dir_find>:
{
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009b3c:	2100      	movs	r1, #0
{
 8009b3e:	b085      	sub	sp, #20
 8009b40:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009b42:	f7ff f9e8 	bl	8008f16 <dir_sdi>
	if (res != FR_OK) return res;
 8009b46:	4607      	mov	r7, r0
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d16c      	bne.n	8009c26 <dir_find+0xee>
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009b4c:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 8009b50:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8009b54:	4645      	mov	r5, r8
 8009b56:	f8a4 a224 	strh.w	sl, [r4, #548]	@ 0x224
		res = move_window(dp->fs, dp->sect);
 8009b5a:	f8d4 1210 	ldr.w	r1, [r4, #528]	@ 0x210
 8009b5e:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8009b62:	f7fe ffbf 	bl	8008ae4 <move_window>
		if (res != FR_OK) break;
 8009b66:	4607      	mov	r7, r0
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d15c      	bne.n	8009c26 <dir_find+0xee>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009b6c:	f8d4 6214 	ldr.w	r6, [r4, #532]	@ 0x214
		c = dir[DIR_Name];
 8009b70:	7832      	ldrb	r2, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009b72:	2a00      	cmp	r2, #0
 8009b74:	d07a      	beq.n	8009c6c <dir_find+0x134>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009b76:	2ae5      	cmp	r2, #229	@ 0xe5
		a = dir[DIR_Attr] & AM_MASK;
 8009b78:	7af1      	ldrb	r1, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009b7a:	d005      	beq.n	8009b88 <dir_find+0x50>
 8009b7c:	0708      	lsls	r0, r1, #28
		a = dir[DIR_Attr] & AM_MASK;
 8009b7e:	f001 033f 	and.w	r3, r1, #63	@ 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009b82:	d505      	bpl.n	8009b90 <dir_find+0x58>
 8009b84:	2b0f      	cmp	r3, #15
 8009b86:	d005      	beq.n	8009b94 <dir_find+0x5c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009b88:	f8a4 a224 	strh.w	sl, [r4, #548]	@ 0x224
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8009b8c:	25ff      	movs	r5, #255	@ 0xff
 8009b8e:	e043      	b.n	8009c18 <dir_find+0xe0>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009b90:	2b0f      	cmp	r3, #15
 8009b92:	d154      	bne.n	8009c3e <dir_find+0x106>
				if (dp->lfn) {
 8009b94:	f8d4 b220 	ldr.w	fp, [r4, #544]	@ 0x220
 8009b98:	f1bb 0f00 	cmp.w	fp, #0
 8009b9c:	d03c      	beq.n	8009c18 <dir_find+0xe0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009b9e:	0651      	lsls	r1, r2, #25
 8009ba0:	d545      	bpl.n	8009c2e <dir_find+0xf6>
						c &= ~LLEF; ord = c;	/* LFN start order */
 8009ba2:	f002 05bf 	and.w	r5, r2, #191	@ 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8009ba6:	f8b4 2206 	ldrh.w	r2, [r4, #518]	@ 0x206
						sum = dir[LDIR_Chksum];
 8009baa:	f896 800d 	ldrb.w	r8, [r6, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8009bae:	f8a4 2224 	strh.w	r2, [r4, #548]	@ 0x224
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8009bb2:	7b72      	ldrb	r2, [r6, #13]
 8009bb4:	4542      	cmp	r2, r8
 8009bb6:	d1e9      	bne.n	8009b8c <dir_find+0x54>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8009bb8:	7833      	ldrb	r3, [r6, #0]
 8009bba:	220d      	movs	r2, #13
 8009bbc:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 8009c74 <dir_find+0x13c>
 8009bc0:	f023 0740 	bic.w	r7, r3, #64	@ 0x40
 8009bc4:	9301      	str	r3, [sp, #4]
	s = 0; wc = 1;
 8009bc6:	2301      	movs	r3, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8009bc8:	3f01      	subs	r7, #1
 8009bca:	4357      	muls	r7, r2
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8009bcc:	f819 2b01 	ldrb.w	r2, [r9], #1
 8009bd0:	18b1      	adds	r1, r6, r2
 8009bd2:	5cb2      	ldrb	r2, [r6, r2]
 8009bd4:	7849      	ldrb	r1, [r1, #1]
 8009bd6:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
		if (wc) {	/* Last character has not been processed */
 8009bda:	b35b      	cbz	r3, 8009c34 <dir_find+0xfc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8009bdc:	f7ff ff98 	bl	8009b10 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8009be0:	2ffe      	cmp	r7, #254	@ 0xfe
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8009be2:	9003      	str	r0, [sp, #12]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8009be4:	d8d2      	bhi.n	8009b8c <dir_find+0x54>
 8009be6:	1c79      	adds	r1, r7, #1
 8009be8:	f83b 0017 	ldrh.w	r0, [fp, r7, lsl #1]
 8009bec:	9102      	str	r1, [sp, #8]
 8009bee:	f7ff ff8f 	bl	8009b10 <ff_wtoupper>
 8009bf2:	9a03      	ldr	r2, [sp, #12]
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	4282      	cmp	r2, r0
 8009bf8:	d1c8      	bne.n	8009b8c <dir_find+0x54>
 8009bfa:	9902      	ldr	r1, [sp, #8]
 8009bfc:	460f      	mov	r7, r1
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8009bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8009c70 <dir_find+0x138>)
 8009c00:	454a      	cmp	r2, r9
 8009c02:	d1e3      	bne.n	8009bcc <dir_find+0x94>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8009c04:	9a01      	ldr	r2, [sp, #4]
 8009c06:	0652      	lsls	r2, r2, #25
 8009c08:	d504      	bpl.n	8009c14 <dir_find+0xdc>
 8009c0a:	b11b      	cbz	r3, 8009c14 <dir_find+0xdc>
 8009c0c:	f83b 3017 	ldrh.w	r3, [fp, r7, lsl #1]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1bb      	bne.n	8009b8c <dir_find+0x54>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8009c14:	3d01      	subs	r5, #1
 8009c16:	b2ed      	uxtb	r5, r5
		res = dir_next(dp, 0);		/* Next entry */
 8009c18:	2100      	movs	r1, #0
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f7ff fa9d 	bl	800915a <dir_next>
	} while (res == FR_OK);
 8009c20:	4607      	mov	r7, r0
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d099      	beq.n	8009b5a <dir_find+0x22>
}
 8009c26:	4638      	mov	r0, r7
 8009c28:	b005      	add	sp, #20
 8009c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8009c2e:	42aa      	cmp	r2, r5
 8009c30:	d1ac      	bne.n	8009b8c <dir_find+0x54>
 8009c32:	e7be      	b.n	8009bb2 <dir_find+0x7a>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8009c34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009c38:	4290      	cmp	r0, r2
 8009c3a:	d0e0      	beq.n	8009bfe <dir_find+0xc6>
 8009c3c:	e7a6      	b.n	8009b8c <dir_find+0x54>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8009c3e:	b925      	cbnz	r5, 8009c4a <dir_find+0x112>
 8009c40:	4630      	mov	r0, r6
 8009c42:	f7fe fee5 	bl	8008a10 <sum_sfn>
 8009c46:	4540      	cmp	r0, r8
 8009c48:	d0ed      	beq.n	8009c26 <dir_find+0xee>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009c4a:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 8009c4e:	7adf      	ldrb	r7, [r3, #11]
 8009c50:	f017 0701 	ands.w	r7, r7, #1
 8009c54:	d198      	bne.n	8009b88 <dir_find+0x50>
 8009c56:	f106 000b 	add.w	r0, r6, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009c5a:	4286      	cmp	r6, r0
 8009c5c:	d0e3      	beq.n	8009c26 <dir_find+0xee>
 8009c5e:	f816 1b01 	ldrb.w	r1, [r6], #1
 8009c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c66:	4291      	cmp	r1, r2
 8009c68:	d0f7      	beq.n	8009c5a <dir_find+0x122>
 8009c6a:	e78d      	b.n	8009b88 <dir_find+0x50>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c6c:	2704      	movs	r7, #4
 8009c6e:	e7da      	b.n	8009c26 <dir_find+0xee>
 8009c70:	0805119d 	.word	0x0805119d
 8009c74:	08051190 	.word	0x08051190

08009c78 <follow_path>:
{
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8009c7c:	780b      	ldrb	r3, [r1, #0]
{
 8009c7e:	b085      	sub	sp, #20
 8009c80:	4607      	mov	r7, r0
 8009c82:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8009c84:	2b2f      	cmp	r3, #47	@ 0x2f
 8009c86:	d001      	beq.n	8009c8c <follow_path+0x14>
 8009c88:	2b5c      	cmp	r3, #92	@ 0x5c
 8009c8a:	d101      	bne.n	8009c90 <follow_path+0x18>
		path++;
 8009c8c:	f108 0801 	add.w	r8, r8, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8009c90:	f04f 0b00 	mov.w	fp, #0
 8009c94:	f8c7 b208 	str.w	fp, [r7, #520]	@ 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009c98:	f898 3000 	ldrb.w	r3, [r8]
 8009c9c:	2b1f      	cmp	r3, #31
 8009c9e:	f200 80ca 	bhi.w	8009e36 <follow_path+0x1be>
		res = dir_sdi(dp, 0);
 8009ca2:	4659      	mov	r1, fp
 8009ca4:	4638      	mov	r0, r7
 8009ca6:	f7ff f936 	bl	8008f16 <dir_sdi>
		dp->dir = 0;
 8009caa:	f8c7 b214 	str.w	fp, [r7, #532]	@ 0x214
}
 8009cae:	b005      	add	sp, #20
 8009cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		w = p[si++];					/* Get a character */
 8009cb4:	4646      	mov	r6, r8
		lfn[di++] = w;					/* Store the Unicode character */
 8009cb6:	f823 0f02 	strh.w	r0, [r3, #2]!
		w = p[si++];					/* Get a character */
 8009cba:	e0cd      	b.n	8009e58 <follow_path+0x1e0>
	*path = &p[si];						/* Return pointer to the next segment */
 8009cbc:	44c8      	add	r8, r9
	while (di) {						/* Strip trailing spaces and dots */
 8009cbe:	2e00      	cmp	r6, #0
 8009cc0:	f000 80ef 	beq.w	8009ea2 <follow_path+0x22a>
		w = lfn[di - 1];
 8009cc4:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
		if (w != ' ' && w != '.') break;
 8009cc8:	2b20      	cmp	r3, #32
 8009cca:	d001      	beq.n	8009cd0 <follow_path+0x58>
 8009ccc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cce:	d101      	bne.n	8009cd4 <follow_path+0x5c>
		di--;
 8009cd0:	3e01      	subs	r6, #1
 8009cd2:	e7f4      	b.n	8009cbe <follow_path+0x46>
	mem_set(dp->fn, ' ', 11);
 8009cd4:	2120      	movs	r1, #32
 8009cd6:	220b      	movs	r2, #11
 8009cd8:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
	lfn[di] = 0;						/* LFN is created */
 8009cdc:	f82a b016 	strh.w	fp, [sl, r6, lsl #1]
	mem_set(dp->fn, ' ', 11);
 8009ce0:	f7fe fdc1 	bl	8008866 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
 8009cea:	2b20      	cmp	r3, #32
 8009cec:	d021      	beq.n	8009d32 <follow_path+0xba>
 8009cee:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cf0:	d01f      	beq.n	8009d32 <follow_path+0xba>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009cf2:	2c1f      	cmp	r4, #31
 8009cf4:	bf8c      	ite	hi
 8009cf6:	2400      	movhi	r4, #0
 8009cf8:	2401      	movls	r4, #1
 8009cfa:	00a4      	lsls	r4, r4, #2
	if (si) cf |= NS_LOSS | NS_LFN;
 8009cfc:	b109      	cbz	r1, 8009d02 <follow_path+0x8a>
 8009cfe:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009d02:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
 8009d06:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d08:	d001      	beq.n	8009d0e <follow_path+0x96>
 8009d0a:	3e01      	subs	r6, #1
 8009d0c:	d1f9      	bne.n	8009d02 <follow_path+0x8a>
		dp->fn[i++] = (BYTE)w;
 8009d0e:	f04f 0900 	mov.w	r9, #0
 8009d12:	2308      	movs	r3, #8
 8009d14:	464d      	mov	r5, r9
		w = lfn[si++];					/* Get an LFN character */
 8009d16:	f83a 0011 	ldrh.w	r0, [sl, r1, lsl #1]
 8009d1a:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8009d1c:	b1b8      	cbz	r0, 8009d4e <follow_path+0xd6>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009d1e:	2820      	cmp	r0, #32
 8009d20:	d003      	beq.n	8009d2a <follow_path+0xb2>
 8009d22:	282e      	cmp	r0, #46	@ 0x2e
 8009d24:	d107      	bne.n	8009d36 <follow_path+0xbe>
 8009d26:	42b2      	cmp	r2, r6
 8009d28:	d005      	beq.n	8009d36 <follow_path+0xbe>
			cf |= NS_LOSS | NS_LFN; continue;
 8009d2a:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8009d2e:	4611      	mov	r1, r2
 8009d30:	e7f1      	b.n	8009d16 <follow_path+0x9e>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009d32:	3101      	adds	r1, #1
 8009d34:	e7d7      	b.n	8009ce6 <follow_path+0x6e>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009d36:	4599      	cmp	r9, r3
 8009d38:	d204      	bcs.n	8009d44 <follow_path+0xcc>
 8009d3a:	42b2      	cmp	r2, r6
 8009d3c:	d145      	bne.n	8009dca <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
 8009d3e:	2b0b      	cmp	r3, #11
 8009d40:	d13c      	bne.n	8009dbc <follow_path+0x144>
 8009d42:	e001      	b.n	8009d48 <follow_path+0xd0>
 8009d44:	2b0b      	cmp	r3, #11
 8009d46:	d134      	bne.n	8009db2 <follow_path+0x13a>
				cf |= NS_LOSS | NS_LFN; break;
 8009d48:	f044 0403 	orr.w	r4, r4, #3
 8009d4c:	230b      	movs	r3, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8009d4e:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8009d52:	7811      	ldrb	r1, [r2, #0]
 8009d54:	29e5      	cmp	r1, #229	@ 0xe5
 8009d56:	bf04      	itt	eq
 8009d58:	2105      	moveq	r1, #5
 8009d5a:	7011      	strbeq	r1, [r2, #0]
	if (ni == 8) b <<= 2;
 8009d5c:	2b08      	cmp	r3, #8
 8009d5e:	bf04      	itt	eq
 8009d60:	00ad      	lsleq	r5, r5, #2
 8009d62:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8009d64:	f005 030c 	and.w	r3, r5, #12
 8009d68:	2b0c      	cmp	r3, #12
 8009d6a:	d003      	beq.n	8009d74 <follow_path+0xfc>
 8009d6c:	f005 0203 	and.w	r2, r5, #3
 8009d70:	2a03      	cmp	r2, #3
 8009d72:	d101      	bne.n	8009d78 <follow_path+0x100>
		cf |= NS_LFN;
 8009d74:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009d78:	07a1      	lsls	r1, r4, #30
 8009d7a:	d409      	bmi.n	8009d90 <follow_path+0x118>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009d7c:	f005 0503 	and.w	r5, r5, #3
 8009d80:	2d01      	cmp	r5, #1
 8009d82:	bf08      	it	eq
 8009d84:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009d88:	2b04      	cmp	r3, #4
 8009d8a:	bf08      	it	eq
 8009d8c:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009d90:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
			res = dir_find(dp);				/* Find an object with the sagment name */
 8009d94:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009d96:	72dc      	strb	r4, [r3, #11]
			res = dir_find(dp);				/* Find an object with the sagment name */
 8009d98:	f7ff fece 	bl	8009b38 <dir_find>
			ns = dp->fn[NSFLAG];
 8009d9c:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8009da0:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009da2:	b3c0      	cbz	r0, 8009e16 <follow_path+0x19e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009da4:	2804      	cmp	r0, #4
 8009da6:	d182      	bne.n	8009cae <follow_path+0x36>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009da8:	f013 0f04 	tst.w	r3, #4
 8009dac:	bf08      	it	eq
 8009dae:	2005      	moveq	r0, #5
 8009db0:	e77d      	b.n	8009cae <follow_path+0x36>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009db2:	42b2      	cmp	r2, r6
 8009db4:	d002      	beq.n	8009dbc <follow_path+0x144>
 8009db6:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8009dba:	d8c8      	bhi.n	8009d4e <follow_path+0xd6>
			b <<= 2; continue;
 8009dbc:	00ad      	lsls	r5, r5, #2
 8009dbe:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009dc0:	230b      	movs	r3, #11
 8009dc2:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 8009dc6:	b2ed      	uxtb	r5, r5
 8009dc8:	e7b1      	b.n	8009d2e <follow_path+0xb6>
		if (w >= 0x80) {				/* Non ASCII character */
 8009dca:	287f      	cmp	r0, #127	@ 0x7f
 8009dcc:	d90e      	bls.n	8009dec <follow_path+0x174>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009dce:	2100      	movs	r1, #0
			cf |= NS_LFN;				/* Force create LFN entry */
 8009dd0:	f044 0402 	orr.w	r4, r4, #2
 8009dd4:	e9cd 2301 	strd	r2, r3, [sp, #4]
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009dd8:	f7ff fe7c 	bl	8009ad4 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009ddc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009de0:	b160      	cbz	r0, 8009dfc <follow_path+0x184>
 8009de2:	4938      	ldr	r1, [pc, #224]	@ (8009ec4 <follow_path+0x24c>)
 8009de4:	4401      	add	r1, r0
 8009de6:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009dea:	b138      	cbz	r0, 8009dfc <follow_path+0x184>
	while (*str && *str != chr) str++;
 8009dec:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8009ecc <follow_path+0x254>
 8009df0:	f81c 1b01 	ldrb.w	r1, [ip], #1
 8009df4:	2900      	cmp	r1, #0
 8009df6:	d058      	beq.n	8009eaa <follow_path+0x232>
 8009df8:	4288      	cmp	r0, r1
 8009dfa:	d1f9      	bne.n	8009df0 <follow_path+0x178>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009dfc:	f044 0403 	orr.w	r4, r4, #3
 8009e00:	205f      	movs	r0, #95	@ 0x5f
		dp->fn[i++] = (BYTE)w;
 8009e02:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
 8009e06:	f801 0009 	strb.w	r0, [r1, r9]
 8009e0a:	f109 0901 	add.w	r9, r9, #1
 8009e0e:	e78e      	b.n	8009d2e <follow_path+0xb6>
					b |= 2;
 8009e10:	f045 0502 	orr.w	r5, r5, #2
 8009e14:	e7f5      	b.n	8009e02 <follow_path+0x18a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e16:	075a      	lsls	r2, r3, #29
 8009e18:	f53f af49 	bmi.w	8009cae <follow_path+0x36>
			dir = dp->dir;						/* Follow the sub-directory */
 8009e1c:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009e20:	7acb      	ldrb	r3, [r1, #11]
 8009e22:	06db      	lsls	r3, r3, #27
 8009e24:	d53f      	bpl.n	8009ea6 <follow_path+0x22e>
			dp->sclust = ld_clust(dp->fs, dir);
 8009e26:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009e2a:	f893 0200 	ldrb.w	r0, [r3, #512]	@ 0x200
 8009e2e:	f7fe fffb 	bl	8008e28 <ld_clust.isra.0>
 8009e32:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8009e36:	f898 3000 	ldrb.w	r3, [r8]
 8009e3a:	46c1      	mov	r9, r8
 8009e3c:	f108 0801 	add.w	r8, r8, #1
 8009e40:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e42:	d0f8      	beq.n	8009e36 <follow_path+0x1be>
 8009e44:	2b5c      	cmp	r3, #92	@ 0x5c
 8009e46:	d0f6      	beq.n	8009e36 <follow_path+0x1be>
	lfn = dp->lfn;
 8009e48:	f8d7 a220 	ldr.w	sl, [r7, #544]	@ 0x220
	si = di = 0;
 8009e4c:	f109 32ff 	add.w	r2, r9, #4294967295
 8009e50:	2600      	movs	r6, #0
 8009e52:	f1aa 0502 	sub.w	r5, sl, #2
 8009e56:	462b      	mov	r3, r5
		w = p[si++];					/* Get a character */
 8009e58:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8009e5c:	f106 0801 	add.w	r8, r6, #1
 8009e60:	9302      	str	r3, [sp, #8]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8009e62:	2c1f      	cmp	r4, #31
		w = p[si++];					/* Get a character */
 8009e64:	9201      	str	r2, [sp, #4]
 8009e66:	9203      	str	r2, [sp, #12]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8009e68:	f67f af28 	bls.w	8009cbc <follow_path+0x44>
 8009e6c:	2c2f      	cmp	r4, #47	@ 0x2f
 8009e6e:	f43f af25 	beq.w	8009cbc <follow_path+0x44>
 8009e72:	2c5c      	cmp	r4, #92	@ 0x5c
 8009e74:	f43f af22 	beq.w	8009cbc <follow_path+0x44>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8009e78:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 8009e7c:	d011      	beq.n	8009ea2 <follow_path+0x22a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009e7e:	2101      	movs	r1, #1
 8009e80:	4620      	mov	r0, r4
 8009e82:	f7ff fe27 	bl	8009ad4 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009e86:	b160      	cbz	r0, 8009ea2 <follow_path+0x22a>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8009e88:	287f      	cmp	r0, #127	@ 0x7f
 8009e8a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009e8e:	f63f af11 	bhi.w	8009cb4 <follow_path+0x3c>
 8009e92:	4c0d      	ldr	r4, [pc, #52]	@ (8009ec8 <follow_path+0x250>)
	while (*str && *str != chr) str++;
 8009e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	f43f af0b 	beq.w	8009cb4 <follow_path+0x3c>
 8009e9e:	4281      	cmp	r1, r0
 8009ea0:	d1f8      	bne.n	8009e94 <follow_path+0x21c>
 8009ea2:	2006      	movs	r0, #6
 8009ea4:	e703      	b.n	8009cae <follow_path+0x36>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009ea6:	2005      	movs	r0, #5
	return res;
 8009ea8:	e701      	b.n	8009cae <follow_path+0x36>
				if (IsUpper(w)) {		/* ASCII large capital */
 8009eaa:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
 8009eae:	2919      	cmp	r1, #25
 8009eb0:	d9ae      	bls.n	8009e10 <follow_path+0x198>
					if (IsLower(w)) {	/* ASCII small capital */
 8009eb2:	f1a0 0161 	sub.w	r1, r0, #97	@ 0x61
 8009eb6:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8009eb8:	bf9e      	ittt	ls
 8009eba:	3820      	subls	r0, #32
 8009ebc:	f045 0501 	orrls.w	r5, r5, #1
 8009ec0:	b280      	uxthls	r0, r0
 8009ec2:	e79e      	b.n	8009e02 <follow_path+0x18a>
 8009ec4:	08051110 	.word	0x08051110
 8009ec8:	0805581b 	.word	0x0805581b
 8009ecc:	08055824 	.word	0x08055824

08009ed0 <dir_register>:
{
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mem_cpy(sn, fn, 12);
 8009ed4:	220c      	movs	r2, #12
{
 8009ed6:	b087      	sub	sp, #28
	fn = dp->fn; lfn = dp->lfn;
 8009ed8:	f8d0 6218 	ldr.w	r6, [r0, #536]	@ 0x218
{
 8009edc:	4605      	mov	r5, r0
	fn = dp->fn; lfn = dp->lfn;
 8009ede:	f8d0 8220 	ldr.w	r8, [r0, #544]	@ 0x220
	mem_cpy(sn, fn, 12);
 8009ee2:	eb0d 0002 	add.w	r0, sp, r2
 8009ee6:	4631      	mov	r1, r6
 8009ee8:	f7fe fcb4 	bl	8008854 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009eec:	f89d a017 	ldrb.w	sl, [sp, #23]
 8009ef0:	f01a 0f01 	tst.w	sl, #1
 8009ef4:	d069      	beq.n	8009fca <dir_register+0xfa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8009ef6:	2300      	movs	r3, #0
		for (n = 1; n < 100; n++) {
 8009ef8:	2701      	movs	r7, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009efa:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 800a13c <dir_register+0x26c>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8009efe:	72f3      	strb	r3, [r6, #11]
 8009f00:	f8c5 3220 	str.w	r3, [r5, #544]	@ 0x220
	mem_cpy(dst, src, 11);
 8009f04:	220b      	movs	r2, #11
 8009f06:	a903      	add	r1, sp, #12
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f7fe fca3 	bl	8008854 <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8009f0e:	2f05      	cmp	r7, #5
 8009f10:	d94f      	bls.n	8009fb2 <dir_register+0xe2>
 8009f12:	f1a8 0002 	sub.w	r0, r8, #2
 8009f16:	463b      	mov	r3, r7
		while (*lfn) {	/* Create a CRC */
 8009f18:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8009f1c:	2a00      	cmp	r2, #0
 8009f1e:	d13b      	bne.n	8009f98 <dir_register+0xc8>
 8009f20:	a803      	add	r0, sp, #12
 8009f22:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
 8009f24:	f003 040f 	and.w	r4, r3, #15
		ns[i--] = c;
 8009f28:	3a01      	subs	r2, #1
		c = (seq % 16) + '0';
 8009f2a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
		if (c > '9') c += 7;
 8009f2e:	2939      	cmp	r1, #57	@ 0x39
 8009f30:	bf88      	it	hi
 8009f32:	f104 0137 	addhi.w	r1, r4, #55	@ 0x37
	} while (seq);
 8009f36:	2b0f      	cmp	r3, #15
		ns[i--] = c;
 8009f38:	f800 1d01 	strb.w	r1, [r0, #-1]!
		seq /= 16;
 8009f3c:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
 8009f40:	d839      	bhi.n	8009fb6 <dir_register+0xe6>
	ns[i] = '~';
 8009f42:	f102 0318 	add.w	r3, r2, #24
 8009f46:	217e      	movs	r1, #126	@ 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f48:	1e74      	subs	r4, r6, #1
	ns[i] = '~';
 8009f4a:	446b      	add	r3, sp
 8009f4c:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f50:	2300      	movs	r3, #0
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d003      	beq.n	8009f5e <dir_register+0x8e>
 8009f56:	1c59      	adds	r1, r3, #1
 8009f58:	5c60      	ldrb	r0, [r4, r1]
 8009f5a:	2820      	cmp	r0, #32
 8009f5c:	d12d      	bne.n	8009fba <dir_register+0xea>
 8009f5e:	4433      	add	r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009f60:	2a07      	cmp	r2, #7
 8009f62:	bf97      	itett	ls
 8009f64:	f102 0118 	addls.w	r1, r2, #24
 8009f68:	2120      	movhi	r1, #32
 8009f6a:	3201      	addls	r2, #1
 8009f6c:	4469      	addls	r1, sp
 8009f6e:	bf98      	it	ls
 8009f70:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8009f74:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8009f78:	1b99      	subs	r1, r3, r6
 8009f7a:	2907      	cmp	r1, #7
 8009f7c:	d9f0      	bls.n	8009f60 <dir_register+0x90>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009f7e:	4628      	mov	r0, r5
 8009f80:	f7ff fdda 	bl	8009b38 <dir_find>
 8009f84:	4604      	mov	r4, r0
			if (res != FR_OK) break;
 8009f86:	b9d0      	cbnz	r0, 8009fbe <dir_register+0xee>
		for (n = 1; n < 100; n++) {
 8009f88:	3701      	adds	r7, #1
 8009f8a:	2f64      	cmp	r7, #100	@ 0x64
 8009f8c:	d1ba      	bne.n	8009f04 <dir_register+0x34>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009f8e:	2407      	movs	r4, #7
}
 8009f90:	4620      	mov	r0, r4
 8009f92:	b007      	add	sp, #28
 8009f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f98:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 8009f9a:	f002 0401 	and.w	r4, r2, #1
				wc >>= 1;
 8009f9e:	0852      	lsrs	r2, r2, #1
				sr = (sr << 1) + (wc & 1);
 8009fa0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009fa4:	03dc      	lsls	r4, r3, #15
 8009fa6:	bf48      	it	mi
 8009fa8:	ea83 0309 	eormi.w	r3, r3, r9
			for (i = 0; i < 16; i++) {
 8009fac:	3901      	subs	r1, #1
 8009fae:	d1f4      	bne.n	8009f9a <dir_register+0xca>
 8009fb0:	e7b2      	b.n	8009f18 <dir_register+0x48>
 8009fb2:	463b      	mov	r3, r7
 8009fb4:	e7b4      	b.n	8009f20 <dir_register+0x50>
		seq /= 16;
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	e7b4      	b.n	8009f24 <dir_register+0x54>
 8009fba:	460b      	mov	r3, r1
 8009fbc:	e7c9      	b.n	8009f52 <dir_register+0x82>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009fbe:	2804      	cmp	r0, #4
 8009fc0:	d1e6      	bne.n	8009f90 <dir_register+0xc0>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8009fc2:	f886 a00b 	strb.w	sl, [r6, #11]
 8009fc6:	f8c5 8220 	str.w	r8, [r5, #544]	@ 0x220
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8009fca:	f01a 0f02 	tst.w	sl, #2
 8009fce:	f040 80a6 	bne.w	800a11e <dir_register+0x24e>
		nent = 1;
 8009fd2:	2601      	movs	r6, #1
	res = dir_sdi(dp, 0);
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f7fe ff9d 	bl	8008f16 <dir_sdi>
	if (res == FR_OK) {
 8009fdc:	4604      	mov	r4, r0
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	f040 80a8 	bne.w	800a134 <dir_register+0x264>
		n = 0;
 8009fe4:	4607      	mov	r7, r0
			res = move_window(dp->fs, dp->sect);
 8009fe6:	f8d5 1210 	ldr.w	r1, [r5, #528]	@ 0x210
 8009fea:	f8d5 0200 	ldr.w	r0, [r5, #512]	@ 0x200
 8009fee:	f7fe fd79 	bl	8008ae4 <move_window>
			if (res != FR_OK) break;
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	f040 809d 	bne.w	800a134 <dir_register+0x264>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009ffa:	f8d5 3214 	ldr.w	r3, [r5, #532]	@ 0x214
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2be5      	cmp	r3, #229	@ 0xe5
 800a002:	d002      	beq.n	800a00a <dir_register+0x13a>
 800a004:	2b00      	cmp	r3, #0
 800a006:	f040 808c 	bne.w	800a122 <dir_register+0x252>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a00a:	3701      	adds	r7, #1
 800a00c:	42be      	cmp	r6, r7
 800a00e:	f040 8089 	bne.w	800a124 <dir_register+0x254>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a012:	3e01      	subs	r6, #1
 800a014:	d058      	beq.n	800a0c8 <dir_register+0x1f8>
		res = dir_sdi(dp, dp->index - nent);
 800a016:	f8b5 1206 	ldrh.w	r1, [r5, #518]	@ 0x206
 800a01a:	4628      	mov	r0, r5
 800a01c:	1b89      	subs	r1, r1, r6
 800a01e:	f7fe ff7a 	bl	8008f16 <dir_sdi>
		if (res == FR_OK) {
 800a022:	4604      	mov	r4, r0
 800a024:	2800      	cmp	r0, #0
 800a026:	d1b3      	bne.n	8009f90 <dir_register+0xc0>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800a028:	f8d5 0218 	ldr.w	r0, [r5, #536]	@ 0x218
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a02c:	f04f 080f 	mov.w	r8, #15
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800a030:	f7fe fcee 	bl	8008a10 <sum_sfn>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800a034:	f64f 79ff 	movw	r9, #65535	@ 0xffff
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800a038:	4607      	mov	r7, r0
				res = move_window(dp->fs, dp->sect);
 800a03a:	f8d5 1210 	ldr.w	r1, [r5, #528]	@ 0x210
 800a03e:	f8d5 0200 	ldr.w	r0, [r5, #512]	@ 0x200
 800a042:	f7fe fd4f 	bl	8008ae4 <move_window>
 800a046:	4603      	mov	r3, r0
 800a048:	4604      	mov	r4, r0
				if (res != FR_OK) break;
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d1a0      	bne.n	8009f90 <dir_register+0xc0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800a04e:	b2f0      	uxtb	r0, r6
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800a050:	240d      	movs	r4, #13
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800a052:	f8d5 2214 	ldr.w	r2, [r5, #532]	@ 0x214
	s = wc = 0;
 800a056:	469a      	mov	sl, r3
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800a058:	1e41      	subs	r1, r0, #1
 800a05a:	f8df e0e4 	ldr.w	lr, [pc, #228]	@ 800a140 <dir_register+0x270>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800a05e:	f8d5 c220 	ldr.w	ip, [r5, #544]	@ 0x220
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800a062:	4361      	muls	r1, r4
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800a064:	7357      	strb	r7, [r2, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a066:	f882 800b 	strb.w	r8, [r2, #11]
	dir[LDIR_Type] = 0;
 800a06a:	7313      	strb	r3, [r2, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800a06c:	7693      	strb	r3, [r2, #26]
 800a06e:	76d3      	strb	r3, [r2, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800a070:	454b      	cmp	r3, r9
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800a072:	f81e 4b01 	ldrb.w	r4, [lr], #1
	} while (++s < 13);
 800a076:	f10a 0a01 	add.w	sl, sl, #1
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800a07a:	bf1c      	itt	ne
 800a07c:	f83c 3011 	ldrhne.w	r3, [ip, r1, lsl #1]
 800a080:	3101      	addne	r1, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800a082:	5513      	strb	r3, [r2, r4]
 800a084:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 800a088:	4414      	add	r4, r2
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	bf08      	it	eq
 800a08e:	464b      	moveq	r3, r9
	} while (++s < 13);
 800a090:	f1ba 0f0d 	cmp.w	sl, #13
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800a094:	f884 b001 	strb.w	fp, [r4, #1]
	} while (++s < 13);
 800a098:	d1ea      	bne.n	800a070 <dir_register+0x1a0>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800a09a:	454b      	cmp	r3, r9
 800a09c:	d002      	beq.n	800a0a4 <dir_register+0x1d4>
 800a09e:	f83c 3011 	ldrh.w	r3, [ip, r1, lsl #1]
 800a0a2:	b90b      	cbnz	r3, 800a0a8 <dir_register+0x1d8>
 800a0a4:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a0a8:	7010      	strb	r0, [r2, #0]
				dp->fs->wflag = 1;
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f8d5 3200 	ldr.w	r3, [r5, #512]	@ 0x200
				res = dir_next(dp, 0);	/* Next entry */
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4628      	mov	r0, r5
				dp->fs->wflag = 1;
 800a0b4:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800a0b8:	f7ff f84f 	bl	800915a <dir_next>
			} while (res == FR_OK && --nent);
 800a0bc:	4604      	mov	r4, r0
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	f47f af66 	bne.w	8009f90 <dir_register+0xc0>
 800a0c4:	3e01      	subs	r6, #1
 800a0c6:	d1b8      	bne.n	800a03a <dir_register+0x16a>
		res = move_window(dp->fs, dp->sect);
 800a0c8:	f8d5 1210 	ldr.w	r1, [r5, #528]	@ 0x210
 800a0cc:	f8d5 0200 	ldr.w	r0, [r5, #512]	@ 0x200
 800a0d0:	f7fe fd08 	bl	8008ae4 <move_window>
		if (res == FR_OK) {
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	f47f af5a 	bne.w	8009f90 <dir_register+0xc0>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800a0dc:	4601      	mov	r1, r0
 800a0de:	2220      	movs	r2, #32
 800a0e0:	f8d5 0214 	ldr.w	r0, [r5, #532]	@ 0x214
 800a0e4:	f7fe fbbf 	bl	8008866 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800a0e8:	220b      	movs	r2, #11
 800a0ea:	e9d5 0185 	ldrd	r0, r1, [r5, #532]	@ 0x214
 800a0ee:	f7fe fbb1 	bl	8008854 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a0f2:	e9d5 2385 	ldrd	r2, r3, [r5, #532]	@ 0x214
 800a0f6:	7adb      	ldrb	r3, [r3, #11]
 800a0f8:	f003 0318 	and.w	r3, r3, #24
 800a0fc:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 800a0fe:	2201      	movs	r2, #1
 800a100:	f8d5 3200 	ldr.w	r3, [r5, #512]	@ 0x200
 800a104:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 800a108:	e742      	b.n	8009f90 <dir_register+0xc0>
		for (n = 0; lfn[n]; n++) ;
 800a10a:	3601      	adds	r6, #1
 800a10c:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1fa      	bne.n	800a10a <dir_register+0x23a>
		nent = (n + 25) / 13;
 800a114:	3619      	adds	r6, #25
 800a116:	230d      	movs	r3, #13
 800a118:	fbb6 f6f3 	udiv	r6, r6, r3
 800a11c:	e75a      	b.n	8009fd4 <dir_register+0x104>
		for (n = 0; lfn[n]; n++) ;
 800a11e:	2600      	movs	r6, #0
 800a120:	e7f4      	b.n	800a10c <dir_register+0x23c>
				n = 0;					/* Not a blank entry. Restart to search */
 800a122:	4607      	mov	r7, r0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a124:	2101      	movs	r1, #1
 800a126:	4628      	mov	r0, r5
 800a128:	f7ff f817 	bl	800915a <dir_next>
		} while (res == FR_OK);
 800a12c:	4604      	mov	r4, r0
 800a12e:	2800      	cmp	r0, #0
 800a130:	f43f af59 	beq.w	8009fe6 <dir_register+0x116>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a134:	2c04      	cmp	r4, #4
 800a136:	f43f af2a 	beq.w	8009f8e <dir_register+0xbe>
 800a13a:	e729      	b.n	8009f90 <dir_register+0xc0>
 800a13c:	00011021 	.word	0x00011021
 800a140:	08051190 	.word	0x08051190

0800a144 <f_open>:
{
 800a144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a148:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800a14c:	4615      	mov	r5, r2
	if (!fp) return FR_INVALID_OBJECT;
 800a14e:	4606      	mov	r6, r0
{
 800a150:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800a152:	2800      	cmp	r0, #0
 800a154:	f000 80d8 	beq.w	800a308 <f_open+0x1c4>
	fp->fs = 0;			/* Clear file object */
 800a158:	2300      	movs	r3, #0
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a15a:	f002 071e 	and.w	r7, r2, #30
 800a15e:	a901      	add	r1, sp, #4
	fp->fs = 0;			/* Clear file object */
 800a160:	f8c0 3200 	str.w	r3, [r0, #512]	@ 0x200
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a164:	463a      	mov	r2, r7
 800a166:	a885      	add	r0, sp, #532	@ 0x214
 800a168:	f7fe fd00 	bl	8008b6c <find_volume>
	if (res == FR_OK) {
 800a16c:	4604      	mov	r4, r0
 800a16e:	2800      	cmp	r0, #0
 800a170:	f040 8097 	bne.w	800a2a2 <f_open+0x15e>
		INIT_BUF(dj);
 800a174:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a178:	f000 f960 	bl	800a43c <ff_memalloc>
 800a17c:	4680      	mov	r8, r0
 800a17e:	2800      	cmp	r0, #0
 800a180:	f000 80c4 	beq.w	800a30c <f_open+0x1c8>
 800a184:	ab02      	add	r3, sp, #8
 800a186:	908d      	str	r0, [sp, #564]	@ 0x234
		res = follow_path(&dj, path);	/* Follow the file path */
 800a188:	9901      	ldr	r1, [sp, #4]
 800a18a:	a805      	add	r0, sp, #20
		INIT_BUF(dj);
 800a18c:	938b      	str	r3, [sp, #556]	@ 0x22c
		res = follow_path(&dj, path);	/* Follow the file path */
 800a18e:	f7ff fd73 	bl	8009c78 <follow_path>
		dir = dj.dir;
 800a192:	f8dd 9228 	ldr.w	r9, [sp, #552]	@ 0x228
		if (res == FR_OK) {
 800a196:	4604      	mov	r4, r0
 800a198:	b950      	cbnz	r0, 800a1b0 <f_open+0x6c>
			if (!dir)	/* Default directory itself */
 800a19a:	f1b9 0f00 	cmp.w	r9, #0
 800a19e:	f000 8085 	beq.w	800a2ac <f_open+0x168>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a1a2:	1e39      	subs	r1, r7, #0
 800a1a4:	a805      	add	r0, sp, #20
 800a1a6:	bf18      	it	ne
 800a1a8:	2101      	movne	r1, #1
 800a1aa:	f7fe fb63 	bl	8008874 <chk_lock>
 800a1ae:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a1b0:	f015 0f1c 	tst.w	r5, #28
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800a1b4:	f005 071f 	and.w	r7, r5, #31
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a1b8:	f000 8085 	beq.w	800a2c6 <f_open+0x182>
			if (res != FR_OK) {					/* No file, create new */
 800a1bc:	2c00      	cmp	r4, #0
 800a1be:	d079      	beq.n	800a2b4 <f_open+0x170>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800a1c0:	2c04      	cmp	r4, #4
 800a1c2:	d109      	bne.n	800a1d8 <f_open+0x94>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a1c4:	4b54      	ldr	r3, [pc, #336]	@ (800a318 <f_open+0x1d4>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	b112      	cbz	r2, 800a1d0 <f_open+0x8c>
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d16f      	bne.n	800a2b0 <f_open+0x16c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a1d0:	a805      	add	r0, sp, #20
 800a1d2:	f7ff fe7d 	bl	8009ed0 <dir_register>
 800a1d6:	4604      	mov	r4, r0
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a1d8:	f047 0708 	orr.w	r7, r7, #8
				dir = dj.dir;					/* New entry */
 800a1dc:	f8dd 9228 	ldr.w	r9, [sp, #552]	@ 0x228
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a1e0:	2c00      	cmp	r4, #0
 800a1e2:	d140      	bne.n	800a266 <f_open+0x122>
 800a1e4:	073d      	lsls	r5, r7, #28
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a1e6:	f8dd a214 	ldr.w	sl, [sp, #532]	@ 0x214
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a1ea:	d57a      	bpl.n	800a2e2 <f_open+0x19e>
				dw = GET_FATTIME();				/* Created time */
 800a1ec:	f7fe fb30 	bl	8008850 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a1f0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a1f4:	f889 000e 	strb.w	r0, [r9, #14]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a1f8:	4649      	mov	r1, r9
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a1fa:	f889 300f 	strb.w	r3, [r9, #15]
 800a1fe:	0c03      	lsrs	r3, r0, #16
 800a200:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a202:	f889 400b 	strb.w	r4, [r9, #11]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a206:	f889 3010 	strb.w	r3, [r9, #16]
 800a20a:	f889 0011 	strb.w	r0, [r9, #17]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800a20e:	f889 401c 	strb.w	r4, [r9, #28]
 800a212:	f889 401d 	strb.w	r4, [r9, #29]
 800a216:	f889 401e 	strb.w	r4, [r9, #30]
 800a21a:	f889 401f 	strb.w	r4, [r9, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a21e:	f89a 0200 	ldrb.w	r0, [sl, #512]	@ 0x200
 800a222:	f7fe fe01 	bl	8008e28 <ld_clust.isra.0>
				dj.fs->wflag = 1;
 800a226:	2301      	movs	r3, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a228:	f889 401a 	strb.w	r4, [r9, #26]
				if (cl) {						/* Remove the cluster chain if exist */
 800a22c:	4605      	mov	r5, r0
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a22e:	f889 401b 	strb.w	r4, [r9, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a232:	f889 4014 	strb.w	r4, [r9, #20]
 800a236:	f889 4015 	strb.w	r4, [r9, #21]
				dj.fs->wflag = 1;
 800a23a:	f88a 3204 	strb.w	r3, [sl, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800a23e:	2800      	cmp	r0, #0
 800a240:	d04b      	beq.n	800a2da <f_open+0x196>
					res = remove_chain(dj.fs, cl);
 800a242:	4601      	mov	r1, r0
 800a244:	4650      	mov	r0, sl
					dw = dj.fs->winsect;
 800a246:	f8da b22c 	ldr.w	fp, [sl, #556]	@ 0x22c
					res = remove_chain(dj.fs, cl);
 800a24a:	f7ff f811 	bl	8009270 <remove_chain>
					if (res == FR_OK) {
 800a24e:	4604      	mov	r4, r0
 800a250:	b948      	cbnz	r0, 800a266 <f_open+0x122>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a252:	3d01      	subs	r5, #1
						res = move_window(dj.fs, dw);
 800a254:	4659      	mov	r1, fp
 800a256:	4650      	mov	r0, sl
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a258:	f8ca 520c 	str.w	r5, [sl, #524]	@ 0x20c
						res = move_window(dj.fs, dw);
 800a25c:	f7fe fc42 	bl	8008ae4 <move_window>
		if (res == FR_OK) {
 800a260:	4604      	mov	r4, r0
 800a262:	2800      	cmp	r0, #0
 800a264:	d03b      	beq.n	800a2de <f_open+0x19a>
		FREE_BUF();
 800a266:	4640      	mov	r0, r8
 800a268:	f000 f8ea 	bl	800a440 <ff_memfree>
		if (res == FR_OK) {
 800a26c:	b9cc      	cbnz	r4, 800a2a2 <f_open+0x15e>
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a26e:	9d85      	ldr	r5, [sp, #532]	@ 0x214
 800a270:	4649      	mov	r1, r9
			fp->flag = mode;					/* File access mode */
 800a272:	f886 7206 	strb.w	r7, [r6, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 800a276:	f886 4207 	strb.w	r4, [r6, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a27a:	f895 0200 	ldrb.w	r0, [r5, #512]	@ 0x200
 800a27e:	f7fe fdd3 	bl	8008e28 <ld_clust.isra.0>
 800a282:	f8c6 0210 	str.w	r0, [r6, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800a286:	f8d9 301c 	ldr.w	r3, [r9, #28]
			fp->dsect = 0;
 800a28a:	f8c6 4218 	str.w	r4, [r6, #536]	@ 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 800a28e:	f8c6 4224 	str.w	r4, [r6, #548]	@ 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 800a292:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
			fp->fptr = 0;						/* File pointer */
 800a296:	e9c6 4382 	strd	r4, r3, [r6, #520]	@ 0x208
			fp->id = fp->fs->id;
 800a29a:	f8b5 3206 	ldrh.w	r3, [r5, #518]	@ 0x206
 800a29e:	f8a6 3204 	strh.w	r3, [r6, #516]	@ 0x204
}
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 800a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				res = FR_INVALID_NAME;
 800a2ac:	2406      	movs	r4, #6
 800a2ae:	e77f      	b.n	800a1b0 <f_open+0x6c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a2b0:	2412      	movs	r4, #18
 800a2b2:	e791      	b.n	800a1d8 <f_open+0x94>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a2b4:	f899 300b 	ldrb.w	r3, [r9, #11]
 800a2b8:	f013 0f11 	tst.w	r3, #17
 800a2bc:	d12a      	bne.n	800a314 <f_open+0x1d0>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800a2be:	f3c5 0580 	ubfx	r5, r5, #2, #1
 800a2c2:	00ec      	lsls	r4, r5, #3
 800a2c4:	e78c      	b.n	800a1e0 <f_open+0x9c>
			if (res == FR_OK) {					/* Follow succeeded */
 800a2c6:	2c00      	cmp	r4, #0
 800a2c8:	d1cd      	bne.n	800a266 <f_open+0x122>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800a2ca:	f899 300b 	ldrb.w	r3, [r9, #11]
 800a2ce:	06dc      	lsls	r4, r3, #27
 800a2d0:	d41e      	bmi.n	800a310 <f_open+0x1cc>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800a2d2:	07a8      	lsls	r0, r5, #30
 800a2d4:	d501      	bpl.n	800a2da <f_open+0x196>
 800a2d6:	07da      	lsls	r2, r3, #31
 800a2d8:	d41c      	bmi.n	800a314 <f_open+0x1d0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a2da:	073b      	lsls	r3, r7, #28
 800a2dc:	d501      	bpl.n	800a2e2 <f_open+0x19e>
				mode |= FA__WRITTEN;
 800a2de:	f047 0720 	orr.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a2e2:	9b85      	ldr	r3, [sp, #532]	@ 0x214
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2e4:	2f01      	cmp	r7, #1
 800a2e6:	a805      	add	r0, sp, #20
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a2e8:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2ec:	bf94      	ite	ls
 800a2ee:	2100      	movls	r1, #0
 800a2f0:	2101      	movhi	r1, #1
			fp->dir_ptr = dir;
 800a2f2:	e9c6 3987 	strd	r3, r9, [r6, #540]	@ 0x21c
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2f6:	f7fe fafd 	bl	80088f4 <inc_lock>
			if (!fp->lockid) res = FR_INT_ERR;
 800a2fa:	fab0 f480 	clz	r4, r0
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2fe:	f8c6 0228 	str.w	r0, [r6, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800a302:	0964      	lsrs	r4, r4, #5
 800a304:	0064      	lsls	r4, r4, #1
 800a306:	e7ae      	b.n	800a266 <f_open+0x122>
	if (!fp) return FR_INVALID_OBJECT;
 800a308:	2409      	movs	r4, #9
 800a30a:	e7ca      	b.n	800a2a2 <f_open+0x15e>
		INIT_BUF(dj);
 800a30c:	2411      	movs	r4, #17
 800a30e:	e7c8      	b.n	800a2a2 <f_open+0x15e>
					res = FR_NO_FILE;
 800a310:	2404      	movs	r4, #4
 800a312:	e7a8      	b.n	800a266 <f_open+0x122>
						res = FR_DENIED;
 800a314:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800a316:	e7a6      	b.n	800a266 <f_open+0x122>
 800a318:	200018d0 	.word	0x200018d0

0800a31c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800a31c:	4b0f      	ldr	r3, [pc, #60]	@ (800a35c <FATFS_LinkDriverEx+0x40>)
{
 800a31e:	b530      	push	{r4, r5, lr}
  if(disk.nbr <= _VOLUMES)
 800a320:	7a5c      	ldrb	r4, [r3, #9]
 800a322:	2c01      	cmp	r4, #1
 800a324:	d817      	bhi.n	800a356 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a326:	7a5d      	ldrb	r5, [r3, #9]
 800a328:	2400      	movs	r4, #0
 800a32a:	b2ed      	uxtb	r5, r5
 800a32c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800a32e:	7a5d      	ldrb	r5, [r3, #9]
 800a330:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a334:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800a336:	7a58      	ldrb	r0, [r3, #9]
 800a338:	4418      	add	r0, r3
 800a33a:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800a33c:	7a5a      	ldrb	r2, [r3, #9]
 800a33e:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800a340:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 800a342:	b2c0      	uxtb	r0, r0
 800a344:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800a346:	233a      	movs	r3, #58	@ 0x3a
    path[2] = '/';
    path[3] = 0;
 800a348:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 800a34a:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800a34c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800a34e:	232f      	movs	r3, #47	@ 0x2f
    path[3] = 0;
 800a350:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800a352:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }
  
  return ret;
}
 800a354:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800a356:	2001      	movs	r0, #1
 800a358:	e7fc      	b.n	800a354 <FATFS_LinkDriverEx+0x38>
 800a35a:	bf00      	nop
 800a35c:	200018f0 	.word	0x200018f0

0800a360 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800a360:	2200      	movs	r2, #0
 800a362:	f7ff bfdb 	b.w	800a31c <FATFS_LinkDriverEx>
	...

0800a368 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a368:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800a36a:	2301      	movs	r3, #1
 800a36c:	4c05      	ldr	r4, [pc, #20]	@ (800a384 <SD_initialize+0x1c>)
 800a36e:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800a370:	f7f8 fea8 	bl	80030c4 <BSP_SD_Init>
 800a374:	b918      	cbnz	r0, 800a37e <SD_initialize+0x16>
  {
    Stat &= ~STA_NOINIT;
 800a376:	7823      	ldrb	r3, [r4, #0]
 800a378:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a37c:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 800a37e:	7820      	ldrb	r0, [r4, #0]
}
 800a380:	bd10      	pop	{r4, pc}
 800a382:	bf00      	nop
 800a384:	200009d5 	.word	0x200009d5

0800a388 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a388:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800a38a:	2301      	movs	r3, #1
 800a38c:	4c05      	ldr	r4, [pc, #20]	@ (800a3a4 <SD_status+0x1c>)
 800a38e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 800a390:	f7f8 fec6 	bl	8003120 <BSP_SD_GetStatus>
 800a394:	b918      	cbnz	r0, 800a39e <SD_status+0x16>
  {
    Stat &= ~STA_NOINIT;
 800a396:	7823      	ldrb	r3, [r4, #0]
 800a398:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a39c:	7023      	strb	r3, [r4, #0]
  }
  
  return Stat;
 800a39e:	7820      	ldrb	r0, [r4, #0]
}
 800a3a0:	bd10      	pop	{r4, pc}
 800a3a2:	bf00      	nop
 800a3a4:	200009d5 	.word	0x200009d5

0800a3a8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a3a8:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800a3aa:	9301      	str	r3, [sp, #4]
 800a3ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3b0:	0252      	lsls	r2, r2, #9
 800a3b2:	4608      	mov	r0, r1
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f7f8 fd80 	bl	8002ebc <BSP_SD_ReadBlocks>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 800a3bc:	3800      	subs	r0, #0
 800a3be:	bf18      	it	ne
 800a3c0:	2001      	movne	r0, #1
 800a3c2:	b003      	add	sp, #12
 800a3c4:	f85d fb04 	ldr.w	pc, [sp], #4

0800a3c8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a3c8:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800a3ca:	9301      	str	r3, [sp, #4]
 800a3cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3d0:	0252      	lsls	r2, r2, #9
 800a3d2:	4608      	mov	r0, r1
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f7f8 fd82 	bl	8002ee0 <BSP_SD_WriteBlocks>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 800a3dc:	3800      	subs	r0, #0
 800a3de:	bf18      	it	ne
 800a3e0:	2001      	movne	r0, #1
 800a3e2:	b003      	add	sp, #12
 800a3e4:	f85d fb04 	ldr.w	pc, [sp], #4

0800a3e8 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a3e8:	4b13      	ldr	r3, [pc, #76]	@ (800a438 <SD_ioctl+0x50>)
{
 800a3ea:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a3ec:	781c      	ldrb	r4, [r3, #0]
{
 800a3ee:	b097      	sub	sp, #92	@ 0x5c
 800a3f0:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a3f2:	f014 0401 	ands.w	r4, r4, #1
 800a3f6:	d11a      	bne.n	800a42e <SD_ioctl+0x46>
  
  switch (cmd)
 800a3f8:	2903      	cmp	r1, #3
 800a3fa:	d81a      	bhi.n	800a432 <SD_ioctl+0x4a>
 800a3fc:	e8df f001 	tbb	[pc, r1]
 800a400:	120e020b 	.word	0x120e020b
    res = RES_OK;
    break;
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a404:	4668      	mov	r0, sp
 800a406:	f7f8 fe91 	bl	800312c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 800a40a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a40c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a40e:	0a5b      	lsrs	r3, r3, #9
 800a410:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a414:	602b      	str	r3, [r5, #0]
  default:
    res = RES_PARERR;
  }
  
  return res;
}
 800a416:	4620      	mov	r0, r4
 800a418:	b017      	add	sp, #92	@ 0x5c
 800a41a:	bd30      	pop	{r4, r5, pc}
    *(WORD*)buff = BLOCK_SIZE;
 800a41c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a420:	8013      	strh	r3, [r2, #0]
    break;
 800a422:	e7f8      	b.n	800a416 <SD_ioctl+0x2e>
    *(DWORD*)buff = BLOCK_SIZE;
 800a424:	f44f 7300 	mov.w	r3, #512	@ 0x200
  DRESULT res = RES_ERROR;
 800a428:	2401      	movs	r4, #1
    *(DWORD*)buff = BLOCK_SIZE;
 800a42a:	6013      	str	r3, [r2, #0]
    break;
 800a42c:	e7f3      	b.n	800a416 <SD_ioctl+0x2e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a42e:	2403      	movs	r4, #3
 800a430:	e7f1      	b.n	800a416 <SD_ioctl+0x2e>
    res = RES_PARERR;
 800a432:	2404      	movs	r4, #4
 800a434:	e7ef      	b.n	800a416 <SD_ioctl+0x2e>
 800a436:	bf00      	nop
 800a438:	200009d5 	.word	0x200009d5

0800a43c <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 800a43c:	f003 bcc6 	b.w	800ddcc <malloc>

0800a440 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	free(mblock);	/* Discard the memory block with POSIX API */
 800a440:	f003 bccc 	b.w	800dddc <free>

0800a444 <write_ADIF_Log>:


static char log_line[180];


		void write_ADIF_Log(void) {
 800a444:	b510      	push	{r4, lr}
 800a446:	b086      	sub	sp, #24

			make_Real_Time();
			make_Real_Date();

			 sprintf(log_line,"<call:7>%7s<gridsquare:4>%4s<mode:3>FT8<qso_date:8>%8s <time_on:6>%6s<freq:9>%9s<station_callsign:7>%7s<my_gridsquare:4>%4s <eor>",
 800a448:	4c0d      	ldr	r4, [pc, #52]	@ (800a480 <write_ADIF_Log+0x3c>)
			make_Real_Time();
 800a44a:	f000 f9dd 	bl	800a808 <make_Real_Time>
			make_Real_Date();
 800a44e:	f000 fa03 	bl	800a858 <make_Real_Date>
			 sprintf(log_line,"<call:7>%7s<gridsquare:4>%4s<mode:3>FT8<qso_date:8>%8s <time_on:6>%6s<freq:9>%9s<station_callsign:7>%7s<my_gridsquare:4>%4s <eor>",
 800a452:	4b0c      	ldr	r3, [pc, #48]	@ (800a484 <write_ADIF_Log+0x40>)
 800a454:	4a0c      	ldr	r2, [pc, #48]	@ (800a488 <write_ADIF_Log+0x44>)
 800a456:	4620      	mov	r0, r4
 800a458:	9304      	str	r3, [sp, #16]
 800a45a:	4b0c      	ldr	r3, [pc, #48]	@ (800a48c <write_ADIF_Log+0x48>)
 800a45c:	490c      	ldr	r1, [pc, #48]	@ (800a490 <write_ADIF_Log+0x4c>)
 800a45e:	9303      	str	r3, [sp, #12]
 800a460:	4b0c      	ldr	r3, [pc, #48]	@ (800a494 <write_ADIF_Log+0x50>)
 800a462:	9302      	str	r3, [sp, #8]
 800a464:	4b0c      	ldr	r3, [pc, #48]	@ (800a498 <write_ADIF_Log+0x54>)
 800a466:	9301      	str	r3, [sp, #4]
 800a468:	4b0c      	ldr	r3, [pc, #48]	@ (800a49c <write_ADIF_Log+0x58>)
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a0 <write_ADIF_Log+0x5c>)
 800a46e:	f003 fef3 	bl	800e258 <siprintf>
			 Target_Call, Target_Locator,  log_rtc_date_string, log_rtc_time_string, display_frequency, Station_Call, Locator);


			  Write_Log_Data(log_line);
 800a472:	4620      	mov	r0, r4
	}
 800a474:	b006      	add	sp, #24
 800a476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			  Write_Log_Data(log_line);
 800a47a:	f003 b86f 	b.w	800d55c <Write_Log_Data>
 800a47e:	bf00      	nop
 800a480:	200018fc 	.word	0x200018fc
 800a484:	200443eb 	.word	0x200443eb
 800a488:	200443f4 	.word	0x200443f4
 800a48c:	200443e4 	.word	0x200443e4
 800a490:	0805582b 	.word	0x0805582b
 800a494:	20000fe8 	.word	0x20000fe8
 800a498:	200019b9 	.word	0x200019b9
 800a49c:	200019c6 	.word	0x200019c6
 800a4a0:	2004497b 	.word	0x2004497b

0800a4a4 <Set_HP_Gain>:

#define Codec_Pause 1


void Set_HP_Gain(int HP_gain)
{
 800a4a4:	b510      	push	{r4, lr}

	if (HP_gain > HP_GAIN_MAX) 		HP_gain = HP_GAIN_MAX;
		if (HP_gain < HP_GAIN_MIN)			HP_gain = HP_GAIN_MIN;

	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x001C, HP_gain+64);  //headphone volume
 800a4a6:	f380 0406 	usat	r4, #6, r0
 800a4aa:	211c      	movs	r1, #28
 800a4ac:	2034      	movs	r0, #52	@ 0x34
 800a4ae:	b2a4      	uxth	r4, r4
 800a4b0:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a4b4:	b292      	uxth	r2, r2
 800a4b6:	f7f7 fe19 	bl	80020ec <AUDIO_IO_Write>
	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x001D, HP_gain+320);  //headphone volume
 800a4ba:	f504 72a0 	add.w	r2, r4, #320	@ 0x140
 800a4be:	211d      	movs	r1, #29
 800a4c0:	2034      	movs	r0, #52	@ 0x34
 800a4c2:	b292      	uxth	r2, r2
   }   // End of Set_HP_Gain
 800a4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x001D, HP_gain+320);  //headphone volume
 800a4c8:	f7f7 be10 	b.w	80020ec <AUDIO_IO_Write>

0800a4cc <Set_PGA_Gain>:
	HAL_Delay(1);
  }   // End of Set_PGA_gain
*/

void Set_PGA_Gain(int PGA_gain)
{
 800a4cc:	b510      	push	{r4, lr}
	if (PGA_gain < PGA_GAIN_MIN)
		PGA_gain = PGA_GAIN_MIN;
	if (PGA_gain > PGA_GAIN_MAX)
		PGA_gain = PGA_GAIN_MAX;

	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x0018, PGA_gain);
 800a4ce:	f380 0405 	usat	r4, #5, r0
 800a4d2:	2118      	movs	r1, #24
 800a4d4:	2034      	movs	r0, #52	@ 0x34
 800a4d6:	b2a4      	uxth	r4, r4
 800a4d8:	4622      	mov	r2, r4
 800a4da:	f7f7 fe07 	bl	80020ec <AUDIO_IO_Write>
	HAL_Delay(1);
 800a4de:	2001      	movs	r0, #1
 800a4e0:	f003 f8bc 	bl	800d65c <HAL_Delay>

	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x001A, PGA_gain+256);
 800a4e4:	f504 7280 	add.w	r2, r4, #256	@ 0x100
 800a4e8:	2034      	movs	r0, #52	@ 0x34
 800a4ea:	211a      	movs	r1, #26
 800a4ec:	b292      	uxth	r2, r2
 800a4ee:	f7f7 fdfd 	bl	80020ec <AUDIO_IO_Write>
	HAL_Delay(1);
 800a4f2:	2001      	movs	r0, #1
}   // End of Set_PGA_gain
 800a4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(1);
 800a4f8:	f003 b8b0 	b.w	800d65c <HAL_Delay>

0800a4fc <Set_ADC_DVC>:
void Set_ADC_DVC(int ADC_gain)  // gain in 0.375 dB steps
{

	if (ADC_gain > ADC_GAIN_MAX)
		ADC_gain = ADC_GAIN_MAX;
	if (ADC_gain < ADC_GAIN_MIN)
 800a4fc:	2801      	cmp	r0, #1
		ADC_gain = ADC_GAIN_MIN;


	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x400, ADC_gain);
 800a4fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
	if (ADC_gain < ADC_GAIN_MIN)
 800a502:	bfb8      	it	lt
 800a504:	2001      	movlt	r0, #1
	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x400, ADC_gain);
 800a506:	28ff      	cmp	r0, #255	@ 0xff
 800a508:	bfa8      	it	ge
 800a50a:	20ff      	movge	r0, #255	@ 0xff
{
 800a50c:	b510      	push	{r4, lr}
	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x400, ADC_gain);
 800a50e:	b284      	uxth	r4, r0
 800a510:	2034      	movs	r0, #52	@ 0x34
 800a512:	4622      	mov	r2, r4
 800a514:	f7f7 fdea 	bl	80020ec <AUDIO_IO_Write>
	HAL_Delay(1);
 800a518:	2001      	movs	r0, #1
 800a51a:	f003 f89f 	bl	800d65c <HAL_Delay>

	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x401, ADC_gain+256);
 800a51e:	f504 7280 	add.w	r2, r4, #256	@ 0x100
 800a522:	2034      	movs	r0, #52	@ 0x34
 800a524:	f240 4101 	movw	r1, #1025	@ 0x401
 800a528:	b292      	uxth	r2, r2
 800a52a:	f7f7 fddf 	bl	80020ec <AUDIO_IO_Write>
	HAL_Delay(1);
 800a52e:	2001      	movs	r0, #1


}   // End of Set_ADC_DVC
 800a530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(1);
 800a534:	f003 b892 	b.w	800d65c <HAL_Delay>

0800a538 <bcd_to_decimal>:

};

unsigned char bcd_to_decimal(unsigned char d)
{
         return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10));
 800a538:	0903      	lsrs	r3, r0, #4
 800a53a:	f000 000f 	and.w	r0, r0, #15
 800a53e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a542:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800a546:	b2c0      	uxtb	r0, r0
 800a548:	4770      	bx	lr

0800a54a <decimal_to_bcd>:


unsigned char decimal_to_bcd(unsigned char d)
{
         return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F);
 800a54a:	220a      	movs	r2, #10
 800a54c:	fbb0 f3f2 	udiv	r3, r0, r2
 800a550:	fb02 0013 	mls	r0, r2, r3, r0
 800a554:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800a558:	b2c0      	uxtb	r0, r0
 800a55a:	4770      	bx	lr

0800a55c <DS3231_Read>:


unsigned char DS3231_Read(unsigned char address)
{
 800a55c:	4601      	mov	r1, r0
	return EXT_I2C_Read(DS3231_Read_addr, address);
 800a55e:	20d1      	movs	r0, #209	@ 0xd1
 800a560:	f7f7 be42 	b.w	80021e8 <EXT_I2C_Read>

0800a564 <DS3231_Write>:
}


void DS3231_Write(unsigned char address, unsigned char value)
{
 800a564:	460a      	mov	r2, r1
	EXT_I2C_Write(DS3231_Write_addr, address, value);
 800a566:	4601      	mov	r1, r0
 800a568:	20d0      	movs	r0, #208	@ 0xd0
 800a56a:	f7f7 be19 	b.w	80021a0 <EXT_I2C_Write>

0800a56e <DS3231_init>:


void DS3231_init(void)
{

         DS3231_Write(controlREG, 0x00);
 800a56e:	2100      	movs	r1, #0
 800a570:	200e      	movs	r0, #14
{
 800a572:	b508      	push	{r3, lr}
         DS3231_Write(controlREG, 0x00);
 800a574:	f7ff fff6 	bl	800a564 <DS3231_Write>
         DS3231_Write(statusREG, 0x08);
 800a578:	2108      	movs	r1, #8
 800a57a:	200f      	movs	r0, #15

}
 800a57c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
         DS3231_Write(statusREG, 0x08);
 800a580:	f7ff bff0 	b.w	800a564 <DS3231_Write>

0800a584 <getTime>:


void getTime(unsigned char *p3, unsigned char *p2, unsigned char *p1, short *p0, short hour_format)
{
 800a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a586:	4617      	mov	r7, r2
 800a588:	4604      	mov	r4, r0
         unsigned char tmp = 0;

         *p1 = DS3231_Read(secondREG);
 800a58a:	2000      	movs	r0, #0
{
 800a58c:	461d      	mov	r5, r3
 800a58e:	460e      	mov	r6, r1
         *p1 = DS3231_Read(secondREG);
 800a590:	f7ff ffe4 	bl	800a55c <DS3231_Read>
             *p1 = bcd_to_decimal(*p1);
 800a594:	f7ff ffd0 	bl	800a538 <bcd_to_decimal>
 800a598:	7038      	strb	r0, [r7, #0]

        *p2 = DS3231_Read(minuteREG);
 800a59a:	2001      	movs	r0, #1
 800a59c:	f7ff ffde 	bl	800a55c <DS3231_Read>
        *p2 =  bcd_to_decimal(*p2);
 800a5a0:	f7ff ffca 	bl	800a538 <bcd_to_decimal>

         switch(hour_format)
 800a5a4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
        *p2 =  bcd_to_decimal(*p2);
 800a5a8:	7030      	strb	r0, [r6, #0]
                           *p3 = bcd_to_decimal(*p3);
                           break;
                  }
                  default:
                  {
                           *p3 = (0x3F & DS3231_Read(hourREG));
 800a5aa:	2002      	movs	r0, #2
         switch(hour_format)
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d10d      	bne.n	800a5cc <getTime+0x48>
                           tmp = DS3231_Read(hourREG);
 800a5b0:	f7ff ffd4 	bl	800a55c <DS3231_Read>
                           *p0 = (short)(tmp >> 5);
 800a5b4:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800a5b8:	8028      	strh	r0, [r5, #0]
                           *p3 = (0x1F & DS3231_Read(hourREG));
 800a5ba:	2002      	movs	r0, #2
 800a5bc:	f7ff ffce 	bl	800a55c <DS3231_Read>
                           *p3 = bcd_to_decimal(*p3);
 800a5c0:	f000 001f 	and.w	r0, r0, #31
                           *p3 = bcd_to_decimal(*p3);
 800a5c4:	f7ff ffb8 	bl	800a538 <bcd_to_decimal>
                           *p3 = bcd_to_decimal(*p3);
 800a5c8:	7020      	strb	r0, [r4, #0]
                           break;
                  }
         }
}
 800a5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                           *p3 = (0x3F & DS3231_Read(hourREG));
 800a5cc:	f7ff ffc6 	bl	800a55c <DS3231_Read>
                           *p3 = bcd_to_decimal(*p3);
 800a5d0:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800a5d4:	e7f6      	b.n	800a5c4 <getTime+0x40>

0800a5d6 <getDate>:


void getDate(unsigned char *p4, unsigned char *p3, unsigned char *p2, unsigned char *p1)
{
 800a5d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d8:	461f      	mov	r7, r3
 800a5da:	4604      	mov	r4, r0
         *p1 = DS3231_Read(yearREG);
 800a5dc:	2006      	movs	r0, #6
{
 800a5de:	460d      	mov	r5, r1
 800a5e0:	4616      	mov	r6, r2
         *p1 = DS3231_Read(yearREG);
 800a5e2:	f7ff ffbb 	bl	800a55c <DS3231_Read>
         *p1 = bcd_to_decimal(*p1);
 800a5e6:	f7ff ffa7 	bl	800a538 <bcd_to_decimal>
 800a5ea:	7038      	strb	r0, [r7, #0]
         *p2 = (0x1F & DS3231_Read(monthREG));
 800a5ec:	2005      	movs	r0, #5
 800a5ee:	f7ff ffb5 	bl	800a55c <DS3231_Read>
         *p2 = bcd_to_decimal(*p2);
 800a5f2:	f000 001f 	and.w	r0, r0, #31
 800a5f6:	f7ff ff9f 	bl	800a538 <bcd_to_decimal>
 800a5fa:	7030      	strb	r0, [r6, #0]
         *p3 = (0x3F & DS3231_Read(dateREG));
 800a5fc:	2004      	movs	r0, #4
 800a5fe:	f7ff ffad 	bl	800a55c <DS3231_Read>
         *p3 = bcd_to_decimal(*p3);
 800a602:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800a606:	f7ff ff97 	bl	800a538 <bcd_to_decimal>
 800a60a:	7028      	strb	r0, [r5, #0]
         *p4 = (0x07 & DS3231_Read(dayREG));
 800a60c:	2003      	movs	r0, #3
 800a60e:	f7ff ffa5 	bl	800a55c <DS3231_Read>
         *p4 = bcd_to_decimal(*p4);
 800a612:	f000 0007 	and.w	r0, r0, #7
 800a616:	f7ff ff8f 	bl	800a538 <bcd_to_decimal>
 800a61a:	7020      	strb	r0, [r4, #0]
}
 800a61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a61e <RTC_setTime>:


void RTC_setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, short am_pm_state, short hour_format)
{
 800a61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a620:	460e      	mov	r6, r1
 800a622:	4604      	mov	r4, r0
         unsigned char tmp = 0;
         DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
 800a624:	4610      	mov	r0, r2
{
 800a626:	461d      	mov	r5, r3
         DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
 800a628:	f7ff ff8f 	bl	800a54a <decimal_to_bcd>
 800a62c:	4601      	mov	r1, r0
 800a62e:	2000      	movs	r0, #0
{
 800a630:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
         DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
 800a634:	f7ff ff96 	bl	800a564 <DS3231_Write>
         DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
 800a638:	4630      	mov	r0, r6
 800a63a:	f7ff ff86 	bl	800a54a <decimal_to_bcd>
 800a63e:	4601      	mov	r1, r0
 800a640:	2001      	movs	r0, #1
 800a642:	f7ff ff8f 	bl	800a564 <DS3231_Write>
         switch(hour_format)
 800a646:	2f01      	cmp	r7, #1
 800a648:	d10e      	bne.n	800a668 <RTC_setTime+0x4a>
                  {
                           switch(am_pm_state)
                           {
                                    case 1:
                                    {
                                             tmp = 0x60;
 800a64a:	2d01      	cmp	r5, #1
                                    {
                                             tmp = 0x40;
                                             break;
                                    }
                           }
                           DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
 800a64c:	4620      	mov	r0, r4
                                             tmp = 0x60;
 800a64e:	bf14      	ite	ne
 800a650:	2140      	movne	r1, #64	@ 0x40
 800a652:	2160      	moveq	r1, #96	@ 0x60
                           DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
 800a654:	f7ff ff79 	bl	800a54a <decimal_to_bcd>
 800a658:	f000 001f 	and.w	r0, r0, #31
 800a65c:	4301      	orrs	r1, r0
                           break;
                  }

                  default:
                  {
                           DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
 800a65e:	2002      	movs	r0, #2
                           break;
                  }
         }
}
 800a660:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                           DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
 800a664:	f7ff bf7e 	b.w	800a564 <DS3231_Write>
 800a668:	4620      	mov	r0, r4
 800a66a:	f7ff ff6e 	bl	800a54a <decimal_to_bcd>
 800a66e:	f000 013f 	and.w	r1, r0, #63	@ 0x3f
 800a672:	e7f4      	b.n	800a65e <RTC_setTime+0x40>

0800a674 <RTC_setDate>:


void RTC_setDate(unsigned char daySet, unsigned char dateSet, unsigned char monthSet, unsigned char yearSet)
{
 800a674:	b570      	push	{r4, r5, r6, lr}
 800a676:	460e      	mov	r6, r1
 800a678:	4615      	mov	r5, r2
 800a67a:	461c      	mov	r4, r3
         DS3231_Write(dayREG, (decimal_to_bcd(daySet)));
 800a67c:	f7ff ff65 	bl	800a54a <decimal_to_bcd>
 800a680:	4601      	mov	r1, r0
 800a682:	2003      	movs	r0, #3
 800a684:	f7ff ff6e 	bl	800a564 <DS3231_Write>
         DS3231_Write(dateREG, (decimal_to_bcd(dateSet)));
 800a688:	4630      	mov	r0, r6
 800a68a:	f7ff ff5e 	bl	800a54a <decimal_to_bcd>
 800a68e:	4601      	mov	r1, r0
 800a690:	2004      	movs	r0, #4
 800a692:	f7ff ff67 	bl	800a564 <DS3231_Write>
         DS3231_Write(monthREG, (decimal_to_bcd(monthSet)));
 800a696:	4628      	mov	r0, r5
 800a698:	f7ff ff57 	bl	800a54a <decimal_to_bcd>
 800a69c:	4601      	mov	r1, r0
 800a69e:	2005      	movs	r0, #5
 800a6a0:	f7ff ff60 	bl	800a564 <DS3231_Write>
         DS3231_Write(yearREG, (decimal_to_bcd(yearSet)));
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f7ff ff50 	bl	800a54a <decimal_to_bcd>
 800a6aa:	4601      	mov	r1, r0
 800a6ac:	2006      	movs	r0, #6
}
 800a6ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
         DS3231_Write(yearREG, (decimal_to_bcd(yearSet)));
 800a6b2:	f7ff bf57 	b.w	800a564 <DS3231_Write>
	...

0800a6b8 <display_RealTime>:

void display_RealTime(int x, int y) {
 800a6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	 //fetch time from RTC
	getTime(&rtc_hour, &rtc_minute, &rtc_second, &rtc_ampm,  _24_hour_format );
 800a6ba:	4c0b      	ldr	r4, [pc, #44]	@ (800a6e8 <display_RealTime+0x30>)
 800a6bc:	2700      	movs	r7, #0
void display_RealTime(int x, int y) {
 800a6be:	4605      	mov	r5, r0
 800a6c0:	460e      	mov	r6, r1
	getTime(&rtc_hour, &rtc_minute, &rtc_second, &rtc_ampm,  _24_hour_format );
 800a6c2:	4623      	mov	r3, r4
 800a6c4:	1ca2      	adds	r2, r4, #2
 800a6c6:	1ce1      	adds	r1, r4, #3
 800a6c8:	1d20      	adds	r0, r4, #4
 800a6ca:	9700      	str	r7, [sp, #0]
 800a6cc:	f7ff ff5a 	bl	800a584 <getTime>
	show_UTC_time(x, y,rtc_hour,rtc_minute,rtc_second, 0);
 800a6d0:	9701      	str	r7, [sp, #4]
 800a6d2:	78a3      	ldrb	r3, [r4, #2]
 800a6d4:	b2b1      	uxth	r1, r6
 800a6d6:	b2a8      	uxth	r0, r5
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	78e3      	ldrb	r3, [r4, #3]
 800a6dc:	7922      	ldrb	r2, [r4, #4]
 800a6de:	f000 fa21 	bl	800ab24 <show_UTC_time>
}
 800a6e2:	b003      	add	sp, #12
 800a6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	200019b0 	.word	0x200019b0

0800a6ec <load_RealTime>:

void load_RealTime(void) {
 800a6ec:	b513      	push	{r0, r1, r4, lr}
	getTime(&rtc_hour, &rtc_minute, &rtc_second, &rtc_ampm,  _24_hour_format );
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	4c09      	ldr	r4, [pc, #36]	@ (800a718 <load_RealTime+0x2c>)
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	1ca2      	adds	r2, r4, #2
 800a6f6:	4623      	mov	r3, r4
 800a6f8:	1ce1      	adds	r1, r4, #3
 800a6fa:	1d20      	adds	r0, r4, #4
 800a6fc:	f7ff ff42 	bl	800a584 <getTime>
	s_RTC_Data[3].data = rtc_hour;
 800a700:	4b06      	ldr	r3, [pc, #24]	@ (800a71c <load_RealTime+0x30>)
 800a702:	7922      	ldrb	r2, [r4, #4]
 800a704:	779a      	strb	r2, [r3, #30]
	s_RTC_Data[4].data = rtc_minute;
 800a706:	78e2      	ldrb	r2, [r4, #3]
 800a708:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	s_RTC_Data[5].data = rtc_second;
 800a70c:	78a2      	ldrb	r2, [r4, #2]
 800a70e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
}
 800a712:	b002      	add	sp, #8
 800a714:	bd10      	pop	{r4, pc}
 800a716:	bf00      	nop
 800a718:	200019b0 	.word	0x200019b0
 800a71c:	200009d8 	.word	0x200009d8

0800a720 <display_RTC_TimeEdit>:

void display_RTC_TimeEdit(int x, int y){
 800a720:	b507      	push	{r0, r1, r2, lr}
	show_UTC_time(x, y,s_RTC_Data[3].data,s_RTC_Data[4].data,s_RTC_Data[5].data, 0);
 800a722:	2300      	movs	r3, #0
 800a724:	4a07      	ldr	r2, [pc, #28]	@ (800a744 <display_RTC_TimeEdit+0x24>)
 800a726:	b289      	uxth	r1, r1
 800a728:	9301      	str	r3, [sp, #4]
 800a72a:	b280      	uxth	r0, r0
 800a72c:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 800a736:	7f92      	ldrb	r2, [r2, #30]
 800a738:	f000 f9f4 	bl	800ab24 <show_UTC_time>
}
 800a73c:	b003      	add	sp, #12
 800a73e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a742:	bf00      	nop
 800a744:	200009d8 	.word	0x200009d8

0800a748 <set_RTC_to_TimeEdit>:

void set_RTC_to_TimeEdit(void) {
 800a748:	b507      	push	{r0, r1, r2, lr}
	RTC_setTime(s_RTC_Data[3].data,s_RTC_Data[4].data,s_RTC_Data[5].data ,0, 0);
 800a74a:	2300      	movs	r3, #0
 800a74c:	4805      	ldr	r0, [pc, #20]	@ (800a764 <set_RTC_to_TimeEdit+0x1c>)
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 800a754:	f890 1026 	ldrb.w	r1, [r0, #38]	@ 0x26
 800a758:	7f80      	ldrb	r0, [r0, #30]
 800a75a:	f7ff ff60 	bl	800a61e <RTC_setTime>
}
 800a75e:	b003      	add	sp, #12
 800a760:	f85d fb04 	ldr.w	pc, [sp], #4
 800a764:	200009d8 	.word	0x200009d8

0800a768 <load_RealDate>:

void load_RealDate(void) {
 800a768:	b510      	push	{r4, lr}
	getDate(&rtc_dow,&rtc_date , &rtc_month, &rtc_year);
 800a76a:	4c0c      	ldr	r4, [pc, #48]	@ (800a79c <load_RealDate+0x34>)
 800a76c:	1d63      	adds	r3, r4, #5
 800a76e:	1da2      	adds	r2, r4, #6
 800a770:	1de1      	adds	r1, r4, #7
 800a772:	f104 0008 	add.w	r0, r4, #8
 800a776:	f7ff ff2e 	bl	800a5d6 <getDate>
	if(rtc_date > 0) s_RTC_Data[0].data = rtc_date;
 800a77a:	79e3      	ldrb	r3, [r4, #7]
 800a77c:	b90b      	cbnz	r3, 800a782 <load_RealDate+0x1a>
	else s_RTC_Data[0].data = rtc_date = 1;
 800a77e:	2301      	movs	r3, #1
 800a780:	71e3      	strb	r3, [r4, #7]
	if(rtc_date > 0) s_RTC_Data[0].data = rtc_date;
 800a782:	4a07      	ldr	r2, [pc, #28]	@ (800a7a0 <load_RealDate+0x38>)
 800a784:	7193      	strb	r3, [r2, #6]

	if(rtc_month > 0) s_RTC_Data[1].data = rtc_month;
 800a786:	79a3      	ldrb	r3, [r4, #6]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	bf38      	it	cc
 800a78c:	2301      	movcc	r3, #1
 800a78e:	7393      	strb	r3, [r2, #14]
	else s_RTC_Data[1].data = 1;

	if (rtc_year >= 24) s_RTC_Data[2].data = rtc_year;
 800a790:	7963      	ldrb	r3, [r4, #5]
	else
	s_RTC_Data[2].data = 1;
 800a792:	2b17      	cmp	r3, #23
 800a794:	bf98      	it	ls
 800a796:	2301      	movls	r3, #1
 800a798:	7593      	strb	r3, [r2, #22]
}
 800a79a:	bd10      	pop	{r4, pc}
 800a79c:	200019b0 	.word	0x200019b0
 800a7a0:	200009d8 	.word	0x200009d8

0800a7a4 <display_RTC_DateEdit>:

void display_RTC_DateEdit(int x, int y){
 800a7a4:	b507      	push	{r0, r1, r2, lr}
    show_Real_Date(x,  y,s_RTC_Data[0].data,s_RTC_Data[1].data,s_RTC_Data[2].data);
 800a7a6:	4a06      	ldr	r2, [pc, #24]	@ (800a7c0 <display_RTC_DateEdit+0x1c>)
 800a7a8:	b289      	uxth	r1, r1
 800a7aa:	b280      	uxth	r0, r0
 800a7ac:	7d93      	ldrb	r3, [r2, #22]
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	7b93      	ldrb	r3, [r2, #14]
 800a7b2:	7992      	ldrb	r2, [r2, #6]
 800a7b4:	f000 f9e8 	bl	800ab88 <show_Real_Date>
}
 800a7b8:	b003      	add	sp, #12
 800a7ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7be:	bf00      	nop
 800a7c0:	200009d8 	.word	0x200009d8

0800a7c4 <set_RTC_to_DateEdit>:

void set_RTC_to_DateEdit(void) {
	RTC_setDate(0,s_RTC_Data[0].data,s_RTC_Data[1].data,s_RTC_Data[2].data);
 800a7c4:	4903      	ldr	r1, [pc, #12]	@ (800a7d4 <set_RTC_to_DateEdit+0x10>)
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	7d8b      	ldrb	r3, [r1, #22]
 800a7ca:	7b8a      	ldrb	r2, [r1, #14]
 800a7cc:	7989      	ldrb	r1, [r1, #6]
 800a7ce:	f7ff bf51 	b.w	800a674 <RTC_setDate>
 800a7d2:	bf00      	nop
 800a7d4:	200009d8 	.word	0x200009d8

0800a7d8 <display_Real_Date>:
}


void display_Real_Date(int x, int y) {
 800a7d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	getDate(&rtc_dow,&rtc_date , &rtc_month, &rtc_year);
 800a7da:	4c0a      	ldr	r4, [pc, #40]	@ (800a804 <display_Real_Date+0x2c>)
void display_Real_Date(int x, int y) {
 800a7dc:	4605      	mov	r5, r0
 800a7de:	460e      	mov	r6, r1
	getDate(&rtc_dow,&rtc_date , &rtc_month, &rtc_year);
 800a7e0:	1d63      	adds	r3, r4, #5
 800a7e2:	1da2      	adds	r2, r4, #6
 800a7e4:	1de1      	adds	r1, r4, #7
 800a7e6:	f104 0008 	add.w	r0, r4, #8
 800a7ea:	f7ff fef4 	bl	800a5d6 <getDate>
    show_Real_Date(x, y,rtc_date,rtc_month,rtc_year);
 800a7ee:	7963      	ldrb	r3, [r4, #5]
 800a7f0:	b2b1      	uxth	r1, r6
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	b2a8      	uxth	r0, r5
 800a7f6:	79a3      	ldrb	r3, [r4, #6]
 800a7f8:	79e2      	ldrb	r2, [r4, #7]
 800a7fa:	f000 f9c5 	bl	800ab88 <show_Real_Date>
}
 800a7fe:	b002      	add	sp, #8
 800a800:	bd70      	pop	{r4, r5, r6, pc}
 800a802:	bf00      	nop
 800a804:	200019b0 	.word	0x200019b0

0800a808 <make_Real_Time>:


void make_Real_Time(void) {
 800a808:	b537      	push	{r0, r1, r2, r4, r5, lr}

	getTime(&rtc_hour, &rtc_minute, &rtc_second, &rtc_ampm,  _24_hour_format );
 800a80a:	4c11      	ldr	r4, [pc, #68]	@ (800a850 <make_Real_Time+0x48>)
 800a80c:	2500      	movs	r5, #0
 800a80e:	4623      	mov	r3, r4
 800a810:	1ca2      	adds	r2, r4, #2
 800a812:	1ce1      	adds	r1, r4, #3
 800a814:	1d20      	adds	r0, r4, #4
 800a816:	9500      	str	r5, [sp, #0]
 800a818:	f7ff feb4 	bl	800a584 <getTime>

	sprintf((char *)log_rtc_time_string,"%2i%2i%2i",rtc_hour,rtc_minute,rtc_second);
 800a81c:	78a3      	ldrb	r3, [r4, #2]
 800a81e:	f104 0009 	add.w	r0, r4, #9
 800a822:	490c      	ldr	r1, [pc, #48]	@ (800a854 <make_Real_Time+0x4c>)
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	3409      	adds	r4, #9
 800a828:	f814 3c06 	ldrb.w	r3, [r4, #-6]
 800a82c:	f814 2c05 	ldrb.w	r2, [r4, #-5]
 800a830:	f003 fd12 	bl	800e258 <siprintf>

	for (int i=0; i<9; i++) if (log_rtc_time_string[i] == 32) log_rtc_time_string[i] = 48;  //blank remover
 800a834:	462b      	mov	r3, r5
 800a836:	2230      	movs	r2, #48	@ 0x30
 800a838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a83c:	3301      	adds	r3, #1
 800a83e:	2920      	cmp	r1, #32
 800a840:	bf08      	it	eq
 800a842:	f804 2c01 	strbeq.w	r2, [r4, #-1]
 800a846:	2b09      	cmp	r3, #9
 800a848:	d1f6      	bne.n	800a838 <make_Real_Time+0x30>
	/*
    BSP_LCD_SetFont (&Font16);
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
    BSP_LCD_DisplayStringAt(240, 160, log_rtc_time_string, LEFT_MODE);
    */
}
 800a84a:	b003      	add	sp, #12
 800a84c:	bd30      	pop	{r4, r5, pc}
 800a84e:	bf00      	nop
 800a850:	200019b0 	.word	0x200019b0
 800a854:	080558b3 	.word	0x080558b3

0800a858 <make_Real_Date>:

void make_Real_Date(void){
 800a858:	b513      	push	{r0, r1, r4, lr}

	getDate(&rtc_dow,&rtc_date , &rtc_month, &rtc_year);
 800a85a:	4c11      	ldr	r4, [pc, #68]	@ (800a8a0 <make_Real_Date+0x48>)
 800a85c:	1d63      	adds	r3, r4, #5
 800a85e:	1da2      	adds	r2, r4, #6
 800a860:	1de1      	adds	r1, r4, #7
 800a862:	f104 0008 	add.w	r0, r4, #8
 800a866:	f7ff feb6 	bl	800a5d6 <getDate>
	sprintf((char *)log_rtc_date_string,"%2s%2i%2i%2i","20",rtc_year, rtc_month,rtc_date);
 800a86a:	79e3      	ldrb	r3, [r4, #7]
 800a86c:	4a0d      	ldr	r2, [pc, #52]	@ (800a8a4 <make_Real_Date+0x4c>)
 800a86e:	f104 0016 	add.w	r0, r4, #22
 800a872:	9301      	str	r3, [sp, #4]
 800a874:	3416      	adds	r4, #22
 800a876:	f814 3c10 	ldrb.w	r3, [r4, #-16]
 800a87a:	490b      	ldr	r1, [pc, #44]	@ (800a8a8 <make_Real_Date+0x50>)
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	f814 3c11 	ldrb.w	r3, [r4, #-17]
 800a882:	f003 fce9 	bl	800e258 <siprintf>

	for (int i=0; i<9; i++) if (log_rtc_date_string[i] == 32) log_rtc_date_string[i] = 48;  //blank remover
 800a886:	2300      	movs	r3, #0
 800a888:	2230      	movs	r2, #48	@ 0x30
 800a88a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a88e:	3301      	adds	r3, #1
 800a890:	2920      	cmp	r1, #32
 800a892:	bf08      	it	eq
 800a894:	f804 2c01 	strbeq.w	r2, [r4, #-1]
 800a898:	2b09      	cmp	r3, #9
 800a89a:	d1f6      	bne.n	800a88a <make_Real_Date+0x32>
    //show_short(300, 120, rtc_month);
    //show_short(360, 120, rtc_year);
    BSP_LCD_DisplayStringAt(240, 140, log_rtc_date_string, LEFT_MODE);
	*/

}
 800a89c:	b002      	add	sp, #8
 800a89e:	bd10      	pop	{r4, pc}
 800a8a0:	200019b0 	.word	0x200019b0
 800a8a4:	080558ad 	.word	0x080558ad
 800a8a8:	080558b0 	.word	0x080558b0

0800a8ac <make_File_Name>:

void make_File_Name(void){
 800a8ac:	b508      	push	{r3, lr}

	//make_Real_Time();
	make_Real_Date();
 800a8ae:	f7ff ffd3 	bl	800a858 <make_Real_Date>

	//getDate(&rtc_dow,&rtc_date , &rtc_month, &rtc_year);
	//sprintf((char *)file_name_string,"%s_%s.adi",log_rtc_date_string,log_rtc_time_string);
	//for (int i=0; i<9; i++) if (log_rtc_date_string[i] == 32) log_rtc_date_string[i] = 48;  //blank remover

	sprintf((char *)file_name_string,"%s.adi",log_rtc_date_string);
 800a8b2:	4a09      	ldr	r2, [pc, #36]	@ (800a8d8 <make_File_Name+0x2c>)
 800a8b4:	4909      	ldr	r1, [pc, #36]	@ (800a8dc <make_File_Name+0x30>)
 800a8b6:	f102 000d 	add.w	r0, r2, #13
 800a8ba:	f003 fccd 	bl	800e258 <siprintf>
	for (int i=0; i<24; i++) if (file_name_string[i] == 32) file_name_string[i] = 48;
 800a8be:	4a08      	ldr	r2, [pc, #32]	@ (800a8e0 <make_File_Name+0x34>)
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	2130      	movs	r1, #48	@ 0x30
 800a8c4:	f812 0b01 	ldrb.w	r0, [r2], #1
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	2820      	cmp	r0, #32
 800a8cc:	bf08      	it	eq
 800a8ce:	f802 1c01 	strbeq.w	r1, [r2, #-1]
 800a8d2:	2b18      	cmp	r3, #24
 800a8d4:	d1f6      	bne.n	800a8c4 <make_File_Name+0x18>
    //show_short(300, 120, rtc_month);
    //show_short(360, 120, rtc_year);
    //BSP_LCD_DisplayStringAt(240, 180, file_name_string, LEFT_MODE);


}
 800a8d6:	bd08      	pop	{r3, pc}
 800a8d8:	200019c6 	.word	0x200019c6
 800a8dc:	080558bd 	.word	0x080558bd
 800a8e0:	200019d3 	.word	0x200019d3

0800a8e4 <update_log_display>:
display_message log_messages[4];

extern void set_RTC_to_GPS(void);


void update_log_display(int mode){
 800a8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8e8:	4c2c      	ldr	r4, [pc, #176]	@ (800a99c <update_log_display+0xb8>)
 800a8ea:	4605      	mov	r5, r0

	for (int i = 0; i<max_log_messages -1; i++ ) {
 800a8ec:	f04f 0900 	mov.w	r9, #0
 800a8f0:	4e2b      	ldr	r6, [pc, #172]	@ (800a9a0 <update_log_display+0xbc>)
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	4627      	mov	r7, r4
 800a8f6:	6833      	ldr	r3, [r6, #0]
 800a8f8:	f100 0818 	add.w	r8, r0, #24
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	454b      	cmp	r3, r9
 800a900:	dc1e      	bgt.n	800a940 <update_log_display+0x5c>
		strcpy(log_messages[i].message , log_messages[i+1].message);
		log_messages[i].text_color = log_messages[i+1].text_color;
	}

	if (mode == 0) {
 800a902:	bb45      	cbnz	r5, 800a956 <update_log_display+0x72>
		strcpy(log_messages[max_log_messages -1].message,current_QSO_receive_message);
 800a904:	2218      	movs	r2, #24
 800a906:	4927      	ldr	r1, [pc, #156]	@ (800a9a4 <update_log_display+0xc0>)
 800a908:	fb02 7303 	mla	r3, r2, r3, r7
 800a90c:	4618      	mov	r0, r3
 800a90e:	f003 fe1a 	bl	800e546 <strcpy>
		log_messages[max_log_messages -1].text_color = 0;
 800a912:	6145      	str	r5, [r0, #20]
	if (mode == 1) {
		strcpy(log_messages[max_log_messages -1].message,current_QSO_xmit_message);
		log_messages[max_log_messages -1].text_color = 1;
	}

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a914:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
    BSP_LCD_FillRect(240, 40, 240, 80);
	BSP_LCD_SetFont (&Font16);

	for (int i = 0; i<max_log_messages; i++ ) {
 800a918:	2528      	movs	r5, #40	@ 0x28
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a91a:	f7f7 ffd1 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(240, 40, 240, 80);
 800a91e:	22f0      	movs	r2, #240	@ 0xf0
 800a920:	2350      	movs	r3, #80	@ 0x50
 800a922:	2128      	movs	r1, #40	@ 0x28
 800a924:	4610      	mov	r0, r2
	for (int i = 0; i<max_log_messages; i++ ) {
 800a926:	2700      	movs	r7, #0

		if(log_messages[i].text_color == 0 )  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800a928:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 800a9b0 <update_log_display+0xcc>
    BSP_LCD_FillRect(240, 40, 240, 80);
 800a92c:	f7f8 f926 	bl	8002b7c <BSP_LCD_FillRect>
	BSP_LCD_SetFont (&Font16);
 800a930:	481d      	ldr	r0, [pc, #116]	@ (800a9a8 <update_log_display+0xc4>)
 800a932:	f7f7 ffdd 	bl	80028f0 <BSP_LCD_SetFont>
	for (int i = 0; i<max_log_messages; i++ ) {
 800a936:	6833      	ldr	r3, [r6, #0]
 800a938:	42bb      	cmp	r3, r7
 800a93a:	dc17      	bgt.n	800a96c <update_log_display+0x88>
		if(log_messages[i].text_color == 1 )  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);

		BSP_LCD_DisplayStringAt(240, 40 + i*20, (const uint8_t*) log_messages[i].message, LEFT_MODE);
	}

}
 800a93c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		strcpy(log_messages[i].message , log_messages[i+1].message);
 800a940:	4641      	mov	r1, r8
 800a942:	f109 0901 	add.w	r9, r9, #1
 800a946:	f003 fdfe 	bl	800e546 <strcpy>
		log_messages[i].text_color = log_messages[i+1].text_color;
 800a94a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a94e:	4640      	mov	r0, r8
 800a950:	f848 3c04 	str.w	r3, [r8, #-4]
	for (int i = 0; i<max_log_messages -1; i++ ) {
 800a954:	e7cf      	b.n	800a8f6 <update_log_display+0x12>
	if (mode == 1) {
 800a956:	2d01      	cmp	r5, #1
 800a958:	d1dc      	bne.n	800a914 <update_log_display+0x30>
		strcpy(log_messages[max_log_messages -1].message,current_QSO_xmit_message);
 800a95a:	2218      	movs	r2, #24
 800a95c:	4913      	ldr	r1, [pc, #76]	@ (800a9ac <update_log_display+0xc8>)
 800a95e:	fb02 7703 	mla	r7, r2, r3, r7
 800a962:	4638      	mov	r0, r7
 800a964:	f003 fdef 	bl	800e546 <strcpy>
		log_messages[max_log_messages -1].text_color = 1;
 800a968:	617d      	str	r5, [r7, #20]
 800a96a:	e7d3      	b.n	800a914 <update_log_display+0x30>
		if(log_messages[i].text_color == 0 )  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800a96c:	6963      	ldr	r3, [r4, #20]
 800a96e:	b913      	cbnz	r3, 800a976 <update_log_display+0x92>
 800a970:	4640      	mov	r0, r8
 800a972:	f7f7 ffa5 	bl	80028c0 <BSP_LCD_SetTextColor>
		if(log_messages[i].text_color == 1 )  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800a976:	6963      	ldr	r3, [r4, #20]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d103      	bne.n	800a984 <update_log_display+0xa0>
 800a97c:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 800a980:	f7f7 ff9e 	bl	80028c0 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(240, 40 + i*20, (const uint8_t*) log_messages[i].message, LEFT_MODE);
 800a984:	4629      	mov	r1, r5
 800a986:	3514      	adds	r5, #20
 800a988:	4622      	mov	r2, r4
 800a98a:	2303      	movs	r3, #3
 800a98c:	20f0      	movs	r0, #240	@ 0xf0
	for (int i = 0; i<max_log_messages; i++ ) {
 800a98e:	3701      	adds	r7, #1
 800a990:	b2ad      	uxth	r5, r5
 800a992:	3418      	adds	r4, #24
		BSP_LCD_DisplayStringAt(240, 40 + i*20, (const uint8_t*) log_messages[i].message, LEFT_MODE);
 800a994:	f7f8 f834 	bl	8002a00 <BSP_LCD_DisplayStringAt>
	for (int i = 0; i<max_log_messages; i++ ) {
 800a998:	e7cd      	b.n	800a936 <update_log_display+0x52>
 800a99a:	bf00      	nop
 800a99c:	200019f0 	.word	0x200019f0
 800a9a0:	20000a08 	.word	0x20000a08
 800a9a4:	20001a50 	.word	0x20001a50
 800a9a8:	20000030 	.word	0x20000030
 800a9ac:	20001a64 	.word	0x20001a64
 800a9b0:	ffff0000 	.word	0xffff0000

0800a9b4 <update_Beacon_log_display>:
char current_Beacon_receive_message[20];
char current_Beacon_xmit_message[20];
int max_Beacon_log_messages = 10;
display_message Beacon_log_messages[10];

void update_Beacon_log_display(int mode){
 800a9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b8:	4d2e      	ldr	r5, [pc, #184]	@ (800aa74 <update_Beacon_log_display+0xc0>)
 800a9ba:	4606      	mov	r6, r0

	for (int i = 0; i<max_Beacon_log_messages -1; i++ ) {
 800a9bc:	f04f 0800 	mov.w	r8, #0
 800a9c0:	4f2d      	ldr	r7, [pc, #180]	@ (800aa78 <update_Beacon_log_display+0xc4>)
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	46a9      	mov	r9, r5
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f100 0418 	add.w	r4, r0, #24
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	4543      	cmp	r3, r8
 800a9d0:	dc24      	bgt.n	800aa1c <update_Beacon_log_display+0x68>
		strcpy(Beacon_log_messages[i].message , Beacon_log_messages[i+1].message);
		Beacon_log_messages[i].text_color = Beacon_log_messages[i+1].text_color;
	}


	if (mode == 0) {
 800a9d2:	bb6e      	cbnz	r6, 800aa30 <update_Beacon_log_display+0x7c>
		strcpy(Beacon_log_messages[max_Beacon_log_messages -1].message,current_Beacon_receive_message);
 800a9d4:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 800aa80 <update_Beacon_log_display+0xcc>
 800a9d8:	2218      	movs	r2, #24
 800a9da:	f508 71bc 	add.w	r1, r8, #376	@ 0x178
 800a9de:	fb02 f403 	mul.w	r4, r2, r3
		Beacon_log_messages[max_Beacon_log_messages -1].text_color = 0;
	}

	if (mode == 1) {
		strcpy(Beacon_log_messages[max_Beacon_log_messages -1].message,current_Beacon_xmit_message);
		Beacon_log_messages[max_Beacon_log_messages -1].text_color = 1;
 800a9e2:	44a0      	add	r8, r4
		strcpy(Beacon_log_messages[max_Beacon_log_messages -1].message,current_Beacon_xmit_message);
 800a9e4:	eb09 0004 	add.w	r0, r9, r4
 800a9e8:	f003 fdad 	bl	800e546 <strcpy>
		Beacon_log_messages[max_Beacon_log_messages -1].text_color = 1;
 800a9ec:	f8c8 609c 	str.w	r6, [r8, #156]	@ 0x9c
	}


    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a9f0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
    BSP_LCD_FillRect(240, 40, 240, 200);
	BSP_LCD_SetFont (&Font16);

	for (int i = 0; i<max_Beacon_log_messages; i++ ) {
 800a9f4:	2428      	movs	r4, #40	@ 0x28
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a9f6:	f7f7 ff63 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(240, 40, 240, 200);
 800a9fa:	22f0      	movs	r2, #240	@ 0xf0
 800a9fc:	23c8      	movs	r3, #200	@ 0xc8
 800a9fe:	2128      	movs	r1, #40	@ 0x28
 800aa00:	4610      	mov	r0, r2
	for (int i = 0; i<max_Beacon_log_messages; i++ ) {
 800aa02:	2600      	movs	r6, #0

		if(Beacon_log_messages[i].text_color == 0 )  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800aa04:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 800aa84 <update_Beacon_log_display+0xd0>
    BSP_LCD_FillRect(240, 40, 240, 200);
 800aa08:	f7f8 f8b8 	bl	8002b7c <BSP_LCD_FillRect>
	BSP_LCD_SetFont (&Font16);
 800aa0c:	481b      	ldr	r0, [pc, #108]	@ (800aa7c <update_Beacon_log_display+0xc8>)
 800aa0e:	f7f7 ff6f 	bl	80028f0 <BSP_LCD_SetFont>
	for (int i = 0; i<max_Beacon_log_messages; i++ ) {
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	42b3      	cmp	r3, r6
 800aa16:	dc15      	bgt.n	800aa44 <update_Beacon_log_display+0x90>
		if(Beacon_log_messages[i].text_color == 1 )  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);

		BSP_LCD_DisplayStringAt(240, 40 + i*20, (const uint8_t*) Beacon_log_messages[i].message, LEFT_MODE);
	}

}
 800aa18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		strcpy(Beacon_log_messages[i].message , Beacon_log_messages[i+1].message);
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	f108 0801 	add.w	r8, r8, #1
 800aa22:	f003 fd90 	bl	800e546 <strcpy>
		Beacon_log_messages[i].text_color = Beacon_log_messages[i+1].text_color;
 800aa26:	6963      	ldr	r3, [r4, #20]
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f844 3c04 	str.w	r3, [r4, #-4]
	for (int i = 0; i<max_Beacon_log_messages -1; i++ ) {
 800aa2e:	e7ca      	b.n	800a9c6 <update_Beacon_log_display+0x12>
	if (mode == 1) {
 800aa30:	2e01      	cmp	r6, #1
 800aa32:	d1dd      	bne.n	800a9f0 <update_Beacon_log_display+0x3c>
		strcpy(Beacon_log_messages[max_Beacon_log_messages -1].message,current_Beacon_xmit_message);
 800aa34:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 800aa80 <update_Beacon_log_display+0xcc>
 800aa38:	2218      	movs	r2, #24
 800aa3a:	f508 71c6 	add.w	r1, r8, #396	@ 0x18c
 800aa3e:	fb02 f403 	mul.w	r4, r2, r3
 800aa42:	e7ce      	b.n	800a9e2 <update_Beacon_log_display+0x2e>
		if(Beacon_log_messages[i].text_color == 0 )  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800aa44:	696b      	ldr	r3, [r5, #20]
 800aa46:	b913      	cbnz	r3, 800aa4e <update_Beacon_log_display+0x9a>
 800aa48:	4640      	mov	r0, r8
 800aa4a:	f7f7 ff39 	bl	80028c0 <BSP_LCD_SetTextColor>
		if(Beacon_log_messages[i].text_color == 1 )  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800aa4e:	696b      	ldr	r3, [r5, #20]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d103      	bne.n	800aa5c <update_Beacon_log_display+0xa8>
 800aa54:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 800aa58:	f7f7 ff32 	bl	80028c0 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(240, 40 + i*20, (const uint8_t*) Beacon_log_messages[i].message, LEFT_MODE);
 800aa5c:	4621      	mov	r1, r4
 800aa5e:	3414      	adds	r4, #20
 800aa60:	462a      	mov	r2, r5
 800aa62:	2303      	movs	r3, #3
 800aa64:	20f0      	movs	r0, #240	@ 0xf0
	for (int i = 0; i<max_Beacon_log_messages; i++ ) {
 800aa66:	3601      	adds	r6, #1
 800aa68:	b2a4      	uxth	r4, r4
 800aa6a:	3518      	adds	r5, #24
		BSP_LCD_DisplayStringAt(240, 40 + i*20, (const uint8_t*) Beacon_log_messages[i].message, LEFT_MODE);
 800aa6c:	f7f7 ffc8 	bl	8002a00 <BSP_LCD_DisplayStringAt>
	for (int i = 0; i<max_Beacon_log_messages; i++ ) {
 800aa70:	e7cf      	b.n	800aa12 <update_Beacon_log_display+0x5e>
 800aa72:	bf00      	nop
 800aa74:	20001a78 	.word	0x20001a78
 800aa78:	20000a08 	.word	0x20000a08
 800aa7c:	20000030 	.word	0x20000030
 800aa80:	200019f0 	.word	0x200019f0
 800aa84:	ffff0000 	.word	0xffff0000

0800aa88 <show_wide>:
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
    BSP_LCD_DisplayStringAt(x, y, string, LEFT_MODE);
}
*/

void show_wide(uint16_t x, uint16_t y,int variable) {
 800aa88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	460d      	mov	r5, r1
	char string[7];   // print format stuff
    sprintf(string,"%6i",variable);
 800aa8e:	4668      	mov	r0, sp
 800aa90:	4908      	ldr	r1, [pc, #32]	@ (800aab4 <show_wide+0x2c>)
 800aa92:	f003 fbe1 	bl	800e258 <siprintf>
    BSP_LCD_SetFont (&Font16);
 800aa96:	4808      	ldr	r0, [pc, #32]	@ (800aab8 <show_wide+0x30>)
 800aa98:	f7f7 ff2a 	bl	80028f0 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800aa9c:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 800aaa0:	f7f7 ff0e 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(x, y, (const uint8_t*) string, LEFT_MODE);
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	466a      	mov	r2, sp
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f7f7 ffa8 	bl	8002a00 <BSP_LCD_DisplayStringAt>
}
 800aab0:	b003      	add	sp, #12
 800aab2:	bd30      	pop	{r4, r5, pc}
 800aab4:	080558e9 	.word	0x080558e9
 800aab8:	20000030 	.word	0x20000030

0800aabc <show_variable>:


void show_variable(uint16_t x, uint16_t y,int variable) {
 800aabc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aabe:	4604      	mov	r4, r0
 800aac0:	460d      	mov	r5, r1
	char string[5];   // print format stuff
    sprintf(string,"%4i",variable);
 800aac2:	4668      	mov	r0, sp
 800aac4:	4908      	ldr	r1, [pc, #32]	@ (800aae8 <show_variable+0x2c>)
 800aac6:	f003 fbc7 	bl	800e258 <siprintf>
    BSP_LCD_SetFont (&Font16);
 800aaca:	4808      	ldr	r0, [pc, #32]	@ (800aaec <show_variable+0x30>)
 800aacc:	f7f7 ff10 	bl	80028f0 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800aad0:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 800aad4:	f7f7 fef4 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(x, y, (const uint8_t*) string, LEFT_MODE);
 800aad8:	2303      	movs	r3, #3
 800aada:	466a      	mov	r2, sp
 800aadc:	4629      	mov	r1, r5
 800aade:	4620      	mov	r0, r4
 800aae0:	f7f7 ff8e 	bl	8002a00 <BSP_LCD_DisplayStringAt>
}
 800aae4:	b003      	add	sp, #12
 800aae6:	bd30      	pop	{r4, r5, pc}
 800aae8:	080558ed 	.word	0x080558ed
 800aaec:	20000030 	.word	0x20000030

0800aaf0 <show_short>:

void show_short(uint16_t x, uint16_t y,uint8_t variable) {
 800aaf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	460d      	mov	r5, r1
	char string[4];   // print format stuff
    sprintf(string,"%2i",variable);
 800aaf6:	a801      	add	r0, sp, #4
 800aaf8:	4908      	ldr	r1, [pc, #32]	@ (800ab1c <show_short+0x2c>)
 800aafa:	f003 fbad 	bl	800e258 <siprintf>
    BSP_LCD_SetFont (&Font16);
 800aafe:	4808      	ldr	r0, [pc, #32]	@ (800ab20 <show_short+0x30>)
 800ab00:	f7f7 fef6 	bl	80028f0 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800ab04:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 800ab08:	f7f7 feda 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(x, y, (const uint8_t*) string, LEFT_MODE);
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	aa01      	add	r2, sp, #4
 800ab10:	4629      	mov	r1, r5
 800ab12:	4620      	mov	r0, r4
 800ab14:	f7f7 ff74 	bl	8002a00 <BSP_LCD_DisplayStringAt>
}
 800ab18:	b003      	add	sp, #12
 800ab1a:	bd30      	pop	{r4, r5, pc}
 800ab1c:	080558f9 	.word	0x080558f9
 800ab20:	20000030 	.word	0x20000030

0800ab24 <show_UTC_time>:


void show_UTC_time(uint16_t x, uint16_t y,int utc_hours,int utc_minutes,int utc_seconds, int color) {
 800ab24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab26:	460d      	mov	r5, r1
 800ab28:	4604      	mov	r4, r0
	sprintf(rtc_time_string,"%2i:%2i:%2i",utc_hours,utc_minutes,utc_seconds);
 800ab2a:	4814      	ldr	r0, [pc, #80]	@ (800ab7c <show_UTC_time+0x58>)
 800ab2c:	e9dd 1606 	ldrd	r1, r6, [sp, #24]
 800ab30:	9100      	str	r1, [sp, #0]
 800ab32:	4913      	ldr	r1, [pc, #76]	@ (800ab80 <show_UTC_time+0x5c>)
 800ab34:	f003 fb90 	bl	800e258 <siprintf>
	for (int i=0; i<9; i++) if (rtc_time_string[i] == 32) rtc_time_string[i] = 48;  //blank remover
 800ab38:	4a10      	ldr	r2, [pc, #64]	@ (800ab7c <show_UTC_time+0x58>)
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	2130      	movs	r1, #48	@ 0x30
 800ab3e:	f812 0b01 	ldrb.w	r0, [r2], #1
 800ab42:	3301      	adds	r3, #1
 800ab44:	2820      	cmp	r0, #32
 800ab46:	bf08      	it	eq
 800ab48:	f802 1c01 	strbeq.w	r1, [r2, #-1]
 800ab4c:	2b09      	cmp	r3, #9
 800ab4e:	d1f6      	bne.n	800ab3e <show_UTC_time+0x1a>


    BSP_LCD_SetFont (&Font16);
 800ab50:	480c      	ldr	r0, [pc, #48]	@ (800ab84 <show_UTC_time+0x60>)
 800ab52:	f7f7 fecd 	bl	80028f0 <BSP_LCD_SetFont>

    if(color == 0)BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800ab56:	b966      	cbnz	r6, 800ab72 <show_UTC_time+0x4e>
 800ab58:	f04f 30ff 	mov.w	r0, #4294967295
    if(color == 1)BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800ab5c:	f7f7 feb0 	bl	80028c0 <BSP_LCD_SetTextColor>

    BSP_LCD_DisplayStringAt(x, y, (const uint8_t*) rtc_time_string, LEFT_MODE);
 800ab60:	2303      	movs	r3, #3
 800ab62:	4a06      	ldr	r2, [pc, #24]	@ (800ab7c <show_UTC_time+0x58>)
 800ab64:	4629      	mov	r1, r5
 800ab66:	4620      	mov	r0, r4
}
 800ab68:	b002      	add	sp, #8
 800ab6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_LCD_DisplayStringAt(x, y, (const uint8_t*) rtc_time_string, LEFT_MODE);
 800ab6e:	f7f7 bf47 	b.w	8002a00 <BSP_LCD_DisplayStringAt>
    if(color == 1)BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800ab72:	2e01      	cmp	r6, #1
 800ab74:	d1f4      	bne.n	800ab60 <show_UTC_time+0x3c>
 800ab76:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 800ab7a:	e7ef      	b.n	800ab5c <show_UTC_time+0x38>
 800ab7c:	20001b90 	.word	0x20001b90
 800ab80:	080558f1 	.word	0x080558f1
 800ab84:	20000030 	.word	0x20000030

0800ab88 <show_Real_Date>:


void show_Real_Date(uint16_t x, uint16_t y,int date,int month,int year) {
 800ab88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab8a:	460d      	mov	r5, r1
	sprintf(rtc_date_string,"%2i:%2i:%2i",date,month,year);
 800ab8c:	4e0b      	ldr	r6, [pc, #44]	@ (800abbc <show_Real_Date+0x34>)
 800ab8e:	9906      	ldr	r1, [sp, #24]
void show_Real_Date(uint16_t x, uint16_t y,int date,int month,int year) {
 800ab90:	4604      	mov	r4, r0
	sprintf(rtc_date_string,"%2i:%2i:%2i",date,month,year);
 800ab92:	4630      	mov	r0, r6
 800ab94:	9100      	str	r1, [sp, #0]
 800ab96:	490a      	ldr	r1, [pc, #40]	@ (800abc0 <show_Real_Date+0x38>)
 800ab98:	f003 fb5e 	bl	800e258 <siprintf>
    BSP_LCD_SetFont (&Font16);
 800ab9c:	4809      	ldr	r0, [pc, #36]	@ (800abc4 <show_Real_Date+0x3c>)
 800ab9e:	f7f7 fea7 	bl	80028f0 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800aba2:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800aba6:	f7f7 fe8b 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(x, y, (const uint8_t*) rtc_date_string, LEFT_MODE);
 800abaa:	2303      	movs	r3, #3
 800abac:	4632      	mov	r2, r6
 800abae:	4629      	mov	r1, r5
 800abb0:	4620      	mov	r0, r4
}
 800abb2:	b002      	add	sp, #8
 800abb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_LCD_DisplayStringAt(x, y, (const uint8_t*) rtc_date_string, LEFT_MODE);
 800abb8:	f7f7 bf22 	b.w	8002a00 <BSP_LCD_DisplayStringAt>
 800abbc:	20001b99 	.word	0x20001b99
 800abc0:	080558f1 	.word	0x080558f1
 800abc4:	20000030 	.word	0x20000030

0800abc8 <setup_display>:


void setup_display(void) {
 800abc8:	b508      	push	{r3, lr}

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800abca:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800abce:	f7f7 fe77 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, 480, 272);
 800abd2:	2100      	movs	r1, #0
 800abd4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800abd8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800abdc:	4608      	mov	r0, r1
 800abde:	f7f7 ffcd 	bl	8002b7c <BSP_LCD_FillRect>

    BSP_LCD_SetFont (&Font16);
 800abe2:	4811      	ldr	r0, [pc, #68]	@ (800ac28 <setup_display+0x60>)
 800abe4:	f7f7 fe84 	bl	80028f0 <BSP_LCD_SetFont>

    drawButton(0);
 800abe8:	2000      	movs	r0, #0
 800abea:	f001 fb15 	bl	800c218 <drawButton>
    drawButton(1);
 800abee:	2001      	movs	r0, #1
 800abf0:	f001 fb12 	bl	800c218 <drawButton>
    drawButton(2);
 800abf4:	2002      	movs	r0, #2
 800abf6:	f001 fb0f 	bl	800c218 <drawButton>
    drawButton(3);
 800abfa:	2003      	movs	r0, #3
 800abfc:	f001 fb0c 	bl	800c218 <drawButton>
    drawButton(4);
 800ac00:	2004      	movs	r0, #4
 800ac02:	f001 fb09 	bl	800c218 <drawButton>
    drawButton(5);
 800ac06:	2005      	movs	r0, #5
 800ac08:	f001 fb06 	bl	800c218 <drawButton>
    drawButton(6);
 800ac0c:	2006      	movs	r0, #6
 800ac0e:	f001 fb03 	bl	800c218 <drawButton>
    drawButton(7);
 800ac12:	2007      	movs	r0, #7
 800ac14:	f001 fb00 	bl	800c218 <drawButton>
   // Monitor_Only = 1;
    drawButton(8);
 800ac18:	2008      	movs	r0, #8
 800ac1a:	f001 fafd 	bl	800c218 <drawButton>
    drawButton(9);
 800ac1e:	2009      	movs	r0, #9


    //BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
   // BSP_LCD_DisplayStringAt(320, 0, "Gain",0x03);

}
 800ac20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    drawButton(9);
 800ac24:	f001 baf8 	b.w	800c218 <drawButton>
 800ac28:	20000030 	.word	0x20000030
 800ac2c:	00000000 	.word	0x00000000

0800ac30 <Set_Cursor_Frequency>:




void Set_Cursor_Frequency(uint16_t cursor_pos){
 800ac30:	b508      	push	{r3, lr}
	  NCO_Frequency = (double) ((float)cursor * FFT_Resolution + ft8_min_freq);
 800ac32:	4b0f      	ldr	r3, [pc, #60]	@ (800ac70 <Set_Cursor_Frequency+0x40>)
 800ac34:	f8b3 01b2 	ldrh.w	r0, [r3, #434]	@ 0x1b2
 800ac38:	ee07 0a90 	vmov	s15, r0
 800ac3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac40:	ee17 0a90 	vmov	r0, s15
 800ac44:	f7f5 fd10 	bl	8000668 <__aeabi_f2d>
 800ac48:	2200      	movs	r2, #0
 800ac4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ac74 <Set_Cursor_Frequency+0x44>)
 800ac4c:	f7f5 fd64 	bl	8000718 <__aeabi_dmul>
 800ac50:	a305      	add	r3, pc, #20	@ (adr r3, 800ac68 <Set_Cursor_Frequency+0x38>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	f7f5 fba9 	bl	80003ac <__adddf3>
 800ac5a:	4b07      	ldr	r3, [pc, #28]	@ (800ac78 <Set_Cursor_Frequency+0x48>)
 800ac5c:	e9c3 0100 	strd	r0, r1, [r3]
     }
 800ac60:	bd08      	pop	{r3, pc}
 800ac62:	bf00      	nop
 800ac64:	f3af 8000 	nop.w
 800ac68:	00000000 	.word	0x00000000
 800ac6c:	4072c000 	.word	0x4072c000
 800ac70:	200019f0 	.word	0x200019f0
 800ac74:	40190000 	.word	0x40190000
 800ac78:	2003a508 	.word	0x2003a508

0800ac7c <FFT_Touch>:


uint16_t FFT_Touch(void) {

 // if  ((valx > FFT_X  && valx < FFT_X + FFT_W/2 ) && (valy > FFT_Y && valy < FFT_Y + 2 * FFT_H))
	if  ((valx > FFT_X  && valx < FFT_X + FFT_W/2 ) && (valy > FFT_Y && valy < 30))
 800ac7c:	4a09      	ldr	r2, [pc, #36]	@ (800aca4 <FFT_Touch+0x28>)
 800ac7e:	f8b2 31b4 	ldrh.w	r3, [r2, #436]	@ 0x1b4
 800ac82:	3b01      	subs	r3, #1
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 800ac8a:	d808      	bhi.n	800ac9e <FFT_Touch+0x22>
 800ac8c:	f8b2 01b6 	ldrh.w	r0, [r2, #438]	@ 0x1b6
 800ac90:	3802      	subs	r0, #2
 800ac92:	b280      	uxth	r0, r0
 800ac94:	281b      	cmp	r0, #27
 800ac96:	bf8c      	ite	hi
 800ac98:	2000      	movhi	r0, #0
 800ac9a:	2001      	movls	r0, #1
 800ac9c:	4770      	bx	lr
  return 1;
  else
  return 0;
 800ac9e:	2000      	movs	r0, #0
}
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	200019f0 	.word	0x200019f0

0800aca8 <FT8_Touch>:

int FT8_Touch(void) {

	  int y_test;
	  if  ((valx > 0  && valx < 240 ) && (valy > 40 && valy < 240)){
 800aca8:	4a0b      	ldr	r2, [pc, #44]	@ (800acd8 <FT8_Touch+0x30>)
 800acaa:	f8b2 31b4 	ldrh.w	r3, [r2, #436]	@ 0x1b4
 800acae:	3b01      	subs	r3, #1
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	2bee      	cmp	r3, #238	@ 0xee
 800acb4:	d80d      	bhi.n	800acd2 <FT8_Touch+0x2a>
 800acb6:	f8b2 31b6 	ldrh.w	r3, [r2, #438]	@ 0x1b6
 800acba:	f1a3 0129 	sub.w	r1, r3, #41	@ 0x29
 800acbe:	29c6      	cmp	r1, #198	@ 0xc6
 800acc0:	d807      	bhi.n	800acd2 <FT8_Touch+0x2a>
	  y_test = valy - 40;

	  FT_8_TouchIndex = y_test /20;
 800acc2:	2114      	movs	r1, #20
	  y_test = valy - 40;
 800acc4:	3b28      	subs	r3, #40	@ 0x28
	  //show_variable(300,100,valx);
	 // show_variable(340,100,valy);
	 // show_variable(380,100,FT_8_TouchIndex);

	  return 1;
 800acc6:	2001      	movs	r0, #1
	  FT_8_TouchIndex = y_test /20;
 800acc8:	fbb3 f3f1 	udiv	r3, r3, r1
 800accc:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
	  return 1;
 800acd0:	4770      	bx	lr
  }

	  else
	  return 0;
 800acd2:	2000      	movs	r0, #0
}
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	200019f0 	.word	0x200019f0

0800acdc <Xmit_message_Touch>:

int Xmit_message_Touch(void) {

	  int y_test;
	  if  ((valx > 240  && valx < 480 ) && (valy > 160 && valy < 240)){
 800acdc:	4a0b      	ldr	r2, [pc, #44]	@ (800ad0c <Xmit_message_Touch+0x30>)
 800acde:	f8b2 31b4 	ldrh.w	r3, [r2, #436]	@ 0x1b4
 800ace2:	3bf1      	subs	r3, #241	@ 0xf1
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	2bee      	cmp	r3, #238	@ 0xee
 800ace8:	d80d      	bhi.n	800ad06 <Xmit_message_Touch+0x2a>
 800acea:	f8b2 31b6 	ldrh.w	r3, [r2, #438]	@ 0x1b6
 800acee:	f1a3 01a1 	sub.w	r1, r3, #161	@ 0xa1
 800acf2:	294e      	cmp	r1, #78	@ 0x4e
 800acf4:	d807      	bhi.n	800ad06 <Xmit_message_Touch+0x2a>
	  y_test = valy - 160;

	  FT_8_MessageIndex = y_test /20;
 800acf6:	2114      	movs	r1, #20
	  y_test = valy - 160;
 800acf8:	3ba0      	subs	r3, #160	@ 0xa0
	  //show_variable(300,80,valx);
	  //show_variable(340,80,valy);
	  //show_variable(380,80,FT_8_MessageIndex);

	  return 1;
 800acfa:	2001      	movs	r0, #1
	  FT_8_MessageIndex = y_test /20;
 800acfc:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad00:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
	  return 1;
 800ad04:	4770      	bx	lr
  }

	  else
	  return 0;
 800ad06:	2000      	movs	r0, #0
}
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	200019f0 	.word	0x200019f0

0800ad10 <Process_Touch>:
void Process_Touch (void) {
 800ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    if(!Tune_On && !xmit_flag && !Beacon_On) sButtonData[5].state = 0;
 800ad12:	4a28      	ldr	r2, [pc, #160]	@ (800adb4 <Process_Touch+0xa4>)
 800ad14:	4b28      	ldr	r3, [pc, #160]	@ (800adb8 <Process_Touch+0xa8>)
 800ad16:	6812      	ldr	r2, [r2, #0]
 800ad18:	681b      	ldr	r3, [r3, #0]
		test = BSP_TS_GetState(&TS_State);
 800ad1a:	4c28      	ldr	r4, [pc, #160]	@ (800adbc <Process_Touch+0xac>)
	    if(!Tune_On && !xmit_flag && !Beacon_On) sButtonData[5].state = 0;
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	4a28      	ldr	r2, [pc, #160]	@ (800adc0 <Process_Touch+0xb0>)
		test = BSP_TS_GetState(&TS_State);
 800ad20:	f504 70e0 	add.w	r0, r4, #448	@ 0x1c0
	    if(!Tune_On && !xmit_flag && !Beacon_On) sButtonData[5].state = 0;
 800ad24:	6812      	ldr	r2, [r2, #0]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	4b26      	ldr	r3, [pc, #152]	@ (800adc4 <Process_Touch+0xb4>)
 800ad2a:	bf14      	ite	ne
 800ad2c:	2201      	movne	r2, #1
 800ad2e:	2200      	moveq	r2, #0
 800ad30:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		test = BSP_TS_GetState(&TS_State);
 800ad34:	f7f8 fb94 	bl	8003460 <BSP_TS_GetState>
		if(TS_State.touchDetected > 0) {
 800ad38:	f894 31c0 	ldrb.w	r3, [r4, #448]	@ 0x1c0
		test = BSP_TS_GetState(&TS_State);
 800ad3c:	f884 01ec 	strb.w	r0, [r4, #492]	@ 0x1ec
		if(TS_State.touchDetected > 0) {
 800ad40:	b3a3      	cbz	r3, 800adac <Process_Touch+0x9c>
			valx = (uint16_t)TS_State.touchX[0];
 800ad42:	f8b4 31c2 	ldrh.w	r3, [r4, #450]	@ 0x1c2
		      BSP_TS_GetState(&TS_State);
 800ad46:	f504 75e0 	add.w	r5, r4, #448	@ 0x1c0
			valx = (uint16_t)TS_State.touchX[0];
 800ad4a:	f8a4 31b4 	strh.w	r3, [r4, #436]	@ 0x1b4
			valy = (uint16_t)TS_State.touchY[0];
 800ad4e:	f8b4 31cc 	ldrh.w	r3, [r4, #460]	@ 0x1cc
 800ad52:	f8a4 31b6 	strh.w	r3, [r4, #438]	@ 0x1b6
		      BSP_TS_GetState(&TS_State);
 800ad56:	4628      	mov	r0, r5
 800ad58:	f7f8 fb82 	bl	8003460 <BSP_TS_GetState>
		    }while(TS_State.touchDetected > 0);
 800ad5c:	f894 31c0 	ldrb.w	r3, [r4, #448]	@ 0x1c0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1f8      	bne.n	800ad56 <Process_Touch+0x46>
			if (FFT_Touch() == 1)    {
 800ad64:	f7ff ff8a 	bl	800ac7c <FFT_Touch>
 800ad68:	2801      	cmp	r0, #1
 800ad6a:	d120      	bne.n	800adae <Process_Touch+0x9e>
			cursor = ( valx - FFT_X);
 800ad6c:	f8b4 01b4 	ldrh.w	r0, [r4, #436]	@ 0x1b4
 800ad70:	f8a4 01b2 	strh.w	r0, [r4, #434]	@ 0x1b2
			NCO_Frequency = (double) (cursor+ ft8_min_bin) * FFT_Resolution;
 800ad74:	3030      	adds	r0, #48	@ 0x30
 800ad76:	f7f5 fc65 	bl	8000644 <__aeabi_i2d>
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	4b12      	ldr	r3, [pc, #72]	@ (800adc8 <Process_Touch+0xb8>)
 800ad7e:	f7f5 fccb 	bl	8000718 <__aeabi_dmul>
 800ad82:	4b12      	ldr	r3, [pc, #72]	@ (800adcc <Process_Touch+0xbc>)
 800ad84:	460f      	mov	r7, r1
 800ad86:	4606      	mov	r6, r0
 800ad88:	e9c3 6700 	strd	r6, r7, [r3]
			show_variable(400, 25,(int)  NCO_Frequency );
 800ad8c:	f7f5 ff74 	bl	8000c78 <__aeabi_d2iz>
 800ad90:	2119      	movs	r1, #25
 800ad92:	4602      	mov	r2, r0
 800ad94:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800ad98:	f7ff fe90 	bl	800aabc <show_variable>
			FT8_Touch_Flag = FT8_Touch();
 800ad9c:	f7ff ff84 	bl	800aca8 <FT8_Touch>
 800ada0:	f8c4 01f0 	str.w	r0, [r4, #496]	@ 0x1f0
			FT8_Message_Touch = Xmit_message_Touch();
 800ada4:	f7ff ff9a 	bl	800acdc <Xmit_message_Touch>
 800ada8:	f8c4 01f4 	str.w	r0, [r4, #500]	@ 0x1f4
}
 800adac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			  checkButton();
 800adae:	f001 fd75 	bl	800c89c <checkButton>
 800adb2:	e7f3      	b.n	800ad9c <Process_Touch+0x8c>
 800adb4:	2003e944 	.word	0x2003e944
 800adb8:	200439d4 	.word	0x200439d4
 800adbc:	200019f0 	.word	0x200019f0
 800adc0:	200439d0 	.word	0x200439d0
 800adc4:	20000c40 	.word	0x20000c40
 800adc8:	40190000 	.word	0x40190000
 800adcc:	2003a508 	.word	0x2003a508

0800add0 <Init_Waterfall>:


void Init_Waterfall (void)
{

	pWFBfr = &WF_Bfr[0];
 800add0:	4b04      	ldr	r3, [pc, #16]	@ (800ade4 <Init_Waterfall+0x14>)
	WF_Count = 0;
	WF_Line0 = FFT_H - 1;
 800add2:	2100      	movs	r1, #0
	pWFBfr = &WF_Bfr[0];
 800add4:	4a04      	ldr	r2, [pc, #16]	@ (800ade8 <Init_Waterfall+0x18>)
 800add6:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
	WF_Line0 = FFT_H - 1;
 800adda:	2227      	movs	r2, #39	@ 0x27
 800addc:	e9c3 127f 	strd	r1, r2, [r3, #508]	@ 0x1fc

}
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	200019f0 	.word	0x200019f0
 800ade8:	2000270c 	.word	0x2000270c

0800adec <Display_WF>:

int null_count, FFT_Line_Delay;

void Display_WF(void)	{

		if(ft8_marker ==1) {
 800adec:	494d      	ldr	r1, [pc, #308]	@ (800af24 <Display_WF+0x138>)
 800adee:	680b      	ldr	r3, [r1, #0]
 800adf0:	2b01      	cmp	r3, #1
void Display_WF(void)	{
 800adf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adf6:	4c4c      	ldr	r4, [pc, #304]	@ (800af28 <Display_WF+0x13c>)
		if(ft8_marker ==1) {
 800adf8:	d16e      	bne.n	800aed8 <Display_WF+0xec>

		for (int x = 0; x < (FFT_W ); x++) *(pWFBfr + (FFT_W*WF_Line0) + x) = 63;
 800adfa:	2300      	movs	r3, #0
 800adfc:	f44f 7630 	mov.w	r6, #704	@ 0x2c0
 800ae00:	203f      	movs	r0, #63	@ 0x3f
 800ae02:	f8d4 5200 	ldr.w	r5, [r4, #512]	@ 0x200
 800ae06:	f8d4 21f8 	ldr.w	r2, [r4, #504]	@ 0x1f8
 800ae0a:	fb06 2205 	mla	r2, r6, r5, r2
 800ae0e:	54d0      	strb	r0, [r2, r3]
 800ae10:	3301      	adds	r3, #1
 800ae12:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800ae16:	d1f4      	bne.n	800ae02 <Display_WF+0x16>
		ft8_marker = 0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	600b      	str	r3, [r1, #0]
			}
		}

		//shift data in memory by one time stepft8_buffer
		for (int y = 0; y < WF_Line0 ; y++){
			for (int x = 0; x <FFT_W ; x++) {
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f44f 7530 	mov.w	r5, #704	@ 0x2c0
		for (int y = 0; y < WF_Line0 ; y++){
 800ae22:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 800ae26:	4293      	cmp	r3, r2
 800ae28:	dc6b      	bgt.n	800af02 <Display_WF+0x116>

				*(pWFBfr + (FFT_W*y) + x) = *(pWFBfr + (FFT_W*(y+1)) + x);
				}
			}

		for ( int y = 0; y < FFT_H; y++){
 800ae2a:	2500      	movs	r5, #0
 800ae2c:	f44f 7930 	mov.w	r9, #704	@ 0x2c0
			for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
			BSP_LCD_DrawPixel(x, y,WFPalette[ (*(pWFBfr + y*FFT_W + 2*x)) ] );
 800ae30:	f8df a108 	ldr.w	sl, [pc, #264]	@ 800af3c <Display_WF+0x150>
			for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
 800ae34:	fb09 f805 	mul.w	r8, r9, r5
 800ae38:	2600      	movs	r6, #0
			BSP_LCD_DrawPixel(x, y,WFPalette[ (*(pWFBfr + y*FFT_W + 2*x)) ] );
 800ae3a:	b2af      	uxth	r7, r5
 800ae3c:	f8d4 31f8 	ldr.w	r3, [r4, #504]	@ 0x1f8
 800ae40:	b2b0      	uxth	r0, r6
 800ae42:	4639      	mov	r1, r7
 800ae44:	eb03 0346 	add.w	r3, r3, r6, lsl #1
			for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
 800ae48:	3601      	adds	r6, #1
			BSP_LCD_DrawPixel(x, y,WFPalette[ (*(pWFBfr + y*FFT_W + 2*x)) ] );
 800ae4a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800ae4e:	f85a 2023 	ldr.w	r2, [sl, r3, lsl #2]
 800ae52:	f7f7 fd59 	bl	8002908 <BSP_LCD_DrawPixel>
			for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
 800ae56:	f5b6 7fb0 	cmp.w	r6, #352	@ 0x160
 800ae5a:	d1ef      	bne.n	800ae3c <Display_WF+0x50>
		for ( int y = 0; y < FFT_H; y++){
 800ae5c:	3501      	adds	r5, #1
 800ae5e:	2d28      	cmp	r5, #40	@ 0x28
 800ae60:	d1e8      	bne.n	800ae34 <Display_WF+0x48>
				}
			}


		if (Auto_Sync) {
 800ae62:	4d32      	ldr	r5, [pc, #200]	@ (800af2c <Display_WF+0x140>)
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	b35b      	cbz	r3, 800aec0 <Display_WF+0xd4>
		for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
		//	if ((*(pWFBfr + 37*FFT_W + 2*x))  > 0) null_count++;
		//	if ((*(pWFBfr + 38*FFT_W + 2*x))  > 0) null_count++;
			if ((*(pWFBfr + 39*FFT_W + 2*x))  > 0) null_count++;
 800ae68:	f8d4 31f8 	ldr.w	r3, [r4, #504]	@ 0x1f8
		for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
 800ae6c:	2200      	movs	r2, #0
			if ((*(pWFBfr + 39*FFT_W + 2*x))  > 0) null_count++;
 800ae6e:	f503 43d6 	add.w	r3, r3, #27392	@ 0x6b00
 800ae72:	3340      	adds	r3, #64	@ 0x40
 800ae74:	f813 1012 	ldrb.w	r1, [r3, r2, lsl #1]
 800ae78:	b121      	cbz	r1, 800ae84 <Display_WF+0x98>
 800ae7a:	f8d4 1204 	ldr.w	r1, [r4, #516]	@ 0x204
 800ae7e:	3101      	adds	r1, #1
 800ae80:	f8c4 1204 	str.w	r1, [r4, #516]	@ 0x204
		for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
 800ae84:	3201      	adds	r2, #1
 800ae86:	f5b2 7fb0 	cmp.w	r2, #352	@ 0x160
 800ae8a:	d1f3      	bne.n	800ae74 <Display_WF+0x88>

		}
		//show_variable(0,220, null_count) ;

		if(null_count<3){
 800ae8c:	f8d4 3204 	ldr.w	r3, [r4, #516]	@ 0x204
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	dc12      	bgt.n	800aeba <Display_WF+0xce>

			FFT_Line_Delay ++;
 800ae94:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 800ae98:	3301      	adds	r3, #1

			if (FFT_Line_Delay >= 2) {
 800ae9a:	2b01      	cmp	r3, #1
			FFT_Line_Delay ++;
 800ae9c:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
			if (FFT_Line_Delay >= 2) {
 800aea0:	dd0b      	ble.n	800aeba <Display_WF+0xce>
		    FT8_Sync();
 800aea2:	f001 fd4f 	bl	800c944 <FT8_Sync>
			//set_RTC_to_GPS();
			Auto_Sync = 0;
 800aea6:	2300      	movs	r3, #0
			FFT_Line_Delay = 0;
	        sButtonData[5].state = 0;
 800aea8:	4a21      	ldr	r2, [pc, #132]	@ (800af30 <Display_WF+0x144>)
	        drawButton(5);
 800aeaa:	2005      	movs	r0, #5
			Auto_Sync = 0;
 800aeac:	602b      	str	r3, [r5, #0]
			FFT_Line_Delay = 0;
 800aeae:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
	        sButtonData[5].state = 0;
 800aeb2:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
	        drawButton(5);
 800aeb6:	f001 f9af 	bl	800c218 <drawButton>
			}
		}



		null_count = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	f8c4 3204 	str.w	r3, [r4, #516]	@ 0x204
		}


		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800aec0:	481c      	ldr	r0, [pc, #112]	@ (800af34 <Display_WF+0x148>)
 800aec2:	f7f7 fcfd 	bl	80028c0 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawLine(FFT_X+ cursor,FFT_H,FFT_X+cursor,0);
 800aec6:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	@ 0x1b2
 800aeca:	2300      	movs	r3, #0
 800aecc:	2128      	movs	r1, #40	@ 0x28
 800aece:	4610      	mov	r0, r2

		}
 800aed0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BSP_LCD_DrawLine(FFT_X+ cursor,FFT_H,FFT_X+cursor,0);
 800aed4:	f7f7 bde8 	b.w	8002aa8 <BSP_LCD_DrawLine>
 800aed8:	4817      	ldr	r0, [pc, #92]	@ (800af38 <Display_WF+0x14c>)
			for (int x = 0; x < FFT_W; x++) {
 800aeda:	2300      	movs	r3, #0
				*(pWFBfr + (FFT_W*WF_Line0) + x) = (uint8_t)FFT_Buffer[x + 2*ft8_min_bin];
 800aedc:	f44f 7530 	mov.w	r5, #704	@ 0x2c0
 800aee0:	f8d4 1200 	ldr.w	r1, [r4, #512]	@ 0x200
 800aee4:	f8d4 21f8 	ldr.w	r2, [r4, #504]	@ 0x1f8
 800aee8:	fb05 2201 	mla	r2, r5, r1, r2
				if(FFT_Buffer[x + 2*ft8_min_bin]>=0 && FFT_Buffer[x + 2*ft8_min_bin]<64)
 800aeec:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 800aef0:	293f      	cmp	r1, #63	@ 0x3f
 800aef2:	bf28      	it	cs
 800aef4:	213f      	movcs	r1, #63	@ 0x3f
				*(pWFBfr + (FFT_W*WF_Line0) + x) = (uint8_t)FFT_Buffer[x + 2*ft8_min_bin];
 800aef6:	54d1      	strb	r1, [r2, r3]
			for (int x = 0; x < FFT_W; x++) {
 800aef8:	3301      	adds	r3, #1
 800aefa:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800aefe:	d1ef      	bne.n	800aee0 <Display_WF+0xf4>
 800af00:	e78c      	b.n	800ae1c <Display_WF+0x30>
				*(pWFBfr + (FFT_W*y) + x) = *(pWFBfr + (FFT_W*(y+1)) + x);
 800af02:	3201      	adds	r2, #1
			for (int x = 0; x <FFT_W ; x++) {
 800af04:	2300      	movs	r3, #0
 800af06:	fb05 f002 	mul.w	r0, r5, r2
 800af0a:	f5a0 7730 	sub.w	r7, r0, #704	@ 0x2c0
				*(pWFBfr + (FFT_W*y) + x) = *(pWFBfr + (FFT_W*(y+1)) + x);
 800af0e:	f8d4 11f8 	ldr.w	r1, [r4, #504]	@ 0x1f8
 800af12:	180e      	adds	r6, r1, r0
 800af14:	4439      	add	r1, r7
 800af16:	5cf6      	ldrb	r6, [r6, r3]
 800af18:	54ce      	strb	r6, [r1, r3]
			for (int x = 0; x <FFT_W ; x++) {
 800af1a:	3301      	adds	r3, #1
 800af1c:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800af20:	d1f5      	bne.n	800af0e <Display_WF+0x122>
 800af22:	e77e      	b.n	800ae22 <Display_WF+0x36>
 800af24:	2003a500 	.word	0x2003a500
 800af28:	200019f0 	.word	0x200019f0
 800af2c:	200439dc 	.word	0x200439dc
 800af30:	20000c40 	.word	0x20000c40
 800af34:	ffff0000 	.word	0xffff0000
 800af38:	200095f6 	.word	0x200095f6
 800af3c:	080516a0 	.word	0x080516a0

0800af40 <Process_FIR_I_32K>:
arm_fir_instance_q15 S_FIR_Q_32K = { NUM_FIR_COEF,&FIR_State_Q[0], &coeff_fir_I_32K[0] };



void Process_FIR_I_32K(void){
	arm_fir_q15(&S_FIR_I_32K, &FIR_I_In[0], &FIR_I_Out[0], BUFFERSIZE / 4);
 800af40:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800af44:	4a02      	ldr	r2, [pc, #8]	@ (800af50 <Process_FIR_I_32K+0x10>)
 800af46:	4903      	ldr	r1, [pc, #12]	@ (800af54 <Process_FIR_I_32K+0x14>)
 800af48:	4803      	ldr	r0, [pc, #12]	@ (800af58 <Process_FIR_I_32K+0x18>)
 800af4a:	f7f6 bcaa 	b.w	80018a2 <arm_fir_q15>
 800af4e:	bf00      	nop
 800af50:	2003b92c 	.word	0x2003b92c
 800af54:	2003a528 	.word	0x2003a528
 800af58:	20000c14 	.word	0x20000c14

0800af5c <Process_FIR_Q_32K>:
	}

void Process_FIR_Q_32K(void){
	arm_fir_q15(&S_FIR_Q_32K, &FIR_Q_In[0], &FIR_Q_Out[0], BUFFERSIZE / 4);
 800af5c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800af60:	4a02      	ldr	r2, [pc, #8]	@ (800af6c <Process_FIR_Q_32K+0x10>)
 800af62:	4903      	ldr	r1, [pc, #12]	@ (800af70 <Process_FIR_Q_32K+0x14>)
 800af64:	4803      	ldr	r0, [pc, #12]	@ (800af74 <Process_FIR_Q_32K+0x18>)
 800af66:	f7f6 bc9c 	b.w	80018a2 <arm_fir_q15>
 800af6a:	bf00      	nop
 800af6c:	2003c32c 	.word	0x2003c32c
 800af70:	2003af28 	.word	0x2003af28
 800af74:	20000c20 	.word	0x20000c20

0800af78 <ft_blackman_i>:
}


float ft_blackman_i(int i, int N);

float ft_blackman_i(int i, int N) {
 800af78:	ee07 0a90 	vmov	s15, r0
    const float alpha = 0.16f; // or 2860/18608
    const float a0 = (1 - alpha) / 2;
    const float a1 = 1.0f / 2;
    const float a2 = alpha / 2;

    float x1 = cosf(2 * (float)M_PI * i / (N - 1));
 800af7c:	3901      	subs	r1, #1
 800af7e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800afc4 <ft_blackman_i+0x4c>
 800af82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
float ft_blackman_i(int i, int N) {
 800af86:	b508      	push	{r3, lr}
    float x1 = cosf(2 * (float)M_PI * i / (N - 1));
 800af88:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af8c:	ee07 1a10 	vmov	s14, r1
 800af90:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800af94:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800af98:	f004 fa4a 	bl	800f430 <cosf>
    float x2 = 2*x1*x1 - 1; // Use double angle formula
 800af9c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800afa0:	ee70 6a00 	vadd.f32	s13, s0, s0
    float x1 = cosf(2 * (float)M_PI * i / (N - 1));
 800afa4:	eef0 7a40 	vmov.f32	s15, s0
    float x2 = 2*x1*x1 - 1; // Use double angle formula
 800afa8:	eea6 7a80 	vfma.f32	s14, s13, s0

    return a0 - a1*x1 + a2*x2;
 800afac:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800afc8 <ft_blackman_i+0x50>
 800afb0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800afb4:	eea7 0ae6 	vfms.f32	s0, s15, s13
}
 800afb8:	eddf 7a04 	vldr	s15, [pc, #16]	@ 800afcc <ft_blackman_i+0x54>
 800afbc:	eea7 0a27 	vfma.f32	s0, s14, s15
 800afc0:	bd08      	pop	{r3, pc}
 800afc2:	bf00      	nop
 800afc4:	40c90fdb 	.word	0x40c90fdb
 800afc8:	3ed70a3e 	.word	0x3ed70a3e
 800afcc:	3da3d70a 	.word	0x3da3d70a

0800afd0 <init_DSP>:
void init_DSP(void) {
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4d0c      	ldr	r5, [pc, #48]	@ (800b004 <init_DSP+0x34>)
   for (int i = 0; i < FFT_SIZE; ++i) window[i] = ft_blackman_i(i, FFT_SIZE);
 800afd4:	2400      	movs	r4, #0
   arm_rfft_init_q15(&fft_inst, FFT_SIZE, 0, 1);
 800afd6:	2301      	movs	r3, #1
 800afd8:	2200      	movs	r2, #0
 800afda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800afde:	480a      	ldr	r0, [pc, #40]	@ (800b008 <init_DSP+0x38>)
 800afe0:	f7f6 fd7e 	bl	8001ae0 <arm_rfft_init_q15>
   for (int i = 0; i < FFT_SIZE; ++i) window[i] = ft_blackman_i(i, FFT_SIZE);
 800afe4:	4620      	mov	r0, r4
 800afe6:	3401      	adds	r4, #1
 800afe8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800afec:	f7ff ffc4 	bl	800af78 <ft_blackman_i>
 800aff0:	f5b4 6f00 	cmp.w	r4, #2048	@ 0x800
 800aff4:	eca5 0a01 	vstmia	r5!, {s0}
 800aff8:	d1f4      	bne.n	800afe4 <init_DSP+0x14>
   offset_step = (int) ft8_buffer*4;
 800affa:	4b03      	ldr	r3, [pc, #12]	@ (800b008 <init_DSP+0x38>)
 800affc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b000:	619a      	str	r2, [r3, #24]
}
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	2000b43c 	.word	0x2000b43c
 800b008:	20009510 	.word	0x20009510
 800b00c:	00000000 	.word	0x00000000

0800b010 <extract_power>:
  }



// Compute FFT magnitudes (log power) for each timeslot in the signal
void extract_power( int offset) {
 800b010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b014:	4604      	mov	r4, r0


        // Loop over two possible time offsets (0 and block_size/2)
        for (int time_sub = 0; time_sub <= input_gulp_size/2; time_sub += input_gulp_size/2) {
 800b016:	4e4a      	ldr	r6, [pc, #296]	@ (800b140 <extract_power+0x130>)
 800b018:	f04f 0800 	mov.w	r8, #0

        for (int i = 0; i <  FFT_SIZE ; i++) window_dsp_buffer[i] = (q15_t) ( (float) extract_signal[i + time_sub] * window[i] );
 800b01c:	4949      	ldr	r1, [pc, #292]	@ (800b144 <extract_power+0x134>)
void extract_power( int offset) {
 800b01e:	4633      	mov	r3, r6
 800b020:	4a49      	ldr	r2, [pc, #292]	@ (800b148 <extract_power+0x138>)
        for (int i = 0; i <  FFT_SIZE ; i++) window_dsp_buffer[i] = (q15_t) ( (float) extract_signal[i + time_sub] * window[i] );
 800b022:	2500      	movs	r5, #0
 800b024:	f933 0b02 	ldrsh.w	r0, [r3], #2
 800b028:	3501      	adds	r5, #1
 800b02a:	ecb1 7a01 	vldmia	r1!, {s14}
 800b02e:	ee07 0a90 	vmov	s15, r0
 800b032:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800b036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b03a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b03e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b042:	ee17 0a90 	vmov	r0, s15
 800b046:	f822 0b02 	strh.w	r0, [r2], #2
 800b04a:	d1eb      	bne.n	800b024 <extract_power+0x14>
        arm_rfft_q15(&fft_inst, window_dsp_buffer,dsp_output );
 800b04c:	4a3f      	ldr	r2, [pc, #252]	@ (800b14c <extract_power+0x13c>)
        arm_shift_q15(&dsp_output[0], 5, &FFT_Scale[0], FFT_SIZE * 2 );
        arm_cmplx_mag_squared_q15(&FFT_Scale[0], &FFT_Magnitude[0], FFT_SIZE);

       for (int j = 0; j< FFT_SIZE/2; j++) {
 800b04e:	2700      	movs	r7, #0
        arm_rfft_q15(&fft_inst, window_dsp_buffer,dsp_output );
 800b050:	493d      	ldr	r1, [pc, #244]	@ (800b148 <extract_power+0x138>)
 800b052:	483f      	ldr	r0, [pc, #252]	@ (800b150 <extract_power+0x140>)
 800b054:	f7f6 fe1e 	bl	8001c94 <arm_rfft_q15>
        arm_shift_q15(&dsp_output[0], 5, &FFT_Scale[0], FFT_SIZE * 2 );
 800b058:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b05c:	4a3d      	ldr	r2, [pc, #244]	@ (800b154 <extract_power+0x144>)
 800b05e:	2105      	movs	r1, #5
 800b060:	483a      	ldr	r0, [pc, #232]	@ (800b14c <extract_power+0x13c>)
 800b062:	f7f6 fe50 	bl	8001d06 <arm_shift_q15>
        arm_cmplx_mag_squared_q15(&FFT_Scale[0], &FFT_Magnitude[0], FFT_SIZE);
 800b066:	462a      	mov	r2, r5
 800b068:	4d3b      	ldr	r5, [pc, #236]	@ (800b158 <extract_power+0x148>)
 800b06a:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 800b15c <extract_power+0x14c>
 800b06e:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 800b164 <extract_power+0x154>
 800b072:	46a9      	mov	r9, r5
 800b074:	4939      	ldr	r1, [pc, #228]	@ (800b15c <extract_power+0x14c>)
 800b076:	4837      	ldr	r0, [pc, #220]	@ (800b154 <extract_power+0x144>)
 800b078:	f7f6 fbd2 	bl	8001820 <arm_cmplx_mag_squared_q15>
        FFT_Mag_10[j] = 10 * (int32_t)FFT_Magnitude[j];
 800b07c:	f93b 0b02 	ldrsh.w	r0, [fp], #2
       for (int j = 0; j< FFT_SIZE/2; j++) {
 800b080:	3701      	adds	r7, #1
        FFT_Mag_10[j] = 10 * (int32_t)FFT_Magnitude[j];
 800b082:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b086:	0040      	lsls	r0, r0, #1
        mag_db[j] =  5.0 * log((float)FFT_Mag_10[j] + 0.1);
 800b088:	ee07 0a90 	vmov	s15, r0
        FFT_Mag_10[j] = 10 * (int32_t)FFT_Magnitude[j];
 800b08c:	f84a 0b04 	str.w	r0, [sl], #4
        mag_db[j] =  5.0 * log((float)FFT_Mag_10[j] + 0.1);
 800b090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b094:	ee17 0a90 	vmov	r0, s15
 800b098:	f7f5 fae6 	bl	8000668 <__aeabi_f2d>
 800b09c:	a326      	add	r3, pc, #152	@ (adr r3, 800b138 <extract_power+0x128>)
 800b09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a2:	f7f5 f983 	bl	80003ac <__adddf3>
 800b0a6:	ec41 0b10 	vmov	d0, r0, r1
 800b0aa:	f004 f965 	bl	800f378 <log>
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	4b2b      	ldr	r3, [pc, #172]	@ (800b160 <extract_power+0x150>)
 800b0b2:	ec51 0b10 	vmov	r0, r1, d0
 800b0b6:	f7f5 fb2f 	bl	8000718 <__aeabi_dmul>
 800b0ba:	f7f5 fe25 	bl	8000d08 <__aeabi_d2f>
       for (int j = 0; j< FFT_SIZE/2; j++) {
 800b0be:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
        mag_db[j] =  5.0 * log((float)FFT_Mag_10[j] + 0.1);
 800b0c2:	f849 0b04 	str.w	r0, [r9], #4
       for (int j = 0; j< FFT_SIZE/2; j++) {
 800b0c6:	d1d9      	bne.n	800b07c <extract_power+0x6c>
            // Loop over two possible frequency bin offsets (for averaging)
            for (int freq_sub = 0; freq_sub < 2; ++freq_sub) {
                for (int j = 0; j < ft8_buffer; ++j) {
                    float db1 = mag_db[j * 2 + freq_sub];
                    float db2 = mag_db[j * 2 + freq_sub + 1];
                    float db = (db1 + db2) / 2;
 800b0c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b0cc:	4620      	mov	r0, r4
            for (int freq_sub = 0; freq_sub < 2; ++freq_sub) {
 800b0ce:	f04f 0c00 	mov.w	ip, #0
 800b0d2:	f8df e094 	ldr.w	lr, [pc, #148]	@ 800b168 <extract_power+0x158>
                for (int j = 0; j < ft8_buffer; ++j) {
 800b0d6:	eb00 070e 	add.w	r7, r0, lr
       for (int j = 0; j< FFT_SIZE/2; j++) {
 800b0da:	462a      	mov	r2, r5
                for (int j = 0; j < ft8_buffer; ++j) {
 800b0dc:	2100      	movs	r1, #0
                    float db = (db1 + db2) / 2;
 800b0de:	edd2 7a00 	vldr	s15, [r2]
                for (int j = 0; j < ft8_buffer; ++j) {
 800b0e2:	3101      	adds	r1, #1
                    float db = (db1 + db2) / 2;
 800b0e4:	edd2 6a01 	vldr	s13, [r2, #4]
                for (int j = 0; j < ft8_buffer; ++j) {
 800b0e8:	3208      	adds	r2, #8
 800b0ea:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
                    float db = (db1 + db2) / 2;
 800b0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0f2:	ee67 7a87 	vmul.f32	s15, s15, s14

                    int scaled = (int) (db);
 800b0f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0fa:	ee17 3a90 	vmov	r3, s15
                  // export_fft_power[offset] = (scaled < 0) ? 0 : ((scaled > 255) ? 255 : scaled);
                    export_fft_power[offset] =  (uint8_t)  (scaled < 0) ? 0 : ((scaled > 255) ? 255 : scaled);
 800b0fe:	f383 0308 	usat	r3, #8, r3
 800b102:	f807 3b01 	strb.w	r3, [r7], #1
                for (int j = 0; j < ft8_buffer; ++j) {
 800b106:	d1ea      	bne.n	800b0de <extract_power+0xce>
                    ++offset;
 800b108:	f500 70c8 	add.w	r0, r0, #400	@ 0x190
            for (int freq_sub = 0; freq_sub < 2; ++freq_sub) {
 800b10c:	3504      	adds	r5, #4
 800b10e:	f1bc 0f00 	cmp.w	ip, #0
 800b112:	d102      	bne.n	800b11a <extract_power+0x10a>
 800b114:	f04f 0c01 	mov.w	ip, #1
 800b118:	e7dd      	b.n	800b0d6 <extract_power+0xc6>
                    ++offset;
 800b11a:	f504 7448 	add.w	r4, r4, #800	@ 0x320
        for (int time_sub = 0; time_sub <= input_gulp_size/2; time_sub += input_gulp_size/2) {
 800b11e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800b122:	f1b8 0f00 	cmp.w	r8, #0
 800b126:	d102      	bne.n	800b12e <extract_power+0x11e>
 800b128:	f44f 7800 	mov.w	r8, #512	@ 0x200
 800b12c:	e776      	b.n	800b01c <extract_power+0xc>
                }
            }
        }

}
 800b12e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b132:	bf00      	nop
 800b134:	f3af 8000 	nop.w
 800b138:	9999999a 	.word	0x9999999a
 800b13c:	3fb99999 	.word	0x3fb99999
 800b140:	20037d00 	.word	0x20037d00
 800b144:	2000b43c 	.word	0x2000b43c
 800b148:	20039500 	.word	0x20039500
 800b14c:	20035d00 	.word	0x20035d00
 800b150:	20009510 	.word	0x20009510
 800b154:	20010440 	.word	0x20010440
 800b158:	2000d43c 	.word	0x2000d43c
 800b15c:	2000f440 	.word	0x2000f440
 800b160:	40140000 	.word	0x40140000
 800b164:	2000e440 	.word	0x2000e440
 800b168:	20012440 	.word	0x20012440

0800b16c <process_FT8_FFT>:
			 extract_signal[i] = extract_signal[i + input_gulp_size];
 800b16c:	4922      	ldr	r1, [pc, #136]	@ (800b1f8 <process_FT8_FFT+0x8c>)
 800b16e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
void process_FT8_FFT(void) {
 800b172:	b538      	push	{r3, r4, r5, lr}
			 extract_signal[i] = extract_signal[i + input_gulp_size];
 800b174:	f5a1 6000 	sub.w	r0, r1, #2048	@ 0x800
		 if(ft8_flag == 1) {
 800b178:	4c20      	ldr	r4, [pc, #128]	@ (800b1fc <process_FT8_FFT+0x90>)
			 extract_signal[i] = extract_signal[i + input_gulp_size];
 800b17a:	f003 f9ec 	bl	800e556 <memcpy>
			 extract_signal[i+ input_gulp_size] = extract_signal[i + 2*input_gulp_size];
 800b17e:	4920      	ldr	r1, [pc, #128]	@ (800b200 <process_FT8_FFT+0x94>)
 800b180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b184:	f5a1 6000 	sub.w	r0, r1, #2048	@ 0x800
 800b188:	f003 f9e5 	bl	800e556 <memcpy>
			 extract_signal[i+ 2* input_gulp_size] =  FT8_Data[i];
 800b18c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b190:	491c      	ldr	r1, [pc, #112]	@ (800b204 <process_FT8_FFT+0x98>)
 800b192:	481b      	ldr	r0, [pc, #108]	@ (800b200 <process_FT8_FFT+0x94>)
 800b194:	f003 f9df 	bl	800e556 <memcpy>
		 if(ft8_flag == 1) {
 800b198:	69e3      	ldr	r3, [r4, #28]
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d12a      	bne.n	800b1f4 <process_FT8_FFT+0x88>
		 master_offset =  offset_step *  FT_8_counter;
 800b19e:	6a23      	ldr	r3, [r4, #32]
				FFT_Buffer[2*k] = 63;
 800b1a0:	253f      	movs	r5, #63	@ 0x3f
		 master_offset =  offset_step *  FT_8_counter;
 800b1a2:	69a0      	ldr	r0, [r4, #24]
 800b1a4:	4358      	muls	r0, r3
 800b1a6:	6260      	str	r0, [r4, #36]	@ 0x24
		 extract_power(master_offset);
 800b1a8:	f7ff ff32 	bl	800b010 <extract_power>
		 for(int k = 0; k<ft8_buffer; k++){
 800b1ac:	4b16      	ldr	r3, [pc, #88]	@ (800b208 <process_FT8_FFT+0x9c>)
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b1b2:	441a      	add	r2, r3
 800b1b4:	f104 0328 	add.w	r3, r4, #40	@ 0x28
				if(export_fft_power[k + master_offset ] <64 )
 800b1b8:	f812 0b01 	ldrb.w	r0, [r2], #1
		 for(int k = 0; k<ft8_buffer; k++){
 800b1bc:	3101      	adds	r1, #1
 800b1be:	3304      	adds	r3, #4
				if(export_fft_power[k + master_offset ] <64 )
 800b1c0:	283f      	cmp	r0, #63	@ 0x3f
				FFT_Buffer[2*k] = (uint16_t )export_fft_power[k + master_offset ] ;
 800b1c2:	bf95      	itete	ls
 800b1c4:	f823 0c04 	strhls.w	r0, [r3, #-4]
				FFT_Buffer[2*k] = 63;
 800b1c8:	203f      	movhi	r0, #63	@ 0x3f
				FFT_Buffer[2*k+1] = (uint16_t )export_fft_power[k + master_offset + ft8_buffer] ;
 800b1ca:	f892 018f 	ldrbls.w	r0, [r2, #399]	@ 0x18f
				FFT_Buffer[2*k] = 63;
 800b1ce:	f823 5c04 	strhhi.w	r5, [r3, #-4]
		 for(int k = 0; k<ft8_buffer; k++){
 800b1d2:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
				FFT_Buffer[2*k+1] = (uint16_t )export_fft_power[k + master_offset + ft8_buffer] ;
 800b1d6:	f823 0c02 	strh.w	r0, [r3, #-2]
		 for(int k = 0; k<ft8_buffer; k++){
 800b1da:	d1ed      	bne.n	800b1b8 <process_FT8_FFT+0x4c>
		Display_WF();
 800b1dc:	f7ff fe06 	bl	800adec <Display_WF>
		 FT_8_counter++;
 800b1e0:	6a23      	ldr	r3, [r4, #32]
 800b1e2:	3301      	adds	r3, #1
		 if (FT_8_counter == ft8_msg_samples)
 800b1e4:	2b5b      	cmp	r3, #91	@ 0x5b
		 FT_8_counter++;
 800b1e6:	6223      	str	r3, [r4, #32]
		 if (FT_8_counter == ft8_msg_samples)
 800b1e8:	d104      	bne.n	800b1f4 <process_FT8_FFT+0x88>
		 {ft8_flag = 0;
 800b1ea:	2300      	movs	r3, #0
		 decode_flag = 1;
 800b1ec:	2201      	movs	r2, #1
		 {ft8_flag = 0;
 800b1ee:	61e3      	str	r3, [r4, #28]
		 decode_flag = 1;
 800b1f0:	4b06      	ldr	r3, [pc, #24]	@ (800b20c <process_FT8_FFT+0xa0>)
 800b1f2:	601a      	str	r2, [r3, #0]
  }
 800b1f4:	bd38      	pop	{r3, r4, r5, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20038500 	.word	0x20038500
 800b1fc:	20009510 	.word	0x20009510
 800b200:	20038d00 	.word	0x20038d00
 800b204:	2003e12c 	.word	0x2003e12c
 800b208:	20012440 	.word	0x20012440
 800b20c:	2000950c 	.word	0x2000950c

0800b210 <start_audio_I2C>:
#define KCONV 10430.37835              // 		4096*16/PI2
double LO_Freq = 10000;
float Sample_Frequency = 32000.0;

void start_audio_I2C (void){
	AUDIO_IO_Init();
 800b210:	f7f6 bf64 	b.w	80020dc <AUDIO_IO_Init>

0800b214 <clear_Output_Buffers>:

void clear_Output_Buffers(void);

void clear_Output_Buffers(void) {
	int i;
	for(i=0; i<BUFFERSIZE;i++) 	out_buff[i] = 0;
 800b214:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b218:	2100      	movs	r1, #0
 800b21a:	4801      	ldr	r0, [pc, #4]	@ (800b220 <clear_Output_Buffers+0xc>)
 800b21c:	f003 b88f 	b.w	800e33e <memset>
 800b220:	2003e94c 	.word	0x2003e94c

0800b224 <start_duplex>:
	HAL_Delay(100);
	hope = wm8994_Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_BOTH, 70, (uint32_t)16000);
	HAL_Delay(100);
}

void start_duplex(int mode) {
 800b224:	b510      	push	{r4, lr}
 800b226:	4604      	mov	r4, r0
  //note, somehow there is a sneak path for setting the codec frequency see wmcodec for reference

  HAL_Delay(10);
 800b228:	200a      	movs	r0, #10
 800b22a:	f002 fa17 	bl	800d65c <HAL_Delay>
  clear_Output_Buffers();
 800b22e:	f7ff fff1 	bl	800b214 <clear_Output_Buffers>
  if(mode == 0)
 800b232:	b9bc      	cbnz	r4, 800b264 <start_duplex+0x40>
  BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1, OUTPUT_DEVICE_BOTH, 70, 32000);
 800b234:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
  else
  BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1, OUTPUT_DEVICE_BOTH, 70, 8000) ;
 800b238:	2246      	movs	r2, #70	@ 0x46
 800b23a:	2103      	movs	r1, #3
 800b23c:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800b240:	f7f7 fa50 	bl	80026e4 <BSP_AUDIO_IN_OUT_Init>


  BSP_AUDIO_IN_Record((uint16_t*)&in_buff,BUFFERSIZE);
 800b244:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800b248:	4808      	ldr	r0, [pc, #32]	@ (800b26c <start_duplex+0x48>)
 800b24a:	f7f7 f98b 	bl	8002564 <BSP_AUDIO_IN_Record>

  BSP_AUDIO_OUT_Play((uint16_t*)&out_buff, 2*BUFFERSIZE);
 800b24e:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 800b252:	4807      	ldr	r0, [pc, #28]	@ (800b270 <start_duplex+0x4c>)
 800b254:	f7f7 f880 	bl	8002358 <BSP_AUDIO_OUT_Play>

  R_lgain = 0.5;
 800b258:	4b06      	ldr	r3, [pc, #24]	@ (800b274 <start_duplex+0x50>)
 800b25a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800b25e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("nop");
 800b260:	bf00      	nop

  NoOp;

}
 800b262:	bd10      	pop	{r4, pc}
  BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1, OUTPUT_DEVICE_BOTH, 70, 8000) ;
 800b264:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800b268:	e7e6      	b.n	800b238 <start_duplex+0x14>
 800b26a:	bf00      	nop
 800b26c:	2004114c 	.word	0x2004114c
 800b270:	2003e94c 	.word	0x2003e94c
 800b274:	2003a510 	.word	0x2003a510

0800b278 <BSP_AUDIO_IN_TransferComplete_CallBack>:
}


void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
	buff_offset = BUFFERSIZE/2;
 800b278:	4b03      	ldr	r3, [pc, #12]	@ (800b288 <BSP_AUDIO_IN_TransferComplete_CallBack+0x10>)
 800b27a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800b27e:	811a      	strh	r2, [r3, #8]
	DSP_Flag = 1;
 800b280:	2201      	movs	r2, #1
 800b282:	60da      	str	r2, [r3, #12]
	//I2S2_RX_ProcessBuffer(buff_offset );
	//transfer_buffers();


}
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	2003a510 	.word	0x2003a510

0800b28c <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
	buff_offset = 0;
 800b28c:	4b02      	ldr	r3, [pc, #8]	@ (800b298 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xc>)
 800b28e:	2200      	movs	r2, #0
 800b290:	811a      	strh	r2, [r3, #8]
	DSP_Flag = 1;
 800b292:	2201      	movs	r2, #1
 800b294:	60da      	str	r2, [r3, #12]
	//I2S2_RX_ProcessBuffer(buff_offset );
	//transfer_buffers();
}
 800b296:	4770      	bx	lr
 800b298:	2003a510 	.word	0x2003a510

0800b29c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
	//buff_offset = BUFFERSIZE/2;
	//DSP_Flag = 1;
	//transfer_buffers();
	//I2S2_RX_ProcessBuffer(buff_offset );
	//DSP_Process_Switch(buff_offset);
}
 800b29c:	4770      	bx	lr

0800b29e <BSP_AUDIO_OUT_HalfTransfer_CallBack>:


void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
 800b29e:	4770      	bx	lr

0800b2a0 <I2S2_RX_ProcessBuffer>:
}

int frame_counter;


void I2S2_RX_ProcessBuffer(uint16_t offset){
 800b2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static q15_t TX_I,TX_Q ;
	static long NCO_phz;
	float m_RMSConstant = 0.00001;


	x_NCOphzinc = (PI2 * LO_Freq / (double) Sample_Frequency);
 800b2a4:	4e5e      	ldr	r6, [pc, #376]	@ (800b420 <I2S2_RX_ProcessBuffer+0x180>)
void I2S2_RX_ProcessBuffer(uint16_t offset){
 800b2a6:	4607      	mov	r7, r0
	x_NCOphzinc = (PI2 * LO_Freq / (double) Sample_Frequency);
 800b2a8:	a359      	add	r3, pc, #356	@ (adr r3, 800b410 <I2S2_RX_ProcessBuffer+0x170>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b2b2:	f7f5 fa31 	bl	8000718 <__aeabi_dmul>
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	460d      	mov	r5, r1
 800b2ba:	68b0      	ldr	r0, [r6, #8]
 800b2bc:	f7f5 f9d4 	bl	8000668 <__aeabi_f2d>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	4c56      	ldr	r4, [pc, #344]	@ (800b424 <I2S2_RX_ProcessBuffer+0x184>)
 800b2ca:	f7f5 fb4f 	bl	800096c <__aeabi_ddiv>
 800b2ce:	f7f5 fd1b 	bl	8000d08 <__aeabi_d2f>
 800b2d2:	6120      	str	r0, [r4, #16]

	for (int i = 0; i < BUFFERSIZE / 4; i++) {
			NCO_phz += (long) (KCONV * (x_NCOphzinc));
 800b2d4:	f7f5 f9c8 	bl	8000668 <__aeabi_f2d>
 800b2d8:	007d      	lsls	r5, r7, #1
 800b2da:	a34f      	add	r3, pc, #316	@ (adr r3, 800b418 <I2S2_RX_ProcessBuffer+0x178>)
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f7f5 fa1a 	bl	8000718 <__aeabi_dmul>
 800b2e4:	f7f5 fcc8 	bl	8000c78 <__aeabi_d2iz>
 800b2e8:	6963      	ldr	r3, [r4, #20]
 800b2ea:	4a4f      	ldr	r2, [pc, #316]	@ (800b428 <I2S2_RX_ProcessBuffer+0x188>)
 800b2ec:	4601      	mov	r1, r0
 800b2ee:	4403      	add	r3, r0
 800b2f0:	f104 0c18 	add.w	ip, r4, #24
 800b2f4:	eb02 0247 	add.w	r2, r2, r7, lsl #1
	for (int i = 0; i < BUFFERSIZE / 4; i++) {
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	461e      	mov	r6, r3
 800b2fc:	f604 2718 	addw	r7, r4, #2584	@ 0xa18
			TX_I = (Sine_table[(NCO_phz >> 4) & 0xFFF]);
			TX_Q = (Sine_table[((NCO_phz >> 4) + 0x400) & 0xFFF]);
 800b300:	f8df e13c 	ldr.w	lr, [pc, #316]	@ 800b440 <I2S2_RX_ProcessBuffer+0x1a0>

			FIR_I_In[i] = (q15_t) ((float) TX_I * (float)in_buff[i*2+offset] * m_RMSConstant);
 800b304:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 800b42c <I2S2_RX_ProcessBuffer+0x18c>
			TX_I = (Sine_table[(NCO_phz >> 4) & 0xFFF]);
 800b308:	ea4f 1826 	mov.w	r8, r6, asr #4
	for (int i = 0; i < BUFFERSIZE / 4; i++) {
 800b30c:	3001      	adds	r0, #1
 800b30e:	440e      	add	r6, r1
 800b310:	3204      	adds	r2, #4
			TX_Q = (Sine_table[((NCO_phz >> 4) + 0x400) & 0xFFF]);
 800b312:	f508 6980 	add.w	r9, r8, #1024	@ 0x400
			TX_I = (Sine_table[(NCO_phz >> 4) & 0xFFF]);
 800b316:	f3c8 080b 	ubfx	r8, r8, #0, #12
	for (int i = 0; i < BUFFERSIZE / 4; i++) {
 800b31a:	f5b0 6fa0 	cmp.w	r0, #1280	@ 0x500
			FIR_I_In[i] = (q15_t) ((float) TX_I * (float)in_buff[i*2+offset] * m_RMSConstant);
 800b31e:	f93e 8028 	ldrsh.w	r8, [lr, r8, lsl #2]
			TX_Q = (Sine_table[((NCO_phz >> 4) + 0x400) & 0xFFF]);
 800b322:	f3c9 090b 	ubfx	r9, r9, #0, #12
			FIR_I_In[i] = (q15_t) ((float) TX_I * (float)in_buff[i*2+offset] * m_RMSConstant);
 800b326:	ee07 8a90 	vmov	s15, r8
 800b32a:	f932 8c04 	ldrsh.w	r8, [r2, #-4]
			TX_Q = (Sine_table[((NCO_phz >> 4) + 0x400) & 0xFFF]);
 800b32e:	f93e 9029 	ldrsh.w	r9, [lr, r9, lsl #2]
			FIR_I_In[i] = (q15_t) ((float) TX_I * (float)in_buff[i*2+offset] * m_RMSConstant);
 800b332:	ee06 8a90 	vmov	s13, r8
 800b336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			TX_Q = (Sine_table[((NCO_phz >> 4) + 0x400) & 0xFFF]);
 800b33a:	ee07 9a10 	vmov	s14, r9
			FIR_I_In[i] = (q15_t) ((float) TX_I * (float)in_buff[i*2+offset] * m_RMSConstant);
 800b33e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			FIR_Q_In[i] = (q15_t) ((float) TX_Q   * (float)in_buff[i*2+1+offset] * m_RMSConstant);
 800b342:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			FIR_I_In[i] = (q15_t) ((float) TX_I * (float)in_buff[i*2+offset] * m_RMSConstant);
 800b346:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b34a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b34e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b352:	ee17 8a90 	vmov	r8, s15
 800b356:	f82c 8b02 	strh.w	r8, [ip], #2
			FIR_Q_In[i] = (q15_t) ((float) TX_Q   * (float)in_buff[i*2+1+offset] * m_RMSConstant);
 800b35a:	f932 8c02 	ldrsh.w	r8, [r2, #-2]
 800b35e:	ee07 8a90 	vmov	s15, r8
 800b362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b36a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b36e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b372:	ee17 8a90 	vmov	r8, s15
 800b376:	f827 8b02 	strh.w	r8, [r7], #2
	for (int i = 0; i < BUFFERSIZE / 4; i++) {
 800b37a:	d1c5      	bne.n	800b308 <I2S2_RX_ProcessBuffer+0x68>
			NCO_phz += (long) (KCONV * (x_NCOphzinc));
 800b37c:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 800b380:	4f2b      	ldr	r7, [pc, #172]	@ (800b430 <I2S2_RX_ProcessBuffer+0x190>)



			 if(frame_counter <4) {

				if(i%5 == 0) FT8_Data[i/5 + frame_counter * 256] = USB_Out[i] ;
 800b382:	f04f 0b05 	mov.w	fp, #5
			NCO_phz += (long) (KCONV * (x_NCOphzinc));
 800b386:	fb02 3301 	mla	r3, r2, r1, r3
				if(i%5 == 0) FT8_Data[i/5 + frame_counter * 256] = USB_Out[i] ;
 800b38a:	f107 0acc 	add.w	sl, r7, #204	@ 0xcc
 800b38e:	6163      	str	r3, [r4, #20]
		 Process_FIR_I_32K();
 800b390:	f7ff fdd6 	bl	800af40 <Process_FIR_I_32K>
			 if(frame_counter <4) {
 800b394:	4c27      	ldr	r4, [pc, #156]	@ (800b434 <I2S2_RX_ProcessBuffer+0x194>)
		 Process_FIR_Q_32K();
 800b396:	f7ff fde1 	bl	800af5c <Process_FIR_Q_32K>
		 for(int i=0;i<BUFFERSIZE/4;i++){
 800b39a:	4927      	ldr	r1, [pc, #156]	@ (800b438 <I2S2_RX_ProcessBuffer+0x198>)
 800b39c:	2000      	movs	r0, #0
			 if(frame_counter <4) {
 800b39e:	f8d4 2320 	ldr.w	r2, [r4, #800]	@ 0x320
 800b3a2:	f504 7849 	add.w	r8, r4, #804	@ 0x324
 800b3a6:	f604 5e24 	addw	lr, r4, #3364	@ 0xd24
 800b3aa:	f8df c098 	ldr.w	ip, [pc, #152]	@ 800b444 <I2S2_RX_ProcessBuffer+0x1a4>
				if(i%5 == 0) FT8_Data[i/5 + frame_counter * 256] = USB_Out[i] ;
 800b3ae:	ea4f 2902 	mov.w	r9, r2, lsl #8
 800b3b2:	4429      	add	r1, r5
		 USB_Out[i] = FIR_I_Out[i] - FIR_Q_Out[i];
 800b3b4:	f838 3b02 	ldrh.w	r3, [r8], #2
			 if(frame_counter <4) {
 800b3b8:	2a03      	cmp	r2, #3
		 USB_Out[i] = FIR_I_Out[i] - FIR_Q_Out[i];
 800b3ba:	f83e 6b02 	ldrh.w	r6, [lr], #2
 800b3be:	eba3 0506 	sub.w	r5, r3, r6
		 LSB_Out[i] = FIR_I_Out[i] + FIR_Q_Out[i];
 800b3c2:	4433      	add	r3, r6
		 USB_Out[i] = FIR_I_Out[i] - FIR_Q_Out[i];
 800b3c4:	b22d      	sxth	r5, r5
		 LSB_Out[i] = FIR_I_Out[i] + FIR_Q_Out[i];
 800b3c6:	b21b      	sxth	r3, r3
		 USB_Out[i] = FIR_I_Out[i] - FIR_Q_Out[i];
 800b3c8:	f82c 5b02 	strh.w	r5, [ip], #2
		 LSB_Out[i] = FIR_I_Out[i] + FIR_Q_Out[i];
 800b3cc:	f827 3b02 	strh.w	r3, [r7], #2
			 if(frame_counter <4) {
 800b3d0:	dc0b      	bgt.n	800b3ea <I2S2_RX_ProcessBuffer+0x14a>
				if(i%5 == 0) FT8_Data[i/5 + frame_counter * 256] = USB_Out[i] ;
 800b3d2:	4e1a      	ldr	r6, [pc, #104]	@ (800b43c <I2S2_RX_ProcessBuffer+0x19c>)
 800b3d4:	4346      	muls	r6, r0
 800b3d6:	f1b6 3f33 	cmp.w	r6, #858993459	@ 0x33333333
 800b3da:	bf9f      	itttt	ls
 800b3dc:	fbb0 f6fb 	udivls	r6, r0, fp
 800b3e0:	444e      	addls	r6, r9
 800b3e2:	eb0a 0646 	addls.w	r6, sl, r6, lsl #1
 800b3e6:	f8a6 5934 	strhls.w	r5, [r6, #2356]	@ 0x934
		 for(int i=0;i<BUFFERSIZE/4;i++){
 800b3ea:	3001      	adds	r0, #1
				 }


		out_buff[i*2+offset]= (int16_t)USB_Out[i];
 800b3ec:	800d      	strh	r5, [r1, #0]
		out_buff[i*2+1+offset]= (int16_t)LSB_Out[i];
 800b3ee:	804b      	strh	r3, [r1, #2]
		 for(int i=0;i<BUFFERSIZE/4;i++){
 800b3f0:	3104      	adds	r1, #4
 800b3f2:	f5b0 6fa0 	cmp.w	r0, #1280	@ 0x500
 800b3f6:	d1dd      	bne.n	800b3b4 <I2S2_RX_ProcessBuffer+0x114>

		 }

		 frame_counter++;
 800b3f8:	3201      	adds	r2, #1

		 if(frame_counter == 4)
 800b3fa:	2a04      	cmp	r2, #4
		 frame_counter++;
 800b3fc:	f8c4 2320 	str.w	r2, [r4, #800]	@ 0x320
		 if(frame_counter == 4)
 800b400:	d104      	bne.n	800b40c <I2S2_RX_ProcessBuffer+0x16c>
		 {
			  process_FT8_FFT();
 800b402:	f7ff feb3 	bl	800b16c <process_FT8_FFT>
			  frame_counter = 0;
 800b406:	2300      	movs	r3, #0
 800b408:	f8c4 3320 	str.w	r3, [r4, #800]	@ 0x320
		 }

    }
 800b40c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b410:	54442d18 	.word	0x54442d18
 800b414:	401921fb 	.word	0x401921fb
 800b418:	6dc5d639 	.word	0x6dc5d639
 800b41c:	40c45f30 	.word	0x40c45f30
 800b420:	20000c30 	.word	0x20000c30
 800b424:	2003a510 	.word	0x2003a510
 800b428:	2004114c 	.word	0x2004114c
 800b42c:	3727c5ac 	.word	0x3727c5ac
 800b430:	2003d72c 	.word	0x2003d72c
 800b434:	2003b608 	.word	0x2003b608
 800b438:	2003e94c 	.word	0x2003e94c
 800b43c:	cccccccd 	.word	0xcccccccd
 800b440:	080517a8 	.word	0x080517a8
 800b444:	2003cd2c 	.word	0x2003cd2c

0800b448 <si5351_write_bulk>:




uint8_t si5351_write_bulk(uint8_t addr, uint8_t bytes, uint8_t *data)
{
 800b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44a:	4606      	mov	r6, r0
 800b44c:	460d      	mov	r5, r1
 800b44e:	4617      	mov	r7, r2
	}
	return Wire.endTransmission();
	*/

	int i;
		for(i = 0; i < bytes; i++) {
 800b450:	2400      	movs	r4, #0
 800b452:	42a5      	cmp	r5, r4
 800b454:	dc01      	bgt.n	800b45a <si5351_write_bulk+0x12>
			EXT_I2C_Write(SI5351_BUS_BASE_ADDR,addr+i, data[i]);
		}

		return (uint8_t) i;

}
 800b456:	4628      	mov	r0, r5
 800b458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			EXT_I2C_Write(SI5351_BUS_BASE_ADDR,addr+i, data[i]);
 800b45a:	1931      	adds	r1, r6, r4
 800b45c:	5d3a      	ldrb	r2, [r7, r4]
 800b45e:	20c0      	movs	r0, #192	@ 0xc0
		for(i = 0; i < bytes; i++) {
 800b460:	3401      	adds	r4, #1
			EXT_I2C_Write(SI5351_BUS_BASE_ADDR,addr+i, data[i]);
 800b462:	b289      	uxth	r1, r1
 800b464:	f7f6 fe9c 	bl	80021a0 <EXT_I2C_Write>
		for(i = 0; i < bytes; i++) {
 800b468:	e7f3      	b.n	800b452 <si5351_write_bulk+0xa>

0800b46a <si5351_write>:




uint8_t si5351_write(uint8_t addr, uint8_t data)
{
 800b46a:	460a      	mov	r2, r1

	uint8_t buffer[2];
	buffer[0] = data;

	//EXT_I2C_Write(SI5351_BUS_BASE_ADDR, addr, data);
	EXT_I2C_Write_N(SI5351_BUS_BASE_ADDR, addr, buffer[0], 1);
 800b46c:	4601      	mov	r1, r0
 800b46e:	20c0      	movs	r0, #192	@ 0xc0
{
 800b470:	b508      	push	{r3, lr}
	EXT_I2C_Write_N(SI5351_BUS_BASE_ADDR, addr, buffer[0], 1);
 800b472:	2301      	movs	r3, #1
 800b474:	f7f6 fea6 	bl	80021c4 <EXT_I2C_Write_N>

	return 0;
}
 800b478:	2000      	movs	r0, #0
 800b47a:	bd08      	pop	{r3, pc}

0800b47c <pll_reset>:
	if(target_pll == SI5351_PLLA)
 800b47c:	b918      	cbnz	r0, 800b486 <pll_reset+0xa>
    	si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_A);
 800b47e:	2120      	movs	r1, #32
	    si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
 800b480:	20b1      	movs	r0, #177	@ 0xb1
 800b482:	f7ff bff2 	b.w	800b46a <si5351_write>
	else if(target_pll == SI5351_PLLB)
 800b486:	2801      	cmp	r0, #1
 800b488:	d101      	bne.n	800b48e <pll_reset+0x12>
	    si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
 800b48a:	2180      	movs	r1, #128	@ 0x80
 800b48c:	e7f8      	b.n	800b480 <pll_reset+0x4>
}
 800b48e:	4770      	bx	lr

0800b490 <si5351_read>:




uint8_t si5351_read(uint8_t addr)
{
 800b490:	4601      	mov	r1, r0

	return reg_val;

	*/

	return EXT_I2C_Read(SI5351_BUS_BASE_ADDR, addr);
 800b492:	20c0      	movs	r0, #192	@ 0xc0
 800b494:	f7f6 bea8 	b.w	80021e8 <EXT_I2C_Read>

0800b498 <output_enable>:
{
 800b498:	b538      	push	{r3, r4, r5, lr}
 800b49a:	4605      	mov	r5, r0
  reg_val = si5351_read(SI5351_OUTPUT_ENABLE_CTRL);
 800b49c:	2003      	movs	r0, #3
{
 800b49e:	460c      	mov	r4, r1
  reg_val = si5351_read(SI5351_OUTPUT_ENABLE_CTRL);
 800b4a0:	f7ff fff6 	bl	800b490 <si5351_read>
    reg_val &= ~(1<<(uint8_t)clk);
 800b4a4:	2301      	movs	r3, #1
  if(enable == 1)
 800b4a6:	2c01      	cmp	r4, #1
    reg_val &= ~(1<<(uint8_t)clk);
 800b4a8:	fa03 f305 	lsl.w	r3, r3, r5
 800b4ac:	bf0c      	ite	eq
 800b4ae:	ea20 0103 	biceq.w	r1, r0, r3
    reg_val |= (1<<(uint8_t)clk);
 800b4b2:	ea40 0103 	orrne.w	r1, r0, r3
  si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
 800b4b6:	2003      	movs	r0, #3
    reg_val |= (1<<(uint8_t)clk);
 800b4b8:	b2c9      	uxtb	r1, r1
}
 800b4ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
 800b4be:	f7ff bfd4 	b.w	800b46a <si5351_write>

0800b4c2 <drive_strength>:
  reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b4c2:	3010      	adds	r0, #16
{
 800b4c4:	b538      	push	{r3, r4, r5, lr}
  reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b4c6:	b2c4      	uxtb	r4, r0
{
 800b4c8:	460d      	mov	r5, r1
  reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f7ff ffe0 	bl	800b490 <si5351_read>
  switch(drive)
 800b4d0:	2d02      	cmp	r5, #2
  reg_val &= ~(mask);
 800b4d2:	f000 01fc 	and.w	r1, r0, #252	@ 0xfc
  switch(drive)
 800b4d6:	d00a      	beq.n	800b4ee <drive_strength+0x2c>
 800b4d8:	2d03      	cmp	r5, #3
 800b4da:	d00b      	beq.n	800b4f4 <drive_strength+0x32>
 800b4dc:	2d01      	cmp	r5, #1
 800b4de:	d101      	bne.n	800b4e4 <drive_strength+0x22>
   reg_val |= 0x01;
 800b4e0:	f041 0101 	orr.w	r1, r1, #1
  si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800b4e4:	4620      	mov	r0, r4
}
 800b4e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800b4ea:	f7ff bfbe 	b.w	800b46a <si5351_write>
    reg_val |= 0x02;
 800b4ee:	f041 0102 	orr.w	r1, r1, #2
    break;
 800b4f2:	e7f7      	b.n	800b4e4 <drive_strength+0x22>
    reg_val |= 0x03;
 800b4f4:	f041 0103 	orr.w	r1, r1, #3
    break;
 800b4f8:	e7f4      	b.n	800b4e4 <drive_strength+0x22>
	...

0800b4fc <set_ms_source>:
{
 800b4fc:	b570      	push	{r4, r5, r6, lr}
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b4fe:	f100 0610 	add.w	r6, r0, #16
{
 800b502:	460c      	mov	r4, r1
 800b504:	4605      	mov	r5, r0
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b506:	b2f6      	uxtb	r6, r6
 800b508:	4630      	mov	r0, r6
 800b50a:	f7ff ffc1 	bl	800b490 <si5351_read>
 800b50e:	4601      	mov	r1, r0
	if(pll == SI5351_PLLA)
 800b510:	b944      	cbnz	r4, 800b524 <set_ms_source+0x28>
		reg_val &= ~(SI5351_CLK_PLL_SELECT);
 800b512:	f000 01df 	and.w	r1, r0, #223	@ 0xdf
	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800b516:	4630      	mov	r0, r6
 800b518:	f7ff ffa7 	bl	800b46a <si5351_write>
	pll_assignment[(uint8_t)clk] = pll;
 800b51c:	4b04      	ldr	r3, [pc, #16]	@ (800b530 <set_ms_source+0x34>)
 800b51e:	442b      	add	r3, r5
 800b520:	761c      	strb	r4, [r3, #24]
}
 800b522:	bd70      	pop	{r4, r5, r6, pc}
	else if(pll == SI5351_PLLB)
 800b524:	2c01      	cmp	r4, #1
		reg_val |= SI5351_CLK_PLL_SELECT;
 800b526:	bf04      	itt	eq
 800b528:	f040 0120 	orreq.w	r1, r0, #32
 800b52c:	b2c9      	uxtbeq	r1, r1
 800b52e:	e7f2      	b.n	800b516 <set_ms_source+0x1a>
 800b530:	20043950 	.word	0x20043950

0800b534 <set_int>:
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b534:	3010      	adds	r0, #16
{
 800b536:	b538      	push	{r3, r4, r5, lr}
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b538:	b2c4      	uxtb	r4, r0
{
 800b53a:	460d      	mov	r5, r1
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b53c:	4620      	mov	r0, r4
 800b53e:	f7ff ffa7 	bl	800b490 <si5351_read>
	if(enable == 1)
 800b542:	2d01      	cmp	r5, #1
		reg_val |= (SI5351_CLK_INTEGER_MODE);
 800b544:	bf0c      	ite	eq
 800b546:	f040 0140 	orreq.w	r1, r0, #64	@ 0x40
		reg_val &= ~(SI5351_CLK_INTEGER_MODE);
 800b54a:	f000 01bf 	andne.w	r1, r0, #191	@ 0xbf
	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800b54e:	4620      	mov	r0, r4
		reg_val |= (SI5351_CLK_INTEGER_MODE);
 800b550:	bf08      	it	eq
 800b552:	b2c9      	uxtbeq	r1, r1
}
 800b554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800b558:	f7ff bf87 	b.w	800b46a <si5351_write>
 800b55c:	0000      	movs	r0, r0
	...

0800b560 <pll_calc>:




uint64_t pll_calc(enum si5351_pll pll, uint64_t freq,  Si5351RegSet *reg, int32_t correction, uint8_t vcxo)
{
 800b560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b564:	461e      	mov	r6, r3
 800b566:	4617      	mov	r7, r2
 800b568:	f89d 8030 	ldrb.w	r8, [sp, #48]	@ 0x30
 800b56c:	4b48      	ldr	r3, [pc, #288]	@ (800b690 <pll_calc+0x130>)
 800b56e:	e9dd 910a 	ldrd	r9, r1, [sp, #40]	@ 0x28
	uint64_t ref_freq;
	if(pll == SI5351_PLLA)
 800b572:	2800      	cmp	r0, #0
 800b574:	d17a      	bne.n	800b66c <pll_calc+0x10c>
	{
		ref_freq = xtal_freq[(uint8_t)plla_ref_osc] * SI5351_FREQ_MULT;
 800b576:	7b1a      	ldrb	r2, [r3, #12]
	}
	else
	{
		ref_freq = xtal_freq[(uint8_t)pllb_ref_osc] * SI5351_FREQ_MULT;
 800b578:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800b57c:	2464      	movs	r4, #100	@ 0x64
	uint64_t lltmp; //, denom;

	// Factor calibration value into nominal crystal frequency
	// Measured in parts-per-billion

	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 800b57e:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800b582:	07c8      	lsls	r0, r1, #31
		ref_freq = xtal_freq[(uint8_t)pllb_ref_osc] * SI5351_FREQ_MULT;
 800b584:	685b      	ldr	r3, [r3, #4]
	// PLL bounds checking
	if (freq < SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT)
	{
		freq = SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT;
	}
	if (freq > SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT)
 800b586:	46bb      	mov	fp, r7
	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 800b588:	ea45 0151 	orr.w	r1, r5, r1, lsr #1
		ref_freq = xtal_freq[(uint8_t)pllb_ref_osc] * SI5351_FREQ_MULT;
 800b58c:	fba3 4a04 	umull	r4, sl, r3, r4
	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 800b590:	a33d      	add	r3, pc, #244	@ (adr r3, 800b688 <pll_calc+0x128>)
 800b592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b596:	f7f5 fc07 	bl	8000da8 <__aeabi_ldivmod>
 800b59a:	fb00 f30a 	mul.w	r3, r0, sl
 800b59e:	fba0 5204 	umull	r5, r2, r0, r4
 800b5a2:	fb04 3301 	mla	r3, r4, r1, r3
 800b5a6:	0fed      	lsrs	r5, r5, #31
 800b5a8:	4413      	add	r3, r2
	if (freq > SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT)
 800b5aa:	4a3a      	ldr	r2, [pc, #232]	@ (800b694 <pll_calc+0x134>)
	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 800b5ac:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
	if (freq > SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT)
 800b5b0:	2314      	movs	r3, #20
	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 800b5b2:	192c      	adds	r4, r5, r4
 800b5b4:	eb4a 75e5 	adc.w	r5, sl, r5, asr #31
	if (freq > SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT)
 800b5b8:	42ba      	cmp	r2, r7
 800b5ba:	46b2      	mov	sl, r6
 800b5bc:	eb73 0606 	sbcs.w	r6, r3, r6
 800b5c0:	bf38      	it	cc
 800b5c2:	4693      	movcc	fp, r2
 800b5c4:	4a34      	ldr	r2, [pc, #208]	@ (800b698 <pll_calc+0x138>)
 800b5c6:	bf38      	it	cc
 800b5c8:	469a      	movcc	sl, r3
 800b5ca:	230d      	movs	r3, #13
 800b5cc:	455a      	cmp	r2, fp
 800b5ce:	eb73 020a 	sbcs.w	r2, r3, sl
	{
		freq = SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT;
	}

	// Determine integer part of feedback equation
	a = freq / ref_freq;
 800b5d2:	4622      	mov	r2, r4
 800b5d4:	bf24      	itt	cs
 800b5d6:	469a      	movcs	sl, r3
 800b5d8:	f8df b0c4 	ldrcs.w	fp, [pc, #196]	@ 800b6a0 <pll_calc+0x140>
 800b5dc:	462b      	mov	r3, r5
 800b5de:	4658      	mov	r0, fp
 800b5e0:	4651      	mov	r1, sl
 800b5e2:	f7f5 fc31 	bl	8000e48 <__aeabi_uldivmod>

	if (a < SI5351_PLL_A_MIN)
 800b5e6:	280e      	cmp	r0, #14
	a = freq / ref_freq;
 800b5e8:	4607      	mov	r7, r0
 800b5ea:	4606      	mov	r6, r0
	if (a < SI5351_PLL_A_MIN)
 800b5ec:	d840      	bhi.n	800b670 <pll_calc+0x110>
	{
		freq = ref_freq * SI5351_PLL_A_MIN;
 800b5ee:	230f      	movs	r3, #15
	}
	if (a > SI5351_PLL_A_MAX)
	{
		freq = ref_freq * SI5351_PLL_A_MAX;
 800b5f0:	fba4 ba03 	umull	fp, sl, r4, r3
 800b5f4:	fb03 aa05 	mla	sl, r3, r5, sl
	// do_div(lltmp, ref_freq);

	//b = (((uint64_t)(freq % ref_freq)) * RFRAC_DENOM) / ref_freq;
	if(vcxo)
	{
		b = (((uint64_t)(freq % ref_freq)) * 1000000ULL) / ref_freq;
 800b5f8:	4651      	mov	r1, sl
 800b5fa:	f8df a0a0 	ldr.w	sl, [pc, #160]	@ 800b69c <pll_calc+0x13c>
 800b5fe:	4622      	mov	r2, r4
 800b600:	462b      	mov	r3, r5
 800b602:	4658      	mov	r0, fp
 800b604:	f7f5 fc20 	bl	8000e48 <__aeabi_uldivmod>
 800b608:	469c      	mov	ip, r3
 800b60a:	fba2 010a 	umull	r0, r1, r2, sl
 800b60e:	462b      	mov	r3, r5
 800b610:	4622      	mov	r2, r4
 800b612:	fb0a 110c 	mla	r1, sl, ip, r1
 800b616:	f7f5 fc17 	bl	8000e48 <__aeabi_uldivmod>
 800b61a:	4601      	mov	r1, r0
	if(vcxo)
 800b61c:	f1b8 0f00 	cmp.w	r8, #0
 800b620:	d12a      	bne.n	800b678 <pll_calc+0x118>
		c = 1000000ULL;
 800b622:	2800      	cmp	r0, #0
 800b624:	bf0c      	ite	eq
 800b626:	2201      	moveq	r2, #1
 800b628:	4652      	movne	r2, sl
		b = (((uint64_t)(freq % ref_freq)) * RFRAC_DENOM) / ref_freq;
		c = b ? RFRAC_DENOM : 1;
	}

	// Calculate parameters
  p1 = 128 * a + ((128 * b) / c) - 512;
 800b62a:	01cb      	lsls	r3, r1, #7
 800b62c:	ea4f 1cc7 	mov.w	ip, r7, lsl #7
 800b630:	fbb3 faf2 	udiv	sl, r3, r2
 800b634:	f5ac 7e00 	sub.w	lr, ip, #512	@ 0x200
  p2 = 128 * b - c * ((128 * b) / c);
 800b638:	fb02 331a 	mls	r3, r2, sl, r3
  p1 = 128 * a + ((128 * b) / c) - 512;
 800b63c:	44d6      	add	lr, sl
	freq = lltmp;
	freq += ref_freq * a;

	reg->p1 = p1;
	reg->p2 = p2;
	reg->p3 = p3;
 800b63e:	e9c9 3201 	strd	r3, r2, [r9, #4]
	reg->p1 = p1;
 800b642:	f8c9 e000 	str.w	lr, [r9]

	if(vcxo)
 800b646:	f1b8 0f00 	cmp.w	r8, #0
 800b64a:	d117      	bne.n	800b67c <pll_calc+0x11c>
	lltmp *= b;
 800b64c:	fba4 0c00 	umull	r0, ip, r4, r0
	do_div(lltmp, c);
 800b650:	4643      	mov	r3, r8
	freq += ref_freq * a;
 800b652:	fba6 4604 	umull	r4, r6, r6, r4
	do_div(lltmp, c);
 800b656:	fb05 c101 	mla	r1, r5, r1, ip
 800b65a:	f7f5 fbf5 	bl	8000e48 <__aeabi_uldivmod>
	freq += ref_freq * a;
 800b65e:	fb05 6607 	mla	r6, r5, r7, r6
 800b662:	1820      	adds	r0, r4, r0
 800b664:	eb46 0101 	adc.w	r1, r6, r1
	}
	else
	{
		return freq;
	}
}
 800b668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ref_freq = xtal_freq[(uint8_t)pllb_ref_osc] * SI5351_FREQ_MULT;
 800b66c:	7b5a      	ldrb	r2, [r3, #13]
 800b66e:	e783      	b.n	800b578 <pll_calc+0x18>
	if (a > SI5351_PLL_A_MAX)
 800b670:	285a      	cmp	r0, #90	@ 0x5a
 800b672:	d9c1      	bls.n	800b5f8 <pll_calc+0x98>
		freq = ref_freq * SI5351_PLL_A_MAX;
 800b674:	235a      	movs	r3, #90	@ 0x5a
 800b676:	e7bb      	b.n	800b5f0 <pll_calc+0x90>
		c = 1000000ULL;
 800b678:	4652      	mov	r2, sl
 800b67a:	e7d6      	b.n	800b62a <pll_calc+0xca>
		return (uint64_t)(128 * a * 1000000ULL + b);
 800b67c:	4b07      	ldr	r3, [pc, #28]	@ (800b69c <pll_calc+0x13c>)
 800b67e:	2100      	movs	r1, #0
 800b680:	fbec 0103 	umlal	r0, r1, ip, r3
 800b684:	e7f0      	b.n	800b668 <pll_calc+0x108>
 800b686:	bf00      	nop
 800b688:	3b9aca00 	.word	0x3b9aca00
 800b68c:	00000000 	.word	0x00000000
 800b690:	20043950 	.word	0x20043950
 800b694:	f46b0400 	.word	0xf46b0400
 800b698:	f84757ff 	.word	0xf84757ff
 800b69c:	000f4240 	.word	0x000f4240
 800b6a0:	f8475800 	.word	0xf8475800

0800b6a4 <set_pll>:
{
 800b6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(target_pll == SI5351_PLLA)
 800b6a8:	4615      	mov	r5, r2
{
 800b6aa:	b08c      	sub	sp, #48	@ 0x30
 800b6ac:	4680      	mov	r8, r0
 800b6ae:	460f      	mov	r7, r1
 800b6b0:	4c27      	ldr	r4, [pc, #156]	@ (800b750 <set_pll+0xac>)
 800b6b2:	aa04      	add	r2, sp, #16
	if(target_pll == SI5351_PLLA)
 800b6b4:	bbad      	cbnz	r5, 800b722 <set_pll+0x7e>
		pll_calc(SI5351_PLLA, pll_freq, &pll_reg, ref_correction[plla_ref_osc], 0);
 800b6b6:	9502      	str	r5, [sp, #8]
 800b6b8:	7b23      	ldrb	r3, [r4, #12]
 800b6ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	e9cd 2300 	strd	r2, r3, [sp]
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4628      	mov	r0, r5
		pll_calc(SI5351_PLLB, pll_freq, &pll_reg, ref_correction[pllb_ref_osc], 0);
 800b6ca:	f7ff ff49 	bl	800b560 <pll_calc>
  params[i++] = temp;
 800b6ce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  temp = (uint8_t)((pll_reg.p3 >> 12) & 0xF0);
 800b6d2:	9e06      	ldr	r6, [sp, #24]
  params[i++] = temp;
 800b6d4:	ba5b      	rev16	r3, r3
  temp = (uint8_t)((pll_reg.p3 >> 12) & 0xF0);
 800b6d6:	0b36      	lsrs	r6, r6, #12
  params[i++] = temp;
 800b6d8:	f8ad 301c 	strh.w	r3, [sp, #28]
  temp = (uint8_t)((pll_reg.p1 >> 16) & 0x03);
 800b6dc:	9b04      	ldr	r3, [sp, #16]
  temp = (uint8_t)((pll_reg.p3 >> 12) & 0xF0);
 800b6de:	f006 06f0 	and.w	r6, r6, #240	@ 0xf0
  temp = (uint8_t)((pll_reg.p1 >> 16) & 0x03);
 800b6e2:	f3c3 4201 	ubfx	r2, r3, #16, #2
  temp = (uint8_t)(pll_reg.p1  & 0xFF);
 800b6e6:	f88d 3020 	strb.w	r3, [sp, #32]
  params[i++] = temp;
 800b6ea:	f88d 201e 	strb.w	r2, [sp, #30]
  temp = (uint8_t)((pll_reg.p1 >> 8) & 0xFF);
 800b6ee:	0a1a      	lsrs	r2, r3, #8
 800b6f0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800b6f4:	f88d 201f 	strb.w	r2, [sp, #31]
  temp += (uint8_t)((pll_reg.p2 >> 16) & 0x0F);
 800b6f8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800b6fc:	ba5b      	rev16	r3, r3
 800b6fe:	f002 020f 	and.w	r2, r2, #15
  params[i++] = temp;
 800b702:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
  temp += (uint8_t)((pll_reg.p2 >> 16) & 0x0F);
 800b706:	4316      	orrs	r6, r2
  params[i++] = temp;
 800b708:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
  if(target_pll == SI5351_PLLA)
 800b70c:	b9ad      	cbnz	r5, 800b73a <set_pll+0x96>
    si5351_write_bulk(SI5351_PLLA_PARAMETERS, i, params);
 800b70e:	aa07      	add	r2, sp, #28
 800b710:	2108      	movs	r1, #8
 800b712:	201a      	movs	r0, #26
 800b714:	f7ff fe98 	bl	800b448 <si5351_write_bulk>
		plla_freq = pll_freq;
 800b718:	e9c4 8708 	strd	r8, r7, [r4, #32]
}
 800b71c:	b00c      	add	sp, #48	@ 0x30
 800b71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pll_calc(SI5351_PLLB, pll_freq, &pll_reg, ref_correction[pllb_ref_osc], 0);
 800b722:	2300      	movs	r3, #0
 800b724:	9302      	str	r3, [sp, #8]
 800b726:	7b63      	ldrb	r3, [r4, #13]
 800b728:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	e9cd 2300 	strd	r2, r3, [sp]
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	2001      	movs	r0, #1
 800b738:	e7c7      	b.n	800b6ca <set_pll+0x26>
  else if(target_pll == SI5351_PLLB)
 800b73a:	2d01      	cmp	r5, #1
 800b73c:	d1ee      	bne.n	800b71c <set_pll+0x78>
    si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, params);
 800b73e:	aa07      	add	r2, sp, #28
 800b740:	2108      	movs	r1, #8
 800b742:	2022      	movs	r0, #34	@ 0x22
 800b744:	f7ff fe80 	bl	800b448 <si5351_write_bulk>
		pllb_freq = pll_freq;
 800b748:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
}
 800b74c:	e7e6      	b.n	800b71c <set_pll+0x78>
 800b74e:	bf00      	nop
 800b750:	20043950 	.word	0x20043950
 800b754:	00000000 	.word	0x00000000

0800b758 <reset>:
{
 800b758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	si5351_write(16, 0x80);
 800b75c:	2180      	movs	r1, #128	@ 0x80
 800b75e:	2010      	movs	r0, #16
 800b760:	f7ff fe83 	bl	800b46a <si5351_write>
	si5351_write(17, 0x80);
 800b764:	2180      	movs	r1, #128	@ 0x80
 800b766:	2011      	movs	r0, #17
	pll_assignment[0] = SI5351_PLLA;
 800b768:	2400      	movs	r4, #0
	si5351_write(17, 0x80);
 800b76a:	f7ff fe7e 	bl	800b46a <si5351_write>
	si5351_write(18, 0x80);
 800b76e:	2180      	movs	r1, #128	@ 0x80
 800b770:	2012      	movs	r0, #18
	pll_assignment[0] = SI5351_PLLA;
 800b772:	4d4d      	ldr	r5, [pc, #308]	@ (800b8a8 <reset+0x150>)
	si5351_write(18, 0x80);
 800b774:	f7ff fe79 	bl	800b46a <si5351_write>
	si5351_write(19, 0x80);
 800b778:	2180      	movs	r1, #128	@ 0x80
 800b77a:	2013      	movs	r0, #19
	pll_assignment[6] = SI5351_PLLB;
 800b77c:	2601      	movs	r6, #1
	si5351_write(19, 0x80);
 800b77e:	f7ff fe74 	bl	800b46a <si5351_write>
	si5351_write(20, 0x80);
 800b782:	2180      	movs	r1, #128	@ 0x80
 800b784:	2014      	movs	r0, #20
		clk_freq[i] = 0;
 800b786:	f04f 0800 	mov.w	r8, #0
	si5351_write(20, 0x80);
 800b78a:	f7ff fe6e 	bl	800b46a <si5351_write>
	si5351_write(21, 0x80);
 800b78e:	2180      	movs	r1, #128	@ 0x80
 800b790:	2015      	movs	r0, #21
		clk_freq[i] = 0;
 800b792:	f04f 0900 	mov.w	r9, #0
	si5351_write(21, 0x80);
 800b796:	f7ff fe68 	bl	800b46a <si5351_write>
	si5351_write(22, 0x80);
 800b79a:	2180      	movs	r1, #128	@ 0x80
 800b79c:	2016      	movs	r0, #22
		output_enable((enum si5351_clock)i, 0);  //chh
 800b79e:	4627      	mov	r7, r4
	si5351_write(22, 0x80);
 800b7a0:	f7ff fe63 	bl	800b46a <si5351_write>
	si5351_write(23, 0x80);
 800b7a4:	2180      	movs	r1, #128	@ 0x80
 800b7a6:	2017      	movs	r0, #23
 800b7a8:	f7ff fe5f 	bl	800b46a <si5351_write>
	si5351_write(16, 0x0c);
 800b7ac:	210c      	movs	r1, #12
 800b7ae:	2010      	movs	r0, #16
 800b7b0:	f7ff fe5b 	bl	800b46a <si5351_write>
	si5351_write(17, 0x0c);
 800b7b4:	210c      	movs	r1, #12
 800b7b6:	2011      	movs	r0, #17
 800b7b8:	f7ff fe57 	bl	800b46a <si5351_write>
	si5351_write(18, 0x0c);
 800b7bc:	210c      	movs	r1, #12
 800b7be:	2012      	movs	r0, #18
 800b7c0:	f7ff fe53 	bl	800b46a <si5351_write>
	si5351_write(19, 0x0c);
 800b7c4:	210c      	movs	r1, #12
 800b7c6:	2013      	movs	r0, #19
 800b7c8:	f7ff fe4f 	bl	800b46a <si5351_write>
	si5351_write(20, 0x0c);
 800b7cc:	210c      	movs	r1, #12
 800b7ce:	2014      	movs	r0, #20
 800b7d0:	f7ff fe4b 	bl	800b46a <si5351_write>
	si5351_write(21, 0x0c);
 800b7d4:	210c      	movs	r1, #12
 800b7d6:	2015      	movs	r0, #21
 800b7d8:	f7ff fe47 	bl	800b46a <si5351_write>
	si5351_write(22, 0x0c);
 800b7dc:	210c      	movs	r1, #12
 800b7de:	2016      	movs	r0, #22
 800b7e0:	f7ff fe43 	bl	800b46a <si5351_write>
	si5351_write(23, 0x0c);
 800b7e4:	210c      	movs	r1, #12
 800b7e6:	2017      	movs	r0, #23
 800b7e8:	f7ff fe3f 	bl	800b46a <si5351_write>
	set_pll(SI5351_PLL_FIXED, SI5351_PLLA);
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	a12c      	add	r1, pc, #176	@ (adr r1, 800b8a0 <reset+0x148>)
 800b7f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7f4:	f7ff ff56 	bl	800b6a4 <set_pll>
	set_pll(SI5351_PLL_FIXED, SI5351_PLLB);
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	a129      	add	r1, pc, #164	@ (adr r1, 800b8a0 <reset+0x148>)
 800b7fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b800:	f7ff ff50 	bl	800b6a4 <set_pll>
	set_ms_source(SI5351_CLK0, SI5351_PLLA);
 800b804:	4621      	mov	r1, r4
 800b806:	4620      	mov	r0, r4
	pll_assignment[6] = SI5351_PLLB;
 800b808:	77ae      	strb	r6, [r5, #30]
	pll_assignment[7] = SI5351_PLLB;
 800b80a:	77ee      	strb	r6, [r5, #31]
	pll_assignment[0] = SI5351_PLLA;
 800b80c:	762c      	strb	r4, [r5, #24]
	pll_assignment[1] = SI5351_PLLA;
 800b80e:	766c      	strb	r4, [r5, #25]
	pll_assignment[2] = SI5351_PLLA;
 800b810:	76ac      	strb	r4, [r5, #26]
	pll_assignment[3] = SI5351_PLLA;
 800b812:	76ec      	strb	r4, [r5, #27]
	pll_assignment[4] = SI5351_PLLA;
 800b814:	772c      	strb	r4, [r5, #28]
	pll_assignment[5] = SI5351_PLLA;
 800b816:	776c      	strb	r4, [r5, #29]
	set_ms_source(SI5351_CLK0, SI5351_PLLA);
 800b818:	f7ff fe70 	bl	800b4fc <set_ms_source>
	set_ms_source(SI5351_CLK1, SI5351_PLLA);
 800b81c:	4630      	mov	r0, r6
 800b81e:	4621      	mov	r1, r4
 800b820:	f7ff fe6c 	bl	800b4fc <set_ms_source>
	set_ms_source(SI5351_CLK2, SI5351_PLLA);
 800b824:	4621      	mov	r1, r4
 800b826:	2002      	movs	r0, #2
 800b828:	f7ff fe68 	bl	800b4fc <set_ms_source>
	set_ms_source(SI5351_CLK3, SI5351_PLLA);
 800b82c:	4621      	mov	r1, r4
 800b82e:	2003      	movs	r0, #3
 800b830:	f7ff fe64 	bl	800b4fc <set_ms_source>
	set_ms_source(SI5351_CLK4, SI5351_PLLA);
 800b834:	4621      	mov	r1, r4
 800b836:	2004      	movs	r0, #4
 800b838:	f7ff fe60 	bl	800b4fc <set_ms_source>
	set_ms_source(SI5351_CLK5, SI5351_PLLA);
 800b83c:	4621      	mov	r1, r4
 800b83e:	2005      	movs	r0, #5
 800b840:	f7ff fe5c 	bl	800b4fc <set_ms_source>
	set_ms_source(SI5351_CLK6, SI5351_PLLB);
 800b844:	4631      	mov	r1, r6
 800b846:	2006      	movs	r0, #6
 800b848:	f7ff fe58 	bl	800b4fc <set_ms_source>
	set_ms_source(SI5351_CLK7, SI5351_PLLB);
 800b84c:	4631      	mov	r1, r6
 800b84e:	2007      	movs	r0, #7
 800b850:	f105 0630 	add.w	r6, r5, #48	@ 0x30
 800b854:	f7ff fe52 	bl	800b4fc <set_ms_source>
	si5351_write(SI5351_VXCO_PARAMETERS_LOW, 0);
 800b858:	4621      	mov	r1, r4
 800b85a:	20a2      	movs	r0, #162	@ 0xa2
 800b85c:	3570      	adds	r5, #112	@ 0x70
 800b85e:	f7ff fe04 	bl	800b46a <si5351_write>
	si5351_write(SI5351_VXCO_PARAMETERS_MID, 0);
 800b862:	4621      	mov	r1, r4
 800b864:	20a3      	movs	r0, #163	@ 0xa3
 800b866:	f7ff fe00 	bl	800b46a <si5351_write>
	si5351_write(SI5351_VXCO_PARAMETERS_HIGH, 0);
 800b86a:	4621      	mov	r1, r4
 800b86c:	20a4      	movs	r0, #164	@ 0xa4
 800b86e:	f7ff fdfc 	bl	800b46a <si5351_write>
	pll_reset(SI5351_PLLA);
 800b872:	4620      	mov	r0, r4
 800b874:	f7ff fe02 	bl	800b47c <pll_reset>
	    si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
 800b878:	2180      	movs	r1, #128	@ 0x80
 800b87a:	20b1      	movs	r0, #177	@ 0xb1
 800b87c:	f7ff fdf5 	bl	800b46a <si5351_write>
		output_enable((enum si5351_clock)i, 0);  //chh
 800b880:	b2e0      	uxtb	r0, r4
	for(i = 0; i < 8; i++)
 800b882:	3401      	adds	r4, #1
		output_enable((enum si5351_clock)i, 0);  //chh
 800b884:	2100      	movs	r1, #0
		clk_freq[i] = 0;
 800b886:	e8e6 8902 	strd	r8, r9, [r6], #8
		output_enable((enum si5351_clock)i, 0);  //chh
 800b88a:	f7ff fe05 	bl	800b498 <output_enable>
	for(i = 0; i < 8; i++)
 800b88e:	2c08      	cmp	r4, #8
		clk_first_set[i] = false;
 800b890:	f805 7b01 	strb.w	r7, [r5], #1
	for(i = 0; i < 8; i++)
 800b894:	d1f4      	bne.n	800b880 <reset+0x128>
}
 800b896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b89a:	bf00      	nop
 800b89c:	f3af 8000 	nop.w
 800b8a0:	a05f2000 	.word	0xa05f2000
 800b8a4:	00000012 	.word	0x00000012
 800b8a8:	20043950 	.word	0x20043950

0800b8ac <set_correction>:
{
 800b8ac:	b510      	push	{r4, lr}
	ref_correction[(uint8_t)ref_osc] = corr;
 800b8ae:	4c08      	ldr	r4, [pc, #32]	@ (800b8d0 <set_correction+0x24>)
	set_pll(plla_freq, SI5351_PLLA);
 800b8b0:	2200      	movs	r2, #0
	ref_correction[(uint8_t)ref_osc] = corr;
 800b8b2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b8b6:	6108      	str	r0, [r1, #16]
	set_pll(plla_freq, SI5351_PLLA);
 800b8b8:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 800b8bc:	f7ff fef2 	bl	800b6a4 <set_pll>
	set_pll(pllb_freq, SI5351_PLLB);
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
}
 800b8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	set_pll(pllb_freq, SI5351_PLLB);
 800b8ca:	f7ff beeb 	b.w	800b6a4 <set_pll>
 800b8ce:	bf00      	nop
 800b8d0:	20043950 	.word	0x20043950

0800b8d4 <init>:
	si5351_write(SI5351_CRYSTAL_LOAD, (xtal_load_c & SI5351_CRYSTAL_LOAD_MASK) | 0b00010010);
 800b8d4:	f000 01c0 	and.w	r1, r0, #192	@ 0xc0
 800b8d8:	20b7      	movs	r0, #183	@ 0xb7
{
 800b8da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	xtal_freq[0] = SI5351_XTAL_FREQ;
 800b8dc:	4c0a      	ldr	r4, [pc, #40]	@ (800b908 <init+0x34>)
	plla_ref_osc = SI5351_PLL_INPUT_XO;
 800b8de:	2500      	movs	r5, #0
{
 800b8e0:	4616      	mov	r6, r2
	xtal_freq[0] = SI5351_XTAL_FREQ;
 800b8e2:	4f0a      	ldr	r7, [pc, #40]	@ (800b90c <init+0x38>)
	si5351_write(SI5351_CRYSTAL_LOAD, (xtal_load_c & SI5351_CRYSTAL_LOAD_MASK) | 0b00010010);
 800b8e4:	f041 0112 	orr.w	r1, r1, #18
	plla_ref_osc = SI5351_PLL_INPUT_XO;
 800b8e8:	7325      	strb	r5, [r4, #12]
	xtal_freq[0] = SI5351_XTAL_FREQ;
 800b8ea:	6067      	str	r7, [r4, #4]
	pllb_ref_osc = SI5351_PLL_INPUT_XO;
 800b8ec:	7365      	strb	r5, [r4, #13]
	clkin_div = SI5351_CLKIN_DIV_1;
 800b8ee:	73a5      	strb	r5, [r4, #14]
	si5351_write(SI5351_CRYSTAL_LOAD, (xtal_load_c & SI5351_CRYSTAL_LOAD_MASK) | 0b00010010);
 800b8f0:	f7ff fdbb 	bl	800b46a <si5351_write>
	set_correction(corr, SI5351_PLL_INPUT_XO);
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4630      	mov	r0, r6
		xtal_freq[(uint8_t)ref_osc] = ref_freq;
 800b8f8:	6067      	str	r7, [r4, #4]
	set_correction(corr, SI5351_PLL_INPUT_XO);
 800b8fa:	f7ff ffd7 	bl	800b8ac <set_correction>
}
 800b8fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	reset();
 800b902:	f7ff bf29 	b.w	800b758 <reset>
 800b906:	bf00      	nop
 800b908:	20043950 	.word	0x20043950
 800b90c:	018cba80 	.word	0x018cba80

0800b910 <multisynth_calc>:

uint64_t multisynth_calc(uint64_t freq, uint64_t pll_freq,  Si5351RegSet *reg)
{
 800b910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	4690      	mov	r8, r2
	uint32_t a, b, c, p1, p2, p3;
	uint8_t divby4 = 0;
	uint8_t ret_val = 0;

	// Multisynth bounds checking
	if (freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 800b916:	4a4c      	ldr	r2, [pc, #304]	@ (800ba48 <multisynth_calc+0x138>)
{
 800b918:	460c      	mov	r4, r1
 800b91a:	461f      	mov	r7, r3
	if (freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 800b91c:	4282      	cmp	r2, r0
 800b91e:	f04f 0305 	mov.w	r3, #5
{
 800b922:	4605      	mov	r5, r0
 800b924:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
	if (freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 800b928:	eb73 0104 	sbcs.w	r1, r3, r4
 800b92c:	d37d      	bcc.n	800ba2a <multisynth_calc+0x11a>
	{
		freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
	}
	if (freq < SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT)
 800b92e:	4a47      	ldr	r2, [pc, #284]	@ (800ba4c <multisynth_calc+0x13c>)
 800b930:	2300      	movs	r3, #0
 800b932:	4282      	cmp	r2, r0
 800b934:	eb73 0204 	sbcs.w	r2, r3, r4
 800b938:	d24a      	bcs.n	800b9d0 <multisynth_calc+0xc0>
	{
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
	}

	if (freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 800b93a:	4b45      	ldr	r3, [pc, #276]	@ (800ba50 <multisynth_calc+0x140>)
 800b93c:	4298      	cmp	r0, r3
 800b93e:	f174 0303 	sbcs.w	r3, r4, #3
 800b942:	bf2c      	ite	cs
 800b944:	f04f 0b01 	movcs.w	fp, #1
 800b948:	f04f 0b00 	movcc.w	fp, #0
	{
		divby4 = 1;
	}

	if(pll_freq == 0)
 800b94c:	ea58 0307 	orrs.w	r3, r8, r7
 800b950:	d144      	bne.n	800b9dc <multisynth_calc+0xcc>
	{
		// Find largest integer divider for max
		// VCO frequency and given target frequency
		if(divby4 == 0)
 800b952:	4b40      	ldr	r3, [pc, #256]	@ (800ba54 <multisynth_calc+0x144>)
 800b954:	4283      	cmp	r3, r0
 800b956:	f04f 0303 	mov.w	r3, #3
 800b95a:	41a3      	sbcs	r3, r4
 800b95c:	d201      	bcs.n	800b962 <multisynth_calc+0x52>
			}
			a = (uint32_t)lltmp;
		}
		else
		{
			a = 4;
 800b95e:	2604      	movs	r6, #4
 800b960:	e00b      	b.n	800b97a <multisynth_calc+0x6a>
			do_div(lltmp, freq);
 800b962:	462a      	mov	r2, r5
 800b964:	4623      	mov	r3, r4
 800b966:	a136      	add	r1, pc, #216	@ (adr r1, 800ba40 <multisynth_calc+0x130>)
 800b968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b96c:	f7f5 fa6c 	bl	8000e48 <__aeabi_uldivmod>
 800b970:	4606      	mov	r6, r0
			else if(lltmp == 7)
 800b972:	3807      	subs	r0, #7
 800b974:	4308      	orrs	r0, r1
 800b976:	d100      	bne.n	800b97a <multisynth_calc+0x6a>
				lltmp = 6;
 800b978:	2606      	movs	r6, #6
		}

		b = 0;
		c = 1;
		pll_freq = a * freq;
 800b97a:	fba6 8705 	umull	r8, r7, r6, r5
	uint8_t ret_val = 0;
 800b97e:	2300      	movs	r3, #0
		c = 1;
 800b980:	2201      	movs	r2, #1
		pll_freq = a * freq;
 800b982:	fb06 7704 	mla	r7, r6, r4, r7
		b = 0;
 800b986:	4618      	mov	r0, r3
		b = (pll_freq % freq * RFRAC_DENOM) / freq;
		c = b ? RFRAC_DENOM : 1;
	}

	// Calculate parameters
	if (divby4 == 1)
 800b988:	f1bb 0f00 	cmp.w	fp, #0
 800b98c:	d11c      	bne.n	800b9c8 <multisynth_calc+0xb8>
		p2 = 0;
		p1 = 0;
	}
	else
	{
    p1 = 128 * a + ((128 * b) / c) - 512;
 800b98e:	01c0      	lsls	r0, r0, #7
 800b990:	01f6      	lsls	r6, r6, #7
 800b992:	fbb0 f1f2 	udiv	r1, r0, r2
 800b996:	f5a6 7600 	sub.w	r6, r6, #512	@ 0x200
    p2 = 128 * b - c * ((128 * b) / c);
 800b99a:	fb02 0011 	mls	r0, r2, r1, r0
    p1 = 128 * a + ((128 * b) / c) - 512;
 800b99e:	440e      	add	r6, r1
	reg->p2 = p2;
	reg->p3 = p3;

	if(ret_val == 0)
	{
		return pll_freq;
 800b9a0:	2b00      	cmp	r3, #0
	reg->p3 = p3;
 800b9a2:	f8c9 2008 	str.w	r2, [r9, #8]
		return pll_freq;
 800b9a6:	bf04      	itt	eq
 800b9a8:	4645      	moveq	r5, r8
 800b9aa:	463c      	moveq	r4, r7
	reg->p2 = p2;
 800b9ac:	e9c9 6000 	strd	r6, r0, [r9]
	}
	else
	{
		return freq;
	}
}
 800b9b0:	4621      	mov	r1, r4
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (a > SI5351_MULTISYNTH_A_MAX)
 800b9b8:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 800b9bc:	d91f      	bls.n	800b9fe <multisynth_calc+0xee>
			freq = pll_freq / SI5351_MULTISYNTH_A_MAX;
 800b9be:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 800b9c2:	e015      	b.n	800b9f0 <multisynth_calc+0xe0>
		c = b ? RFRAC_DENOM : 1;
 800b9c4:	4652      	mov	r2, sl
 800b9c6:	e7df      	b.n	800b988 <multisynth_calc+0x78>
		p2 = 0;
 800b9c8:	2000      	movs	r0, #0
		p3 = 1;
 800b9ca:	465a      	mov	r2, fp
		p1 = 0;
 800b9cc:	4606      	mov	r6, r0
 800b9ce:	e7e7      	b.n	800b9a0 <multisynth_calc+0x90>
	if(pll_freq == 0)
 800b9d0:	ea58 0207 	orrs.w	r2, r8, r7
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
 800b9d4:	4d20      	ldr	r5, [pc, #128]	@ (800ba58 <multisynth_calc+0x148>)
 800b9d6:	461c      	mov	r4, r3
	uint8_t divby4 = 0;
 800b9d8:	469b      	mov	fp, r3
	if(pll_freq == 0)
 800b9da:	d0c2      	beq.n	800b962 <multisynth_calc+0x52>
		a = pll_freq / freq;
 800b9dc:	462a      	mov	r2, r5
 800b9de:	4623      	mov	r3, r4
 800b9e0:	4640      	mov	r0, r8
 800b9e2:	4639      	mov	r1, r7
 800b9e4:	f7f5 fa30 	bl	8000e48 <__aeabi_uldivmod>
		if (a < SI5351_MULTISYNTH_A_MIN)
 800b9e8:	2805      	cmp	r0, #5
		a = pll_freq / freq;
 800b9ea:	4606      	mov	r6, r0
		if (a < SI5351_MULTISYNTH_A_MIN)
 800b9ec:	d8e4      	bhi.n	800b9b8 <multisynth_calc+0xa8>
			freq = pll_freq / SI5351_MULTISYNTH_A_MIN;
 800b9ee:	2206      	movs	r2, #6
			freq = pll_freq / SI5351_MULTISYNTH_A_MAX;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	4639      	mov	r1, r7
 800b9f6:	f7f5 fa27 	bl	8000e48 <__aeabi_uldivmod>
 800b9fa:	4605      	mov	r5, r0
 800b9fc:	460c      	mov	r4, r1
		b = (pll_freq % freq * RFRAC_DENOM) / freq;
 800b9fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ba5c <multisynth_calc+0x14c>
 800ba02:	462a      	mov	r2, r5
 800ba04:	4623      	mov	r3, r4
 800ba06:	4640      	mov	r0, r8
 800ba08:	4639      	mov	r1, r7
 800ba0a:	f7f5 fa1d 	bl	8000e48 <__aeabi_uldivmod>
 800ba0e:	fba2 0c0a 	umull	r0, ip, r2, sl
 800ba12:	4619      	mov	r1, r3
 800ba14:	462a      	mov	r2, r5
 800ba16:	4623      	mov	r3, r4
 800ba18:	fb0a c101 	mla	r1, sl, r1, ip
 800ba1c:	f7f5 fa14 	bl	8000e48 <__aeabi_uldivmod>
		ret_val = 1;
 800ba20:	2301      	movs	r3, #1
		c = b ? RFRAC_DENOM : 1;
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d1ce      	bne.n	800b9c4 <multisynth_calc+0xb4>
 800ba26:	461a      	mov	r2, r3
 800ba28:	e7ae      	b.n	800b988 <multisynth_calc+0x78>
	if(pll_freq == 0)
 800ba2a:	ea58 0107 	orrs.w	r1, r8, r7
		freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 800ba2e:	4615      	mov	r5, r2
 800ba30:	461c      	mov	r4, r3
		divby4 = 1;
 800ba32:	f04f 0b01 	mov.w	fp, #1
	if(pll_freq == 0)
 800ba36:	d092      	beq.n	800b95e <multisynth_calc+0x4e>
 800ba38:	e7d0      	b.n	800b9dc <multisynth_calc+0xcc>
 800ba3a:	bf00      	nop
 800ba3c:	f3af 8000 	nop.w
 800ba40:	f46b0400 	.word	0xf46b0400
 800ba44:	00000014 	.word	0x00000014
 800ba48:	3d1ac100 	.word	0x3d1ac100
 800ba4c:	02faf07f 	.word	0x02faf07f
 800ba50:	7e11d600 	.word	0x7e11d600
 800ba54:	7e11d5ff 	.word	0x7e11d5ff
 800ba58:	02faf080 	.word	0x02faf080
 800ba5c:	000f4240 	.word	0x000f4240

0800ba60 <multisynth67_calc>:

uint64_t multisynth67_calc(uint64_t freq, uint64_t pll_freq,  Si5351RegSet *reg)
{
 800ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba62:	4684      	mov	ip, r0
 800ba64:	460c      	mov	r4, r1
 800ba66:	4619      	mov	r1, r3
	// Multisynth bounds checking
	if(freq > SI5351_MULTISYNTH67_MAX_FREQ * SI5351_FREQ_MULT)
	{
		freq = SI5351_MULTISYNTH67_MAX_FREQ * SI5351_FREQ_MULT;
	}
	if(freq < SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT)
 800ba68:	4b2f      	ldr	r3, [pc, #188]	@ (800bb28 <multisynth67_calc+0xc8>)
 800ba6a:	4626      	mov	r6, r4
 800ba6c:	4665      	mov	r5, ip
 800ba6e:	459c      	cmp	ip, r3
{
 800ba70:	4610      	mov	r0, r2
 800ba72:	9f06      	ldr	r7, [sp, #24]
	if(freq < SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT)
 800ba74:	f174 0400 	sbcs.w	r4, r4, #0
 800ba78:	4c2c      	ldr	r4, [pc, #176]	@ (800bb2c <multisynth67_calc+0xcc>)
 800ba7a:	bf3c      	itt	cc
 800ba7c:	461d      	movcc	r5, r3
 800ba7e:	2600      	movcc	r6, #0
 800ba80:	2303      	movs	r3, #3
 800ba82:	42ac      	cmp	r4, r5
 800ba84:	eb73 0206 	sbcs.w	r2, r3, r6
 800ba88:	bf3c      	itt	cc
 800ba8a:	4625      	movcc	r5, r4
 800ba8c:	461e      	movcc	r6, r3
	{
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
	}

	if(pll_freq == 0)
 800ba8e:	ea50 0301 	orrs.w	r3, r0, r1
	{
		// Find largest integer divider for max
		// VCO frequency and given target frequency
		lltmp = (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT) - 100000000UL; // margin needed?
		do_div(lltmp, freq);
 800ba92:	462a      	mov	r2, r5
 800ba94:	4633      	mov	r3, r6
	if(pll_freq == 0)
 800ba96:	d12c      	bne.n	800baf2 <multisynth67_calc+0x92>
		do_div(lltmp, freq);
 800ba98:	a121      	add	r1, pc, #132	@ (adr r1, 800bb20 <multisynth67_calc+0xc0>)
 800ba9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba9e:	f7f5 f9d3 	bl	8000e48 <__aeabi_uldivmod>
		a = (uint32_t)lltmp;

		// Divisor has to be even
		if(a % 2 != 0)
 800baa2:	07c3      	lsls	r3, r0, #31
		do_div(lltmp, freq);
 800baa4:	4604      	mov	r4, r0
		if(a % 2 != 0)
 800baa6:	d518      	bpl.n	800bada <multisynth67_calc+0x7a>
		{
			a++;
 800baa8:	3401      	adds	r4, #1
		// Divisor bounds check
		if(a < SI5351_MULTISYNTH_A_MIN)
		{
			a = SI5351_MULTISYNTH_A_MIN;
		}
		if(a > SI5351_MULTISYNTH67_A_MAX)
 800baaa:	2cfe      	cmp	r4, #254	@ 0xfe
 800baac:	bf28      	it	cs
 800baae:	24fe      	movcs	r4, #254	@ 0xfe
		{
			a = SI5351_MULTISYNTH67_A_MAX;
		}

		pll_freq = a * freq;
 800bab0:	fba4 0105 	umull	r0, r1, r4, r5

		// PLL bounds checking
		if(pll_freq > (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT))
 800bab4:	4b1e      	ldr	r3, [pc, #120]	@ (800bb30 <multisynth67_calc+0xd0>)
		pll_freq = a * freq;
 800bab6:	fb04 1106 	mla	r1, r4, r6, r1
		if(pll_freq > (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT))
 800baba:	4283      	cmp	r3, r0
 800babc:	f04f 0314 	mov.w	r3, #20
 800bac0:	418b      	sbcs	r3, r1
 800bac2:	d20e      	bcs.n	800bae2 <multisynth67_calc+0x82>
		{
			a -= 2;
 800bac4:	3c02      	subs	r4, #2
			pll_freq = a * freq;
		}
		else if(pll_freq < (SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT))
		{
			a += 2;
			pll_freq = a * freq;
 800bac6:	fba4 0105 	umull	r0, r1, r4, r5
 800baca:	fb04 1106 	mla	r1, r4, r6, r1
		}

		reg->p1 = (uint8_t)a;
 800bace:	b2e4      	uxtb	r4, r4
		reg->p2 = 0;
 800bad0:	2300      	movs	r3, #0
		reg->p1 = (uint8_t)a;
 800bad2:	603c      	str	r4, [r7, #0]
		reg->p3 = 0;
 800bad4:	e9c7 3301 	strd	r3, r3, [r7, #4]
				reg->p3 = 0;
				return 1;
			}
		}
	}
}
 800bad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(a < SI5351_MULTISYNTH_A_MIN)
 800bada:	2805      	cmp	r0, #5
 800badc:	d1e5      	bne.n	800baaa <multisynth67_calc+0x4a>
			a = SI5351_MULTISYNTH_A_MIN;
 800bade:	2406      	movs	r4, #6
 800bae0:	e7e6      	b.n	800bab0 <multisynth67_calc+0x50>
		else if(pll_freq < (SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT))
 800bae2:	4b14      	ldr	r3, [pc, #80]	@ (800bb34 <multisynth67_calc+0xd4>)
 800bae4:	4283      	cmp	r3, r0
 800bae6:	f04f 030d 	mov.w	r3, #13
 800baea:	418b      	sbcs	r3, r1
 800baec:	d3ef      	bcc.n	800bace <multisynth67_calc+0x6e>
			a += 2;
 800baee:	3402      	adds	r4, #2
 800baf0:	e7e9      	b.n	800bac6 <multisynth67_calc+0x66>
		if(pll_freq % freq)
 800baf2:	f7f5 f9a9 	bl	8000e48 <__aeabi_uldivmod>
 800baf6:	4619      	mov	r1, r3
 800baf8:	4313      	orrs	r3, r2
 800bafa:	4604      	mov	r4, r0
 800bafc:	4610      	mov	r0, r2
 800bafe:	d109      	bne.n	800bb14 <multisynth67_calc+0xb4>
			if(a < SI5351_MULTISYNTH_A_MIN || a > SI5351_MULTISYNTH67_A_MAX)
 800bb00:	1fa3      	subs	r3, r4, #6
 800bb02:	2bf8      	cmp	r3, #248	@ 0xf8
 800bb04:	d8e8      	bhi.n	800bad8 <multisynth67_calc+0x78>
				reg->p1 = (uint8_t)a;
 800bb06:	b2e4      	uxtb	r4, r4
				reg->p2 = 0;
 800bb08:	2100      	movs	r1, #0
				return 1;
 800bb0a:	2001      	movs	r0, #1
				reg->p1 = (uint8_t)a;
 800bb0c:	603c      	str	r4, [r7, #0]
				reg->p3 = 0;
 800bb0e:	e9c7 1101 	strd	r1, r1, [r7, #4]
				return 1;
 800bb12:	e7e1      	b.n	800bad8 <multisynth67_calc+0x78>
			return 0;
 800bb14:	2000      	movs	r0, #0
 800bb16:	4601      	mov	r1, r0
 800bb18:	e7de      	b.n	800bad8 <multisynth67_calc+0x78>
 800bb1a:	bf00      	nop
 800bb1c:	f3af 8000 	nop.w
 800bb20:	ee752300 	.word	0xee752300
 800bb24:	00000014 	.word	0x00000014
 800bb28:	02faf080 	.word	0x02faf080
 800bb2c:	7e11d600 	.word	0x7e11d600
 800bb30:	f46b0400 	.word	0xf46b0400
 800bb34:	f84757ff 	.word	0xf84757ff

0800bb38 <ms_div>:
void ms_div(enum si5351_clock clk, uint8_t r_div, uint8_t div_by_4)
{
	uint8_t reg_val = 0;
    uint8_t reg_addr = 0;

	switch(clk)
 800bb38:	2807      	cmp	r0, #7
{
 800bb3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3c:	bf94      	ite	ls
 800bb3e:	4b14      	ldrls	r3, [pc, #80]	@ (800bb90 <ms_div+0x58>)
 800bb40:	2600      	movhi	r6, #0
 800bb42:	4604      	mov	r4, r0
 800bb44:	460d      	mov	r5, r1
 800bb46:	bf98      	it	ls
 800bb48:	5c1e      	ldrbls	r6, [r3, r0]
 800bb4a:	4617      	mov	r7, r2
		case SI5351_CLK7:
			reg_addr = SI5351_CLK6_7_OUTPUT_DIVIDER;
			break;
	}

	reg_val = si5351_read(reg_addr);
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f7ff fc9f 	bl	800b490 <si5351_read>

	if(clk <= (uint8_t)SI5351_CLK5)
 800bb52:	2c05      	cmp	r4, #5
	reg_val = si5351_read(reg_addr);
 800bb54:	4601      	mov	r1, r0
	if(clk <= (uint8_t)SI5351_CLK5)
 800bb56:	d808      	bhi.n	800bb6a <ms_div+0x32>
	{
		// Clear the relevant bits
		reg_val &= ~(0x7c);
 800bb58:	f000 0083 	and.w	r0, r0, #131	@ 0x83

		if(div_by_4 == 0)
 800bb5c:	b10f      	cbz	r7, 800bb62 <ms_div+0x2a>
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}
		else
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
 800bb5e:	f040 000c 	orr.w	r0, r0, #12
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 800bb62:	ea40 1105 	orr.w	r1, r0, r5, lsl #4
	else if(clk == SI5351_CLK7)
	{
		// Clear the relevant bits
		reg_val &= ~(0x70);

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 800bb66:	b2c9      	uxtb	r1, r1
 800bb68:	e005      	b.n	800bb76 <ms_div+0x3e>
	else if(clk == SI5351_CLK6)
 800bb6a:	2c06      	cmp	r4, #6
 800bb6c:	d108      	bne.n	800bb80 <ms_div+0x48>
		reg_val &= ~(0x07);
 800bb6e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
		reg_val |= r_div;
 800bb72:	ea45 0100 	orr.w	r1, r5, r0
	}

	si5351_write(reg_addr, reg_val);
 800bb76:	4630      	mov	r0, r6
}
 800bb78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	si5351_write(reg_addr, reg_val);
 800bb7c:	f7ff bc75 	b.w	800b46a <si5351_write>
	else if(clk == SI5351_CLK7)
 800bb80:	2c07      	cmp	r4, #7
 800bb82:	d1f8      	bne.n	800bb76 <ms_div+0x3e>
		reg_val &= ~(0x70);
 800bb84:	f000 018f 	and.w	r1, r0, #143	@ 0x8f
		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 800bb88:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 800bb8c:	e7eb      	b.n	800bb66 <ms_div+0x2e>
 800bb8e:	bf00      	nop
 800bb90:	080517a0 	.word	0x080517a0

0800bb94 <set_ms>:
{
 800bb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb98:	4680      	mov	r8, r0
 800bb9a:	b08b      	sub	sp, #44	@ 0x2c
 800bb9c:	4689      	mov	r9, r1
 800bb9e:	a801      	add	r0, sp, #4
	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 800bba0:	f1b8 0f05 	cmp.w	r8, #5
{
 800bba4:	f89d 7050 	ldrb.w	r7, [sp, #80]	@ 0x50
 800bba8:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 800bbac:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800bbb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		temp = (uint8_t)(ms_reg.p1  & 0xFF);
 800bbb4:	b2cb      	uxtb	r3, r1
	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 800bbb6:	d836      	bhi.n	800bc26 <set_ms+0x92>
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 800bbb8:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 800bbbc:	4693      	mov	fp, r2
		params[i++] = temp;
 800bbbe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 800bbc2:	302c      	adds	r0, #44	@ 0x2c
 800bbc4:	9e03      	ldr	r6, [sp, #12]
		params[i++] = temp;
 800bbc6:	ba52      	rev16	r2, r2
 800bbc8:	f8bd a008 	ldrh.w	sl, [sp, #8]
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 800bbcc:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 800bbd0:	9300      	str	r3, [sp, #0]
		params[i++] = temp;
 800bbd2:	f8ad 2014 	strh.w	r2, [sp, #20]
		temp = (uint8_t)((ms_reg.p3 >> 12) & 0xF0);
 800bbd6:	0b36      	lsrs	r6, r6, #12
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 800bbd8:	f7ff fc5a 	bl	800b490 <si5351_read>
		params[i++] = temp;
 800bbdc:	9b00      	ldr	r3, [sp, #0]
		temp = reg_val | ((uint8_t)((ms_reg.p1 >> 16) & 0x03));
 800bbde:	f3c9 4201 	ubfx	r2, r9, #16, #2
		reg_val &= ~(0x03);
 800bbe2:	f020 0003 	bic.w	r0, r0, #3
		temp = (uint8_t)((ms_reg.p3 >> 12) & 0xF0);
 800bbe6:	f006 06f0 	and.w	r6, r6, #240	@ 0xf0
		params[i++] = temp;
 800bbea:	f88d 3018 	strb.w	r3, [sp, #24]
		temp += (uint8_t)((ms_reg.p2 >> 16) & 0x0F);
 800bbee:	f3cb 4303 	ubfx	r3, fp, #16, #4
 800bbf2:	fa9a fa9a 	rev16.w	sl, sl
		temp = reg_val | ((uint8_t)((ms_reg.p1 >> 16) & 0x03));
 800bbf6:	4302      	orrs	r2, r0
		temp = (uint8_t)((ms_reg.p1 >> 8) & 0xFF);
 800bbf8:	ea4f 2919 	mov.w	r9, r9, lsr #8
		temp += (uint8_t)((ms_reg.p2 >> 16) & 0x0F);
 800bbfc:	431e      	orrs	r6, r3
		params[i++] = temp;
 800bbfe:	2108      	movs	r1, #8
		temp = (uint8_t)(ms_reg.p2  & 0xFF);
 800bc00:	fa5f f38b 	uxtb.w	r3, fp
		params[i++] = temp;
 800bc04:	f88d 2016 	strb.w	r2, [sp, #22]
		temp = (uint8_t)((ms_reg.p1 >> 8) & 0xFF);
 800bc08:	f88d 9017 	strb.w	r9, [sp, #23]
		params[i++] = temp;
 800bc0c:	f88d 6019 	strb.w	r6, [sp, #25]
		params[i++] = temp;
 800bc10:	f8ad a01a 	strh.w	sl, [sp, #26]
	switch(clk)
 800bc14:	f1b8 0f07 	cmp.w	r8, #7
 800bc18:	d863      	bhi.n	800bce2 <set_ms+0x14e>
 800bc1a:	e8df f008 	tbb	[pc, r8]
 800bc1e:	1606      	.short	0x1606
 800bc20:	463a2e22 	.word	0x463a2e22
 800bc24:	5a52      	.short	0x5a52
	uint8_t i = 0;
 800bc26:	2100      	movs	r1, #0
 800bc28:	e7f4      	b.n	800bc14 <set_ms+0x80>
			si5351_write_bulk(SI5351_CLK0_PARAMETERS, i, params);
 800bc2a:	aa05      	add	r2, sp, #20
 800bc2c:	202a      	movs	r0, #42	@ 0x2a
 800bc2e:	f7ff fc0b 	bl	800b448 <si5351_write_bulk>
			set_int(clk, int_mode);
 800bc32:	4639      	mov	r1, r7
 800bc34:	2000      	movs	r0, #0
 800bc36:	f7ff fc7d 	bl	800b534 <set_int>
			ms_div(clk, r_div, div_by_4);
 800bc3a:	462a      	mov	r2, r5
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	2000      	movs	r0, #0
}
 800bc40:	b00b      	add	sp, #44	@ 0x2c
 800bc42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			ms_div(clk, r_div, div_by_4);
 800bc46:	f7ff bf77 	b.w	800bb38 <ms_div>
			si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, params);
 800bc4a:	aa05      	add	r2, sp, #20
 800bc4c:	2032      	movs	r0, #50	@ 0x32
 800bc4e:	f7ff fbfb 	bl	800b448 <si5351_write_bulk>
			set_int(clk, int_mode);
 800bc52:	4639      	mov	r1, r7
 800bc54:	2001      	movs	r0, #1
 800bc56:	f7ff fc6d 	bl	800b534 <set_int>
			ms_div(clk, r_div, div_by_4);
 800bc5a:	462a      	mov	r2, r5
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	2001      	movs	r0, #1
 800bc60:	e7ee      	b.n	800bc40 <set_ms+0xac>
			si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, params);
 800bc62:	aa05      	add	r2, sp, #20
 800bc64:	203a      	movs	r0, #58	@ 0x3a
 800bc66:	f7ff fbef 	bl	800b448 <si5351_write_bulk>
			set_int(clk, int_mode);
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	2002      	movs	r0, #2
 800bc6e:	f7ff fc61 	bl	800b534 <set_int>
			ms_div(clk, r_div, div_by_4);
 800bc72:	462a      	mov	r2, r5
 800bc74:	4621      	mov	r1, r4
 800bc76:	2002      	movs	r0, #2
 800bc78:	e7e2      	b.n	800bc40 <set_ms+0xac>
			si5351_write_bulk(SI5351_CLK3_PARAMETERS, i, params);
 800bc7a:	aa05      	add	r2, sp, #20
 800bc7c:	2042      	movs	r0, #66	@ 0x42
 800bc7e:	f7ff fbe3 	bl	800b448 <si5351_write_bulk>
			set_int(clk, int_mode);
 800bc82:	4639      	mov	r1, r7
 800bc84:	2003      	movs	r0, #3
 800bc86:	f7ff fc55 	bl	800b534 <set_int>
			ms_div(clk, r_div, div_by_4);
 800bc8a:	462a      	mov	r2, r5
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	2003      	movs	r0, #3
 800bc90:	e7d6      	b.n	800bc40 <set_ms+0xac>
			si5351_write_bulk(SI5351_CLK4_PARAMETERS, i, params);
 800bc92:	aa05      	add	r2, sp, #20
 800bc94:	204a      	movs	r0, #74	@ 0x4a
 800bc96:	f7ff fbd7 	bl	800b448 <si5351_write_bulk>
			set_int(clk, int_mode);
 800bc9a:	4639      	mov	r1, r7
 800bc9c:	2004      	movs	r0, #4
 800bc9e:	f7ff fc49 	bl	800b534 <set_int>
			ms_div(clk, r_div, div_by_4);
 800bca2:	462a      	mov	r2, r5
 800bca4:	4621      	mov	r1, r4
 800bca6:	2004      	movs	r0, #4
 800bca8:	e7ca      	b.n	800bc40 <set_ms+0xac>
			si5351_write_bulk(SI5351_CLK5_PARAMETERS, i, params);
 800bcaa:	aa05      	add	r2, sp, #20
 800bcac:	2052      	movs	r0, #82	@ 0x52
 800bcae:	f7ff fbcb 	bl	800b448 <si5351_write_bulk>
			set_int(clk, int_mode);
 800bcb2:	4639      	mov	r1, r7
 800bcb4:	2005      	movs	r0, #5
 800bcb6:	f7ff fc3d 	bl	800b534 <set_int>
			ms_div(clk, r_div, div_by_4);
 800bcba:	462a      	mov	r2, r5
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	2005      	movs	r0, #5
 800bcc0:	e7be      	b.n	800bc40 <set_ms+0xac>
			si5351_write(SI5351_CLK6_PARAMETERS, temp);
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	205a      	movs	r0, #90	@ 0x5a
 800bcc6:	f7ff fbd0 	bl	800b46a <si5351_write>
			ms_div(clk, r_div, div_by_4);
 800bcca:	462a      	mov	r2, r5
 800bccc:	4621      	mov	r1, r4
 800bcce:	2006      	movs	r0, #6
 800bcd0:	e7b6      	b.n	800bc40 <set_ms+0xac>
			si5351_write(SI5351_CLK7_PARAMETERS, temp);
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	205b      	movs	r0, #91	@ 0x5b
 800bcd6:	f7ff fbc8 	bl	800b46a <si5351_write>
			ms_div(clk, r_div, div_by_4);
 800bcda:	462a      	mov	r2, r5
 800bcdc:	4621      	mov	r1, r4
 800bcde:	2007      	movs	r0, #7
 800bce0:	e7ae      	b.n	800bc40 <set_ms+0xac>
}
 800bce2:	b00b      	add	sp, #44	@ 0x2c
 800bce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bce8 <select_r_div>:
uint8_t select_r_div(uint64_t *freq)
{
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;

	// Choose the correct R divider
	if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2))
 800bce8:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800bcec:	b570      	push	{r4, r5, r6, lr}
	if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2))
 800bcee:	4c3c      	ldr	r4, [pc, #240]	@ (800bde0 <select_r_div+0xf8>)
{
 800bcf0:	4601      	mov	r1, r0
	if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2))
 800bcf2:	4e3c      	ldr	r6, [pc, #240]	@ (800bde4 <select_r_div+0xfc>)
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	191c      	adds	r4, r3, r4
 800bcf8:	f162 0500 	sbc.w	r5, r2, #0
 800bcfc:	42a6      	cmp	r6, r4
 800bcfe:	eb70 0505 	sbcs.w	r5, r0, r5
 800bd02:	d307      	bcc.n	800bd14 <select_r_div+0x2c>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_128;
		*freq *= 128ULL;
 800bd04:	01d2      	lsls	r2, r2, #7
		r_div = SI5351_OUTPUT_CLK_DIV_128;
 800bd06:	2007      	movs	r0, #7
		*freq *= 128ULL;
 800bd08:	ea42 6253 	orr.w	r2, r2, r3, lsr #25
 800bd0c:	01db      	lsls	r3, r3, #7
 800bd0e:	e9c1 3200 	strd	r3, r2, [r1]
		r_div = SI5351_OUTPUT_CLK_DIV_2;
		*freq *= 2ULL;
	}

	return r_div;
}
 800bd12:	bd70      	pop	{r4, r5, r6, pc}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 4))
 800bd14:	4c34      	ldr	r4, [pc, #208]	@ (800bde8 <select_r_div+0x100>)
 800bd16:	4e35      	ldr	r6, [pc, #212]	@ (800bdec <select_r_div+0x104>)
 800bd18:	191c      	adds	r4, r3, r4
 800bd1a:	f162 0500 	sbc.w	r5, r2, #0
 800bd1e:	42a6      	cmp	r6, r4
 800bd20:	eb70 0505 	sbcs.w	r5, r0, r5
 800bd24:	d307      	bcc.n	800bd36 <select_r_div+0x4e>
		*freq *= 64ULL;
 800bd26:	0192      	lsls	r2, r2, #6
		r_div = SI5351_OUTPUT_CLK_DIV_64;
 800bd28:	2006      	movs	r0, #6
		*freq *= 64ULL;
 800bd2a:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 800bd2e:	019b      	lsls	r3, r3, #6
 800bd30:	e9c1 3200 	strd	r3, r2, [r1]
 800bd34:	e7ed      	b.n	800bd12 <select_r_div+0x2a>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 4) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 8))
 800bd36:	4c2e      	ldr	r4, [pc, #184]	@ (800bdf0 <select_r_div+0x108>)
 800bd38:	4e2e      	ldr	r6, [pc, #184]	@ (800bdf4 <select_r_div+0x10c>)
 800bd3a:	191c      	adds	r4, r3, r4
 800bd3c:	f162 0500 	sbc.w	r5, r2, #0
 800bd40:	42a6      	cmp	r6, r4
 800bd42:	eb70 0505 	sbcs.w	r5, r0, r5
 800bd46:	d307      	bcc.n	800bd58 <select_r_div+0x70>
		*freq *= 32ULL;
 800bd48:	0152      	lsls	r2, r2, #5
		r_div = SI5351_OUTPUT_CLK_DIV_32;
 800bd4a:	2005      	movs	r0, #5
		*freq *= 32ULL;
 800bd4c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800bd50:	015b      	lsls	r3, r3, #5
 800bd52:	e9c1 3200 	strd	r3, r2, [r1]
 800bd56:	e7dc      	b.n	800bd12 <select_r_div+0x2a>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 8) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 16))
 800bd58:	4c27      	ldr	r4, [pc, #156]	@ (800bdf8 <select_r_div+0x110>)
 800bd5a:	4e28      	ldr	r6, [pc, #160]	@ (800bdfc <select_r_div+0x114>)
 800bd5c:	191c      	adds	r4, r3, r4
 800bd5e:	f162 0500 	sbc.w	r5, r2, #0
 800bd62:	42b4      	cmp	r4, r6
 800bd64:	f175 0500 	sbcs.w	r5, r5, #0
 800bd68:	d207      	bcs.n	800bd7a <select_r_div+0x92>
		*freq *= 16ULL;
 800bd6a:	0112      	lsls	r2, r2, #4
		r_div = SI5351_OUTPUT_CLK_DIV_16;
 800bd6c:	2004      	movs	r0, #4
		*freq *= 16ULL;
 800bd6e:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800bd72:	011b      	lsls	r3, r3, #4
 800bd74:	e9c1 3200 	strd	r3, r2, [r1]
 800bd78:	e7cb      	b.n	800bd12 <select_r_div+0x2a>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 16) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 32))
 800bd7a:	4c21      	ldr	r4, [pc, #132]	@ (800be00 <select_r_div+0x118>)
 800bd7c:	4e21      	ldr	r6, [pc, #132]	@ (800be04 <select_r_div+0x11c>)
 800bd7e:	191c      	adds	r4, r3, r4
 800bd80:	f162 0500 	sbc.w	r5, r2, #0
 800bd84:	42b4      	cmp	r4, r6
 800bd86:	f175 0500 	sbcs.w	r5, r5, #0
 800bd8a:	d207      	bcs.n	800bd9c <select_r_div+0xb4>
		*freq *= 8ULL;
 800bd8c:	00d2      	lsls	r2, r2, #3
		r_div = SI5351_OUTPUT_CLK_DIV_8;
 800bd8e:	2003      	movs	r0, #3
		*freq *= 8ULL;
 800bd90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bd94:	00db      	lsls	r3, r3, #3
 800bd96:	e9c1 3200 	strd	r3, r2, [r1]
 800bd9a:	e7ba      	b.n	800bd12 <select_r_div+0x2a>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 32) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 64))
 800bd9c:	4c1a      	ldr	r4, [pc, #104]	@ (800be08 <select_r_div+0x120>)
 800bd9e:	4e1b      	ldr	r6, [pc, #108]	@ (800be0c <select_r_div+0x124>)
 800bda0:	191c      	adds	r4, r3, r4
 800bda2:	f162 0500 	sbc.w	r5, r2, #0
 800bda6:	42b4      	cmp	r4, r6
 800bda8:	f175 0500 	sbcs.w	r5, r5, #0
 800bdac:	d207      	bcs.n	800bdbe <select_r_div+0xd6>
		*freq *= 4ULL;
 800bdae:	0092      	lsls	r2, r2, #2
		r_div = SI5351_OUTPUT_CLK_DIV_4;
 800bdb0:	2002      	movs	r0, #2
		*freq *= 4ULL;
 800bdb2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	e9c1 3200 	strd	r3, r2, [r1]
 800bdbc:	e7a9      	b.n	800bd12 <select_r_div+0x2a>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 64) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 128))
 800bdbe:	4c14      	ldr	r4, [pc, #80]	@ (800be10 <select_r_div+0x128>)
 800bdc0:	4e14      	ldr	r6, [pc, #80]	@ (800be14 <select_r_div+0x12c>)
 800bdc2:	191c      	adds	r4, r3, r4
 800bdc4:	f162 0500 	sbc.w	r5, r2, #0
 800bdc8:	42b4      	cmp	r4, r6
 800bdca:	f175 0500 	sbcs.w	r5, r5, #0
 800bdce:	d2a0      	bcs.n	800bd12 <select_r_div+0x2a>
		*freq *= 2ULL;
 800bdd0:	18db      	adds	r3, r3, r3
		r_div = SI5351_OUTPUT_CLK_DIV_2;
 800bdd2:	f04f 0001 	mov.w	r0, #1
		*freq *= 2ULL;
 800bdd6:	4152      	adcs	r2, r2
 800bdd8:	e9c1 3200 	strd	r3, r2, [r1]
 800bddc:	e799      	b.n	800bd12 <select_r_div+0x2a>
 800bdde:	bf00      	nop
 800bde0:	fff9e580 	.word	0xfff9e580
 800bde4:	00061a7f 	.word	0x00061a7f
 800bde8:	fff3cb00 	.word	0xfff3cb00
 800bdec:	000c34ff 	.word	0x000c34ff
 800bdf0:	ffe79600 	.word	0xffe79600
 800bdf4:	001869ff 	.word	0x001869ff
 800bdf8:	ffcf2c00 	.word	0xffcf2c00
 800bdfc:	0030d400 	.word	0x0030d400
 800be00:	ff9e5800 	.word	0xff9e5800
 800be04:	0061a800 	.word	0x0061a800
 800be08:	ff3cb000 	.word	0xff3cb000
 800be0c:	00c35000 	.word	0x00c35000
 800be10:	fe796000 	.word	0xfe796000
 800be14:	0186a000 	.word	0x0186a000

0800be18 <select_r_div_ms67>:
uint8_t select_r_div_ms67(uint64_t *freq)
{
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;

	// Choose the correct R divider
	if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2))
 800be18:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800be1c:	b570      	push	{r4, r5, r6, lr}
	if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2))
 800be1e:	4c3c      	ldr	r4, [pc, #240]	@ (800bf10 <select_r_div_ms67+0xf8>)
{
 800be20:	4601      	mov	r1, r0
	if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2))
 800be22:	4e3c      	ldr	r6, [pc, #240]	@ (800bf14 <select_r_div_ms67+0xfc>)
 800be24:	2000      	movs	r0, #0
 800be26:	191c      	adds	r4, r3, r4
 800be28:	f162 0500 	sbc.w	r5, r2, #0
 800be2c:	42a6      	cmp	r6, r4
 800be2e:	eb70 0505 	sbcs.w	r5, r0, r5
 800be32:	d307      	bcc.n	800be44 <select_r_div_ms67+0x2c>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_128;
		*freq *= 128ULL;
 800be34:	01d2      	lsls	r2, r2, #7
		r_div = SI5351_OUTPUT_CLK_DIV_128;
 800be36:	2007      	movs	r0, #7
		*freq *= 128ULL;
 800be38:	ea42 6253 	orr.w	r2, r2, r3, lsr #25
 800be3c:	01db      	lsls	r3, r3, #7
 800be3e:	e9c1 3200 	strd	r3, r2, [r1]
		r_div = SI5351_OUTPUT_CLK_DIV_2;
		*freq *= 2ULL;
	}

	return r_div;
}
 800be42:	bd70      	pop	{r4, r5, r6, pc}
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 4))
 800be44:	4c34      	ldr	r4, [pc, #208]	@ (800bf18 <select_r_div_ms67+0x100>)
 800be46:	4e35      	ldr	r6, [pc, #212]	@ (800bf1c <select_r_div_ms67+0x104>)
 800be48:	191c      	adds	r4, r3, r4
 800be4a:	f162 0500 	sbc.w	r5, r2, #0
 800be4e:	42a6      	cmp	r6, r4
 800be50:	eb70 0505 	sbcs.w	r5, r0, r5
 800be54:	d307      	bcc.n	800be66 <select_r_div_ms67+0x4e>
		*freq *= 64ULL;
 800be56:	0192      	lsls	r2, r2, #6
		r_div = SI5351_OUTPUT_CLK_DIV_64;
 800be58:	2006      	movs	r0, #6
		*freq *= 64ULL;
 800be5a:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 800be5e:	019b      	lsls	r3, r3, #6
 800be60:	e9c1 3200 	strd	r3, r2, [r1]
 800be64:	e7ed      	b.n	800be42 <select_r_div_ms67+0x2a>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 4) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 8))
 800be66:	4c2e      	ldr	r4, [pc, #184]	@ (800bf20 <select_r_div_ms67+0x108>)
 800be68:	4e2e      	ldr	r6, [pc, #184]	@ (800bf24 <select_r_div_ms67+0x10c>)
 800be6a:	191c      	adds	r4, r3, r4
 800be6c:	f162 0500 	sbc.w	r5, r2, #0
 800be70:	42a6      	cmp	r6, r4
 800be72:	eb70 0505 	sbcs.w	r5, r0, r5
 800be76:	d307      	bcc.n	800be88 <select_r_div_ms67+0x70>
		*freq *= 32ULL;
 800be78:	0152      	lsls	r2, r2, #5
		r_div = SI5351_OUTPUT_CLK_DIV_32;
 800be7a:	2005      	movs	r0, #5
		*freq *= 32ULL;
 800be7c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800be80:	015b      	lsls	r3, r3, #5
 800be82:	e9c1 3200 	strd	r3, r2, [r1]
 800be86:	e7dc      	b.n	800be42 <select_r_div_ms67+0x2a>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 8) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 16))
 800be88:	4c27      	ldr	r4, [pc, #156]	@ (800bf28 <select_r_div_ms67+0x110>)
 800be8a:	4e28      	ldr	r6, [pc, #160]	@ (800bf2c <select_r_div_ms67+0x114>)
 800be8c:	191c      	adds	r4, r3, r4
 800be8e:	f162 0500 	sbc.w	r5, r2, #0
 800be92:	42a6      	cmp	r6, r4
 800be94:	eb70 0505 	sbcs.w	r5, r0, r5
 800be98:	d307      	bcc.n	800beaa <select_r_div_ms67+0x92>
		*freq *= 16ULL;
 800be9a:	0112      	lsls	r2, r2, #4
		r_div = SI5351_OUTPUT_CLK_DIV_16;
 800be9c:	2004      	movs	r0, #4
		*freq *= 16ULL;
 800be9e:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800bea2:	011b      	lsls	r3, r3, #4
 800bea4:	e9c1 3200 	strd	r3, r2, [r1]
 800bea8:	e7cb      	b.n	800be42 <select_r_div_ms67+0x2a>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 16) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 32))
 800beaa:	4c21      	ldr	r4, [pc, #132]	@ (800bf30 <select_r_div_ms67+0x118>)
 800beac:	4e21      	ldr	r6, [pc, #132]	@ (800bf34 <select_r_div_ms67+0x11c>)
 800beae:	191c      	adds	r4, r3, r4
 800beb0:	f162 0500 	sbc.w	r5, r2, #0
 800beb4:	42a6      	cmp	r6, r4
 800beb6:	eb70 0505 	sbcs.w	r5, r0, r5
 800beba:	d307      	bcc.n	800becc <select_r_div_ms67+0xb4>
		*freq *= 8ULL;
 800bebc:	00d2      	lsls	r2, r2, #3
		r_div = SI5351_OUTPUT_CLK_DIV_8;
 800bebe:	2003      	movs	r0, #3
		*freq *= 8ULL;
 800bec0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	e9c1 3200 	strd	r3, r2, [r1]
 800beca:	e7ba      	b.n	800be42 <select_r_div_ms67+0x2a>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 32) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 64))
 800becc:	4c1a      	ldr	r4, [pc, #104]	@ (800bf38 <select_r_div_ms67+0x120>)
 800bece:	4e1b      	ldr	r6, [pc, #108]	@ (800bf3c <select_r_div_ms67+0x124>)
 800bed0:	191c      	adds	r4, r3, r4
 800bed2:	f162 0500 	sbc.w	r5, r2, #0
 800bed6:	42a6      	cmp	r6, r4
 800bed8:	eb70 0505 	sbcs.w	r5, r0, r5
 800bedc:	d307      	bcc.n	800beee <select_r_div_ms67+0xd6>
		*freq *= 4ULL;
 800bede:	0092      	lsls	r2, r2, #2
		r_div = SI5351_OUTPUT_CLK_DIV_4;
 800bee0:	2002      	movs	r0, #2
		*freq *= 4ULL;
 800bee2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	e9c1 3200 	strd	r3, r2, [r1]
 800beec:	e7a9      	b.n	800be42 <select_r_div_ms67+0x2a>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 64) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 128))
 800beee:	4c14      	ldr	r4, [pc, #80]	@ (800bf40 <select_r_div_ms67+0x128>)
 800bef0:	4e14      	ldr	r6, [pc, #80]	@ (800bf44 <select_r_div_ms67+0x12c>)
 800bef2:	191c      	adds	r4, r3, r4
 800bef4:	f162 0500 	sbc.w	r5, r2, #0
 800bef8:	42a6      	cmp	r6, r4
 800befa:	eb70 0505 	sbcs.w	r5, r0, r5
 800befe:	d3a0      	bcc.n	800be42 <select_r_div_ms67+0x2a>
		*freq *= 2ULL;
 800bf00:	18db      	adds	r3, r3, r3
		r_div = SI5351_OUTPUT_CLK_DIV_2;
 800bf02:	f04f 0001 	mov.w	r0, #1
		*freq *= 2ULL;
 800bf06:	4152      	adcs	r2, r2
 800bf08:	e9c1 3200 	strd	r3, r2, [r1]
 800bf0c:	e799      	b.n	800be42 <select_r_div_ms67+0x2a>
 800bf0e:	bf00      	nop
 800bf10:	ffe3d768 	.word	0xffe3d768
 800bf14:	001c2897 	.word	0x001c2897
 800bf18:	ffc7aed0 	.word	0xffc7aed0
 800bf1c:	0038512f 	.word	0x0038512f
 800bf20:	ff8f5da0 	.word	0xff8f5da0
 800bf24:	0070a25f 	.word	0x0070a25f
 800bf28:	ff1ebb40 	.word	0xff1ebb40
 800bf2c:	00e144bf 	.word	0x00e144bf
 800bf30:	fe3d7680 	.word	0xfe3d7680
 800bf34:	01c2897f 	.word	0x01c2897f
 800bf38:	fc7aed00 	.word	0xfc7aed00
 800bf3c:	038512ff 	.word	0x038512ff
 800bf40:	f8f5da00 	.word	0xf8f5da00
 800bf44:	070a25ff 	.word	0x070a25ff

0800bf48 <set_freq>:
{
 800bf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if(freq > 0 && freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT)
 800bf4c:	1e43      	subs	r3, r0, #1
{
 800bf4e:	b091      	sub	sp, #68	@ 0x44
 800bf50:	460d      	mov	r5, r1
 800bf52:	4614      	mov	r4, r2
 800bf54:	4606      	mov	r6, r0
 800bf56:	e9cd 0106 	strd	r0, r1, [sp, #24]
		if(freq > 0 && freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT)
 800bf5a:	f161 0100 	sbc.w	r1, r1, #0
	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 800bf5e:	2a05      	cmp	r2, #5
 800bf60:	f04f 0200 	mov.w	r2, #0
 800bf64:	f200 80c0 	bhi.w	800c0e8 <set_freq+0x1a0>
		if(freq > 0 && freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT)
 800bf68:	48a1      	ldr	r0, [pc, #644]	@ (800c1f0 <set_freq+0x2a8>)
 800bf6a:	4298      	cmp	r0, r3
 800bf6c:	418a      	sbcs	r2, r1
 800bf6e:	d328      	bcc.n	800bfc2 <set_freq+0x7a>
			freq = SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT;
 800bf70:	4aa0      	ldr	r2, [pc, #640]	@ (800c1f4 <set_freq+0x2ac>)
 800bf72:	2300      	movs	r3, #0
			freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 800bf74:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if(freq > (SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT))
 800bf78:	e9dd 7506 	ldrd	r7, r5, [sp, #24]
 800bf7c:	f8df c294 	ldr.w	ip, [pc, #660]	@ 800c214 <set_freq+0x2cc>
 800bf80:	f04f 0e02 	mov.w	lr, #2
 800bf84:	45bc      	cmp	ip, r7
 800bf86:	eb7e 0305 	sbcs.w	r3, lr, r5
 800bf8a:	f080 8081 	bcs.w	800c090 <set_freq+0x148>
 800bf8e:	4b9a      	ldr	r3, [pc, #616]	@ (800c1f8 <set_freq+0x2b0>)
			for(i = 0; i < 6; i++)
 800bf90:	2200      	movs	r2, #0
					if(i != (uint8_t)clk && pll_assignment[i] == pll_assignment[clk])
 800bf92:	f1a3 0630 	sub.w	r6, r3, #48	@ 0x30
 800bf96:	f1a3 0018 	sub.w	r0, r3, #24
 800bf9a:	469a      	mov	sl, r3
 800bf9c:	4426      	add	r6, r4
				if(clk_freq[i] > (SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT))
 800bf9e:	e9d3 8100 	ldrd	r8, r1, [r3]
 800bfa2:	3308      	adds	r3, #8
 800bfa4:	45c4      	cmp	ip, r8
 800bfa6:	eb7e 0101 	sbcs.w	r1, lr, r1
 800bfaa:	d214      	bcs.n	800bfd6 <set_freq+0x8e>
					if(i != (uint8_t)clk && pll_assignment[i] == pll_assignment[clk])
 800bfac:	42a2      	cmp	r2, r4
 800bfae:	d012      	beq.n	800bfd6 <set_freq+0x8e>
 800bfb0:	f890 8000 	ldrb.w	r8, [r0]
 800bfb4:	7e31      	ldrb	r1, [r6, #24]
 800bfb6:	4588      	cmp	r8, r1
 800bfb8:	d10d      	bne.n	800bfd6 <set_freq+0x8e>
						return 1; // won't set if any other clks already >100 MHz
 800bfba:	2001      	movs	r0, #1
}
 800bfbc:	b011      	add	sp, #68	@ 0x44
 800bfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 800bfc2:	4b8e      	ldr	r3, [pc, #568]	@ (800c1fc <set_freq+0x2b4>)
 800bfc4:	42b3      	cmp	r3, r6
 800bfc6:	f04f 0305 	mov.w	r3, #5
 800bfca:	41ab      	sbcs	r3, r5
 800bfcc:	d2d4      	bcs.n	800bf78 <set_freq+0x30>
			freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 800bfce:	a384      	add	r3, pc, #528	@ (adr r3, 800c1e0 <set_freq+0x298>)
 800bfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd4:	e7ce      	b.n	800bf74 <set_freq+0x2c>
			for(i = 0; i < 6; i++)
 800bfd6:	3201      	adds	r2, #1
 800bfd8:	3001      	adds	r0, #1
 800bfda:	b2d2      	uxtb	r2, r2
 800bfdc:	2a06      	cmp	r2, #6
 800bfde:	d1de      	bne.n	800bf9e <set_freq+0x56>
			if(clk_first_set[(uint8_t)clk] == false)
 800bfe0:	4e87      	ldr	r6, [pc, #540]	@ (800c200 <set_freq+0x2b8>)
 800bfe2:	eb06 0804 	add.w	r8, r6, r4
 800bfe6:	f898 3070 	ldrb.w	r3, [r8, #112]	@ 0x70
 800bfea:	b933      	cbnz	r3, 800bffa <set_freq+0xb2>
				output_enable(clk, 1);   //chh
 800bfec:	2101      	movs	r1, #1
 800bfee:	4620      	mov	r0, r4
 800bff0:	f7ff fa52 	bl	800b498 <output_enable>
				clk_first_set[(uint8_t)clk] = true;
 800bff4:	2301      	movs	r3, #1
 800bff6:	f888 3070 	strb.w	r3, [r8, #112]	@ 0x70
			clk_freq[(uint8_t)clk] = freq;
 800bffa:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 800bffe:	4638      	mov	r0, r7
			set_pll(pll_freq, pll_assignment[clk]);
 800c000:	4426      	add	r6, r4
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 800c002:	2200      	movs	r2, #0
 800c004:	4629      	mov	r1, r5
			clk_freq[(uint8_t)clk] = freq;
 800c006:	e9c3 750c 	strd	r7, r5, [r3, #48]	@ 0x30
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 800c00a:	ab0a      	add	r3, sp, #40	@ 0x28
				if(clk_freq[i] != 0)
 800c00c:	4f7c      	ldr	r7, [pc, #496]	@ (800c200 <set_freq+0x2b8>)
			set_pll(pll_freq, pll_assignment[clk]);
 800c00e:	2500      	movs	r5, #0
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 800c010:	9300      	str	r3, [sp, #0]
					if(pll_assignment[i] == pll_assignment[clk])
 800c012:	4427      	add	r7, r4
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 800c014:	2300      	movs	r3, #0
 800c016:	f7ff fc7b 	bl	800b910 <multisynth_calc>
			set_pll(pll_freq, pll_assignment[clk]);
 800c01a:	7e32      	ldrb	r2, [r6, #24]
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 800c01c:	e9cd 0104 	strd	r0, r1, [sp, #16]
			set_pll(pll_freq, pll_assignment[clk]);
 800c020:	f7ff fb40 	bl	800b6a4 <set_pll>
				if(clk_freq[i] != 0)
 800c024:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 800c028:	f85a 2035 	ldr.w	r2, [sl, r5, lsl #3]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	ea52 0103 	orrs.w	r1, r2, r3
 800c032:	d023      	beq.n	800c07c <set_freq+0x134>
					if(pll_assignment[i] == pll_assignment[clk])
 800c034:	4973      	ldr	r1, [pc, #460]	@ (800c204 <set_freq+0x2bc>)
 800c036:	5d48      	ldrb	r0, [r1, r5]
 800c038:	7e39      	ldrb	r1, [r7, #24]
 800c03a:	4288      	cmp	r0, r1
 800c03c:	d11e      	bne.n	800c07c <set_freq+0x134>
						r_div = select_r_div(&temp_freq);
 800c03e:	a808      	add	r0, sp, #32
						multisynth_calc(temp_freq, pll_freq, &temp_reg);
 800c040:	ae0d      	add	r6, sp, #52	@ 0x34
						temp_freq = clk_freq[i];
 800c042:	e9cd 2308 	strd	r2, r3, [sp, #32]
						r_div = select_r_div(&temp_freq);
 800c046:	f7ff fe4f 	bl	800bce8 <select_r_div>
						multisynth_calc(temp_freq, pll_freq, &temp_reg);
 800c04a:	9600      	str	r6, [sp, #0]
						r_div = select_r_div(&temp_freq);
 800c04c:	4680      	mov	r8, r0
						multisynth_calc(temp_freq, pll_freq, &temp_reg);
 800c04e:	e9dd b908 	ldrd	fp, r9, [sp, #32]
 800c052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c056:	4658      	mov	r0, fp
 800c058:	4649      	mov	r1, r9
 800c05a:	f7ff fc59 	bl	800b910 <multisynth_calc>
						if(temp_freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 800c05e:	4b6a      	ldr	r3, [pc, #424]	@ (800c208 <set_freq+0x2c0>)
						set_ms((enum si5351_clock)i, temp_reg, int_mode, r_div, div_by_4);
 800c060:	b2e8      	uxtb	r0, r5
						if(temp_freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 800c062:	459b      	cmp	fp, r3
 800c064:	f179 0303 	sbcs.w	r3, r9, #3
 800c068:	bf2c      	ite	cs
 800c06a:	2301      	movcs	r3, #1
 800c06c:	2300      	movcc	r3, #0
						set_ms((enum si5351_clock)i, temp_reg, int_mode, r_div, div_by_4);
 800c06e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800c072:	9300      	str	r3, [sp, #0]
 800c074:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c078:	f7ff fd8c 	bl	800bb94 <set_ms>
			for(i = 0; i < 6; i++)
 800c07c:	3501      	adds	r5, #1
 800c07e:	2d06      	cmp	r5, #6
 800c080:	d1d0      	bne.n	800c024 <set_freq+0xdc>
			pll_reset(pll_assignment[clk]);
 800c082:	4b5f      	ldr	r3, [pc, #380]	@ (800c200 <set_freq+0x2b8>)
 800c084:	4423      	add	r3, r4
 800c086:	7e18      	ldrb	r0, [r3, #24]
 800c088:	f7ff f9f8 	bl	800b47c <pll_reset>
		return 0;
 800c08c:	2000      	movs	r0, #0
 800c08e:	e795      	b.n	800bfbc <set_freq+0x74>
			clk_freq[(uint8_t)clk] = freq;
 800c090:	4e5b      	ldr	r6, [pc, #364]	@ (800c200 <set_freq+0x2b8>)
 800c092:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 800c096:	e9c3 750c 	strd	r7, r5, [r3, #48]	@ 0x30
			if(clk_first_set[(uint8_t)clk] == false)
 800c09a:	1935      	adds	r5, r6, r4
 800c09c:	f895 3070 	ldrb.w	r3, [r5, #112]	@ 0x70
 800c0a0:	b933      	cbnz	r3, 800c0b0 <set_freq+0x168>
				output_enable(clk, 1);  //chh
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f7ff f9f7 	bl	800b498 <output_enable>
				clk_first_set[(uint8_t)clk] = true;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	f885 3070 	strb.w	r3, [r5, #112]	@ 0x70
			r_div = select_r_div(&freq);
 800c0b0:	a806      	add	r0, sp, #24
 800c0b2:	ad0a      	add	r5, sp, #40	@ 0x28
 800c0b4:	f7ff fe18 	bl	800bce8 <select_r_div>
			if(pll_assignment[clk] == SI5351_PLLA)
 800c0b8:	1933      	adds	r3, r6, r4
			r_div = select_r_div(&freq);
 800c0ba:	4607      	mov	r7, r0
			if(pll_assignment[clk] == SI5351_PLLA)
 800c0bc:	7e1b      	ldrb	r3, [r3, #24]
				multisynth_calc(freq, plla_freq, &ms_reg);
 800c0be:	9500      	str	r5, [sp, #0]
			if(pll_assignment[clk] == SI5351_PLLA)
 800c0c0:	b97b      	cbnz	r3, 800c0e2 <set_freq+0x19a>
				multisynth_calc(freq, plla_freq, &ms_reg);
 800c0c2:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
				multisynth_calc(freq, pllb_freq, &ms_reg);
 800c0c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0ca:	f7ff fc21 	bl	800b910 <multisynth_calc>
			set_ms(clk, ms_reg, int_mode, r_div, div_by_4);
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f7ff fd5a 	bl	800bb94 <set_ms>
 800c0e0:	e7d4      	b.n	800c08c <set_freq+0x144>
				multisynth_calc(freq, pllb_freq, &ms_reg);
 800c0e2:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	@ 0x28
 800c0e6:	e7ee      	b.n	800c0c6 <set_freq+0x17e>
		if(freq > 0 && freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT)
 800c0e8:	4848      	ldr	r0, [pc, #288]	@ (800c20c <set_freq+0x2c4>)
 800c0ea:	4298      	cmp	r0, r3
 800c0ec:	418a      	sbcs	r2, r1
 800c0ee:	d32f      	bcc.n	800c150 <set_freq+0x208>
			freq = SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT;
 800c0f0:	4a40      	ldr	r2, [pc, #256]	@ (800c1f4 <set_freq+0x2ac>)
 800c0f2:	2300      	movs	r3, #0
			freq = SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT - 1;
 800c0f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if(clk == SI5351_CLK6)
 800c0f8:	2c06      	cmp	r4, #6
 800c0fa:	4d41      	ldr	r5, [pc, #260]	@ (800c200 <set_freq+0x2b8>)
				if(pllb_freq % freq == 0)
 800c0fc:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
		if(clk == SI5351_CLK6)
 800c100:	d142      	bne.n	800c188 <set_freq+0x240>
			if(clk_freq[7] != 0)
 800c102:	e9d5 321a 	ldrd	r3, r2, [r5, #104]	@ 0x68
 800c106:	4313      	orrs	r3, r2
 800c108:	d02c      	beq.n	800c164 <set_freq+0x21c>
				if(pllb_freq % freq == 0)
 800c10a:	4632      	mov	r2, r6
 800c10c:	463b      	mov	r3, r7
 800c10e:	e9d5 890a 	ldrd	r8, r9, [r5, #40]	@ 0x28
 800c112:	4640      	mov	r0, r8
 800c114:	4649      	mov	r1, r9
 800c116:	f7f4 fe97 	bl	8000e48 <__aeabi_uldivmod>
 800c11a:	431a      	orrs	r2, r3
 800c11c:	f47f af4d 	bne.w	800bfba <set_freq+0x72>
					if((pllb_freq / freq) % 2 != 0)
 800c120:	07c2      	lsls	r2, r0, #31
 800c122:	f53f af4a 	bmi.w	800bfba <set_freq+0x72>
						clk_freq[(uint8_t)clk] = freq;
 800c126:	e9c5 6718 	strd	r6, r7, [r5, #96]	@ 0x60
						r_div = select_r_div_ms67(&freq);
 800c12a:	a806      	add	r0, sp, #24
 800c12c:	f7ff fe74 	bl	800be18 <select_r_div_ms67>
						multisynth67_calc(freq, pllb_freq, &ms_reg);
 800c130:	ab0a      	add	r3, sp, #40	@ 0x28
						r_div = select_r_div_ms67(&freq);
 800c132:	4606      	mov	r6, r0
						multisynth67_calc(freq, pllb_freq, &ms_reg);
 800c134:	4642      	mov	r2, r8
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	464b      	mov	r3, r9
 800c13a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c13e:	f7ff fc8f 	bl	800ba60 <multisynth67_calc>
		set_ms(clk, ms_reg, int_mode, r_div, div_by_4);
 800c142:	2300      	movs	r3, #0
 800c144:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c14c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c14e:	e7c4      	b.n	800c0da <set_freq+0x192>
		if(freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 800c150:	4b2f      	ldr	r3, [pc, #188]	@ (800c210 <set_freq+0x2c8>)
 800c152:	42b3      	cmp	r3, r6
 800c154:	f04f 0303 	mov.w	r3, #3
 800c158:	41ab      	sbcs	r3, r5
 800c15a:	d2cd      	bcs.n	800c0f8 <set_freq+0x1b0>
			freq = SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT - 1;
 800c15c:	a322      	add	r3, pc, #136	@ (adr r3, 800c1e8 <set_freq+0x2a0>)
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	e7c7      	b.n	800c0f4 <set_freq+0x1ac>
				r_div = select_r_div_ms67(&freq);
 800c164:	a806      	add	r0, sp, #24
				clk_freq[(uint8_t)clk] = freq;
 800c166:	e9c5 6718 	strd	r6, r7, [r5, #96]	@ 0x60
				r_div = select_r_div_ms67(&freq);
 800c16a:	f7ff fe55 	bl	800be18 <select_r_div_ms67>
				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 800c16e:	ab0a      	add	r3, sp, #40	@ 0x28
 800c170:	2200      	movs	r2, #0
				r_div = select_r_div_ms67(&freq);
 800c172:	4606      	mov	r6, r0
				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	2300      	movs	r3, #0
 800c178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c17c:	f7ff fc70 	bl	800ba60 <multisynth67_calc>
				set_pll(pll_freq, SI5351_PLLB);
 800c180:	2201      	movs	r2, #1
				set_pll(pll_freq, pll_assignment[clk]);
 800c182:	f7ff fa8f 	bl	800b6a4 <set_pll>
 800c186:	e7dc      	b.n	800c142 <set_freq+0x1fa>
			if(clk_freq[6] != 0)
 800c188:	e9d5 3218 	ldrd	r3, r2, [r5, #96]	@ 0x60
 800c18c:	4313      	orrs	r3, r2
 800c18e:	d012      	beq.n	800c1b6 <set_freq+0x26e>
				if(pllb_freq % freq == 0)
 800c190:	4632      	mov	r2, r6
 800c192:	463b      	mov	r3, r7
 800c194:	e9d5 890a 	ldrd	r8, r9, [r5, #40]	@ 0x28
 800c198:	4640      	mov	r0, r8
 800c19a:	4649      	mov	r1, r9
 800c19c:	f7f4 fe54 	bl	8000e48 <__aeabi_uldivmod>
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	f47f af0a 	bne.w	800bfba <set_freq+0x72>
					if((pllb_freq / freq) % 2 != 0)
 800c1a6:	07c3      	lsls	r3, r0, #31
 800c1a8:	f53f af07 	bmi.w	800bfba <set_freq+0x72>
						clk_freq[(uint8_t)clk] = freq;
 800c1ac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c1b0:	e9c5 670c 	strd	r6, r7, [r5, #48]	@ 0x30
 800c1b4:	e7b9      	b.n	800c12a <set_freq+0x1e2>
				clk_freq[(uint8_t)clk] = freq;
 800c1b6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
				r_div = select_r_div_ms67(&freq);
 800c1ba:	a806      	add	r0, sp, #24
				set_pll(pll_freq, pll_assignment[clk]);
 800c1bc:	4425      	add	r5, r4
				clk_freq[(uint8_t)clk] = freq;
 800c1be:	e9c3 670c 	strd	r6, r7, [r3, #48]	@ 0x30
				r_div = select_r_div_ms67(&freq);
 800c1c2:	f7ff fe29 	bl	800be18 <select_r_div_ms67>
				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 800c1c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800c1c8:	2200      	movs	r2, #0
				r_div = select_r_div_ms67(&freq);
 800c1ca:	4606      	mov	r6, r0
				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1d4:	f7ff fc44 	bl	800ba60 <multisynth67_calc>
				set_pll(pll_freq, pll_assignment[clk]);
 800c1d8:	7e2a      	ldrb	r2, [r5, #24]
 800c1da:	e7d2      	b.n	800c182 <set_freq+0x23a>
 800c1dc:	f3af 8000 	nop.w
 800c1e0:	3d1ac100 	.word	0x3d1ac100
 800c1e4:	00000005 	.word	0x00000005
 800c1e8:	7e11d5ff 	.word	0x7e11d5ff
 800c1ec:	00000003 	.word	0x00000003
 800c1f0:	00061a7e 	.word	0x00061a7e
 800c1f4:	00061a80 	.word	0x00061a80
 800c1f8:	20043980 	.word	0x20043980
 800c1fc:	3d1ac100 	.word	0x3d1ac100
 800c200:	20043950 	.word	0x20043950
 800c204:	20043968 	.word	0x20043968
 800c208:	7e11d600 	.word	0x7e11d600
 800c20c:	001c2896 	.word	0x001c2896
 800c210:	7e11d5ff 	.word	0x7e11d5ff
 800c214:	540be400 	.word	0x540be400

0800c218 <drawButton>:

};  // end of button definition



void drawButton(uint16_t i) {
 800c218:	b570      	push	{r4, r5, r6, lr}
 800c21a:	4604      	mov	r4, r0

		BSP_LCD_SetFont (&Font16);
	if (sButtonData[i].Active > 0){
 800c21c:	4d15      	ldr	r5, [pc, #84]	@ (800c274 <drawButton+0x5c>)
		BSP_LCD_SetFont (&Font16);
 800c21e:	4816      	ldr	r0, [pc, #88]	@ (800c278 <drawButton+0x60>)
	if (sButtonData[i].Active > 0){
 800c220:	0166      	lsls	r6, r4, #5
 800c222:	eb05 1444 	add.w	r4, r5, r4, lsl #5
		BSP_LCD_SetFont (&Font16);
 800c226:	f7f6 fb63 	bl	80028f0 <BSP_LCD_SetFont>
	if (sButtonData[i].Active > 0){
 800c22a:	68e3      	ldr	r3, [r4, #12]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	dd1f      	ble.n	800c270 <drawButton+0x58>
        if (sButtonData[i].state == 1)
 800c230:	6963      	ldr	r3, [r4, #20]
 800c232:	2b01      	cmp	r3, #1
    	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800c234:	bf0c      	ite	eq
 800c236:	4811      	ldreq	r0, [pc, #68]	@ (800c27c <drawButton+0x64>)
      else
    	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800c238:	4811      	ldrne	r0, [pc, #68]	@ (800c280 <drawButton+0x68>)
 800c23a:	f7f6 fb4d 	bl	80028d8 <BSP_LCD_SetBackColor>

    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c23e:	f04f 30ff 	mov.w	r0, #4294967295
 800c242:	f7f6 fb3d 	bl	80028c0 <BSP_LCD_SetTextColor>

    if (sButtonData[i].state == 1)
 800c246:	19aa      	adds	r2, r5, r6
 800c248:	6953      	ldr	r3, [r2, #20]
 800c24a:	8b51      	ldrh	r1, [r2, #26]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	8b10      	ldrh	r0, [r2, #24]
    BSP_LCD_DisplayStringAt(sButtonData[i].x, sButtonData[i].y+15, (const uint8_t*) sButtonData[i].text1, 0x03);
 800c250:	f101 010f 	add.w	r1, r1, #15
 800c254:	f04f 0303 	mov.w	r3, #3
    else
    BSP_LCD_DisplayStringAt(sButtonData[i].x, sButtonData[i].y+15, (const uint8_t*) sButtonData[i].text0, 0x03);
 800c258:	bf14      	ite	ne
 800c25a:	59aa      	ldrne	r2, [r5, r6]
    BSP_LCD_DisplayStringAt(sButtonData[i].x, sButtonData[i].y+15, (const uint8_t*) sButtonData[i].text1, 0x03);
 800c25c:	6852      	ldreq	r2, [r2, #4]
    BSP_LCD_DisplayStringAt(sButtonData[i].x, sButtonData[i].y+15, (const uint8_t*) sButtonData[i].text0, 0x03);
 800c25e:	b289      	uxth	r1, r1
 800c260:	f7f6 fbce 	bl	8002a00 <BSP_LCD_DisplayStringAt>

    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800c264:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
    }
}
 800c268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800c26c:	f7f6 bb34 	b.w	80028d8 <BSP_LCD_SetBackColor>
}
 800c270:	bd70      	pop	{r4, r5, r6, pc}
 800c272:	bf00      	nop
 800c274:	20000c40 	.word	0x20000c40
 800c278:	20000030 	.word	0x20000030
 800c27c:	ffff0000 	.word	0xffff0000
 800c280:	ff0000ff 	.word	0xff0000ff

0800c284 <executeCalibrationButton>:



   void executeCalibrationButton (uint16_t index){

      switch (index) {
 800c284:	380a      	subs	r0, #10
   void executeCalibrationButton (uint16_t index){
 800c286:	b538      	push	{r3, r4, r5, lr}
      switch (index) {
 800c288:	2810      	cmp	r0, #16
 800c28a:	f200 809b 	bhi.w	800c3c4 <executeCalibrationButton+0x140>
 800c28e:	e8df f000 	tbb	[pc, r0]
 800c292:	2509      	.short	0x2509
 800c294:	2b999999 	.word	0x2b999999
 800c298:	534a3f38 	.word	0x534a3f38
 800c29c:	7b74675e 	.word	0x7b74675e
 800c2a0:	8a83      	.short	0x8a83
 800c2a2:	92          	.byte	0x92
 800c2a3:	00          	.byte	0x00

      case 10:  //Lower Band

      if (BandIndex > 0) {
 800c2a4:	4d48      	ldr	r5, [pc, #288]	@ (800c3c8 <executeCalibrationButton+0x144>)
 800c2a6:	682b      	ldr	r3, [r5, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f340 808b 	ble.w	800c3c4 <executeCalibrationButton+0x140>
    	  BandIndex --;
 800c2ae:	3b01      	subs	r3, #1

      case 11:  //Raise Band

	  if (BandIndex < numBands-1) {
		  BandIndex ++;
		  show_wide(340, 60, sBand_Data[BandIndex].Frequency );
 800c2b0:	4c46      	ldr	r4, [pc, #280]	@ (800c3cc <executeCalibrationButton+0x148>)
 800c2b2:	213c      	movs	r1, #60	@ 0x3c
		  BandIndex ++;
 800c2b4:	602b      	str	r3, [r5, #0]
		  show_wide(340, 60, sBand_Data[BandIndex].Frequency );
 800c2b6:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 800c2ba:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c2be:	f8b3 2380 	ldrh.w	r2, [r3, #896]	@ 0x380
 800c2c2:	f7fe fbe1 	bl	800aa88 <show_wide>
		  sprintf(display_frequency,"%s",sBand_Data[BandIndex].display);
 800c2c6:	682b      	ldr	r3, [r5, #0]
 800c2c8:	f504 706a 	add.w	r0, r4, #936	@ 0x3a8
 800c2cc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c2d0:	f8d3 1384 	ldr.w	r1, [r3, #900]	@ 0x384

		   break;

      }

   }
 800c2d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  sprintf(display_frequency,"%s",sBand_Data[BandIndex].display);
 800c2d8:	f002 b935 	b.w	800e546 <strcpy>
	  if (BandIndex < numBands-1) {
 800c2dc:	4d3a      	ldr	r5, [pc, #232]	@ (800c3c8 <executeCalibrationButton+0x144>)
 800c2de:	682b      	ldr	r3, [r5, #0]
 800c2e0:	2b03      	cmp	r3, #3
 800c2e2:	dc6f      	bgt.n	800c3c4 <executeCalibrationButton+0x140>
		  BandIndex ++;
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	e7e3      	b.n	800c2b0 <executeCalibrationButton+0x2c>
	  if (s_RTC_Data[3].data > s_RTC_Data[3].Minimum) {
 800c2e8:	4a39      	ldr	r2, [pc, #228]	@ (800c3d0 <executeCalibrationButton+0x14c>)
 800c2ea:	7f93      	ldrb	r3, [r2, #30]
 800c2ec:	7f11      	ldrb	r1, [r2, #28]
 800c2ee:	4299      	cmp	r1, r3
 800c2f0:	d268      	bcs.n	800c3c4 <executeCalibrationButton+0x140>
		  s_RTC_Data[3].data --;
 800c2f2:	3b01      	subs	r3, #1
		  s_RTC_Data[3].data ++;
 800c2f4:	7793      	strb	r3, [r2, #30]
		  display_RTC_TimeEdit(RTC_Button-20,RTC_line0 + 15);
 800c2f6:	2137      	movs	r1, #55	@ 0x37
 800c2f8:	2050      	movs	r0, #80	@ 0x50
   }
 800c2fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  display_RTC_TimeEdit(RTC_Button-20,RTC_line0 + 15);
 800c2fe:	f7fe ba0f 	b.w	800a720 <display_RTC_TimeEdit>
	  if (s_RTC_Data[3].data< s_RTC_Data[3].Maximum) {
 800c302:	4a33      	ldr	r2, [pc, #204]	@ (800c3d0 <executeCalibrationButton+0x14c>)
 800c304:	7f93      	ldrb	r3, [r2, #30]
 800c306:	7f51      	ldrb	r1, [r2, #29]
 800c308:	4299      	cmp	r1, r3
 800c30a:	d95b      	bls.n	800c3c4 <executeCalibrationButton+0x140>
		  s_RTC_Data[3].data ++;
 800c30c:	3301      	adds	r3, #1
 800c30e:	e7f1      	b.n	800c2f4 <executeCalibrationButton+0x70>
	  if (s_RTC_Data[4].data > s_RTC_Data[4].Minimum) {
 800c310:	4a2f      	ldr	r2, [pc, #188]	@ (800c3d0 <executeCalibrationButton+0x14c>)
 800c312:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 800c316:	f892 1024 	ldrb.w	r1, [r2, #36]	@ 0x24
 800c31a:	4299      	cmp	r1, r3
 800c31c:	d252      	bcs.n	800c3c4 <executeCalibrationButton+0x140>
		  s_RTC_Data[4].data --;
 800c31e:	3b01      	subs	r3, #1
		  s_RTC_Data[4].data ++;
 800c320:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
		  display_RTC_TimeEdit(RTC_Button-20,RTC_line0 + 15);
 800c324:	e7e7      	b.n	800c2f6 <executeCalibrationButton+0x72>
	  if (s_RTC_Data[4].data< s_RTC_Data[4].Maximum) {
 800c326:	4a2a      	ldr	r2, [pc, #168]	@ (800c3d0 <executeCalibrationButton+0x14c>)
 800c328:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 800c32c:	f892 1025 	ldrb.w	r1, [r2, #37]	@ 0x25
 800c330:	4299      	cmp	r1, r3
 800c332:	d947      	bls.n	800c3c4 <executeCalibrationButton+0x140>
		  s_RTC_Data[4].data ++;
 800c334:	3301      	adds	r3, #1
 800c336:	e7f3      	b.n	800c320 <executeCalibrationButton+0x9c>
     	  if (s_RTC_Data[5].data > s_RTC_Data[5].Minimum) {
 800c338:	4a25      	ldr	r2, [pc, #148]	@ (800c3d0 <executeCalibrationButton+0x14c>)
 800c33a:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 800c33e:	f892 102c 	ldrb.w	r1, [r2, #44]	@ 0x2c
 800c342:	4299      	cmp	r1, r3
 800c344:	d23e      	bcs.n	800c3c4 <executeCalibrationButton+0x140>
     		  s_RTC_Data[5].data --;
 800c346:	3b01      	subs	r3, #1
     		  s_RTC_Data[5].data ++;
 800c348:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
     		  display_RTC_TimeEdit(RTC_Button-20,RTC_line0 + 15);
 800c34c:	e7d3      	b.n	800c2f6 <executeCalibrationButton+0x72>
     	  if (s_RTC_Data[5].data< s_RTC_Data[5].Maximum) {
 800c34e:	4a20      	ldr	r2, [pc, #128]	@ (800c3d0 <executeCalibrationButton+0x14c>)
 800c350:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 800c354:	f892 102d 	ldrb.w	r1, [r2, #45]	@ 0x2d
 800c358:	4299      	cmp	r1, r3
 800c35a:	d933      	bls.n	800c3c4 <executeCalibrationButton+0x140>
     		  s_RTC_Data[5].data ++;
 800c35c:	3301      	adds	r3, #1
 800c35e:	e7f3      	b.n	800c348 <executeCalibrationButton+0xc4>
	  if (s_RTC_Data[0].data > s_RTC_Data[0].Minimum) {
 800c360:	4a1b      	ldr	r2, [pc, #108]	@ (800c3d0 <executeCalibrationButton+0x14c>)
 800c362:	7993      	ldrb	r3, [r2, #6]
 800c364:	7911      	ldrb	r1, [r2, #4]
 800c366:	4299      	cmp	r1, r3
 800c368:	d22c      	bcs.n	800c3c4 <executeCalibrationButton+0x140>
		  s_RTC_Data[0].data --;
 800c36a:	3b01      	subs	r3, #1
		  s_RTC_Data[0].data ++;
 800c36c:	7193      	strb	r3, [r2, #6]
		  display_RTC_DateEdit(RTC_Button-20,RTC_line3 +15);
 800c36e:	2191      	movs	r1, #145	@ 0x91
 800c370:	2050      	movs	r0, #80	@ 0x50
   }
 800c372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  display_RTC_DateEdit(RTC_Button-20,RTC_line3 +15);
 800c376:	f7fe ba15 	b.w	800a7a4 <display_RTC_DateEdit>
	  if (s_RTC_Data[0].data< s_RTC_Data[0].Maximum) {
 800c37a:	4a15      	ldr	r2, [pc, #84]	@ (800c3d0 <executeCalibrationButton+0x14c>)
 800c37c:	7993      	ldrb	r3, [r2, #6]
 800c37e:	7951      	ldrb	r1, [r2, #5]
 800c380:	4299      	cmp	r1, r3
 800c382:	d91f      	bls.n	800c3c4 <executeCalibrationButton+0x140>
		  s_RTC_Data[0].data ++;
 800c384:	3301      	adds	r3, #1
 800c386:	e7f1      	b.n	800c36c <executeCalibrationButton+0xe8>
	  if (s_RTC_Data[1].data > s_RTC_Data[1].Minimum) {
 800c388:	4a11      	ldr	r2, [pc, #68]	@ (800c3d0 <executeCalibrationButton+0x14c>)
 800c38a:	7b93      	ldrb	r3, [r2, #14]
 800c38c:	7b11      	ldrb	r1, [r2, #12]
 800c38e:	4299      	cmp	r1, r3
 800c390:	d218      	bcs.n	800c3c4 <executeCalibrationButton+0x140>
		  s_RTC_Data[1].data --;
 800c392:	3b01      	subs	r3, #1
		  s_RTC_Data[1].data ++;
 800c394:	7393      	strb	r3, [r2, #14]
		  display_RTC_DateEdit(RTC_Button-20,RTC_line3 +15);
 800c396:	e7ea      	b.n	800c36e <executeCalibrationButton+0xea>
	  if (s_RTC_Data[1].data< s_RTC_Data[1].Maximum) {
 800c398:	4a0d      	ldr	r2, [pc, #52]	@ (800c3d0 <executeCalibrationButton+0x14c>)
 800c39a:	7b93      	ldrb	r3, [r2, #14]
 800c39c:	7b51      	ldrb	r1, [r2, #13]
 800c39e:	4299      	cmp	r1, r3
 800c3a0:	d910      	bls.n	800c3c4 <executeCalibrationButton+0x140>
		  s_RTC_Data[1].data ++;
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	e7f6      	b.n	800c394 <executeCalibrationButton+0x110>
	  if (s_RTC_Data[2].data > s_RTC_Data[2].Minimum) {
 800c3a6:	4a0a      	ldr	r2, [pc, #40]	@ (800c3d0 <executeCalibrationButton+0x14c>)
 800c3a8:	7d93      	ldrb	r3, [r2, #22]
 800c3aa:	7d11      	ldrb	r1, [r2, #20]
 800c3ac:	4299      	cmp	r1, r3
 800c3ae:	d209      	bcs.n	800c3c4 <executeCalibrationButton+0x140>
		  s_RTC_Data[2].data --;
 800c3b0:	3b01      	subs	r3, #1
		  s_RTC_Data[2].data ++;
 800c3b2:	7593      	strb	r3, [r2, #22]
 800c3b4:	e7db      	b.n	800c36e <executeCalibrationButton+0xea>
	  if (s_RTC_Data[2].data< s_RTC_Data[2].Maximum) {
 800c3b6:	4a06      	ldr	r2, [pc, #24]	@ (800c3d0 <executeCalibrationButton+0x14c>)
 800c3b8:	7d93      	ldrb	r3, [r2, #22]
 800c3ba:	7d51      	ldrb	r1, [r2, #21]
 800c3bc:	4299      	cmp	r1, r3
 800c3be:	d901      	bls.n	800c3c4 <executeCalibrationButton+0x140>
		  s_RTC_Data[2].data ++;
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	e7f6      	b.n	800c3b2 <executeCalibrationButton+0x12e>
   }
 800c3c4:	bd38      	pop	{r3, r4, r5, pc}
 800c3c6:	bf00      	nop
 800c3c8:	200439c8 	.word	0x200439c8
 800c3cc:	20000c40 	.word	0x20000c40
 800c3d0:	200009d8 	.word	0x200009d8

0800c3d4 <testButton>:



uint16_t testButton(uint16_t x,uint16_t y,uint16_t w,uint16_t h) {
 800c3d4:	b510      	push	{r4, lr}

	  y = y +15; // compensate for draw offset

	  if  ((valx < x+w && valx > x) && (valy > y && valy < y+h)){
 800c3d6:	4c0a      	ldr	r4, [pc, #40]	@ (800c400 <testButton+0x2c>)
 800c3d8:	4402      	add	r2, r0
 800c3da:	8824      	ldrh	r4, [r4, #0]
 800c3dc:	4294      	cmp	r4, r2
 800c3de:	da0d      	bge.n	800c3fc <testButton+0x28>
 800c3e0:	4284      	cmp	r4, r0
 800c3e2:	d90b      	bls.n	800c3fc <testButton+0x28>
	  y = y +15; // compensate for draw offset
 800c3e4:	310f      	adds	r1, #15
	  if  ((valx < x+w && valx > x) && (valy > y && valy < y+h)){
 800c3e6:	4a07      	ldr	r2, [pc, #28]	@ (800c404 <testButton+0x30>)
	  y = y +15; // compensate for draw offset
 800c3e8:	b289      	uxth	r1, r1
	  if  ((valx < x+w && valx > x) && (valy > y && valy < y+h)){
 800c3ea:	8810      	ldrh	r0, [r2, #0]
 800c3ec:	4288      	cmp	r0, r1
 800c3ee:	d905      	bls.n	800c3fc <testButton+0x28>
 800c3f0:	4419      	add	r1, r3
 800c3f2:	4288      	cmp	r0, r1
 800c3f4:	bfac      	ite	ge
 800c3f6:	2000      	movge	r0, #0
 800c3f8:	2001      	movlt	r0, #1
	  return 1;
	  }else{
	  return 0;
		}
}
 800c3fa:	bd10      	pop	{r4, pc}
	  return 0;
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	e7fc      	b.n	800c3fa <testButton+0x26>
 800c400:	20001ba4 	.word	0x20001ba4
 800c404:	20001ba6 	.word	0x20001ba6

0800c408 <setup_Cal_Display>:




void setup_Cal_Display(void){
 800c408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//clear_messages();
	//clear_xmit_messages();

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c40a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
	BSP_LCD_FillRect(0, FFT_H, 480, 201);


	sButtonData[10].Active = 3;
 800c40e:	4c25      	ldr	r4, [pc, #148]	@ (800c4a4 <setup_Cal_Display+0x9c>)
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c410:	f7f6 fa56 	bl	80028c0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, FFT_H, 480, 201);
 800c414:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c418:	23c9      	movs	r3, #201	@ 0xc9
 800c41a:	2128      	movs	r1, #40	@ 0x28
 800c41c:	2000      	movs	r0, #0
	sButtonData[10].Active = 3;
 800c41e:	2603      	movs	r6, #3
	BSP_LCD_FillRect(0, FFT_H, 480, 201);
 800c420:	f7f6 fbac 	bl	8002b7c <BSP_LCD_FillRect>

	sButtonData[12].Active = 1;
	sButtonData[13].Active = 1;
	sButtonData[14].Active = 1;

	for(int i = 15; i < 27; i++) {
 800c424:	250f      	movs	r5, #15
	sButtonData[12].Active = 1;
 800c426:	2201      	movs	r2, #1
 800c428:	4627      	mov	r7, r4
	sButtonData[10].Active = 3;
 800c42a:	f8c4 614c 	str.w	r6, [r4, #332]	@ 0x14c
	sButtonData[11].Active = 3;
 800c42e:	f8c4 616c 	str.w	r6, [r4, #364]	@ 0x16c
	sButtonData[12].Active = 1;
 800c432:	f8c4 218c 	str.w	r2, [r4, #396]	@ 0x18c
	sButtonData[13].Active = 1;
 800c436:	f8c4 21ac 	str.w	r2, [r4, #428]	@ 0x1ac
	sButtonData[14].Active = 1;
 800c43a:	f8c4 21cc 	str.w	r2, [r4, #460]	@ 0x1cc
		sButtonData[i].Active = 3;
		drawButton(i);
 800c43e:	b2a8      	uxth	r0, r5
	for(int i = 15; i < 27; i++) {
 800c440:	3501      	adds	r5, #1
		sButtonData[i].Active = 3;
 800c442:	f8c4 61ec 	str.w	r6, [r4, #492]	@ 0x1ec
	for(int i = 15; i < 27; i++) {
 800c446:	3420      	adds	r4, #32
		drawButton(i);
 800c448:	f7ff fee6 	bl	800c218 <drawButton>
	for(int i = 15; i < 27; i++) {
 800c44c:	2d1b      	cmp	r5, #27
 800c44e:	d1f6      	bne.n	800c43e <setup_Cal_Display+0x36>
	}

	sButtonData[27].Active = 1;
 800c450:	2301      	movs	r3, #1

	drawButton(10);
 800c452:	200a      	movs	r0, #10
	sButtonData[27].Active = 1;
 800c454:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
	drawButton(10);
 800c458:	f7ff fede 	bl	800c218 <drawButton>
	drawButton(11);
 800c45c:	200b      	movs	r0, #11
 800c45e:	f7ff fedb 	bl	800c218 <drawButton>
	drawButton(12);
 800c462:	200c      	movs	r0, #12
 800c464:	f7ff fed8 	bl	800c218 <drawButton>
	drawButton(13);
 800c468:	200d      	movs	r0, #13
 800c46a:	f7ff fed5 	bl	800c218 <drawButton>
	drawButton(14);
 800c46e:	200e      	movs	r0, #14
 800c470:	f7ff fed2 	bl	800c218 <drawButton>
	drawButton(27);
 800c474:	4628      	mov	r0, r5
 800c476:	f7ff fecf 	bl	800c218 <drawButton>

	show_wide(340, 60, (int) start_freq );
 800c47a:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a8 <setup_Cal_Display+0xa0>)
 800c47c:	213c      	movs	r1, #60	@ 0x3c
 800c47e:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 800c482:	889a      	ldrh	r2, [r3, #4]
 800c484:	f7fe fb00 	bl	800aa88 <show_wide>

	load_RealTime();
 800c488:	f7fe f930 	bl	800a6ec <load_RealTime>
	display_RTC_TimeEdit(RTC_Button-20,RTC_line0 + 15);
 800c48c:	2137      	movs	r1, #55	@ 0x37
 800c48e:	2050      	movs	r0, #80	@ 0x50
 800c490:	f7fe f946 	bl	800a720 <display_RTC_TimeEdit>

	load_RealDate();
 800c494:	f7fe f968 	bl	800a768 <load_RealDate>
	display_RTC_DateEdit(RTC_Button-20,RTC_line3 +15);
 800c498:	2191      	movs	r1, #145	@ 0x91
 800c49a:	2050      	movs	r0, #80	@ 0x50



}
 800c49c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	display_RTC_DateEdit(RTC_Button-20,RTC_line3 +15);
 800c4a0:	f7fe b980 	b.w	800a7a4 <display_RTC_DateEdit>
 800c4a4:	20000c40 	.word	0x20000c40
 800c4a8:	200439c8 	.word	0x200439c8

0800c4ac <erase_Cal_Display>:

void erase_Cal_Display(void){
 800c4ac:	b508      	push	{r3, lr}
	//clear_messages();
	//clear_reply_message_box();

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c4ae:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800c4b2:	f7f6 fa05 	bl	80028c0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, FFT_H, 480, 201);
 800c4b6:	23c9      	movs	r3, #201	@ 0xc9
 800c4b8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c4bc:	2128      	movs	r1, #40	@ 0x28
 800c4be:	2000      	movs	r0, #0
 800c4c0:	f7f6 fb5c 	bl	8002b7c <BSP_LCD_FillRect>



	for(int i = 10; i < 28; i++) {
 800c4c4:	4909      	ldr	r1, [pc, #36]	@ (800c4ec <erase_Cal_Display+0x40>)
	BSP_LCD_FillRect(0, FFT_H, 480, 201);
 800c4c6:	2312      	movs	r3, #18
			sButtonData[i].Active = 0;
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	460a      	mov	r2, r1
	for(int i = 10; i < 28; i++) {
 800c4cc:	3b01      	subs	r3, #1
			sButtonData[i].Active = 0;
 800c4ce:	f8c1 014c 	str.w	r0, [r1, #332]	@ 0x14c
	for(int i = 10; i < 28; i++) {
 800c4d2:	f101 0120 	add.w	r1, r1, #32
 800c4d6:	d1f9      	bne.n	800c4cc <erase_Cal_Display+0x20>
		}

	sButtonData[12].state = 0;
 800c4d8:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194
	sButtonData[13].state = 0;
 800c4dc:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
	sButtonData[14].state = 0;
 800c4e0:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
	sButtonData[27].state = 0;
 800c4e4:	f8c2 3374 	str.w	r3, [r2, #884]	@ 0x374
}
 800c4e8:	bd08      	pop	{r3, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20000c40 	.word	0x20000c40

0800c4f0 <PTT_Out_Init>:


void PTT_Out_Init(void)
{
 800c4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    GPIO_InitTypeDef  gpio_init_structure;


	__HAL_RCC_GPIOI_CLK_ENABLE();
 800c4f4:	4c1e      	ldr	r4, [pc, #120]	@ (800c570 <PTT_Out_Init+0x80>)
{
 800c4f6:	b088      	sub	sp, #32
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800c4f8:	2500      	movs	r5, #0
    gpio_init_structure.Pin = GPIO_PIN_2;
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;

    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800c4fa:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 800c574 <PTT_Out_Init+0x84>
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800c4fe:	2601      	movs	r6, #1
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
 800c500:	f04f 0a04 	mov.w	sl, #4
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800c504:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
 800c506:	f04f 0811 	mov.w	r8, #17
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800c50a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800c50c:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800c50e:	a903      	add	r1, sp, #12
 800c510:	4648      	mov	r0, r9
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800c512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c516:	6323      	str	r3, [r4, #48]	@ 0x30
 800c518:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c51a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c51e:	9301      	str	r3, [sp, #4]
 800c520:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
 800c522:	e9cd a803 	strd	sl, r8, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800c526:	e9cd 6705 	strd	r6, r7, [sp, #20]
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800c52a:	f7f7 ff9b 	bl	8004464 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET);  //Set = Receive connect
 800c52e:	4632      	mov	r2, r6
 800c530:	4651      	mov	r1, sl
 800c532:	4648      	mov	r0, r9
 800c534:	f7f8 f884 	bl	8004640 <HAL_GPIO_WritePin>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c538:	9502      	str	r5, [sp, #8]
 800c53a:	6b23      	ldr	r3, [r4, #48]	@ 0x30

        gpio_init_structure.Pin = GPIO_PIN_15;
 800c53c:	f44f 4900 	mov.w	r9, #32768	@ 0x8000
        gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
        gpio_init_structure.Pull = GPIO_PULLUP;
        gpio_init_structure.Speed = GPIO_SPEED_HIGH;

        HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c540:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c542:	4333      	orrs	r3, r6
 800c544:	6323      	str	r3, [r4, #48]	@ 0x30
 800c546:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c548:	f5a4 5460 	sub.w	r4, r4, #14336	@ 0x3800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c54c:	4033      	ands	r3, r6
        HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c54e:	4620      	mov	r0, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c550:	9302      	str	r3, [sp, #8]
 800c552:	9b02      	ldr	r3, [sp, #8]
        gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
 800c554:	e9cd 9803 	strd	r9, r8, [sp, #12]
        gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800c558:	e9cd 6705 	strd	r6, r7, [sp, #20]
        HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c55c:	f7f7 ff82 	bl	8004464 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);  //Set = Receive short
 800c560:	462a      	mov	r2, r5
 800c562:	4649      	mov	r1, r9
 800c564:	4620      	mov	r0, r4
 800c566:	f7f8 f86b 	bl	8004640 <HAL_GPIO_WritePin>

}
 800c56a:	b008      	add	sp, #32
 800c56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c570:	40023800 	.word	0x40023800
 800c574:	40022000 	.word	0x40022000

0800c578 <PTT_Out_Set>:


void PTT_Out_Set(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800c578:	2200      	movs	r2, #0
 800c57a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c57e:	4807      	ldr	r0, [pc, #28]	@ (800c59c <PTT_Out_Set+0x24>)
{
 800c580:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800c582:	f7f8 f85d 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800c586:	2001      	movs	r0, #1
 800c588:	f001 f868 	bl	800d65c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET);
 800c58c:	2201      	movs	r2, #1
 800c58e:	2104      	movs	r1, #4
 800c590:	4803      	ldr	r0, [pc, #12]	@ (800c5a0 <PTT_Out_Set+0x28>)
}
 800c592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET);
 800c596:	f7f8 b853 	b.w	8004640 <HAL_GPIO_WritePin>
 800c59a:	bf00      	nop
 800c59c:	40020000 	.word	0x40020000
 800c5a0:	40022000 	.word	0x40022000

0800c5a4 <PTT_Out_RST_Clr>:

void PTT_Out_RST_Clr(void)
	{
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET);
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2104      	movs	r1, #4
 800c5a8:	4807      	ldr	r0, [pc, #28]	@ (800c5c8 <PTT_Out_RST_Clr+0x24>)
	{
 800c5aa:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET);
 800c5ac:	f7f8 f848 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	f001 f853 	bl	800d65c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c5bc:	4803      	ldr	r0, [pc, #12]	@ (800c5cc <PTT_Out_RST_Clr+0x28>)
	}
 800c5be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800c5c2:	f7f8 b83d 	b.w	8004640 <HAL_GPIO_WritePin>
 800c5c6:	bf00      	nop
 800c5c8:	40022000 	.word	0x40022000
 800c5cc:	40020000 	.word	0x40020000

0800c5d0 <set_codec_input_gain>:


void set_codec_input_gain(void){
 800c5d0:	b508      	push	{r3, lr}
	Set_PGA_Gain(AGC_Gain);
 800c5d2:	4b06      	ldr	r3, [pc, #24]	@ (800c5ec <set_codec_input_gain+0x1c>)
 800c5d4:	f8d3 03b0 	ldr.w	r0, [r3, #944]	@ 0x3b0
 800c5d8:	f7fd ff78 	bl	800a4cc <Set_PGA_Gain>
	HAL_Delay(10);
 800c5dc:	200a      	movs	r0, #10
 800c5de:	f001 f83d 	bl	800d65c <HAL_Delay>
	Set_ADC_DVC(190);
 800c5e2:	20be      	movs	r0, #190	@ 0xbe
}
 800c5e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Set_ADC_DVC(190);
 800c5e8:	f7fd bf88 	b.w	800a4fc <Set_ADC_DVC>
 800c5ec:	20000c40 	.word	0x20000c40

0800c5f0 <receive_sequence>:


void receive_sequence(void) {
 800c5f0:	b508      	push	{r3, lr}

	PTT_Out_Set(); // set output high to connect receiver to antenna
 800c5f2:	f7ff ffc1 	bl	800c578 <PTT_Out_Set>
	HAL_Delay(10);
 800c5f6:	200a      	movs	r0, #10
 800c5f8:	f001 f830 	bl	800d65c <HAL_Delay>

	sButtonData[3].state = 0;
 800c5fc:	4b03      	ldr	r3, [pc, #12]	@ (800c60c <receive_sequence+0x1c>)
 800c5fe:	2200      	movs	r2, #0
	drawButton(3);
 800c600:	2003      	movs	r0, #3
	sButtonData[3].state = 0;
 800c602:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	drawButton(3);
 800c608:	f7ff be06 	b.w	800c218 <drawButton>
 800c60c:	20000c40 	.word	0x20000c40

0800c610 <xmit_sequence>:


void xmit_sequence(void)  {
 800c610:	b508      	push	{r3, lr}

	PTT_Out_RST_Clr();  //set output low to disconnect receiver from antenna
 800c612:	f7ff ffc7 	bl	800c5a4 <PTT_Out_RST_Clr>

	HAL_Delay(10);
 800c616:	200a      	movs	r0, #10
 800c618:	f001 f820 	bl	800d65c <HAL_Delay>

	sButtonData[3].state = 1;
 800c61c:	4b03      	ldr	r3, [pc, #12]	@ (800c62c <xmit_sequence+0x1c>)
 800c61e:	2201      	movs	r2, #1
	drawButton(3);
 800c620:	2003      	movs	r0, #3
	sButtonData[3].state = 1;
 800c622:	675a      	str	r2, [r3, #116]	@ 0x74

}
 800c624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	drawButton(3);
 800c628:	f7ff bdf6 	b.w	800c218 <drawButton>
 800c62c:	20000c40 	.word	0x20000c40

0800c630 <executeButton>:
void executeButton (uint16_t index){
 800c630:	b570      	push	{r4, r5, r6, lr}
   switch (index) {
 800c632:	281b      	cmp	r0, #27
 800c634:	d845      	bhi.n	800c6c2 <executeButton+0x92>
 800c636:	e8df f010 	tbh	[pc, r0, lsl #1]
 800c63a:	001c      	.short	0x001c
 800c63c:	00450032 	.word	0x00450032
 800c640:	005c0044 	.word	0x005c0044
 800c644:	0074006b 	.word	0x0074006b
 800c648:	00900089 	.word	0x00900089
 800c64c:	004400ac 	.word	0x004400ac
 800c650:	00b70044 	.word	0x00b70044
 800c654:	00f800d0 	.word	0x00f800d0
 800c658:	00440044 	.word	0x00440044
 800c65c:	00440044 	.word	0x00440044
 800c660:	00440044 	.word	0x00440044
 800c664:	00440044 	.word	0x00440044
 800c668:	00440044 	.word	0x00440044
 800c66c:	00440044 	.word	0x00440044
 800c670:	010c      	.short	0x010c
	   FT8_Message_Touch = 0;
 800c672:	2400      	movs	r4, #0
	   clear_xmit_messages();
 800c674:	f000 fe8a 	bl	800d38c <clear_xmit_messages>
	   terminate_QSO();
 800c678:	f001 fac2 	bl	800dc00 <terminate_QSO>
	   FT8_Message_Touch = 0;
 800c67c:	4b7f      	ldr	r3, [pc, #508]	@ (800c87c <executeButton+0x24c>)
       sButtonData[0].state = 1;
 800c67e:	4d80      	ldr	r5, [pc, #512]	@ (800c880 <executeButton+0x250>)
       drawButton(0);
 800c680:	4620      	mov	r0, r4
	   FT8_Message_Touch = 0;
 800c682:	601c      	str	r4, [r3, #0]
       sButtonData[0].state = 1;
 800c684:	2301      	movs	r3, #1
 800c686:	616b      	str	r3, [r5, #20]
       drawButton(0);
 800c688:	f7ff fdc6 	bl	800c218 <drawButton>
       HAL_Delay(10);
 800c68c:	200a      	movs	r0, #10
 800c68e:	f000 ffe5 	bl	800d65c <HAL_Delay>
       drawButton(0);
 800c692:	4620      	mov	r0, r4
       sButtonData[0].state = 0;
 800c694:	616c      	str	r4, [r5, #20]
}
 800c696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	   		drawButton(27);
 800c69a:	f7ff bdbd 	b.w	800c218 <drawButton>
	   if (!sButtonData[1].state)
 800c69e:	4b78      	ldr	r3, [pc, #480]	@ (800c880 <executeButton+0x250>)
 800c6a0:	4a78      	ldr	r2, [pc, #480]	@ (800c884 <executeButton+0x254>)
 800c6a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6a4:	4c78      	ldr	r4, [pc, #480]	@ (800c888 <executeButton+0x258>)
 800c6a6:	b92b      	cbnz	r3, 800c6b4 <executeButton+0x84>
	   Beacon_State = 0;
 800c6a8:	6023      	str	r3, [r4, #0]
	  { Beacon_On = 0;
 800c6aa:	6093      	str	r3, [r2, #8]
}
 800c6ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	   clear_reply_message_box();
 800c6b0:	f000 bed0 	b.w	800d454 <clear_reply_message_box>
	   Beacon_On = 1;
 800c6b4:	2501      	movs	r5, #1
 800c6b6:	6095      	str	r5, [r2, #8]
	   clear_reply_message_box();
 800c6b8:	f000 fecc 	bl	800d454 <clear_reply_message_box>
	   clear_log_stored_data();
 800c6bc:	f000 fb0e 	bl	800ccdc <clear_log_stored_data>
	   Beacon_State = 1;
 800c6c0:	6025      	str	r5, [r4, #0]
}
 800c6c2:	bd70      	pop	{r4, r5, r6, pc}
	   if (!sButtonData[2].state)
 800c6c4:	4b6e      	ldr	r3, [pc, #440]	@ (800c880 <executeButton+0x250>)
 800c6c6:	4c6f      	ldr	r4, [pc, #444]	@ (800c884 <executeButton+0x254>)
 800c6c8:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 800c6ca:	b95d      	cbnz	r5, 800c6e4 <executeButton+0xb4>
	   tune_Off_sequence();
 800c6cc:	f001 fa88 	bl	800dbe0 <tune_Off_sequence>
  	   xmit_flag = 0;
 800c6d0:	4b6e      	ldr	r3, [pc, #440]	@ (800c88c <executeButton+0x25c>)
	   Arm_Tune = 0;
 800c6d2:	e9c4 5503 	strd	r5, r5, [r4, #12]
  	   xmit_flag = 0;
 800c6d6:	601d      	str	r5, [r3, #0]
  	   receive_sequence();
 800c6d8:	f7ff ff8a 	bl	800c5f0 <receive_sequence>
}
 800c6dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  	   erase_Cal_Display();
 800c6e0:	f7ff bee4 	b.w	800c4ac <erase_Cal_Display>
		Tune_On = 1;  //Turns off display of FT8 traffic
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	60e3      	str	r3, [r4, #12]
		setup_Cal_Display();
 800c6e8:	f7ff fe8e 	bl	800c408 <setup_Cal_Display>
		Arm_Tune = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	6123      	str	r3, [r4, #16]
 800c6f0:	e7e7      	b.n	800c6c2 <executeButton+0x92>
   	   if ( sButtonData[4].state == 1 ){
 800c6f2:	4b63      	ldr	r3, [pc, #396]	@ (800c880 <executeButton+0x250>)
 800c6f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d105      	bne.n	800c708 <executeButton+0xd8>
   	   make_File_Name();
 800c6fc:	f7fe f8d6 	bl	800a8ac <make_File_Name>
}
 800c700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   	   Open_Log_File();
 800c704:	f000 beee 	b.w	800d4e4 <Open_Log_File>
}
 800c708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   	   Close_Log_File();
 800c70c:	f000 bf5c 	b.w	800d5c8 <Close_Log_File>
	   if (!sButtonData[5].state)
 800c710:	4b5b      	ldr	r3, [pc, #364]	@ (800c880 <executeButton+0x250>)
 800c712:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800c716:	4b5b      	ldr	r3, [pc, #364]	@ (800c884 <executeButton+0x254>)
 800c718:	b90a      	cbnz	r2, 800c71e <executeButton+0xee>
  	   		Auto_Sync = 1;
 800c71a:	615a      	str	r2, [r3, #20]
 800c71c:	e7d1      	b.n	800c6c2 <executeButton+0x92>
 800c71e:	2201      	movs	r2, #1
 800c720:	e7fb      	b.n	800c71a <executeButton+0xea>
	   if (AGC_Gain >= 3) AGC_Gain --;
 800c722:	4c57      	ldr	r4, [pc, #348]	@ (800c880 <executeButton+0x250>)
 800c724:	f8d4 33b0 	ldr.w	r3, [r4, #944]	@ 0x3b0
 800c728:	2b02      	cmp	r3, #2
 800c72a:	dd02      	ble.n	800c732 <executeButton+0x102>
 800c72c:	3b01      	subs	r3, #1
	   if (AGC_Gain < 31) AGC_Gain ++;
 800c72e:	f8c4 33b0 	str.w	r3, [r4, #944]	@ 0x3b0
	   show_short(405, 255, AGC_Gain );
 800c732:	f894 23b0 	ldrb.w	r2, [r4, #944]	@ 0x3b0
 800c736:	f240 1095 	movw	r0, #405	@ 0x195
 800c73a:	21ff      	movs	r1, #255	@ 0xff
 800c73c:	f7fe f9d8 	bl	800aaf0 <show_short>
	   Set_PGA_Gain(AGC_Gain);
 800c740:	f8d4 03b0 	ldr.w	r0, [r4, #944]	@ 0x3b0
}
 800c744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	   Set_PGA_Gain(AGC_Gain);
 800c748:	f7fd bec0 	b.w	800a4cc <Set_PGA_Gain>
	   if (AGC_Gain < 31) AGC_Gain ++;
 800c74c:	4c4c      	ldr	r4, [pc, #304]	@ (800c880 <executeButton+0x250>)
 800c74e:	f8d4 33b0 	ldr.w	r3, [r4, #944]	@ 0x3b0
 800c752:	2b1e      	cmp	r3, #30
 800c754:	dced      	bgt.n	800c732 <executeButton+0x102>
 800c756:	3301      	adds	r3, #1
 800c758:	e7e9      	b.n	800c72e <executeButton+0xfe>
	   if (cursor > 0) {
 800c75a:	4b4d      	ldr	r3, [pc, #308]	@ (800c890 <executeButton+0x260>)
 800c75c:	4c4d      	ldr	r4, [pc, #308]	@ (800c894 <executeButton+0x264>)
 800c75e:	8818      	ldrh	r0, [r3, #0]
 800c760:	b158      	cbz	r0, 800c77a <executeButton+0x14a>
	    cursor --;
 800c762:	3801      	subs	r0, #1
 800c764:	b280      	uxth	r0, r0
 800c766:	8018      	strh	r0, [r3, #0]
	    NCO_Frequency = (double) (cursor+ ft8_min_bin) * FFT_Resolution;
 800c768:	3030      	adds	r0, #48	@ 0x30
	    NCO_Frequency = (double) (cursor+ ft8_min_bin) * FFT_Resolution;
 800c76a:	f7f3 ff6b 	bl	8000644 <__aeabi_i2d>
 800c76e:	2200      	movs	r2, #0
 800c770:	4b49      	ldr	r3, [pc, #292]	@ (800c898 <executeButton+0x268>)
 800c772:	f7f3 ffd1 	bl	8000718 <__aeabi_dmul>
 800c776:	e9c4 0100 	strd	r0, r1, [r4]
	    show_variable(400, 25,(int)  NCO_Frequency );
 800c77a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c77e:	f7f4 fa7b 	bl	8000c78 <__aeabi_d2iz>
 800c782:	2119      	movs	r1, #25
 800c784:	4602      	mov	r2, r0
 800c786:	f44f 70c8 	mov.w	r0, #400	@ 0x190
}
 800c78a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    show_variable(400, 25,(int)  NCO_Frequency );
 800c78e:	f7fe b995 	b.w	800aabc <show_variable>
	    if (cursor <= (ft8_buffer - ft8_min_bin -2)) {  //limits highest NCO frequency to 3875 hz
 800c792:	4b3f      	ldr	r3, [pc, #252]	@ (800c890 <executeButton+0x260>)
 800c794:	4c3f      	ldr	r4, [pc, #252]	@ (800c894 <executeButton+0x264>)
 800c796:	8818      	ldrh	r0, [r3, #0]
 800c798:	f5b0 7faf 	cmp.w	r0, #350	@ 0x15e
 800c79c:	d8ed      	bhi.n	800c77a <executeButton+0x14a>
	    cursor ++;
 800c79e:	1c42      	adds	r2, r0, #1
	    NCO_Frequency = (double) (cursor+ ft8_min_bin) * FFT_Resolution;
 800c7a0:	3031      	adds	r0, #49	@ 0x31
	    cursor ++;
 800c7a2:	801a      	strh	r2, [r3, #0]
	    NCO_Frequency = (double) (cursor+ ft8_min_bin) * FFT_Resolution;
 800c7a4:	b280      	uxth	r0, r0
 800c7a6:	e7e0      	b.n	800c76a <executeButton+0x13a>
	   if (!sButtonData[12].state)
 800c7a8:	4b35      	ldr	r3, [pc, #212]	@ (800c880 <executeButton+0x250>)
 800c7aa:	4d36      	ldr	r5, [pc, #216]	@ (800c884 <executeButton+0x254>)
 800c7ac:	f8d3 4194 	ldr.w	r4, [r3, #404]	@ 0x194
 800c7b0:	4e36      	ldr	r6, [pc, #216]	@ (800c88c <executeButton+0x25c>)
 800c7b2:	b93c      	cbnz	r4, 800c7c4 <executeButton+0x194>
	   tune_Off_sequence();
 800c7b4:	f001 fa14 	bl	800dbe0 <tune_Off_sequence>
	   Arm_Tune = 0;
 800c7b8:	612c      	str	r4, [r5, #16]
  	   xmit_flag = 0;
 800c7ba:	6034      	str	r4, [r6, #0]
}
 800c7bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  	   receive_sequence();
 800c7c0:	f7ff bf16 	b.w	800c5f0 <receive_sequence>
		xmit_flag = 1;
 800c7c4:	2401      	movs	r4, #1
  	   	xmit_sequence();
 800c7c6:	f7ff ff23 	bl	800c610 <xmit_sequence>
  	   	HAL_Delay(10);
 800c7ca:	200a      	movs	r0, #10
 800c7cc:	f000 ff46 	bl	800d65c <HAL_Delay>
		xmit_flag = 1;
 800c7d0:	6034      	str	r4, [r6, #0]
		tune_On_sequence();
 800c7d2:	f001 fa99 	bl	800dd08 <tune_On_sequence>
		Arm_Tune = 1;
 800c7d6:	612c      	str	r4, [r5, #16]
 800c7d8:	e773      	b.n	800c6c2 <executeButton+0x92>
	   Options_SetValue(0, BandIndex);
 800c7da:	4d2a      	ldr	r5, [pc, #168]	@ (800c884 <executeButton+0x254>)
 800c7dc:	2000      	movs	r0, #0
		start_freq = sBand_Data[BandIndex].Frequency;
 800c7de:	4c28      	ldr	r4, [pc, #160]	@ (800c880 <executeButton+0x250>)
	   Options_SetValue(0, BandIndex);
 800c7e0:	f9b5 1000 	ldrsh.w	r1, [r5]
 800c7e4:	f001 f926 	bl	800da34 <Options_SetValue>
		Options_StoreValue(0);
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	f001 f96b 	bl	800dac4 <Options_StoreValue>
		start_freq = sBand_Data[BandIndex].Frequency;
 800c7ee:	682b      	ldr	r3, [r5, #0]
		show_wide(380, 0,(int) start_freq );
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	f44f 70be 	mov.w	r0, #380	@ 0x17c
		start_freq = sBand_Data[BandIndex].Frequency;
 800c7f6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c7fa:	f8b3 2380 	ldrh.w	r2, [r3, #896]	@ 0x380
 800c7fe:	80aa      	strh	r2, [r5, #4]
		show_wide(380, 0,(int) start_freq );
 800c800:	f7fe f942 	bl	800aa88 <show_wide>
		set_Rcvr_Freq();
 800c804:	f001 faac 	bl	800dd60 <set_Rcvr_Freq>
		HAL_Delay(10);
 800c808:	200a      	movs	r0, #10
 800c80a:	f000 ff27 	bl	800d65c <HAL_Delay>
		sButtonData[13].state = 1;
 800c80e:	2301      	movs	r3, #1
		drawButton(13);
 800c810:	200d      	movs	r0, #13
		sButtonData[13].state = 1;
 800c812:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
		drawButton(13);
 800c816:	f7ff fcff 	bl	800c218 <drawButton>
		HAL_Delay(10);
 800c81a:	200a      	movs	r0, #10
 800c81c:	f000 ff1e 	bl	800d65c <HAL_Delay>
		sButtonData[13].state = 0;
 800c820:	2300      	movs	r3, #0
		drawButton(13);
 800c822:	200d      	movs	r0, #13
		sButtonData[13].state = 0;
 800c824:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
		drawButton(13);
 800c828:	e735      	b.n	800c696 <executeButton+0x66>
	   set_RTC_to_TimeEdit();
 800c82a:	f7fd ff8d 	bl	800a748 <set_RTC_to_TimeEdit>
	   HAL_Delay(10);
 800c82e:	200a      	movs	r0, #10
 800c830:	f000 ff14 	bl	800d65c <HAL_Delay>
	   		sButtonData[14].state = 1;
 800c834:	4c12      	ldr	r4, [pc, #72]	@ (800c880 <executeButton+0x250>)
 800c836:	2301      	movs	r3, #1
	   		drawButton(14);
 800c838:	200e      	movs	r0, #14
	   		sButtonData[14].state = 1;
 800c83a:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
	   		drawButton(14);
 800c83e:	f7ff fceb 	bl	800c218 <drawButton>
	   		HAL_Delay(10);
 800c842:	200a      	movs	r0, #10
 800c844:	f000 ff0a 	bl	800d65c <HAL_Delay>
	   		sButtonData[14].state = 0;
 800c848:	2300      	movs	r3, #0
	   		drawButton(14);
 800c84a:	200e      	movs	r0, #14
	   		sButtonData[14].state = 0;
 800c84c:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
	   		drawButton(14);
 800c850:	e721      	b.n	800c696 <executeButton+0x66>
	   set_RTC_to_DateEdit();
 800c852:	f7fd ffb7 	bl	800a7c4 <set_RTC_to_DateEdit>
	   HAL_Delay(10);
 800c856:	200a      	movs	r0, #10
 800c858:	f000 ff00 	bl	800d65c <HAL_Delay>
	   		sButtonData[27].state = 1;
 800c85c:	4c08      	ldr	r4, [pc, #32]	@ (800c880 <executeButton+0x250>)
 800c85e:	2301      	movs	r3, #1
	   		drawButton(27);
 800c860:	201b      	movs	r0, #27
	   		sButtonData[27].state = 1;
 800c862:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
	   		drawButton(27);
 800c866:	f7ff fcd7 	bl	800c218 <drawButton>
	   		HAL_Delay(10);
 800c86a:	200a      	movs	r0, #10
 800c86c:	f000 fef6 	bl	800d65c <HAL_Delay>
	   		sButtonData[27].state = 0;
 800c870:	2300      	movs	r3, #0
	   		drawButton(27);
 800c872:	201b      	movs	r0, #27
	   		sButtonData[27].state = 0;
 800c874:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
	   		drawButton(27);
 800c878:	e70d      	b.n	800c696 <executeButton+0x66>
 800c87a:	bf00      	nop
 800c87c:	20001be4 	.word	0x20001be4
 800c880:	20000c40 	.word	0x20000c40
 800c884:	200439c8 	.word	0x200439c8
 800c888:	200452b0 	.word	0x200452b0
 800c88c:	2003e944 	.word	0x2003e944
 800c890:	20001ba2 	.word	0x20001ba2
 800c894:	2003a508 	.word	0x2003a508
 800c898:	40190000 	.word	0x40190000

0800c89c <checkButton>:
void checkButton(void)  {
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	4c13      	ldr	r4, [pc, #76]	@ (800c8ec <checkButton+0x50>)
 800c8a0:	2500      	movs	r5, #0
    		  if (testButton( sButtonData[i].x,sButtonData[i].y,sButtonData[i].w,sButtonData[i].h) == 1)  {
 800c8a2:	8be3      	ldrh	r3, [r4, #30]
 800c8a4:	8ba2      	ldrh	r2, [r4, #28]
 800c8a6:	8b61      	ldrh	r1, [r4, #26]
 800c8a8:	8b20      	ldrh	r0, [r4, #24]
 800c8aa:	f7ff fd93 	bl	800c3d4 <testButton>
 800c8ae:	2801      	cmp	r0, #1
 800c8b0:	d112      	bne.n	800c8d8 <checkButton+0x3c>
    			  	switch (sButtonData[i].Active){
 800c8b2:	68e3      	ldr	r3, [r4, #12]
 800c8b4:	b2ae      	uxth	r6, r5
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d00b      	beq.n	800c8d2 <checkButton+0x36>
 800c8ba:	2b03      	cmp	r3, #3
 800c8bc:	d011      	beq.n	800c8e2 <checkButton+0x46>
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d10a      	bne.n	800c8d8 <checkButton+0x3c>
		    	    sButtonData[i].state =  !sButtonData[i].state;
 800c8c2:	6963      	ldr	r3, [r4, #20]
		    	    drawButton(i);
 800c8c4:	4630      	mov	r0, r6
		    	    sButtonData[i].state =  !sButtonData[i].state;
 800c8c6:	fab3 f383 	clz	r3, r3
 800c8ca:	095b      	lsrs	r3, r3, #5
 800c8cc:	6163      	str	r3, [r4, #20]
		    	    drawButton(i);
 800c8ce:	f7ff fca3 	bl	800c218 <drawButton>
		    	    executeButton(i);
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	f7ff feac 	bl	800c630 <executeButton>
    		  for (i=0;i<numButtons;i++){
 800c8d8:	3501      	adds	r5, #1
 800c8da:	3420      	adds	r4, #32
 800c8dc:	2d1c      	cmp	r5, #28
 800c8de:	d1e0      	bne.n	800c8a2 <checkButton+0x6>
      	  }
 800c8e0:	bd70      	pop	{r4, r5, r6, pc}
					executeCalibrationButton (i);
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f7ff fcce 	bl	800c284 <executeCalibrationButton>
					break;
 800c8e8:	e7f6      	b.n	800c8d8 <checkButton+0x3c>
 800c8ea:	bf00      	nop
 800c8ec:	20000c40 	.word	0x20000c40

0800c8f0 <start_Si5351>:

uint64_t F_boot = 11229600000ULL;

void start_Si5351(void){

	  init(SI5351_CRYSTAL_LOAD_0PF, SI5351_XTAL_FREQ, 0);
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	4912      	ldr	r1, [pc, #72]	@ (800c93c <start_Si5351+0x4c>)
void start_Si5351(void){
 800c8f4:	b508      	push	{r3, lr}
	  init(SI5351_CRYSTAL_LOAD_0PF, SI5351_XTAL_FREQ, 0);
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	f7fe ffec 	bl	800b8d4 <init>

	  drive_strength(SI5351_CLK0, SI5351_DRIVE_8MA);
 800c8fc:	2103      	movs	r1, #3
 800c8fe:	2000      	movs	r0, #0
 800c900:	f7fe fddf 	bl	800b4c2 <drive_strength>

	  drive_strength(SI5351_CLK1, SI5351_DRIVE_2MA);
 800c904:	2100      	movs	r1, #0
 800c906:	2001      	movs	r0, #1
 800c908:	f7fe fddb 	bl	800b4c2 <drive_strength>

	  drive_strength(SI5351_CLK2, SI5351_DRIVE_2MA);
 800c90c:	2100      	movs	r1, #0
 800c90e:	2002      	movs	r0, #2
 800c910:	f7fe fdd7 	bl	800b4c2 <drive_strength>

      set_freq(F_boot, SI5351_CLK1);
 800c914:	4b0a      	ldr	r3, [pc, #40]	@ (800c940 <start_Si5351+0x50>)
 800c916:	2201      	movs	r2, #1
 800c918:	e9d3 01ee 	ldrd	r0, r1, [r3, #952]	@ 0x3b8
 800c91c:	f7ff fb14 	bl	800bf48 <set_freq>
      HAL_Delay(10);
 800c920:	200a      	movs	r0, #10
 800c922:	f000 fe9b 	bl	800d65c <HAL_Delay>
      output_enable(SI5351_CLK1, 1);
 800c926:	2101      	movs	r1, #1
 800c928:	4608      	mov	r0, r1
 800c92a:	f7fe fdb5 	bl	800b498 <output_enable>

      HAL_Delay(20);
 800c92e:	2014      	movs	r0, #20
 800c930:	f000 fe94 	bl	800d65c <HAL_Delay>

	  set_Rcvr_Freq();

}
 800c934:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  set_Rcvr_Freq();
 800c938:	f001 ba12 	b.w	800dd60 <set_Rcvr_Freq>
 800c93c:	018cba80 	.word	0x018cba80
 800c940:	20000c40 	.word	0x20000c40

0800c944 <FT8_Sync>:



void FT8_Sync(void) {
 800c944:	b508      	push	{r3, lr}
	start_time = HAL_GetTick();
 800c946:	f7f7 fa4f 	bl	8003de8 <HAL_GetTick>
 800c94a:	4b05      	ldr	r3, [pc, #20]	@ (800c960 <FT8_Sync+0x1c>)
	ft8_flag = 1;
 800c94c:	4a05      	ldr	r2, [pc, #20]	@ (800c964 <FT8_Sync+0x20>)
	FT_8_counter = 0;
 800c94e:	2100      	movs	r1, #0
	start_time = HAL_GetTick();
 800c950:	6018      	str	r0, [r3, #0]
	ft8_flag = 1;
 800c952:	2301      	movs	r3, #1
 800c954:	6013      	str	r3, [r2, #0]
	FT_8_counter = 0;
 800c956:	4a04      	ldr	r2, [pc, #16]	@ (800c968 <FT8_Sync+0x24>)
 800c958:	6011      	str	r1, [r2, #0]
	ft8_marker = 1;
 800c95a:	4a04      	ldr	r2, [pc, #16]	@ (800c96c <FT8_Sync+0x28>)
 800c95c:	6013      	str	r3, [r2, #0]
	}
 800c95e:	bd08      	pop	{r3, pc}
 800c960:	20044de8 	.word	0x20044de8
 800c964:	2000952c 	.word	0x2000952c
 800c968:	20009530 	.word	0x20009530
 800c96c:	2003a500 	.word	0x2003a500

0800c970 <display_messages>:


    return num_decoded;
}

void display_messages(int decoded_messages){
 800c970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	char message[kMax_message_length];
	char CQ[] = "CQ";
 800c974:	4b2c      	ldr	r3, [pc, #176]	@ (800ca28 <display_messages+0xb8>)
void display_messages(int decoded_messages){
 800c976:	b089      	sub	sp, #36	@ 0x24
	char CQ[] = "CQ";
 800c978:	4c2c      	ldr	r4, [pc, #176]	@ (800ca2c <display_messages+0xbc>)
void display_messages(int decoded_messages){
 800c97a:	4607      	mov	r7, r0
	char CQ[] = "CQ";
 800c97c:	881a      	ldrh	r2, [r3, #0]

	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c97e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
	char CQ[] = "CQ";
 800c982:	789b      	ldrb	r3, [r3, #2]
 800c984:	f504 668c 	add.w	r6, r4, #1120	@ 0x460
 800c988:	f8ad 2008 	strh.w	r2, [sp, #8]
	    BSP_LCD_FillRect(0, FFT_H, 240, 200);
		BSP_LCD_SetFont (&Font16);

		for (int i = 0; i<decoded_messages && i<message_limit; i++ ){
 800c98c:	2500      	movs	r5, #0
	char CQ[] = "CQ";
 800c98e:	f88d 300a 	strb.w	r3, [sp, #10]
		for (int i = 0; i<decoded_messages && i<message_limit; i++ ){
 800c992:	46b0      	mov	r8, r6
	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c994:	f7f5 ff94 	bl	80028c0 <BSP_LCD_SetTextColor>
			sprintf(message,"%s %s %s", new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800c998:	f8df 9098 	ldr.w	r9, [pc, #152]	@ 800ca34 <display_messages+0xc4>
	    BSP_LCD_FillRect(0, FFT_H, 240, 200);
 800c99c:	23c8      	movs	r3, #200	@ 0xc8
 800c99e:	22f0      	movs	r2, #240	@ 0xf0
 800c9a0:	2128      	movs	r1, #40	@ 0x28
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	f7f6 f8ea 	bl	8002b7c <BSP_LCD_FillRect>
		BSP_LCD_SetFont (&Font16);
 800c9a8:	4821      	ldr	r0, [pc, #132]	@ (800ca30 <display_messages+0xc0>)
 800c9aa:	f7f5 ffa1 	bl	80028f0 <BSP_LCD_SetFont>
		for (int i = 0; i<decoded_messages && i<message_limit; i++ ){
 800c9ae:	42bd      	cmp	r5, r7
 800c9b0:	da01      	bge.n	800c9b6 <display_messages+0x46>
 800c9b2:	2d0a      	cmp	r5, #10
 800c9b4:	d102      	bne.n	800c9bc <display_messages+0x4c>
 800c9b6:	2428      	movs	r4, #40	@ 0x28
 800c9b8:	2500      	movs	r5, #0
 800c9ba:	e02b      	b.n	800ca14 <display_messages+0xa4>
			sprintf(message,"%s %s %s", new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800c9bc:	f104 031c 	add.w	r3, r4, #28
 800c9c0:	4622      	mov	r2, r4
 800c9c2:	4649      	mov	r1, r9
 800c9c4:	a803      	add	r0, sp, #12
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	f104 030e 	add.w	r3, r4, #14
 800c9cc:	f001 fc44 	bl	800e258 <siprintf>

			strcpy(display[i].message, message);
 800c9d0:	a903      	add	r1, sp, #12
 800c9d2:	4640      	mov	r0, r8
		for (int i = 0; i<decoded_messages && i<message_limit; i++ ){
 800c9d4:	3501      	adds	r5, #1
			strcpy(display[i].message, message);
 800c9d6:	f001 fdb6 	bl	800e546 <strcpy>

			if(strcmp(CQ, new_decoded[i].field1) == 0 )
 800c9da:	4621      	mov	r1, r4
 800c9dc:	a802      	add	r0, sp, #8
 800c9de:	3438      	adds	r4, #56	@ 0x38
 800c9e0:	f7f3 fc76 	bl	80002d0 <strcmp>
 800c9e4:	fab0 f080 	clz	r0, r0
 800c9e8:	f108 0818 	add.w	r8, r8, #24
 800c9ec:	0940      	lsrs	r0, r0, #5
 800c9ee:	f848 0c04 	str.w	r0, [r8, #-4]
		for (int i = 0; i<decoded_messages && i<message_limit; i++ ){
 800c9f2:	e7dc      	b.n	800c9ae <display_messages+0x3e>
				display[i].text_color = 0;

		 }

		for (int j = 0; j<decoded_messages && j<message_limit; j++){
		if(display[j].text_color == 0)
 800c9f4:	6973      	ldr	r3, [r6, #20]
 800c9f6:	b9a3      	cbnz	r3, 800ca22 <display_messages+0xb2>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c9f8:	f04f 30ff 	mov.w	r0, #4294967295
		else
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800c9fc:	f7f5 ff60 	bl	80028c0 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, 40+j*20, (const uint8_t*) display[j].message,0x03);
 800ca00:	4621      	mov	r1, r4
 800ca02:	3414      	adds	r4, #20
 800ca04:	4632      	mov	r2, r6
		for (int j = 0; j<decoded_messages && j<message_limit; j++){
 800ca06:	3501      	adds	r5, #1
 800ca08:	3618      	adds	r6, #24
 800ca0a:	b2a4      	uxth	r4, r4
		BSP_LCD_DisplayStringAt(0, 40+j*20, (const uint8_t*) display[j].message,0x03);
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f7f5 fff6 	bl	8002a00 <BSP_LCD_DisplayStringAt>
		for (int j = 0; j<decoded_messages && j<message_limit; j++){
 800ca14:	42bd      	cmp	r5, r7
 800ca16:	da01      	bge.n	800ca1c <display_messages+0xac>
 800ca18:	2d0a      	cmp	r5, #10
 800ca1a:	d1eb      	bne.n	800c9f4 <display_messages+0x84>

		}
}
 800ca1c:	b009      	add	sp, #36	@ 0x24
 800ca1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800ca22:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800ca26:	e7e9      	b.n	800c9fc <display_messages+0x8c>
 800ca28:	080557db 	.word	0x080557db
 800ca2c:	200439e0 	.word	0x200439e0
 800ca30:	20000030 	.word	0x20000030
 800ca34:	080559b7 	.word	0x080559b7

0800ca38 <validate_locator>:
int validate_locator(char locator[]) {

	uint8_t A1, A2, N1, N2;
	uint8_t test = 0;

	A1 = locator[0] - 65;
 800ca38:	7803      	ldrb	r3, [r0, #0]
	A2 = locator[1] - 65;
	N1 = locator[2] - 48;
 800ca3a:	7881      	ldrb	r1, [r0, #2]
	N2= locator [3] - 48;

	if (A1 >= 0 && A1 <= 17) test++;
 800ca3c:	3b41      	subs	r3, #65	@ 0x41
	N2= locator [3] - 48;
 800ca3e:	78c2      	ldrb	r2, [r0, #3]
	if (A2 > 0 && A2 < 17) test++; //block RR73 Artic and Anartica
 800ca40:	7840      	ldrb	r0, [r0, #1]
	N1 = locator[2] - 48;
 800ca42:	3930      	subs	r1, #48	@ 0x30
	if (A1 >= 0 && A1 <= 17) test++;
 800ca44:	2b11      	cmp	r3, #17
	N2= locator [3] - 48;
 800ca46:	f1a2 0230 	sub.w	r2, r2, #48	@ 0x30
	if (A2 > 0 && A2 < 17) test++; //block RR73 Artic and Anartica
 800ca4a:	f1a0 0042 	sub.w	r0, r0, #66	@ 0x42
	N1 = locator[2] - 48;
 800ca4e:	b2c9      	uxtb	r1, r1
	if (A1 >= 0 && A1 <= 17) test++;
 800ca50:	bf94      	ite	ls
 800ca52:	2301      	movls	r3, #1
 800ca54:	2300      	movhi	r3, #0
	if (A2 > 0 && A2 < 17) test++; //block RR73 Artic and Anartica
 800ca56:	280f      	cmp	r0, #15
	N2= locator [3] - 48;
 800ca58:	b2d2      	uxtb	r2, r2
	if (A2 > 0 && A2 < 17) test++; //block RR73 Artic and Anartica
 800ca5a:	bf98      	it	ls
 800ca5c:	3301      	addls	r3, #1
	if (N1 >= 0 && N1 <= 9) test++;
 800ca5e:	2909      	cmp	r1, #9
 800ca60:	bf9c      	itt	ls
 800ca62:	3301      	addls	r3, #1
 800ca64:	b2db      	uxtbls	r3, r3
	if (N2 >= 0 && N2 <= 9) test++;
 800ca66:	2a09      	cmp	r2, #9
 800ca68:	d803      	bhi.n	800ca72 <validate_locator+0x3a>

	if (test == 4) return 1;
 800ca6a:	3b03      	subs	r3, #3
 800ca6c:	4258      	negs	r0, r3
 800ca6e:	4158      	adcs	r0, r3
 800ca70:	4770      	bx	lr
	else
	return 0;
 800ca72:	2000      	movs	r0, #0
}
 800ca74:	4770      	bx	lr
	...

0800ca78 <ft8_decode>:
int ft8_decode(void) {
 800ca78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7c:	ed2d 8b02 	vpush	{d8}
 800ca80:	b0c5      	sub	sp, #276	@ 0x114
    int num_candidates = find_sync(export_fft_power, ft8_msg_samples, ft8_buffer, kCostas_map, kMax_candidates, candidate_list, kMin_score);
 800ca82:	2328      	movs	r3, #40	@ 0x28
 800ca84:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ca88:	215b      	movs	r1, #91	@ 0x5b
int ft8_decode(void) {
 800ca8a:	af04      	add	r7, sp, #16
    int num_candidates = find_sync(export_fft_power, ft8_msg_samples, ft8_buffer, kCostas_map, kMax_candidates, candidate_list, kMin_score);
 800ca8c:	9302      	str	r3, [sp, #8]
 800ca8e:	2314      	movs	r3, #20
 800ca90:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 800ca94:	4887      	ldr	r0, [pc, #540]	@ (800ccb4 <ft8_decode+0x23c>)
 800ca96:	9300      	str	r3, [sp, #0]
    for (int idx = 0; idx < num_candidates; ++idx) {
 800ca98:	f04f 0900 	mov.w	r9, #0
    int num_candidates = find_sync(export_fft_power, ft8_msg_samples, ft8_buffer, kCostas_map, kMax_candidates, candidate_list, kMin_score);
 800ca9c:	9401      	str	r4, [sp, #4]
 800ca9e:	4b86      	ldr	r3, [pc, #536]	@ (800ccb8 <ft8_decode+0x240>)
    int     num_decoded = 0;
 800caa0:	46c8      	mov	r8, r9
    int num_candidates = find_sync(export_fft_power, ft8_msg_samples, ft8_buffer, kCostas_map, kMax_candidates, candidate_list, kMin_score);
 800caa2:	f7fa fcab 	bl	80073fc <find_sync>
    char    decoded[kMax_decoded_messages][kMax_message_length];
 800caa6:	b0e4      	sub	sp, #400	@ 0x190
        float   log174[N];
 800caa8:	f8df b228 	ldr.w	fp, [pc, #552]	@ 800ccd4 <ft8_decode+0x25c>
    char    decoded[kMax_decoded_messages][kMax_message_length];
 800caac:	ab04      	add	r3, sp, #16
    int num_candidates = find_sync(export_fft_power, ft8_msg_samples, ft8_buffer, kCostas_map, kMax_candidates, candidate_list, kMin_score);
 800caae:	6078      	str	r0, [r7, #4]
    char    decoded[kMax_decoded_messages][kMax_message_length];
 800cab0:	60bb      	str	r3, [r7, #8]
    for (int idx = 0; idx < num_candidates; ++idx) {
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4599      	cmp	r9, r3
 800cab6:	db07      	blt.n	800cac8 <ft8_decode+0x50>
}
 800cab8:	4640      	mov	r0, r8
 800caba:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 800cabe:	46bd      	mov	sp, r7
 800cac0:	ecbd 8b02 	vpop	{d8}
 800cac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Candidate cand = candidate_list[idx];
 800cac8:	6820      	ldr	r0, [r4, #0]
 800caca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cace:	6861      	ldr	r1, [r4, #4]
        int     n_errors = 0;
 800cad0:	2500      	movs	r5, #0
    for (int idx = 0; idx < num_candidates; ++idx) {
 800cad2:	f8c7 d00c 	str.w	sp, [r7, #12]
        Candidate cand = candidate_list[idx];
 800cad6:	c303      	stmia	r3!, {r0, r1}
 800cad8:	f9b4 3000 	ldrsh.w	r3, [r4]
        extract_likelihood(export_fft_power, ft8_buffer, cand, kGray_map, log174);
 800cadc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800cae0:	4874      	ldr	r0, [pc, #464]	@ (800ccb4 <ft8_decode+0x23c>)
        Candidate cand = candidate_list[idx];
 800cae2:	603b      	str	r3, [r7, #0]
 800cae4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800cae8:	ee08 3a10 	vmov	s16, r3
 800caec:	79e3      	ldrb	r3, [r4, #7]
 800caee:	ee08 3a90 	vmov	s17, r3
        float   log174[N];
 800caf2:	f8db 3000 	ldr.w	r3, [fp]
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	3307      	adds	r3, #7
 800cafa:	f023 0307 	bic.w	r3, r3, #7
 800cafe:	ebad 0d03 	sub.w	sp, sp, r3
        extract_likelihood(export_fft_power, ft8_buffer, cand, kGray_map, log174);
 800cb02:	4b6e      	ldr	r3, [pc, #440]	@ (800ccbc <ft8_decode+0x244>)
        float   log174[N];
 800cb04:	ae04      	add	r6, sp, #16
        extract_likelihood(export_fft_power, ft8_buffer, cand, kGray_map, log174);
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	9601      	str	r6, [sp, #4]
 800cb0a:	e9d7 2309 	ldrd	r2, r3, [r7, #36]	@ 0x24
 800cb0e:	f7fa fd93 	bl	8007638 <extract_likelihood>
        uint8_t plain[N];
 800cb12:	f8db 3000 	ldr.w	r3, [fp]
        bp_decode(log174, kLDPC_iterations, plain, &n_errors);
 800cb16:	2114      	movs	r1, #20
 800cb18:	4630      	mov	r0, r6
        uint8_t plain[N];
 800cb1a:	3307      	adds	r3, #7
        int     n_errors = 0;
 800cb1c:	613d      	str	r5, [r7, #16]
        uint8_t plain[N];
 800cb1e:	f023 0307 	bic.w	r3, r3, #7
 800cb22:	ebad 0d03 	sub.w	sp, sp, r3
        bp_decode(log174, kLDPC_iterations, plain, &n_errors);
 800cb26:	f107 0310 	add.w	r3, r7, #16
        uint8_t plain[N];
 800cb2a:	f10d 0a10 	add.w	sl, sp, #16
        bp_decode(log174, kLDPC_iterations, plain, &n_errors);
 800cb2e:	4652      	mov	r2, sl
 800cb30:	f7fa fffe 	bl	8007b30 <bp_decode>
        if (n_errors > 0)    continue;
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	42ab      	cmp	r3, r5
 800cb38:	f300 80aa 	bgt.w	800cc90 <ft8_decode+0x218>
        uint8_t a91[K_BYTES];
 800cb3c:	4b60      	ldr	r3, [pc, #384]	@ (800ccc0 <ft8_decode+0x248>)
        pack_bits(plain, K, a91);
 800cb3e:	4650      	mov	r0, sl
        uint8_t a91[K_BYTES];
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3307      	adds	r3, #7
 800cb44:	f023 0307 	bic.w	r3, r3, #7
 800cb48:	ebad 0d03 	sub.w	sp, sp, r3
        pack_bits(plain, K, a91);
 800cb4c:	4b5d      	ldr	r3, [pc, #372]	@ (800ccc4 <ft8_decode+0x24c>)
        uint8_t a91[K_BYTES];
 800cb4e:	ae04      	add	r6, sp, #16
        pack_bits(plain, K, a91);
 800cb50:	6819      	ldr	r1, [r3, #0]
 800cb52:	4632      	mov	r2, r6
 800cb54:	f7fa ffca 	bl	8007aec <pack_bits>
        uint16_t chksum = ((a91[9] & 0x07) << 11) | (a91[10] << 3) | (a91[11] >> 5);
 800cb58:	f89d a01b 	ldrb.w	sl, [sp, #27]
 800cb5c:	f89d 3019 	ldrb.w	r3, [sp, #25]
        uint16_t chksum2 = crc(a91, 96 - 14);
 800cb60:	2152      	movs	r1, #82	@ 0x52
        uint16_t chksum = ((a91[9] & 0x07) << 11) | (a91[10] << 3) | (a91[11] >> 5);
 800cb62:	f89d 201a 	ldrb.w	r2, [sp, #26]
 800cb66:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
        uint16_t chksum2 = crc(a91, 96 - 14);
 800cb6a:	4630      	mov	r0, r6
        a91[10] = 0;
 800cb6c:	f88d 501a 	strb.w	r5, [sp, #26]
        uint16_t chksum = ((a91[9] & 0x07) << 11) | (a91[10] << 3) | (a91[11] >> 5);
 800cb70:	ea4a 0ac2 	orr.w	sl, sl, r2, lsl #3
        a91[11] = 0;
 800cb74:	f88d 501b 	strb.w	r5, [sp, #27]
        uint16_t chksum = ((a91[9] & 0x07) << 11) | (a91[10] << 3) | (a91[11] >> 5);
 800cb78:	02da      	lsls	r2, r3, #11
        a91[9] &= 0xF8;
 800cb7a:	f023 0307 	bic.w	r3, r3, #7
        uint16_t chksum = ((a91[9] & 0x07) << 11) | (a91[10] << 3) | (a91[11] >> 5);
 800cb7e:	f402 5260 	and.w	r2, r2, #14336	@ 0x3800
        a91[9] &= 0xF8;
 800cb82:	f88d 3019 	strb.w	r3, [sp, #25]
        uint16_t chksum = ((a91[9] & 0x07) << 11) | (a91[10] << 3) | (a91[11] >> 5);
 800cb86:	ea4a 0a02 	orr.w	sl, sl, r2
        uint16_t chksum2 = crc(a91, 96 - 14);
 800cb8a:	f7fa fea7 	bl	80078dc <crc>
        if (chksum != chksum2)   continue;
 800cb8e:	4582      	cmp	sl, r0
 800cb90:	d17e      	bne.n	800cc90 <ft8_decode+0x218>
        int rc = unpack77_fields(a91, field1, field2, field3);
 800cb92:	f107 0a1c 	add.w	sl, r7, #28
 800cb96:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800cb9a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800cb9e:	4630      	mov	r0, r6
 800cba0:	4653      	mov	r3, sl
 800cba2:	f7fb fdd5 	bl	8008750 <unpack77_fields>
        if (rc < 0) continue;
 800cba6:	42a8      	cmp	r0, r5
 800cba8:	db72      	blt.n	800cc90 <ft8_decode+0x218>
            if (0 == strcmp(decoded[i], message)) {
 800cbaa:	2614      	movs	r6, #20
        sprintf(message,"%s %s %s ",field1, field2, field3);
 800cbac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cbb0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800cbb4:	4944      	ldr	r1, [pc, #272]	@ (800ccc8 <ft8_decode+0x250>)
 800cbb6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800cbba:	f8cd a000 	str.w	sl, [sp]
 800cbbe:	f001 fb4b 	bl	800e258 <siprintf>
        for (int i = 0; i < num_decoded; ++i) {
 800cbc2:	45a8      	cmp	r8, r5
 800cbc4:	d16a      	bne.n	800cc9c <ft8_decode+0x224>
        if (!found && num_decoded < kMax_decoded_messages) {
 800cbc6:	f1b8 0f13 	cmp.w	r8, #19
 800cbca:	dc61      	bgt.n	800cc90 <ft8_decode+0x218>
            strcpy(decoded[num_decoded], message);
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	2014      	movs	r0, #20
 800cbd0:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
        float freq_hz  = (  (float)    cand.freq_offset +  (float)    cand.freq_sub / 2.0f) * fsk_dev;
 800cbd4:	eef8 8a68 	vcvt.f32.u32	s17, s17
            strcpy(decoded[num_decoded], message);
 800cbd8:	fb00 3008 	mla	r0, r0, r8, r3
        float freq_hz  = (  (float)    cand.freq_offset +  (float)    cand.freq_sub / 2.0f) * fsk_dev;
 800cbdc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
            strcpy(decoded[num_decoded], message);
 800cbe0:	f001 fcb1 	bl	800e546 <strcpy>
        float freq_hz  = (  (float)    cand.freq_offset +  (float)    cand.freq_sub / 2.0f) * fsk_dev;
 800cbe4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
            new_decoded[num_decoded].sync_score = cand.score;
 800cbe8:	2538      	movs	r5, #56	@ 0x38
 800cbea:	4e38      	ldr	r6, [pc, #224]	@ (800cccc <ft8_decode+0x254>)
 800cbec:	683a      	ldr	r2, [r7, #0]
            strcpy(new_decoded[num_decoded].field1, field1);
 800cbee:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
        float freq_hz  = (  (float)    cand.freq_offset +  (float)    cand.freq_sub / 2.0f) * fsk_dev;
 800cbf2:	eea8 8aa7 	vfma.f32	s16, s17, s15
            new_decoded[num_decoded].sync_score = cand.score;
 800cbf6:	fb05 f508 	mul.w	r5, r5, r8
        float freq_hz  = (  (float)    cand.freq_offset +  (float)    cand.freq_sub / 2.0f) * fsk_dev;
 800cbfa:	eef1 7a09 	vmov.f32	s15, #25	@ 0x40c80000  6.250
            ++num_decoded;
 800cbfe:	f108 0801 	add.w	r8, r8, #1
            new_decoded[num_decoded].sync_score = cand.score;
 800cc02:	1973      	adds	r3, r6, r5
            strcpy(new_decoded[num_decoded].field1, field1);
 800cc04:	4618      	mov	r0, r3
            new_decoded[num_decoded].sync_score = cand.score;
 800cc06:	629a      	str	r2, [r3, #40]	@ 0x28
            strcpy(new_decoded[num_decoded].field1, field1);
 800cc08:	603b      	str	r3, [r7, #0]
        float freq_hz  = (  (float)    cand.freq_offset +  (float)    cand.freq_sub / 2.0f) * fsk_dev;
 800cc0a:	ee28 8a27 	vmul.f32	s16, s16, s15
            new_decoded[num_decoded].freq_hz = (int)freq_hz;
 800cc0e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800cc12:	ed83 8a09 	vstr	s16, [r3, #36]	@ 0x24
            strcpy(new_decoded[num_decoded].field1, field1);
 800cc16:	f001 fc96 	bl	800e546 <strcpy>
            strcpy(new_decoded[num_decoded].field2, field2);
 800cc1a:	f105 000e 	add.w	r0, r5, #14
 800cc1e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800cc22:	4430      	add	r0, r6
 800cc24:	f001 fc8f 	bl	800e546 <strcpy>
            strcpy(new_decoded[num_decoded].field3, field3);
 800cc28:	f105 021c 	add.w	r2, r5, #28
 800cc2c:	4651      	mov	r1, sl
			char Target_Locator[] = "    ";
 800cc2e:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 800ccd8 <ft8_decode+0x260>
            strcpy(new_decoded[num_decoded].field3, field3);
 800cc32:	4432      	add	r2, r6
				strcpy(new_decoded[num_decoded].target,Target_Locator );
 800cc34:	3530      	adds	r5, #48	@ 0x30
            strcpy(new_decoded[num_decoded].field3, field3);
 800cc36:	4610      	mov	r0, r2
 800cc38:	f001 fc85 	bl	800e546 <strcpy>
			raw_RSL = (float)new_decoded[num_decoded].sync_score;
 800cc3c:	683b      	ldr	r3, [r7, #0]
			display_RSL =(int)( (raw_RSL - 160 )) / 6;
 800cc3e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800ccd0 <ft8_decode+0x258>
            strcpy(new_decoded[num_decoded].field3, field3);
 800cc42:	4602      	mov	r2, r0
			raw_RSL = (float)new_decoded[num_decoded].sync_score;
 800cc44:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
			display_RSL =(int)( (raw_RSL - 160 )) / 6;
 800cc48:	2006      	movs	r0, #6
			raw_RSL = (float)new_decoded[num_decoded].sync_score;
 800cc4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			display_RSL =(int)( (raw_RSL - 160 )) / 6;
 800cc4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc56:	ee17 1a90 	vmov	r1, s15
 800cc5a:	fb91 f1f0 	sdiv	r1, r1, r0
			char Target_Locator[] = "    ";
 800cc5e:	f8da 0000 	ldr.w	r0, [sl]
			new_decoded[num_decoded].snr = display_RSL;
 800cc62:	62d9      	str	r1, [r3, #44]	@ 0x2c
			strcpy(Target_Locator, new_decoded[num_decoded].field3);
 800cc64:	4611      	mov	r1, r2
			char Target_Locator[] = "    ";
 800cc66:	f89a 3004 	ldrb.w	r3, [sl, #4]
 800cc6a:	6178      	str	r0, [r7, #20]
			strcpy(Target_Locator, new_decoded[num_decoded].field3);
 800cc6c:	f107 0014 	add.w	r0, r7, #20
			char Target_Locator[] = "    ";
 800cc70:	763b      	strb	r3, [r7, #24]
			strcpy(Target_Locator, new_decoded[num_decoded].field3);
 800cc72:	f001 fc68 	bl	800e546 <strcpy>
			if (validate_locator(Target_Locator)  == 1) {
 800cc76:	f107 0014 	add.w	r0, r7, #20
 800cc7a:	f7ff fedd 	bl	800ca38 <validate_locator>
 800cc7e:	4603      	mov	r3, r0
				strcpy(new_decoded[num_decoded].target,Target_Locator );
 800cc80:	1970      	adds	r0, r6, r5
			if (validate_locator(Target_Locator)  == 1) {
 800cc82:	2b01      	cmp	r3, #1
				strcpy(new_decoded[num_decoded].target,Target_Locator );
 800cc84:	bf0c      	ite	eq
 800cc86:	f107 0114 	addeq.w	r1, r7, #20
				strcpy(new_decoded[num_decoded].target,"    " );
 800cc8a:	4651      	movne	r1, sl
 800cc8c:	f001 fc5b 	bl	800e546 <strcpy>
    for (int idx = 0; idx < num_candidates; ++idx) {
 800cc90:	f109 0901 	add.w	r9, r9, #1
 800cc94:	3408      	adds	r4, #8
        if (n_errors > 0)    continue;
 800cc96:	f8d7 d00c 	ldr.w	sp, [r7, #12]
    for (int idx = 0; idx < num_candidates; ++idx) {
 800cc9a:	e70a      	b.n	800cab2 <ft8_decode+0x3a>
            if (0 == strcmp(decoded[i], message)) {
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800cca2:	fb06 3005 	mla	r0, r6, r5, r3
 800cca6:	f7f3 fb13 	bl	80002d0 <strcmp>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d0f0      	beq.n	800cc90 <ft8_decode+0x218>
        for (int i = 0; i < num_decoded; ++i) {
 800ccae:	3501      	adds	r5, #1
 800ccb0:	e787      	b.n	800cbc2 <ft8_decode+0x14a>
 800ccb2:	bf00      	nop
 800ccb4:	20012440 	.word	0x20012440
 800ccb8:	0805106c 	.word	0x0805106c
 800ccbc:	08051064 	.word	0x08051064
 800ccc0:	20001874 	.word	0x20001874
 800ccc4:	2000186c 	.word	0x2000186c
 800ccc8:	080559ac 	.word	0x080559ac
 800cccc:	200439e0 	.word	0x200439e0
 800ccd0:	43200000 	.word	0x43200000
 800ccd4:	20001868 	.word	0x20001868
 800ccd8:	080559d2 	.word	0x080559d2

0800ccdc <clear_log_stored_data>:


void clear_log_stored_data(void){
 800ccdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	char call_blank[] = "       ";
 800ccde:	4a10      	ldr	r2, [pc, #64]	@ (800cd20 <clear_log_stored_data+0x44>)
 800cce0:	ab02      	add	r3, sp, #8
	char locator_blank[] = "    ";
	//char freq_blank[] = "    ";

	for(int i = 0; i < log_size; i++){
 800cce2:	2500      	movs	r5, #0
 800cce4:	4c0f      	ldr	r4, [pc, #60]	@ (800cd24 <clear_log_stored_data+0x48>)
	char call_blank[] = "       ";
 800cce6:	6810      	ldr	r0, [r2, #0]
 800cce8:	6851      	ldr	r1, [r2, #4]
		Answer_CQ[i].number_times_called = 0;
 800ccea:	462e      	mov	r6, r5
	char call_blank[] = "       ";
 800ccec:	c303      	stmia	r3!, {r0, r1}
	char locator_blank[] = "    ";
 800ccee:	4b0e      	ldr	r3, [pc, #56]	@ (800cd28 <clear_log_stored_data+0x4c>)
 800ccf0:	6818      	ldr	r0, [r3, #0]
 800ccf2:	791b      	ldrb	r3, [r3, #4]
 800ccf4:	9000      	str	r0, [sp, #0]
 800ccf6:	f88d 3004 	strb.w	r3, [sp, #4]
		strcpy(Answer_CQ[i].call,call_blank);
 800ccfa:	a902      	add	r1, sp, #8
 800ccfc:	4620      	mov	r0, r4
		Answer_CQ[i].number_times_called = 0;
 800ccfe:	f844 6c04 	str.w	r6, [r4, #-4]
	for(int i = 0; i < log_size; i++){
 800cd02:	3501      	adds	r5, #1
		strcpy(Answer_CQ[i].call,call_blank);
 800cd04:	f001 fc1f 	bl	800e546 <strcpy>
		strcpy(Answer_CQ[i].locator,locator_blank);
 800cd08:	1de0      	adds	r0, r4, #7
 800cd0a:	4669      	mov	r1, sp
 800cd0c:	f001 fc1b 	bl	800e546 <strcpy>
	for(int i = 0; i < log_size; i++){
 800cd10:	2d32      	cmp	r5, #50	@ 0x32
		Answer_CQ[i].RSL = 0 ;
		Answer_CQ[i].RR73 = 0;
 800cd12:	e9c4 6603 	strd	r6, r6, [r4, #12]
	for(int i = 0; i < log_size; i++){
 800cd16:	f104 0418 	add.w	r4, r4, #24
 800cd1a:	d1ee      	bne.n	800ccfa <clear_log_stored_data+0x1e>
	}
}
 800cd1c:	b004      	add	sp, #16
 800cd1e:	bd70      	pop	{r4, r5, r6, pc}
 800cd20:	080559cf 	.word	0x080559cf
 800cd24:	20043f34 	.word	0x20043f34
 800cd28:	080559d2 	.word	0x080559d2

0800cd2c <process_selected_Station>:


void process_selected_Station(int stations_decoded, int TouchIndex){


	if(stations_decoded > 0 && TouchIndex <= stations_decoded ){
 800cd2c:	2800      	cmp	r0, #0
void process_selected_Station(int stations_decoded, int TouchIndex){
 800cd2e:	b538      	push	{r3, r4, r5, lr}
	if(stations_decoded > 0 && TouchIndex <= stations_decoded ){
 800cd30:	dd17      	ble.n	800cd62 <process_selected_Station+0x36>
 800cd32:	4288      	cmp	r0, r1
 800cd34:	db15      	blt.n	800cd62 <process_selected_Station+0x36>
	strcpy(Target_Call, new_decoded[TouchIndex].field2);
 800cd36:	2338      	movs	r3, #56	@ 0x38
 800cd38:	4d0c      	ldr	r5, [pc, #48]	@ (800cd6c <process_selected_Station+0x40>)
 800cd3a:	480d      	ldr	r0, [pc, #52]	@ (800cd70 <process_selected_Station+0x44>)
 800cd3c:	fb03 f401 	mul.w	r4, r3, r1
 800cd40:	f104 010e 	add.w	r1, r4, #14
 800cd44:	4429      	add	r1, r5
 800cd46:	f001 fbfe 	bl	800e546 <strcpy>
	strcpy(Target_Locator, new_decoded[TouchIndex].target);
 800cd4a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800cd4e:	4809      	ldr	r0, [pc, #36]	@ (800cd74 <process_selected_Station+0x48>)
 800cd50:	4429      	add	r1, r5
	Target_RSL = new_decoded[TouchIndex].snr;
 800cd52:	4425      	add	r5, r4
	strcpy(Target_Locator, new_decoded[TouchIndex].target);
 800cd54:	f001 fbf7 	bl	800e546 <strcpy>
	Target_RSL = new_decoded[TouchIndex].snr;
 800cd58:	4b07      	ldr	r3, [pc, #28]	@ (800cd78 <process_selected_Station+0x4c>)
 800cd5a:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 800cd5c:	601a      	str	r2, [r3, #0]

	compose_messages();
 800cd5e:	f000 fa05 	bl	800d16c <compose_messages>
	}

	FT8_Touch_Flag = 0;
 800cd62:	4b06      	ldr	r3, [pc, #24]	@ (800cd7c <process_selected_Station+0x50>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	601a      	str	r2, [r3, #0]

}
 800cd68:	bd38      	pop	{r3, r4, r5, pc}
 800cd6a:	bf00      	nop
 800cd6c:	200439e0 	.word	0x200439e0
 800cd70:	200443f4 	.word	0x200443f4
 800cd74:	2004497b 	.word	0x2004497b
 800cd78:	200443f0 	.word	0x200443f0
 800cd7c:	20001be0 	.word	0x20001be0

0800cd80 <strindex>:

}


int strindex(char s[],char t[])
{
 800cd80:	4603      	mov	r3, r0
 800cd82:	1e42      	subs	r2, r0, #1
    int i,j,k, result;

    result = -1;
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295
 800cd88:	f1c3 0301 	rsb	r3, r3, #1
{
 800cd8c:	b5f0      	push	{r4, r5, r6, r7, lr}

    for(i=0;s[i]!='\0';i++)
 800cd8e:	7854      	ldrb	r4, [r2, #1]
 800cd90:	1c55      	adds	r5, r2, #1
 800cd92:	b94c      	cbnz	r4, 800cda8 <strindex+0x28>
            ;
        if(k>0 && t[k] == '\0')
            result = i;
    }
    return result;
}
 800cd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(j=i,k=0;t[k]!='\0' && s[j]==t[k];j++,k++)
 800cd96:	3401      	adds	r4, #1
 800cd98:	5d0e      	ldrb	r6, [r1, r4]
 800cd9a:	b146      	cbz	r6, 800cdae <strindex+0x2e>
 800cd9c:	f817 cb01 	ldrb.w	ip, [r7], #1
 800cda0:	4566      	cmp	r6, ip
 800cda2:	d0f8      	beq.n	800cd96 <strindex+0x16>
    result = -1;
 800cda4:	462a      	mov	r2, r5
 800cda6:	e7f2      	b.n	800cd8e <strindex+0xe>
 800cda8:	462f      	mov	r7, r5
        for(j=i,k=0;t[k]!='\0' && s[j]==t[k];j++,k++)
 800cdaa:	2400      	movs	r4, #0
 800cdac:	e7f4      	b.n	800cd98 <strindex+0x18>
        if(k>0 && t[k] == '\0')
 800cdae:	2c00      	cmp	r4, #0
 800cdb0:	d0f8      	beq.n	800cda4 <strindex+0x24>
 800cdb2:	1898      	adds	r0, r3, r2
 800cdb4:	e7f6      	b.n	800cda4 <strindex+0x24>
	...

0800cdb8 <Check_Calling_Stations>:
int Check_Calling_Stations(int num_decoded , int reply_state) {
 800cdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdbc:	4c51      	ldr	r4, [pc, #324]	@ (800cf04 <Check_Calling_Stations+0x14c>)
	for(int i = 0; i < num_decoded ; i++) {  //check to see if being called
 800cdbe:	f04f 0800 	mov.w	r8, #0
int Check_Calling_Stations(int num_decoded , int reply_state) {
 800cdc2:	b08d      	sub	sp, #52	@ 0x34
	int Beacon_Reply_Status = 0;
 800cdc4:	4647      	mov	r7, r8
 800cdc6:	4625      	mov	r5, r4
int Check_Calling_Stations(int num_decoded , int reply_state) {
 800cdc8:	9003      	str	r0, [sp, #12]
	for(int i = 0; i < num_decoded ; i++) {  //check to see if being called
 800cdca:	9b03      	ldr	r3, [sp, #12]
 800cdcc:	4598      	cmp	r8, r3
 800cdce:	da4f      	bge.n	800ce70 <Check_Calling_Stations+0xb8>
	if(strindex(new_decoded[i].field1, Station_Call)  >= 0 )	{
 800cdd0:	494d      	ldr	r1, [pc, #308]	@ (800cf08 <Check_Calling_Stations+0x150>)
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f7ff ffd4 	bl	800cd80 <strindex>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	f2c0 808f 	blt.w	800cefc <Check_Calling_Stations+0x144>
	for (int j = 0; j<num_calls; j++) {
 800cdde:	f04f 0a00 	mov.w	sl, #0
 800cde2:	f8d5 2a00 	ldr.w	r2, [r5, #2560]	@ 0xa00
	if(strcmp(Answer_CQ[j].call,new_decoded[i].field2)  == 0 ) {
 800cde6:	f104 090e 	add.w	r9, r4, #14
 800cdea:	4b48      	ldr	r3, [pc, #288]	@ (800cf0c <Check_Calling_Stations+0x154>)
	old_call = 0;
 800cdec:	4656      	mov	r6, sl
	for (int j = 0; j<num_calls; j++) {
 800cdee:	4552      	cmp	r2, sl
 800cdf0:	dc42      	bgt.n	800ce78 <Check_Calling_Stations+0xc0>
	if(old_call == 0) {
 800cdf2:	2e00      	cmp	r6, #0
 800cdf4:	d153      	bne.n	800ce9e <Check_Calling_Stations+0xe6>
 800cdf6:	2738      	movs	r7, #56	@ 0x38
    sprintf(little_gulp," %s %s %s", new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800cdf8:	4622      	mov	r2, r4
 800cdfa:	4945      	ldr	r1, [pc, #276]	@ (800cf10 <Check_Calling_Stations+0x158>)
 800cdfc:	a807      	add	r0, sp, #28
 800cdfe:	fb07 f708 	mul.w	r7, r7, r8
	Target_RSL = new_decoded[i].snr;
 800ce02:	f8df 8120 	ldr.w	r8, [pc, #288]	@ 800cf24 <Check_Calling_Stations+0x16c>
 800ce06:	2418      	movs	r4, #24
	strcpy(Answer_CQ[num_calls].call, new_decoded[i].field2);
 800ce08:	f8df a110 	ldr.w	sl, [pc, #272]	@ 800cf1c <Check_Calling_Stations+0x164>
    sprintf(little_gulp," %s %s %s", new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800ce0c:	f107 031c 	add.w	r3, r7, #28
 800ce10:	442b      	add	r3, r5
 800ce12:	9300      	str	r3, [sp, #0]
 800ce14:	464b      	mov	r3, r9
 800ce16:	f001 fa1f 	bl	800e258 <siprintf>
    strcpy(current_Beacon_receive_message,little_gulp);
 800ce1a:	a907      	add	r1, sp, #28
 800ce1c:	483d      	ldr	r0, [pc, #244]	@ (800cf14 <Check_Calling_Stations+0x15c>)
 800ce1e:	f001 fb92 	bl	800e546 <strcpy>
    update_Beacon_log_display(0);
 800ce22:	4630      	mov	r0, r6
 800ce24:	f7fd fdc6 	bl	800a9b4 <update_Beacon_log_display>
	strcpy(Target_Call, new_decoded[i].field2);
 800ce28:	4649      	mov	r1, r9
 800ce2a:	483b      	ldr	r0, [pc, #236]	@ (800cf18 <Check_Calling_Stations+0x160>)
 800ce2c:	f001 fb8b 	bl	800e546 <strcpy>
	Target_RSL = new_decoded[i].snr;
 800ce30:	19eb      	adds	r3, r5, r7
	set_reply(0);
 800ce32:	4630      	mov	r0, r6
	Target_RSL = new_decoded[i].snr;
 800ce34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce36:	f8c8 3000 	str.w	r3, [r8]
	set_reply(0);
 800ce3a:	f000 f909 	bl	800d050 <set_reply>
	strcpy(Answer_CQ[num_calls].call, new_decoded[i].field2);
 800ce3e:	f8d5 6a00 	ldr.w	r6, [r5, #2560]	@ 0xa00
 800ce42:	4649      	mov	r1, r9
 800ce44:	4374      	muls	r4, r6
	num_calls++;
 800ce46:	3601      	adds	r6, #1
	strcpy(Answer_CQ[num_calls].call, new_decoded[i].field2);
 800ce48:	1d20      	adds	r0, r4, #4
 800ce4a:	4450      	add	r0, sl
 800ce4c:	f001 fb7b 	bl	800e546 <strcpy>
	strcpy(Answer_CQ[num_calls].locator, new_decoded[i].target);
 800ce50:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800ce54:	f104 000b 	add.w	r0, r4, #11
	Beacon_Reply_Status = 1;
 800ce58:	2701      	movs	r7, #1
	strcpy(Answer_CQ[num_calls].locator, new_decoded[i].target);
 800ce5a:	4429      	add	r1, r5
	Answer_CQ[num_calls].RSL = Target_RSL;
 800ce5c:	442c      	add	r4, r5
	strcpy(Answer_CQ[num_calls].locator, new_decoded[i].target);
 800ce5e:	4450      	add	r0, sl
 800ce60:	f001 fb71 	bl	800e546 <strcpy>
	Answer_CQ[num_calls].RSL = Target_RSL;
 800ce64:	f8d8 3000 	ldr.w	r3, [r8]
	num_calls++;
 800ce68:	f8c5 6a00 	str.w	r6, [r5, #2560]	@ 0xa00
	Answer_CQ[num_calls].RSL = Target_RSL;
 800ce6c:	f8c4 3560 	str.w	r3, [r4, #1376]	@ 0x560
}
 800ce70:	4638      	mov	r0, r7
 800ce72:	b00d      	add	sp, #52	@ 0x34
 800ce74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(strcmp(Answer_CQ[j].call,new_decoded[i].field2)  == 0 ) {
 800ce78:	4618      	mov	r0, r3
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	9205      	str	r2, [sp, #20]
 800ce7e:	9304      	str	r3, [sp, #16]
 800ce80:	f7f3 fa26 	bl	80002d0 <strcmp>
 800ce84:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ce88:	b928      	cbnz	r0, 800ce96 <Check_Calling_Stations+0xde>
	old_call = 	Answer_CQ[j].number_times_called;
 800ce8a:	f853 6c04 	ldr.w	r6, [r3, #-4]
	Answer_CQ[j].number_times_called = old_call;
 800ce8e:	46d3      	mov	fp, sl
	old_call ++;
 800ce90:	3601      	adds	r6, #1
	Answer_CQ[j].number_times_called = old_call;
 800ce92:	f843 6c04 	str.w	r6, [r3, #-4]
	for (int j = 0; j<num_calls; j++) {
 800ce96:	f10a 0a01 	add.w	sl, sl, #1
 800ce9a:	3318      	adds	r3, #24
 800ce9c:	e7a7      	b.n	800cdee <Check_Calling_Stations+0x36>
	if(old_call >= 1) {
 800ce9e:	dd2d      	ble.n	800cefc <Check_Calling_Stations+0x144>
		if(Answer_CQ[old_call_address].RR73 == 0){
 800cea0:	2618      	movs	r6, #24
		sprintf(little_gulp," %s %s %s", new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800cea2:	f104 031c 	add.w	r3, r4, #28
 800cea6:	4622      	mov	r2, r4
 800cea8:	4919      	ldr	r1, [pc, #100]	@ (800cf10 <Check_Calling_Stations+0x158>)
		if(Answer_CQ[old_call_address].RR73 == 0){
 800ceaa:	fb06 f60b 	mul.w	r6, r6, fp
		sprintf(little_gulp," %s %s %s", new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800ceae:	a807      	add	r0, sp, #28
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	464b      	mov	r3, r9
 800ceb4:	f001 f9d0 	bl	800e258 <siprintf>
		if(Answer_CQ[old_call_address].RR73 == 0){
 800ceb8:	eb05 0906 	add.w	r9, r5, r6
	    strcpy(current_Beacon_receive_message,little_gulp);
 800cebc:	a907      	add	r1, sp, #28
 800cebe:	4815      	ldr	r0, [pc, #84]	@ (800cf14 <Check_Calling_Stations+0x15c>)
 800cec0:	f001 fb41 	bl	800e546 <strcpy>
	    update_Beacon_log_display(0);
 800cec4:	2000      	movs	r0, #0
 800cec6:	f7fd fd75 	bl	800a9b4 <update_Beacon_log_display>
		if(Answer_CQ[old_call_address].RR73 == 0){
 800ceca:	f8d9 3564 	ldr.w	r3, [r9, #1380]	@ 0x564
 800cece:	b9ab      	cbnz	r3, 800cefc <Check_Calling_Stations+0x144>
		strcpy(Target_Call, Answer_CQ[old_call_address].call);
 800ced0:	4f12      	ldr	r7, [pc, #72]	@ (800cf1c <Check_Calling_Stations+0x164>)
 800ced2:	1d31      	adds	r1, r6, #4
 800ced4:	4810      	ldr	r0, [pc, #64]	@ (800cf18 <Check_Calling_Stations+0x160>)
 800ced6:	4439      	add	r1, r7
 800ced8:	f001 fb35 	bl	800e546 <strcpy>
		strcpy(Target_Locator, Answer_CQ[old_call_address].locator);
 800cedc:	f106 010b 	add.w	r1, r6, #11
 800cee0:	480f      	ldr	r0, [pc, #60]	@ (800cf20 <Check_Calling_Stations+0x168>)
 800cee2:	4439      	add	r1, r7
		Answer_CQ[old_call_address].RR73 = 1;
 800cee4:	2701      	movs	r7, #1
		strcpy(Target_Locator, Answer_CQ[old_call_address].locator);
 800cee6:	f001 fb2e 	bl	800e546 <strcpy>
		Target_RSL = Answer_CQ[old_call_address].RSL;
 800ceea:	f8d9 2560 	ldr.w	r2, [r9, #1376]	@ 0x560
 800ceee:	4b0d      	ldr	r3, [pc, #52]	@ (800cf24 <Check_Calling_Stations+0x16c>)
		set_reply(1);
 800cef0:	2001      	movs	r0, #1
		Target_RSL = Answer_CQ[old_call_address].RSL;
 800cef2:	601a      	str	r2, [r3, #0]
		set_reply(1);
 800cef4:	f000 f8ac 	bl	800d050 <set_reply>
		Answer_CQ[old_call_address].RR73 = 1;
 800cef8:	f8c9 7564 	str.w	r7, [r9, #1380]	@ 0x564
	for(int i = 0; i < num_decoded ; i++) {  //check to see if being called
 800cefc:	f108 0801 	add.w	r8, r8, #1
 800cf00:	3438      	adds	r4, #56	@ 0x38
 800cf02:	e762      	b.n	800cdca <Check_Calling_Stations+0x12>
 800cf04:	200439e0 	.word	0x200439e0
 800cf08:	200443e4 	.word	0x200443e4
 800cf0c:	20043f34 	.word	0x20043f34
 800cf10:	080559b6 	.word	0x080559b6
 800cf14:	20001b68 	.word	0x20001b68
 800cf18:	200443f4 	.word	0x200443f4
 800cf1c:	20043f30 	.word	0x20043f30
 800cf20:	2004497b 	.word	0x2004497b
 800cf24:	200443f0 	.word	0x200443f0

0800cf28 <Check_QSO_Calling_Stations>:
int Check_QSO_Calling_Stations(int num_decoded, int reply_state) {
 800cf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf2c:	4d15      	ldr	r5, [pc, #84]	@ (800cf84 <Check_QSO_Calling_Stations+0x5c>)
 800cf2e:	b088      	sub	sp, #32
 800cf30:	4606      	mov	r6, r0
	for(int i = 0; i < num_decoded ; i++) {  //check to see if being called
 800cf32:	2400      	movs	r4, #0
 800cf34:	462f      	mov	r7, r5
	if(strindex(new_decoded[i].field1, Station_Call)  >= 0 )	{
 800cf36:	4914      	ldr	r1, [pc, #80]	@ (800cf88 <Check_QSO_Calling_Stations+0x60>)
	for(int i = 0; i < num_decoded ; i++) {  //check to see if being called
 800cf38:	42b4      	cmp	r4, r6
 800cf3a:	db01      	blt.n	800cf40 <Check_QSO_Calling_Stations+0x18>
 800cf3c:	2000      	movs	r0, #0
	return QSO_Status;
 800cf3e:	e01c      	b.n	800cf7a <Check_QSO_Calling_Stations+0x52>
	if(strindex(new_decoded[i].field1, Station_Call)  >= 0 )	{
 800cf40:	4628      	mov	r0, r5
 800cf42:	46a8      	mov	r8, r5
 800cf44:	f7ff ff1c 	bl	800cd80 <strindex>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	f105 0538 	add.w	r5, r5, #56	@ 0x38
 800cf4e:	db17      	blt.n	800cf80 <Check_QSO_Calling_Stations+0x58>
 800cf50:	2338      	movs	r3, #56	@ 0x38
	sprintf(little_gulp," %s %s %s", new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800cf52:	4642      	mov	r2, r8
 800cf54:	490d      	ldr	r1, [pc, #52]	@ (800cf8c <Check_QSO_Calling_Stations+0x64>)
 800cf56:	a803      	add	r0, sp, #12
 800cf58:	435c      	muls	r4, r3
 800cf5a:	f104 030e 	add.w	r3, r4, #14
 800cf5e:	341c      	adds	r4, #28
 800cf60:	443c      	add	r4, r7
 800cf62:	443b      	add	r3, r7
 800cf64:	9400      	str	r4, [sp, #0]
 800cf66:	f001 f977 	bl	800e258 <siprintf>
    strcpy(current_QSO_receive_message, little_gulp);
 800cf6a:	a903      	add	r1, sp, #12
 800cf6c:	4808      	ldr	r0, [pc, #32]	@ (800cf90 <Check_QSO_Calling_Stations+0x68>)
 800cf6e:	f001 faea 	bl	800e546 <strcpy>
    update_log_display(0);
 800cf72:	2000      	movs	r0, #0
 800cf74:	f7fd fcb6 	bl	800a8e4 <update_log_display>
    QSO_Status = 1; //we already have a reply!!
 800cf78:	2001      	movs	r0, #1
}
 800cf7a:	b008      	add	sp, #32
 800cf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for(int i = 0; i < num_decoded ; i++) {  //check to see if being called
 800cf80:	3401      	adds	r4, #1
 800cf82:	e7d9      	b.n	800cf38 <Check_QSO_Calling_Stations+0x10>
 800cf84:	200439e0 	.word	0x200439e0
 800cf88:	200443e4 	.word	0x200443e4
 800cf8c:	080559b6 	.word	0x080559b6
 800cf90:	20001a50 	.word	0x20001a50

0800cf94 <set_cq>:

/* Fatfs structure */
static FATFS FS;
static FIL fil;

void  set_cq(void) {
 800cf94:	b5f0      	push	{r4, r5, r6, r7, lr}
	char CQ[] = "CQ";
 800cf96:	4b27      	ldr	r3, [pc, #156]	@ (800d034 <set_cq+0xa0>)
void  set_cq(void) {
 800cf98:	b08f      	sub	sp, #60	@ 0x3c
 800cf9a:	af02      	add	r7, sp, #8
	char CQ[] = "CQ";
 800cf9c:	881a      	ldrh	r2, [r3, #0]
 800cf9e:	789b      	ldrb	r3, [r3, #2]
 800cfa0:	803a      	strh	r2, [r7, #0]
    char message[18];
    uint8_t packed[K_BYTES];
    const uint8_t blank[] = "                      ";
 800cfa2:	f107 0218 	add.w	r2, r7, #24
	char CQ[] = "CQ";
 800cfa6:	70bb      	strb	r3, [r7, #2]
    uint8_t packed[K_BYTES];
 800cfa8:	4b23      	ldr	r3, [pc, #140]	@ (800d038 <set_cq+0xa4>)
 800cfaa:	4616      	mov	r6, r2
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	3307      	adds	r3, #7
 800cfb0:	f023 0307 	bic.w	r3, r3, #7
 800cfb4:	ebad 0d03 	sub.w	sp, sp, r3
    const uint8_t blank[] = "                      ";
 800cfb8:	4b20      	ldr	r3, [pc, #128]	@ (800d03c <set_cq+0xa8>)
    uint8_t packed[K_BYTES];
 800cfba:	ad02      	add	r5, sp, #8
    const uint8_t blank[] = "                      ";
 800cfbc:	f103 0c10 	add.w	ip, r3, #16
 800cfc0:	6818      	ldr	r0, [r3, #0]
 800cfc2:	3308      	adds	r3, #8
 800cfc4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800cfc8:	4614      	mov	r4, r2
 800cfca:	4563      	cmp	r3, ip
 800cfcc:	c403      	stmia	r4!, {r0, r1}
 800cfce:	4622      	mov	r2, r4
 800cfd0:	d1f6      	bne.n	800cfc0 <set_cq+0x2c>
 800cfd2:	6818      	ldr	r0, [r3, #0]

    sprintf(message,"%s %s %s",CQ,Station_Call,Locator);
 800cfd4:	463a      	mov	r2, r7
    const uint8_t blank[] = "                      ";
 800cfd6:	8899      	ldrh	r1, [r3, #4]
 800cfd8:	799b      	ldrb	r3, [r3, #6]
 800cfda:	6020      	str	r0, [r4, #0]
    sprintf(message,"%s %s %s",CQ,Station_Call,Locator);
 800cfdc:	1d38      	adds	r0, r7, #4
    const uint8_t blank[] = "                      ";
 800cfde:	71a3      	strb	r3, [r4, #6]
    sprintf(message,"%s %s %s",CQ,Station_Call,Locator);
 800cfe0:	4b17      	ldr	r3, [pc, #92]	@ (800d040 <set_cq+0xac>)
    const uint8_t blank[] = "                      ";
 800cfe2:	80a1      	strh	r1, [r4, #4]
    sprintf(message,"%s %s %s",CQ,Station_Call,Locator);
 800cfe4:	9300      	str	r3, [sp, #0]
 800cfe6:	3b07      	subs	r3, #7
 800cfe8:	4916      	ldr	r1, [pc, #88]	@ (800d044 <set_cq+0xb0>)
 800cfea:	f001 f935 	bl	800e258 <siprintf>

    pack77(message, packed);
 800cfee:	4629      	mov	r1, r5
 800cff0:	1d38      	adds	r0, r7, #4
 800cff2:	f7fb f870 	bl	80080d6 <pack77>
    genft8(packed, tones);
 800cff6:	4914      	ldr	r1, [pc, #80]	@ (800d048 <set_cq+0xb4>)
 800cff8:	4628      	mov	r0, r5
 800cffa:	f7fa fc9b 	bl	8007934 <genft8>

    BSP_LCD_SetFont (&Font16);
 800cffe:	4813      	ldr	r0, [pc, #76]	@ (800d04c <set_cq+0xb8>)
 800d000:	f7f5 fc76 	bl	80028f0 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d004:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800d008:	f7f5 fc5a 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(240, 240, blank, 0x03);
 800d00c:	21f0      	movs	r1, #240	@ 0xf0
 800d00e:	4632      	mov	r2, r6
 800d010:	2303      	movs	r3, #3
 800d012:	4608      	mov	r0, r1
 800d014:	f7f5 fcf4 	bl	8002a00 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d018:	f04f 30ff 	mov.w	r0, #4294967295
 800d01c:	f7f5 fc50 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(240, 240, (const uint8_t*) message,0x03);
 800d020:	21f0      	movs	r1, #240	@ 0xf0
 800d022:	1d3a      	adds	r2, r7, #4
 800d024:	2303      	movs	r3, #3
 800d026:	4608      	mov	r0, r1
 800d028:	f7f5 fcea 	bl	8002a00 <BSP_LCD_DisplayStringAt>

}
 800d02c:	3734      	adds	r7, #52	@ 0x34
 800d02e:	46bd      	mov	sp, r7
 800d030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d032:	bf00      	nop
 800d034:	080557db 	.word	0x080557db
 800d038:	20001874 	.word	0x20001874
 800d03c:	080559c0 	.word	0x080559c0
 800d040:	200443eb 	.word	0x200443eb
 800d044:	080559b7 	.word	0x080559b7
 800d048:	20001880 	.word	0x20001880
 800d04c:	20000030 	.word	0x20000030

0800d050 <set_reply>:

extern char current_Beacon_xmit_message[20];

void  set_reply(uint16_t index ) {
 800d050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	//char big_gulp[60];
    char seventy_three[] = "RR73";
 800d054:	4b3a      	ldr	r3, [pc, #232]	@ (800d140 <set_reply+0xf0>)
void  set_reply(uint16_t index ) {
 800d056:	b08d      	sub	sp, #52	@ 0x34
 800d058:	4604      	mov	r4, r0
 800d05a:	af02      	add	r7, sp, #8
    char seventy_three[] = "RR73";
 800d05c:	6818      	ldr	r0, [r3, #0]
 800d05e:	791b      	ldrb	r3, [r3, #4]
    uint8_t packed[K_BYTES];
    const uint8_t blank[] = "                      ";
 800d060:	f107 0210 	add.w	r2, r7, #16
    char seventy_three[] = "RR73";
 800d064:	6038      	str	r0, [r7, #0]
 800d066:	713b      	strb	r3, [r7, #4]
    uint8_t packed[K_BYTES];
 800d068:	4690      	mov	r8, r2
 800d06a:	4b36      	ldr	r3, [pc, #216]	@ (800d144 <set_reply+0xf4>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	3307      	adds	r3, #7
 800d070:	f023 0307 	bic.w	r3, r3, #7
 800d074:	ebad 0d03 	sub.w	sp, sp, r3
    const uint8_t blank[] = "                      ";
 800d078:	4b33      	ldr	r3, [pc, #204]	@ (800d148 <set_reply+0xf8>)
    uint8_t packed[K_BYTES];
 800d07a:	ae02      	add	r6, sp, #8
    const uint8_t blank[] = "                      ";
 800d07c:	f103 0c10 	add.w	ip, r3, #16
 800d080:	6818      	ldr	r0, [r3, #0]
 800d082:	3308      	adds	r3, #8
 800d084:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800d088:	4615      	mov	r5, r2
 800d08a:	4563      	cmp	r3, ip
 800d08c:	c503      	stmia	r5!, {r0, r1}
 800d08e:	462a      	mov	r2, r5
 800d090:	d1f6      	bne.n	800d080 <set_reply+0x30>
 800d092:	6818      	ldr	r0, [r3, #0]
    char RSL[] = "     ";
 800d094:	f107 0908 	add.w	r9, r7, #8
    const uint8_t blank[] = "                      ";
 800d098:	8899      	ldrh	r1, [r3, #4]

    itoa(Target_RSL, RSL, 10 );
 800d09a:	220a      	movs	r2, #10
    const uint8_t blank[] = "                      ";
 800d09c:	799b      	ldrb	r3, [r3, #6]
 800d09e:	6028      	str	r0, [r5, #0]
 800d0a0:	71ab      	strb	r3, [r5, #6]
    char RSL[] = "     ";
 800d0a2:	4b2a      	ldr	r3, [pc, #168]	@ (800d14c <set_reply+0xfc>)
    const uint8_t blank[] = "                      ";
 800d0a4:	80a9      	strh	r1, [r5, #4]
    itoa(Target_RSL, RSL, 10 );
 800d0a6:	4649      	mov	r1, r9
    char RSL[] = "     ";
 800d0a8:	6818      	ldr	r0, [r3, #0]
    itoa(Target_RSL, RSL, 10 );
 800d0aa:	4d29      	ldr	r5, [pc, #164]	@ (800d150 <set_reply+0x100>)
    char RSL[] = "     ";
 800d0ac:	889b      	ldrh	r3, [r3, #4]
 800d0ae:	60b8      	str	r0, [r7, #8]
    itoa(Target_RSL, RSL, 10 );
 800d0b0:	68e8      	ldr	r0, [r5, #12]
    char RSL[] = "     ";
 800d0b2:	81bb      	strh	r3, [r7, #12]
    itoa(Target_RSL, RSL, 10 );
 800d0b4:	f000 fe88 	bl	800ddc8 <itoa>

    if (index == 0) sprintf(reply_message,"%s %s R%s",Target_Call,Station_Call,RSL);
 800d0b8:	bb9c      	cbnz	r4, 800d122 <set_reply+0xd2>
 800d0ba:	462b      	mov	r3, r5
 800d0bc:	f105 0210 	add.w	r2, r5, #16
 800d0c0:	4924      	ldr	r1, [pc, #144]	@ (800d154 <set_reply+0x104>)
 800d0c2:	f105 0017 	add.w	r0, r5, #23
 800d0c6:	f8cd 9000 	str.w	r9, [sp]
 800d0ca:	f001 f8c5 	bl	800e258 <siprintf>
    if (index == 1) {
    	sprintf(reply_message,"%s %s %s",Target_Call,Station_Call,seventy_three);
    	write_ADIF_Log();
    }

	strcpy(current_Beacon_xmit_message,reply_message);
 800d0ce:	4922      	ldr	r1, [pc, #136]	@ (800d158 <set_reply+0x108>)
 800d0d0:	4822      	ldr	r0, [pc, #136]	@ (800d15c <set_reply+0x10c>)
 800d0d2:	f001 fa38 	bl	800e546 <strcpy>
	update_Beacon_log_display(1);
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	f7fd fc6c 	bl	800a9b4 <update_Beacon_log_display>

    pack77(reply_message, packed);
 800d0dc:	4631      	mov	r1, r6
 800d0de:	481e      	ldr	r0, [pc, #120]	@ (800d158 <set_reply+0x108>)
 800d0e0:	f7fa fff9 	bl	80080d6 <pack77>
    genft8(packed, tones);
 800d0e4:	491e      	ldr	r1, [pc, #120]	@ (800d160 <set_reply+0x110>)
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	f7fa fc24 	bl	8007934 <genft8>

     BSP_LCD_SetFont (&Font16);
 800d0ec:	481d      	ldr	r0, [pc, #116]	@ (800d164 <set_reply+0x114>)
 800d0ee:	f7f5 fbff 	bl	80028f0 <BSP_LCD_SetFont>
     BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d0f2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800d0f6:	f7f5 fbe3 	bl	80028c0 <BSP_LCD_SetTextColor>
     BSP_LCD_DisplayStringAt(240, 240, blank,0x03);
 800d0fa:	21f0      	movs	r1, #240	@ 0xf0
 800d0fc:	4642      	mov	r2, r8
 800d0fe:	2303      	movs	r3, #3
 800d100:	4608      	mov	r0, r1
 800d102:	f7f5 fc7d 	bl	8002a00 <BSP_LCD_DisplayStringAt>
     BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d106:	f04f 30ff 	mov.w	r0, #4294967295
 800d10a:	f7f5 fbd9 	bl	80028c0 <BSP_LCD_SetTextColor>
     BSP_LCD_DisplayStringAt(240, 240, (const uint8_t*) reply_message,0x03);
 800d10e:	21f0      	movs	r1, #240	@ 0xf0
 800d110:	2303      	movs	r3, #3
 800d112:	4a11      	ldr	r2, [pc, #68]	@ (800d158 <set_reply+0x108>)
 800d114:	4608      	mov	r0, r1
 800d116:	f7f5 fc73 	bl	8002a00 <BSP_LCD_DisplayStringAt>

}
 800d11a:	372c      	adds	r7, #44	@ 0x2c
 800d11c:	46bd      	mov	sp, r7
 800d11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (index == 1) {
 800d122:	2c01      	cmp	r4, #1
 800d124:	d1d3      	bne.n	800d0ce <set_reply+0x7e>
    	sprintf(reply_message,"%s %s %s",Target_Call,Station_Call,seventy_three);
 800d126:	462b      	mov	r3, r5
 800d128:	f105 0210 	add.w	r2, r5, #16
 800d12c:	490e      	ldr	r1, [pc, #56]	@ (800d168 <set_reply+0x118>)
 800d12e:	f105 0017 	add.w	r0, r5, #23
 800d132:	9700      	str	r7, [sp, #0]
 800d134:	f001 f890 	bl	800e258 <siprintf>
    	write_ADIF_Log();
 800d138:	f7fd f984 	bl	800a444 <write_ADIF_Log>
 800d13c:	e7c7      	b.n	800d0ce <set_reply+0x7e>
 800d13e:	bf00      	nop
 800d140:	080557c9 	.word	0x080557c9
 800d144:	20001874 	.word	0x20001874
 800d148:	080559c0 	.word	0x080559c0
 800d14c:	080559d1 	.word	0x080559d1
 800d150:	200443e4 	.word	0x200443e4
 800d154:	080559d7 	.word	0x080559d7
 800d158:	200443fb 	.word	0x200443fb
 800d15c:	20001b7c 	.word	0x20001b7c
 800d160:	20001880 	.word	0x20001880
 800d164:	20000030 	.word	0x20000030
 800d168:	080559b7 	.word	0x080559b7

0800d16c <compose_messages>:


char    xmit_messages[4][19];

void compose_messages(void) {
	char seventy_three[] = "RR73";
 800d16c:	4b3b      	ldr	r3, [pc, #236]	@ (800d25c <compose_messages+0xf0>)
void compose_messages(void) {
 800d16e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char seventy_three[] = "RR73";
 800d172:	6818      	ldr	r0, [r3, #0]
void compose_messages(void) {
 800d174:	b089      	sub	sp, #36	@ 0x24
	char seventy_three[] = "RR73";
 800d176:	791b      	ldrb	r3, [r3, #4]
	char CQ[] = "CQ";
    char RSL[] = "     ";

    itoa(Target_RSL, RSL, 10 );
 800d178:	4c39      	ldr	r4, [pc, #228]	@ (800d260 <compose_messages+0xf4>)
    char RSL[] = "     ";
 800d17a:	ae06      	add	r6, sp, #24
	char seventy_three[] = "RR73";
 800d17c:	f88d 3014 	strb.w	r3, [sp, #20]
 800d180:	f10d 0b10 	add.w	fp, sp, #16
	char CQ[] = "CQ";
 800d184:	4b37      	ldr	r3, [pc, #220]	@ (800d264 <compose_messages+0xf8>)


	sprintf(xmit_messages[0],"%s %s %s", Target_Call,Station_Call,Locator);
 800d186:	f104 0510 	add.w	r5, r4, #16
	char seventy_three[] = "RR73";
 800d18a:	9004      	str	r0, [sp, #16]
	sprintf(xmit_messages[0],"%s %s %s", Target_Call,Station_Call,Locator);
 800d18c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
	char CQ[] = "CQ";
 800d190:	881a      	ldrh	r2, [r3, #0]
	sprintf(xmit_messages[0],"%s %s %s", Target_Call,Station_Call,Locator);
 800d192:	f104 0a07 	add.w	sl, r4, #7
	char CQ[] = "CQ";
 800d196:	789b      	ldrb	r3, [r3, #2]
    itoa(Target_RSL, RSL, 10 );
 800d198:	4631      	mov	r1, r6
	sprintf(xmit_messages[0],"%s %s %s", Target_Call,Station_Call,Locator);
 800d19a:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 800d278 <compose_messages+0x10c>
	sprintf(xmit_messages[1],"%s %s R%s", Target_Call,Station_Call,RSL);
 800d19e:	f104 073f 	add.w	r7, r4, #63	@ 0x3f
	char CQ[] = "CQ";
 800d1a2:	f88d 300e 	strb.w	r3, [sp, #14]
    char RSL[] = "     ";
 800d1a6:	4b30      	ldr	r3, [pc, #192]	@ (800d268 <compose_messages+0xfc>)
	char CQ[] = "CQ";
 800d1a8:	f8ad 200c 	strh.w	r2, [sp, #12]
    itoa(Target_RSL, RSL, 10 );
 800d1ac:	220a      	movs	r2, #10
    char RSL[] = "     ";
 800d1ae:	6818      	ldr	r0, [r3, #0]
 800d1b0:	889b      	ldrh	r3, [r3, #4]
 800d1b2:	9006      	str	r0, [sp, #24]
    itoa(Target_RSL, RSL, 10 );
 800d1b4:	68e0      	ldr	r0, [r4, #12]
    char RSL[] = "     ";
 800d1b6:	f8ad 301c 	strh.w	r3, [sp, #28]
    itoa(Target_RSL, RSL, 10 );
 800d1ba:	f000 fe05 	bl	800ddc8 <itoa>
	sprintf(xmit_messages[0],"%s %s %s", Target_Call,Station_Call,Locator);
 800d1be:	4623      	mov	r3, r4
 800d1c0:	462a      	mov	r2, r5
 800d1c2:	4649      	mov	r1, r9
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	f8cd a000 	str.w	sl, [sp]
 800d1ca:	f001 f845 	bl	800e258 <siprintf>
	sprintf(xmit_messages[1],"%s %s R%s", Target_Call,Station_Call,RSL);
 800d1ce:	4623      	mov	r3, r4
 800d1d0:	462a      	mov	r2, r5
 800d1d2:	9600      	str	r6, [sp, #0]
 800d1d4:	4925      	ldr	r1, [pc, #148]	@ (800d26c <compose_messages+0x100>)
	sprintf(xmit_messages[2],"%s %s %3s", Target_Call,Station_Call,seventy_three);
 800d1d6:	f104 0652 	add.w	r6, r4, #82	@ 0x52
	sprintf(xmit_messages[1],"%s %s R%s", Target_Call,Station_Call,RSL);
 800d1da:	4638      	mov	r0, r7
 800d1dc:	f001 f83c 	bl	800e258 <siprintf>
	sprintf(xmit_messages[2],"%s %s %3s", Target_Call,Station_Call,seventy_three);
 800d1e0:	462a      	mov	r2, r5
	sprintf(xmit_messages[3],"%s %s %s", CQ,Station_Call,Locator);
 800d1e2:	f104 0565 	add.w	r5, r4, #101	@ 0x65
	sprintf(xmit_messages[2],"%s %s %3s", Target_Call,Station_Call,seventy_three);
 800d1e6:	4623      	mov	r3, r4
 800d1e8:	4921      	ldr	r1, [pc, #132]	@ (800d270 <compose_messages+0x104>)
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	f8cd b000 	str.w	fp, [sp]
 800d1f0:	f001 f832 	bl	800e258 <siprintf>
	sprintf(xmit_messages[3],"%s %s %s", CQ,Station_Call,Locator);
 800d1f4:	4623      	mov	r3, r4
 800d1f6:	aa03      	add	r2, sp, #12
 800d1f8:	4649      	mov	r1, r9
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	f8cd a000 	str.w	sl, [sp]
 800d200:	f001 f82a 	bl	800e258 <siprintf>

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d204:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800d208:	f7f5 fb5a 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(240, 130, 240, 123);
 800d20c:	22f0      	movs	r2, #240	@ 0xf0
 800d20e:	237b      	movs	r3, #123	@ 0x7b
 800d210:	2182      	movs	r1, #130	@ 0x82
 800d212:	4610      	mov	r0, r2
 800d214:	f7f5 fcb2 	bl	8002b7c <BSP_LCD_FillRect>
	BSP_LCD_SetFont (&Font16);
 800d218:	4816      	ldr	r0, [pc, #88]	@ (800d274 <compose_messages+0x108>)
 800d21a:	f7f5 fb69 	bl	80028f0 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d21e:	f04f 30ff 	mov.w	r0, #4294967295
 800d222:	f7f5 fb4d 	bl	80028c0 <BSP_LCD_SetTextColor>

    BSP_LCD_DisplayStringAt(240, 160, (uint8_t*) xmit_messages[0],0x03);
 800d226:	4642      	mov	r2, r8
 800d228:	2303      	movs	r3, #3
 800d22a:	21a0      	movs	r1, #160	@ 0xa0
 800d22c:	20f0      	movs	r0, #240	@ 0xf0
 800d22e:	f7f5 fbe7 	bl	8002a00 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(240, 180, (uint8_t*) xmit_messages[1],0x03);
 800d232:	463a      	mov	r2, r7
 800d234:	2303      	movs	r3, #3
 800d236:	21b4      	movs	r1, #180	@ 0xb4
 800d238:	20f0      	movs	r0, #240	@ 0xf0
 800d23a:	f7f5 fbe1 	bl	8002a00 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(240, 200, (uint8_t*) xmit_messages[2],0x03);
 800d23e:	4632      	mov	r2, r6
 800d240:	2303      	movs	r3, #3
 800d242:	21c8      	movs	r1, #200	@ 0xc8
 800d244:	20f0      	movs	r0, #240	@ 0xf0
 800d246:	f7f5 fbdb 	bl	8002a00 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(240, 220, (uint8_t*) xmit_messages[3],0x03);
 800d24a:	2303      	movs	r3, #3
 800d24c:	462a      	mov	r2, r5
 800d24e:	21dc      	movs	r1, #220	@ 0xdc
 800d250:	20f0      	movs	r0, #240	@ 0xf0
 800d252:	f7f5 fbd5 	bl	8002a00 <BSP_LCD_DisplayStringAt>

    }
 800d256:	b009      	add	sp, #36	@ 0x24
 800d258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d25c:	080557c9 	.word	0x080557c9
 800d260:	200443e4 	.word	0x200443e4
 800d264:	080557db 	.word	0x080557db
 800d268:	080559d1 	.word	0x080559d1
 800d26c:	080559d7 	.word	0x080559d7
 800d270:	080559e1 	.word	0x080559e1
 800d274:	20000030 	.word	0x20000030
 800d278:	080559b7 	.word	0x080559b7

0800d27c <que_message>:

extern char current_QSO_xmit_message[];

void que_message(int index ) {
 800d27c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	uint8_t packed[K_BYTES];
 800d280:	4b26      	ldr	r3, [pc, #152]	@ (800d31c <que_message+0xa0>)
void que_message(int index ) {
 800d282:	b087      	sub	sp, #28
 800d284:	4605      	mov	r5, r0
	uint8_t packed[K_BYTES];
 800d286:	681b      	ldr	r3, [r3, #0]
void que_message(int index ) {
 800d288:	af00      	add	r7, sp, #0
	uint8_t packed[K_BYTES];
 800d28a:	3307      	adds	r3, #7

	const uint8_t blank[] = "                      ";
 800d28c:	463c      	mov	r4, r7
 800d28e:	46b9      	mov	r9, r7
	uint8_t packed[K_BYTES];
 800d290:	f023 0307 	bic.w	r3, r3, #7
 800d294:	ebad 0d03 	sub.w	sp, sp, r3
	const uint8_t blank[] = "                      ";
 800d298:	4b21      	ldr	r3, [pc, #132]	@ (800d320 <que_message+0xa4>)
	uint8_t packed[K_BYTES];
 800d29a:	46e8      	mov	r8, sp
	const uint8_t blank[] = "                      ";
 800d29c:	f103 0210 	add.w	r2, r3, #16
 800d2a0:	6818      	ldr	r0, [r3, #0]
 800d2a2:	3308      	adds	r3, #8
 800d2a4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800d2a8:	4626      	mov	r6, r4
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	c603      	stmia	r6!, {r0, r1}
 800d2ae:	4634      	mov	r4, r6
 800d2b0:	d1f6      	bne.n	800d2a0 <que_message+0x24>
 800d2b2:	889a      	ldrh	r2, [r3, #4]

    pack77(xmit_messages[index], packed);
 800d2b4:	4641      	mov	r1, r8
	const uint8_t blank[] = "                      ";
 800d2b6:	6818      	ldr	r0, [r3, #0]
 800d2b8:	799b      	ldrb	r3, [r3, #6]
    pack77(xmit_messages[index], packed);
 800d2ba:	4c1a      	ldr	r4, [pc, #104]	@ (800d324 <que_message+0xa8>)
	const uint8_t blank[] = "                      ";
 800d2bc:	71b3      	strb	r3, [r6, #6]
    pack77(xmit_messages[index], packed);
 800d2be:	2313      	movs	r3, #19
	const uint8_t blank[] = "                      ";
 800d2c0:	80b2      	strh	r2, [r6, #4]
    pack77(xmit_messages[index], packed);
 800d2c2:	fb03 4405 	mla	r4, r3, r5, r4
	const uint8_t blank[] = "                      ";
 800d2c6:	6030      	str	r0, [r6, #0]
    pack77(xmit_messages[index], packed);
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f7fa ff04 	bl	80080d6 <pack77>
    genft8(packed, tones);
 800d2ce:	4916      	ldr	r1, [pc, #88]	@ (800d328 <que_message+0xac>)
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	f7fa fb2f 	bl	8007934 <genft8>

    BSP_LCD_SetFont (&Font16);
 800d2d6:	4815      	ldr	r0, [pc, #84]	@ (800d32c <que_message+0xb0>)
 800d2d8:	f7f5 fb0a 	bl	80028f0 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d2dc:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800d2e0:	f7f5 faee 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(240, 140, blank,0x03);
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	464a      	mov	r2, r9
 800d2e8:	218c      	movs	r1, #140	@ 0x8c
 800d2ea:	20f0      	movs	r0, #240	@ 0xf0
 800d2ec:	f7f5 fb88 	bl	8002a00 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d2f0:	480f      	ldr	r0, [pc, #60]	@ (800d330 <que_message+0xb4>)
 800d2f2:	f7f5 fae5 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(240, 140, (uint8_t*) xmit_messages[index],0x03);
 800d2f6:	2303      	movs	r3, #3
 800d2f8:	4622      	mov	r2, r4
 800d2fa:	218c      	movs	r1, #140	@ 0x8c
 800d2fc:	20f0      	movs	r0, #240	@ 0xf0
 800d2fe:	f7f5 fb7f 	bl	8002a00 <BSP_LCD_DisplayStringAt>

	strcpy(current_QSO_xmit_message, xmit_messages[index]);
 800d302:	4621      	mov	r1, r4
 800d304:	480b      	ldr	r0, [pc, #44]	@ (800d334 <que_message+0xb8>)
 800d306:	f001 f91e 	bl	800e546 <strcpy>

	if(index == 2)write_ADIF_Log();
 800d30a:	2d02      	cmp	r5, #2
 800d30c:	d101      	bne.n	800d312 <que_message+0x96>
 800d30e:	f7fd f899 	bl	800a444 <write_ADIF_Log>

   }
 800d312:	371c      	adds	r7, #28
 800d314:	46bd      	mov	sp, r7
 800d316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d31a:	bf00      	nop
 800d31c:	20001874 	.word	0x20001874
 800d320:	080559c0 	.word	0x080559c0
 800d324:	20044410 	.word	0x20044410
 800d328:	20001880 	.word	0x20001880
 800d32c:	20000030 	.word	0x20000030
 800d330:	ffff0000 	.word	0xffff0000
 800d334:	20001a64 	.word	0x20001a64

0800d338 <clear_qued_message>:


void clear_qued_message(void) {
 800d338:	b570      	push	{r4, r5, r6, lr}
 800d33a:	b086      	sub	sp, #24

	const uint8_t blank[] = "                      ";
 800d33c:	4b11      	ldr	r3, [pc, #68]	@ (800d384 <clear_qued_message+0x4c>)
 800d33e:	466c      	mov	r4, sp
 800d340:	f103 0210 	add.w	r2, r3, #16
 800d344:	4626      	mov	r6, r4
 800d346:	6818      	ldr	r0, [r3, #0]
 800d348:	3308      	adds	r3, #8
 800d34a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800d34e:	4625      	mov	r5, r4
 800d350:	4293      	cmp	r3, r2
 800d352:	c503      	stmia	r5!, {r0, r1}
 800d354:	462c      	mov	r4, r5
 800d356:	d1f6      	bne.n	800d346 <clear_qued_message+0xe>
 800d358:	889a      	ldrh	r2, [r3, #4]
 800d35a:	6818      	ldr	r0, [r3, #0]
 800d35c:	799b      	ldrb	r3, [r3, #6]
 800d35e:	80aa      	strh	r2, [r5, #4]
 800d360:	71ab      	strb	r3, [r5, #6]
 800d362:	6028      	str	r0, [r5, #0]

    BSP_LCD_SetFont (&Font16);
 800d364:	4808      	ldr	r0, [pc, #32]	@ (800d388 <clear_qued_message+0x50>)
 800d366:	f7f5 fac3 	bl	80028f0 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d36a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800d36e:	f7f5 faa7 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(240, 140, blank,0x03);
 800d372:	2303      	movs	r3, #3
 800d374:	4632      	mov	r2, r6
 800d376:	218c      	movs	r1, #140	@ 0x8c
 800d378:	20f0      	movs	r0, #240	@ 0xf0
 800d37a:	f7f5 fb41 	bl	8002a00 <BSP_LCD_DisplayStringAt>
}
 800d37e:	b006      	add	sp, #24
 800d380:	bd70      	pop	{r4, r5, r6, pc}
 800d382:	bf00      	nop
 800d384:	080559c0 	.word	0x080559c0
 800d388:	20000030 	.word	0x20000030

0800d38c <clear_xmit_messages>:


void clear_xmit_messages(void){
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d38c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
void clear_xmit_messages(void){
 800d390:	b510      	push	{r4, lr}
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d392:	f7f5 fa95 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(240, 130, 240, 120);
 800d396:	22f0      	movs	r2, #240	@ 0xf0
 800d398:	2378      	movs	r3, #120	@ 0x78
 800d39a:	2182      	movs	r1, #130	@ 0x82
 800d39c:	4610      	mov	r0, r2
    }
 800d39e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BSP_LCD_FillRect(240, 130, 240, 120);
 800d3a2:	f7f5 bbeb 	b.w	8002b7c <BSP_LCD_FillRect>
	...

0800d3a8 <Read_Station_File>:

char *CurrentStationName;
char StationFileName[32];

void Read_Station_File( void ){
 800d3a8:	b530      	push	{r4, r5, lr}

	uint8_t i,j;
	char read_buffer[132];
	char* Station_Data;
   	strcpy(CurrentStationName,"StationData");
 800d3aa:	4c25      	ldr	r4, [pc, #148]	@ (800d440 <Read_Station_File+0x98>)
void Read_Station_File( void ){
 800d3ac:	b0a3      	sub	sp, #140	@ 0x8c
   	strcpy(CurrentStationName,"StationData");
 800d3ae:	4925      	ldr	r1, [pc, #148]	@ (800d444 <Read_Station_File+0x9c>)
 800d3b0:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800d3b2:	f001 f8c8 	bl	800e546 <strcpy>
	sprintf(StationFileName,"%s.txt",CurrentStationName);
 800d3b6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800d3b8:	4923      	ldr	r1, [pc, #140]	@ (800d448 <Read_Station_File+0xa0>)
 800d3ba:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 800d3be:	f000 ff4b 	bl	800e258 <siprintf>

	f_mount(&FS, SDPath, 1);
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	4921      	ldr	r1, [pc, #132]	@ (800d44c <Read_Station_File+0xa4>)
 800d3c6:	f104 009c 	add.w	r0, r4, #156	@ 0x9c
 800d3ca:	f7fb ff85 	bl	80092d8 <f_mount>
	   	if ( f_open(&fil, StationFileName, FA_OPEN_ALWAYS | FA_READ) == FR_OK){
 800d3ce:	2211      	movs	r2, #17
 800d3d0:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
 800d3d4:	f504 7033 	add.w	r0, r4, #716	@ 0x2cc
 800d3d8:	f7fc feb4 	bl	800a144 <f_open>
 800d3dc:	4605      	mov	r5, r0
 800d3de:	bb60      	cbnz	r0, 800d43a <Read_Station_File+0x92>

			for(j=0;j<64;j++)read_buffer[j]=0;
 800d3e0:	2240      	movs	r2, #64	@ 0x40
 800d3e2:	4601      	mov	r1, r0
 800d3e4:	a801      	add	r0, sp, #4
 800d3e6:	f000 ffaa 	bl	800e33e <memset>
			f_lseek(&fil,0);
 800d3ea:	4629      	mov	r1, r5
 800d3ec:	f504 7033 	add.w	r0, r4, #716	@ 0x2cc
 800d3f0:	f7fc f9e1 	bl	80097b6 <f_lseek>
			f_gets(read_buffer,64,&fil);
 800d3f4:	f504 7233 	add.w	r2, r4, #716	@ 0x2cc
 800d3f8:	2140      	movs	r1, #64	@ 0x40
 800d3fa:	a801      	add	r0, sp, #4
 800d3fc:	f7fc fb23 	bl	8009a46 <f_gets>
	   		i = strlen(read_buffer);
 800d400:	a801      	add	r0, sp, #4
 800d402:	f7f2 ff6f 	bl	80002e4 <strlen>
	   		read_buffer[i] = 0;
 800d406:	f100 0388 	add.w	r3, r0, #136	@ 0x88

	   		Station_Data = strtok(read_buffer,":");
 800d40a:	4911      	ldr	r1, [pc, #68]	@ (800d450 <Read_Station_File+0xa8>)
	   		read_buffer[i] = 0;
 800d40c:	eb0d 0003 	add.w	r0, sp, r3
 800d410:	f800 5c84 	strb.w	r5, [r0, #-132]
	   		Station_Data = strtok(read_buffer,":");
 800d414:	a801      	add	r0, sp, #4
 800d416:	f000 ffb7 	bl	800e388 <strtok>
 800d41a:	4601      	mov	r1, r0
	   		strcpy(Station_Call, Station_Data);
 800d41c:	4620      	mov	r0, r4
 800d41e:	f001 f892 	bl	800e546 <strcpy>
	   		Station_Data = strtok(NULL,":");
 800d422:	490b      	ldr	r1, [pc, #44]	@ (800d450 <Read_Station_File+0xa8>)
 800d424:	4628      	mov	r0, r5
 800d426:	f000 ffaf 	bl	800e388 <strtok>
 800d42a:	4601      	mov	r1, r0
		   	strcpy(Locator, Station_Data);
 800d42c:	1de0      	adds	r0, r4, #7
 800d42e:	f001 f88a 	bl	800e546 <strcpy>

   		f_close(&fil);
 800d432:	f504 7033 	add.w	r0, r4, #716	@ 0x2cc
 800d436:	f7fc f9ad 	bl	8009794 <f_close>
	   	}



}
 800d43a:	b023      	add	sp, #140	@ 0x8c
 800d43c:	bd30      	pop	{r4, r5, pc}
 800d43e:	bf00      	nop
 800d440:	200443e4 	.word	0x200443e4
 800d444:	080559eb 	.word	0x080559eb
 800d448:	080559f7 	.word	0x080559f7
 800d44c:	20044e48 	.word	0x20044e48
 800d450:	08055a17 	.word	0x08055a17

0800d454 <clear_reply_message_box>:


void clear_reply_message_box(void) {

	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d454:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
void clear_reply_message_box(void) {
 800d458:	b510      	push	{r4, lr}
	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d45a:	f7f5 fa31 	bl	80028c0 <BSP_LCD_SetTextColor>
	    BSP_LCD_FillRect(240, 40, 240, 201);
 800d45e:	22f0      	movs	r2, #240	@ 0xf0
 800d460:	23c9      	movs	r3, #201	@ 0xc9
 800d462:	2128      	movs	r1, #40	@ 0x28
 800d464:	4610      	mov	r0, r2
 }
 800d466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    BSP_LCD_FillRect(240, 40, 240, 201);
 800d46a:	f7f5 bb87 	b.w	8002b7c <BSP_LCD_FillRect>
	...

0800d470 <SD_Initialize>:


void SD_Initialize(void)
	  {
 800d470:	b570      	push	{r4, r5, r6, lr}

    BSP_LCD_SetFont (&Font16);
 800d472:	4815      	ldr	r0, [pc, #84]	@ (800d4c8 <SD_Initialize+0x58>)
    BSP_LCD_SetTextColor(LCD_COLOR_RED);

	    if (isInitialized == 0)
 800d474:	4d15      	ldr	r5, [pc, #84]	@ (800d4cc <SD_Initialize+0x5c>)
    BSP_LCD_SetFont (&Font16);
 800d476:	f7f5 fa3b 	bl	80028f0 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d47a:	4815      	ldr	r0, [pc, #84]	@ (800d4d0 <SD_Initialize+0x60>)
 800d47c:	f7f5 fa20 	bl	80028c0 <BSP_LCD_SetTextColor>
	    if (isInitialized == 0)
 800d480:	f895 44f8 	ldrb.w	r4, [r5, #1272]	@ 0x4f8
 800d484:	b9fc      	cbnz	r4, 800d4c6 <SD_Initialize+0x56>
	    {
	      if (BSP_SD_Init() == MSD_OK)
 800d486:	f7f5 fe1d 	bl	80030c4 <BSP_SD_Init>
 800d48a:	b950      	cbnz	r0, 800d4a2 <SD_Initialize+0x32>
	      {
	        BSP_SD_ITConfig();
 800d48c:	f7f5 fce2 	bl	8002e54 <BSP_SD_ITConfig>
	        isInitialized = 1;
 800d490:	2301      	movs	r3, #1
	        FATFS_LinkDriver(&SD_Driver, SDPath);
 800d492:	4910      	ldr	r1, [pc, #64]	@ (800d4d4 <SD_Initialize+0x64>)
	        isInitialized = 1;
 800d494:	f885 34f8 	strb.w	r3, [r5, #1272]	@ 0x4f8
	        FATFS_LinkDriver(&SD_Driver, SDPath);
 800d498:	480f      	ldr	r0, [pc, #60]	@ (800d4d8 <SD_Initialize+0x68>)
	        {}
	        BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"Reboot Now.",0x03);

	      }
	    }
	  }
 800d49a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	        FATFS_LinkDriver(&SD_Driver, SDPath);
 800d49e:	f7fc bf5f 	b.w	800a360 <FATFS_LinkDriver>
	    	 BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"Insert SD.",0x03);
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	4a0d      	ldr	r2, [pc, #52]	@ (800d4dc <SD_Initialize+0x6c>)
 800d4a6:	2164      	movs	r1, #100	@ 0x64
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f7f5 faa9 	bl	8002a00 <BSP_LCD_DisplayStringAt>
	        while (BSP_SD_IsDetected() != SD_PRESENT)
 800d4ae:	f7f5 fcef 	bl	8002e90 <BSP_SD_IsDetected>
 800d4b2:	2801      	cmp	r0, #1
 800d4b4:	d1fb      	bne.n	800d4ae <SD_Initialize+0x3e>
	        BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"Reboot Now.",0x03);
 800d4b6:	2303      	movs	r3, #3
 800d4b8:	4a09      	ldr	r2, [pc, #36]	@ (800d4e0 <SD_Initialize+0x70>)
 800d4ba:	2164      	movs	r1, #100	@ 0x64
 800d4bc:	2000      	movs	r0, #0
	  }
 800d4be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	        BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"Reboot Now.",0x03);
 800d4c2:	f7f5 ba9d 	b.w	8002a00 <BSP_LCD_DisplayStringAt>
	  }
 800d4c6:	bd70      	pop	{r4, r5, r6, pc}
 800d4c8:	20000030 	.word	0x20000030
 800d4cc:	200443e4 	.word	0x200443e4
 800d4d0:	ffff0000 	.word	0xffff0000
 800d4d4:	20044e48 	.word	0x20044e48
 800d4d8:	0805168c 	.word	0x0805168c
 800d4dc:	080559fe 	.word	0x080559fe
 800d4e0:	08055a09 	.word	0x08055a09

0800d4e4 <Open_Log_File>:





void Open_Log_File( void ){
 800d4e4:	b510      	push	{r4, lr}

		//char header[] = "ADIF EXPORT";


		f_mount(&FS, "SD:", 1);
 800d4e6:	4c16      	ldr	r4, [pc, #88]	@ (800d540 <Open_Log_File+0x5c>)
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	4916      	ldr	r1, [pc, #88]	@ (800d544 <Open_Log_File+0x60>)
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f7fb fef3 	bl	80092d8 <f_mount>
		if ( f_open(&LogFile, file_name_string, FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND) == FR_OK){
 800d4f2:	2232      	movs	r2, #50	@ 0x32
 800d4f4:	4914      	ldr	r1, [pc, #80]	@ (800d548 <Open_Log_File+0x64>)
 800d4f6:	f504 700c 	add.w	r0, r4, #560	@ 0x230
 800d4fa:	f7fc fe23 	bl	800a144 <f_open>
 800d4fe:	b9d0      	cbnz	r0, 800d536 <Open_Log_File+0x52>

			if(f_size(&LogFile) == 0){
 800d500:	f8d4 143c 	ldr.w	r1, [r4, #1084]	@ 0x43c
 800d504:	b9b9      	cbnz	r1, 800d536 <Open_Log_File+0x52>
			f_lseek(&LogFile, f_size(&LogFile));
 800d506:	f504 700c 	add.w	r0, r4, #560	@ 0x230
 800d50a:	f7fc f954 	bl	80097b6 <f_lseek>
			f_puts("ADIF EXPORT",&LogFile);
 800d50e:	f504 710c 	add.w	r1, r4, #560	@ 0x230
 800d512:	480e      	ldr	r0, [pc, #56]	@ (800d54c <Open_Log_File+0x68>)
 800d514:	f7fc fabc 	bl	8009a90 <f_puts>
			f_puts("\n",&LogFile);
 800d518:	f504 710c 	add.w	r1, r4, #560	@ 0x230
 800d51c:	480c      	ldr	r0, [pc, #48]	@ (800d550 <Open_Log_File+0x6c>)
 800d51e:	f7fc fab7 	bl	8009a90 <f_puts>
			f_puts("<eoh>",&LogFile);
 800d522:	f504 710c 	add.w	r1, r4, #560	@ 0x230
 800d526:	480b      	ldr	r0, [pc, #44]	@ (800d554 <Open_Log_File+0x70>)
 800d528:	f7fc fab2 	bl	8009a90 <f_puts>
			f_puts("\n",&LogFile);
 800d52c:	f504 710c 	add.w	r1, r4, #560	@ 0x230
 800d530:	4807      	ldr	r0, [pc, #28]	@ (800d550 <Open_Log_File+0x6c>)
 800d532:	f7fc faad 	bl	8009a90 <f_puts>
			}

		 	}

		f_close(&LogFile);
 800d536:	4808      	ldr	r0, [pc, #32]	@ (800d558 <Open_Log_File+0x74>)



}
 800d538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		f_close(&LogFile);
 800d53c:	f7fc b92a 	b.w	8009794 <f_close>
 800d540:	20044988 	.word	0x20044988
 800d544:	08055a15 	.word	0x08055a15
 800d548:	200019d3 	.word	0x200019d3
 800d54c:	08055a19 	.word	0x08055a19
 800d550:	08055c19 	.word	0x08055c19
 800d554:	08055a25 	.word	0x08055a25
 800d558:	20044bb8 	.word	0x20044bb8

0800d55c <Write_Log_Data>:





void Write_Log_Data( char *ch ){
 800d55c:	b538      	push	{r3, r4, r5, lr}
	if ( sButtonData[4].state == 1 ){
 800d55e:	4b14      	ldr	r3, [pc, #80]	@ (800d5b0 <Write_Log_Data+0x54>)
void Write_Log_Data( char *ch ){
 800d560:	4605      	mov	r5, r0
	if ( sButtonData[4].state == 1 ){
 800d562:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800d566:	2a01      	cmp	r2, #1
 800d568:	d120      	bne.n	800d5ac <Write_Log_Data+0x50>

		f_mount(&FS, "SD:", 1);
 800d56a:	4c12      	ldr	r4, [pc, #72]	@ (800d5b4 <Write_Log_Data+0x58>)
 800d56c:	4912      	ldr	r1, [pc, #72]	@ (800d5b8 <Write_Log_Data+0x5c>)
 800d56e:	4620      	mov	r0, r4
 800d570:	f7fb feb2 	bl	80092d8 <f_mount>
		if ( f_open(&LogFile, file_name_string, FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND) == FR_OK){
 800d574:	2232      	movs	r2, #50	@ 0x32
 800d576:	4911      	ldr	r1, [pc, #68]	@ (800d5bc <Write_Log_Data+0x60>)
 800d578:	f504 700c 	add.w	r0, r4, #560	@ 0x230
 800d57c:	f7fc fde2 	bl	800a144 <f_open>
 800d580:	b978      	cbnz	r0, 800d5a2 <Write_Log_Data+0x46>
			f_lseek(&LogFile, f_size(&LogFile));
 800d582:	f8d4 143c 	ldr.w	r1, [r4, #1084]	@ 0x43c
 800d586:	f504 700c 	add.w	r0, r4, #560	@ 0x230
 800d58a:	f7fc f914 	bl	80097b6 <f_lseek>
			f_puts(ch,&LogFile);
 800d58e:	f504 710c 	add.w	r1, r4, #560	@ 0x230
 800d592:	4628      	mov	r0, r5
 800d594:	f7fc fa7c 	bl	8009a90 <f_puts>
			f_puts("\n",&LogFile);
 800d598:	f504 710c 	add.w	r1, r4, #560	@ 0x230
 800d59c:	4808      	ldr	r0, [pc, #32]	@ (800d5c0 <Write_Log_Data+0x64>)
 800d59e:	f7fc fa77 	bl	8009a90 <f_puts>

		 	}

		f_close(&LogFile);
 800d5a2:	4808      	ldr	r0, [pc, #32]	@ (800d5c4 <Write_Log_Data+0x68>)

	}

}
 800d5a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		f_close(&LogFile);
 800d5a8:	f7fc b8f4 	b.w	8009794 <f_close>
}
 800d5ac:	bd38      	pop	{r3, r4, r5, pc}
 800d5ae:	bf00      	nop
 800d5b0:	20000c40 	.word	0x20000c40
 800d5b4:	20044988 	.word	0x20044988
 800d5b8:	08055a15 	.word	0x08055a15
 800d5bc:	200019d3 	.word	0x200019d3
 800d5c0:	08055c19 	.word	0x08055c19
 800d5c4:	20044bb8 	.word	0x20044bb8

0800d5c8 <Close_Log_File>:

void Close_Log_File( void){

	f_close(&LogFile);
 800d5c8:	4801      	ldr	r0, [pc, #4]	@ (800d5d0 <Close_Log_File+0x8>)
 800d5ca:	f7fc b8e3 	b.w	8009794 <f_close>
 800d5ce:	bf00      	nop
 800d5d0:	20044bb8 	.word	0x20044bb8

0800d5d4 <update_synchronization>:
	    }
}



void update_synchronization(void) {
 800d5d4:	b510      	push	{r4, lr}
	current_time = HAL_GetTick();
 800d5d6:	f7f6 fc07 	bl	8003de8 <HAL_GetTick>
 800d5da:	4a1a      	ldr	r2, [pc, #104]	@ (800d644 <update_synchronization+0x70>)
    ft8_time = current_time  - start_time;

    ft8_hours =  (int8_t)(ft8_time/3600000);
 800d5dc:	491a      	ldr	r1, [pc, #104]	@ (800d648 <update_synchronization+0x74>)
    hours_fraction = ft8_time % 3600000;
    ft8_minutes = (int8_t)  (hours_fraction/60000);
 800d5de:	f64e 2460 	movw	r4, #60000	@ 0xea60
    ft8_time = current_time  - start_time;
 800d5e2:	6853      	ldr	r3, [r2, #4]
	current_time = HAL_GetTick();
 800d5e4:	6010      	str	r0, [r2, #0]
    ft8_time = current_time  - start_time;
 800d5e6:	1ac0      	subs	r0, r0, r3
    ft8_hours =  (int8_t)(ft8_time/3600000);
 800d5e8:	fbb0 f3f1 	udiv	r3, r0, r1
 800d5ec:	7313      	strb	r3, [r2, #12]
    hours_fraction = ft8_time % 3600000;
 800d5ee:	fb01 0313 	mls	r3, r1, r3, r0
    ft8_time = current_time  - start_time;
 800d5f2:	6090      	str	r0, [r2, #8]
    hours_fraction = ft8_time % 3600000;
 800d5f4:	6113      	str	r3, [r2, #16]
    ft8_minutes = (int8_t)  (hours_fraction/60000);
 800d5f6:	fbb3 f1f4 	udiv	r1, r3, r4
    ft8_seconds = (int8_t)((hours_fraction % 60000)/1000);
 800d5fa:	fb04 3311 	mls	r3, r4, r1, r3
    ft8_minutes = (int8_t)  (hours_fraction/60000);
 800d5fe:	7511      	strb	r1, [r2, #20]
    ft8_seconds = (int8_t)((hours_fraction % 60000)/1000);
 800d600:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d604:	fbb3 f3f1 	udiv	r3, r3, r1
 800d608:	7553      	strb	r3, [r2, #21]

		if( ft8_time % 15000 <= 160 || FT_8_counter > 90 )    {
 800d60a:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800d60e:	490f      	ldr	r1, [pc, #60]	@ (800d64c <update_synchronization+0x78>)
 800d610:	fbb0 f2f3 	udiv	r2, r0, r3
 800d614:	fb03 0012 	mls	r0, r3, r2, r0
 800d618:	28a0      	cmp	r0, #160	@ 0xa0
 800d61a:	d902      	bls.n	800d622 <update_synchronization+0x4e>
 800d61c:	680b      	ldr	r3, [r1, #0]
 800d61e:	2b5a      	cmp	r3, #90	@ 0x5a
 800d620:	dd0e      	ble.n	800d640 <update_synchronization+0x6c>

		ft8_flag = 1;
 800d622:	2201      	movs	r2, #1
 800d624:	4b0a      	ldr	r3, [pc, #40]	@ (800d650 <update_synchronization+0x7c>)
		FT_8_counter = 0;
		ft8_marker = 1;
		decode_flag = 0;
		display_RealTime(100, 240);
 800d626:	2064      	movs	r0, #100	@ 0x64
		ft8_flag = 1;
 800d628:	601a      	str	r2, [r3, #0]
		FT_8_counter = 0;
 800d62a:	2300      	movs	r3, #0
 800d62c:	600b      	str	r3, [r1, #0]
		ft8_marker = 1;
 800d62e:	4909      	ldr	r1, [pc, #36]	@ (800d654 <update_synchronization+0x80>)
 800d630:	600a      	str	r2, [r1, #0]
		display_RealTime(100, 240);
 800d632:	21f0      	movs	r1, #240	@ 0xf0
		decode_flag = 0;
 800d634:	4a08      	ldr	r2, [pc, #32]	@ (800d658 <update_synchronization+0x84>)
		}

}
 800d636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		decode_flag = 0;
 800d63a:	6013      	str	r3, [r2, #0]
		display_RealTime(100, 240);
 800d63c:	f7fd b83c 	b.w	800a6b8 <display_RealTime>
}
 800d640:	bd10      	pop	{r4, pc}
 800d642:	bf00      	nop
 800d644:	20044de4 	.word	0x20044de4
 800d648:	0036ee80 	.word	0x0036ee80
 800d64c:	20009530 	.word	0x20009530
 800d650:	2000952c 	.word	0x2000952c
 800d654:	2003a500 	.word	0x2003a500
 800d658:	2000950c 	.word	0x2000950c

0800d65c <HAL_Delay>:
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */

void HAL_Delay(__IO uint32_t Delay)
{
 800d65c:	b082      	sub	sp, #8
  while(Delay) 
  {
    if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) 
 800d65e:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
{
 800d662:	9001      	str	r0, [sp, #4]
  while(Delay) 
 800d664:	9b01      	ldr	r3, [sp, #4]
 800d666:	b90b      	cbnz	r3, 800d66c <HAL_Delay+0x10>
    {
      Delay--;
    }
  }
}
 800d668:	b002      	add	sp, #8
 800d66a:	4770      	bx	lr
    if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) 
 800d66c:	6913      	ldr	r3, [r2, #16]
 800d66e:	03db      	lsls	r3, r3, #15
 800d670:	d5f8      	bpl.n	800d664 <HAL_Delay+0x8>
      Delay--;
 800d672:	9b01      	ldr	r3, [sp, #4]
 800d674:	3b01      	subs	r3, #1
 800d676:	9301      	str	r3, [sp, #4]
 800d678:	e7f4      	b.n	800d664 <HAL_Delay+0x8>
 800d67a:	0000      	movs	r0, r0
 800d67c:	0000      	movs	r0, r0
	...

0800d680 <main>:
 {
 800d680:	b580      	push	{r7, lr}
 800d682:	b0b2      	sub	sp, #200	@ 0xc8
  __ASM volatile ("dsb 0xF":::"memory");
 800d684:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d688:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800d68c:	4a39      	ldr	r2, [pc, #228]	@ (800d774 <main+0xf4>)
 800d68e:	2100      	movs	r1, #0
 800d690:	f8c2 1250 	str.w	r1, [r2, #592]	@ 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800d694:	6953      	ldr	r3, [r2, #20]
 800d696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d69a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800d69c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d6a0:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800d6a4:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d6a8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800d6ac:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d6b0:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d6b4:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d6b8:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800d6bc:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d6be:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d6c2:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d6c4:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways--);
 800d6c8:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d6ca:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways--);
 800d6ce:	d2f9      	bcs.n	800d6c4 <main+0x44>
    } while(sets--);
 800d6d0:	3b20      	subs	r3, #32
 800d6d2:	f113 0f20 	cmn.w	r3, #32
 800d6d6:	d1f2      	bne.n	800d6be <main+0x3e>
 800d6d8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800d6dc:	6953      	ldr	r3, [r2, #20]
 800d6de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d6e2:	6153      	str	r3, [r2, #20]
 800d6e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d6e8:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800d6ec:	f7f6 fb62 	bl	8003db4 <HAL_Init>
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d6f0:	2501      	movs	r5, #1
  PTT_Out_Init();
 800d6f2:	f7fe fefd 	bl	800c4f0 <PTT_Out_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d6f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d6fa:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;  
 800d6fc:	f04f 0819 	mov.w	r8, #25
 800d700:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d704:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d706:	940f      	str	r4, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d708:	e9cd 5305 	strd	r5, r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800d70c:	2300      	movs	r3, #0
 800d70e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d710:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d714:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800d718:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 400;  
 800d71a:	e9cd 870d 	strd	r8, r7, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800d71e:	9310      	str	r3, [sp, #64]	@ 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d720:	f7f7 fbc2 	bl	8004ea8 <HAL_RCC_OscConfig>
 800d724:	b100      	cbz	r0, 800d728 <main+0xa8>
 800d726:	e7fe      	b.n	800d726 <main+0xa6>
  {
    Error_Handler();
  }
  
  /* Activate the OverDrive to reach the 200 Mhz Frequency */
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800d728:	f7f7 fb84 	bl	8004e34 <HAL_PWREx_EnableOverDrive>
 800d72c:	b100      	cbz	r0, 800d730 <main+0xb0>
 800d72e:	e7fe      	b.n	800d72e <main+0xae>
  {
    Error_Handler();
  }
  
  /* Select PLLSAI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d730:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
 800d734:	f04f 0cc0 	mov.w	ip, #192	@ 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct)  != HAL_OK)
 800d738:	a811      	add	r0, sp, #68	@ 0x44
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800d73a:	9519      	str	r5, [sp, #100]	@ 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d73c:	9311      	str	r3, [sp, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800d73e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d742:	9330      	str	r3, [sp, #192]	@ 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
 800d744:	2304      	movs	r3, #4
 800d746:	e9cd c316 	strd	ip, r3, [sp, #88]	@ 0x58
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct)  != HAL_OK)
 800d74a:	f7f7 febd 	bl	80054c8 <HAL_RCCEx_PeriphCLKConfig>
 800d74e:	b100      	cbz	r0, 800d752 <main+0xd2>
 800d750:	e7fe      	b.n	800d750 <main+0xd0>
    Error_Handler();
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800d752:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d754:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d758:	9002      	str	r0, [sp, #8]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800d75a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d75c:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d764:	e9cd 1303 	strd	r1, r3, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800d768:	2106      	movs	r1, #6
 800d76a:	f7f7 fd7d 	bl	8005268 <HAL_RCC_ClockConfig>
 800d76e:	4604      	mov	r4, r0
 800d770:	b110      	cbz	r0, 800d778 <main+0xf8>
 800d772:	e7fe      	b.n	800d772 <main+0xf2>
 800d774:	e000ed00 	.word	0xe000ed00
  start_audio_I2C ();
 800d778:	f7fd fd4a 	bl	800b210 <start_audio_I2C>
  HAL_Delay(10);
 800d77c:	200a      	movs	r0, #10
 800d77e:	f7ff ff6d 	bl	800d65c <HAL_Delay>
  BSP_PB_Init(BUTTON_TAMPER, BUTTON_MODE_GPIO);
 800d782:	4621      	mov	r1, r4
 800d784:	4628      	mov	r0, r5
 800d786:	f7f4 fc41 	bl	800200c <BSP_PB_Init>
  BSP_LED_Init(LED1);
 800d78a:	4620      	mov	r0, r4
 800d78c:	f7f4 fc18 	bl	8001fc0 <BSP_LED_Init>
  BSP_LCD_Init();
 800d790:	f7f5 fb08 	bl	8002da4 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS); 
 800d794:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800d798:	4628      	mov	r0, r5
 800d79a:	f7f5 f84f 	bl	800283c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f7f5 f888 	bl	80028b4 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 800d7a4:	f7f5 fa26 	bl	8002bf4 <BSP_LCD_DisplayOn>
  HAL_Delay(10);
 800d7a8:	200a      	movs	r0, #10
 800d7aa:	f7ff ff57 	bl	800d65c <HAL_Delay>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800d7ae:	f7f5 f82d 	bl	800280c <BSP_LCD_GetXSize>
 800d7b2:	4606      	mov	r6, r0
 800d7b4:	f7f5 f836 	bl	8002824 <BSP_LCD_GetYSize>
 800d7b8:	b281      	uxth	r1, r0
 800d7ba:	b2b0      	uxth	r0, r6
	   if (DSP_Flag == 1) {
 800d7bc:	4e88      	ldr	r6, [pc, #544]	@ (800d9e0 <main+0x360>)
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800d7be:	f7f5 fe07 	bl	80033d0 <BSP_TS_Init>
  setup_display();
 800d7c2:	f7fd fa01 	bl	800abc8 <setup_display>
  initalize_constants();
 800d7c6:	f7f9 fe01 	bl	80073cc <initalize_constants>
  init_DSP();
 800d7ca:	f7fd fc01 	bl	800afd0 <init_DSP>
  SD_Initialize();
 800d7ce:	f7ff fe4f 	bl	800d470 <SD_Initialize>
  Options_Initialize();
 800d7d2:	f000 f9b9 	bl	800db48 <Options_Initialize>
  EXT_I2C_Init();
 800d7d6:	f7f4 fd1d 	bl	8002214 <EXT_I2C_Init>
  HAL_Delay(10);
 800d7da:	200a      	movs	r0, #10
 800d7dc:	f7ff ff3e 	bl	800d65c <HAL_Delay>
  DS3231_init();
 800d7e0:	f7fc fec5 	bl	800a56e <DS3231_init>
  display_Real_Date(0, 240);
 800d7e4:	21f0      	movs	r1, #240	@ 0xf0
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f7fc fff6 	bl	800a7d8 <display_Real_Date>
  start_Si5351();
 800d7ec:	f7ff f880 	bl	800c8f0 <start_Si5351>
  cursor = 112;  // 1000 Hz
 800d7f0:	2070      	movs	r0, #112	@ 0x70
 800d7f2:	4b7c      	ldr	r3, [pc, #496]	@ (800d9e4 <main+0x364>)
 800d7f4:	8018      	strh	r0, [r3, #0]
  Set_Cursor_Frequency(cursor);
 800d7f6:	f7fd fa1b 	bl	800ac30 <Set_Cursor_Frequency>
  show_variable(400, 25,(int)  NCO_Frequency );
 800d7fa:	4b7b      	ldr	r3, [pc, #492]	@ (800d9e8 <main+0x368>)
 800d7fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d800:	f7f3 fa3a 	bl	8000c78 <__aeabi_d2iz>
 800d804:	4641      	mov	r1, r8
 800d806:	4602      	mov	r2, r0
 800d808:	4638      	mov	r0, r7
 800d80a:	f7fd f957 	bl	800aabc <show_variable>
  show_short(405, 255, AGC_Gain );
 800d80e:	4b77      	ldr	r3, [pc, #476]	@ (800d9ec <main+0x36c>)
 800d810:	21ff      	movs	r1, #255	@ 0xff
 800d812:	f240 1095 	movw	r0, #405	@ 0x195
 800d816:	781a      	ldrb	r2, [r3, #0]
 800d818:	f7fd f96a 	bl	800aaf0 <show_short>
  HAL_Delay(1);
 800d81c:	4628      	mov	r0, r5
 800d81e:	f7ff ff1d 	bl	800d65c <HAL_Delay>
  Xmit_Mode = 0;
 800d822:	4b73      	ldr	r3, [pc, #460]	@ (800d9f0 <main+0x370>)
 800d824:	601c      	str	r4, [r3, #0]
  Read_Station_File();
 800d826:	f7ff fdbf 	bl	800d3a8 <Read_Station_File>
  HAL_Delay(10);
 800d82a:	200a      	movs	r0, #10
 800d82c:	f7ff ff16 	bl	800d65c <HAL_Delay>
  start_duplex(0);
 800d830:	4620      	mov	r0, r4
 800d832:	f7fd fcf7 	bl	800b224 <start_duplex>
  HAL_Delay(10);
 800d836:	200a      	movs	r0, #10
 800d838:	f7ff ff10 	bl	800d65c <HAL_Delay>
  set_codec_input_gain();
 800d83c:	f7fe fec8 	bl	800c5d0 <set_codec_input_gain>
  HAL_Delay(10);
 800d840:	200a      	movs	r0, #10
 800d842:	f7ff ff0b 	bl	800d65c <HAL_Delay>
  receive_sequence();
 800d846:	f7fe fed3 	bl	800c5f0 <receive_sequence>
  HAL_Delay(10);
 800d84a:	200a      	movs	r0, #10
 800d84c:	f7ff ff06 	bl	800d65c <HAL_Delay>
  Init_Waterfall ();
 800d850:	f7fd fabe 	bl	800add0 <Init_Waterfall>
  HAL_Delay(10);
 800d854:	200a      	movs	r0, #10
 800d856:	f7ff ff01 	bl	800d65c <HAL_Delay>
  Set_HP_Gain(30);
 800d85a:	201e      	movs	r0, #30
 800d85c:	f7fc fe22 	bl	800a4a4 <Set_HP_Gain>
  HAL_Delay(10);
 800d860:	200a      	movs	r0, #10
 800d862:	f7ff fefb 	bl	800d65c <HAL_Delay>
  FT8_Sync();
 800d866:	f7ff f86d 	bl	800c944 <FT8_Sync>
  HAL_Delay(10);
 800d86a:	200a      	movs	r0, #10
 800d86c:	f7ff fef6 	bl	800d65c <HAL_Delay>
							ft8_shift = 0;
 800d870:	ed9f 8b59 	vldr	d8, [pc, #356]	@ 800d9d8 <main+0x358>
	   if (DSP_Flag == 1) {
 800d874:	6833      	ldr	r3, [r6, #0]
 800d876:	4c5f      	ldr	r4, [pc, #380]	@ (800d9f4 <main+0x374>)
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d150      	bne.n	800d91e <main+0x29e>
		   I2S2_RX_ProcessBuffer(buff_offset);
 800d87c:	4b5e      	ldr	r3, [pc, #376]	@ (800d9f8 <main+0x378>)
			if(xmit_flag == 1  ){
 800d87e:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 800da18 <main+0x398>
		   I2S2_RX_ProcessBuffer(buff_offset);
 800d882:	8818      	ldrh	r0, [r3, #0]
 800d884:	f7fd fd0c 	bl	800b2a0 <I2S2_RX_ProcessBuffer>
			if(xmit_flag == 1  ){
 800d888:	f8d9 1000 	ldr.w	r1, [r9]
 800d88c:	2901      	cmp	r1, #1
 800d88e:	d139      	bne.n	800d904 <main+0x284>
				if(ft8_xmit_delay>= 20) {
 800d890:	4f5a      	ldr	r7, [pc, #360]	@ (800d9fc <main+0x37c>)
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	2b13      	cmp	r3, #19
 800d896:	f340 8085 	ble.w	800d9a4 <main+0x324>
							if( Tune_On == 0  )
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d17d      	bne.n	800d99c <main+0x31c>
								if(ft8_xmit_counter < 79 ){
 800d8a0:	4d57      	ldr	r5, [pc, #348]	@ (800da00 <main+0x380>)
 800d8a2:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 800da1c <main+0x39c>
 800d8a6:	682b      	ldr	r3, [r5, #0]
 800d8a8:	2b4e      	cmp	r3, #78	@ 0x4e
 800d8aa:	dc16      	bgt.n	800d8da <main+0x25a>
									if (Xmit_DSP_counter % 4 == 0) {
 800d8ac:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800d8b0:	0792      	lsls	r2, r2, #30
 800d8b2:	d112      	bne.n	800d8da <main+0x25a>
									ft8_shift = ft8_hz 	* (double) tones[ft8_xmit_counter];
 800d8b4:	4a53      	ldr	r2, [pc, #332]	@ (800da04 <main+0x384>)
 800d8b6:	f812 a003 	ldrb.w	sl, [r2, r3]
 800d8ba:	4650      	mov	r0, sl
 800d8bc:	f7f2 feb2 	bl	8000624 <__aeabi_ui2d>
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	4b51      	ldr	r3, [pc, #324]	@ (800da08 <main+0x388>)
 800d8c4:	f7f2 ff28 	bl	8000718 <__aeabi_dmul>
 800d8c8:	4b50      	ldr	r3, [pc, #320]	@ (800da0c <main+0x38c>)
 800d8ca:	e9c3 0100 	strd	r0, r1, [r3]
									set_FT8_Tone(tones[ft8_xmit_counter ]);
 800d8ce:	4650      	mov	r0, sl
 800d8d0:	f000 fa30 	bl	800dd34 <set_FT8_Tone>
									ft8_xmit_counter++;
 800d8d4:	682b      	ldr	r3, [r5, #0]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	602b      	str	r3, [r5, #0]
								Xmit_DSP_counter++;
 800d8da:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	f8c8 3018 	str.w	r3, [r8, #24]
								if(ft8_xmit_counter == 79){
 800d8e4:	682b      	ldr	r3, [r5, #0]
 800d8e6:	2b4f      	cmp	r3, #79	@ 0x4f
 800d8e8:	d10c      	bne.n	800d904 <main+0x284>
								xmit_flag = 0;
 800d8ea:	2500      	movs	r5, #0
 800d8ec:	f8c9 5000 	str.w	r5, [r9]
								ft8_receive_sequence();
 800d8f0:	f000 f992 	bl	800dc18 <ft8_receive_sequence>
								receive_sequence();
 800d8f4:	f7fe fe7c 	bl	800c5f0 <receive_sequence>
								if( Beacon_On == 0 ) clear_qued_message();
 800d8f8:	4b45      	ldr	r3, [pc, #276]	@ (800da10 <main+0x390>)
								ft8_xmit_delay =0;
 800d8fa:	603d      	str	r5, [r7, #0]
								if( Beacon_On == 0 ) clear_qued_message();
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	b90b      	cbnz	r3, 800d904 <main+0x284>
 800d900:	f7ff fd1a 	bl	800d338 <clear_qued_message>
		  if(Tune_On == 1)  {
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	2b01      	cmp	r3, #1
 800d908:	d107      	bne.n	800d91a <main+0x29a>
			  display_RealTime(100, 240);
 800d90a:	21f0      	movs	r1, #240	@ 0xf0
 800d90c:	2064      	movs	r0, #100	@ 0x64
 800d90e:	f7fc fed3 	bl	800a6b8 <display_RealTime>
			  display_Real_Date(0, 240);
 800d912:	21f0      	movs	r1, #240	@ 0xf0
 800d914:	2000      	movs	r0, #0
 800d916:	f7fc ff5f 	bl	800a7d8 <display_Real_Date>
		   DSP_Flag = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	6033      	str	r3, [r6, #0]
 	    if(decode_flag == 1 && Tune_On == 0 && xmit_flag == 0)  {
 800d91e:	4f3d      	ldr	r7, [pc, #244]	@ (800da14 <main+0x394>)
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	2b01      	cmp	r3, #1
 800d924:	d11d      	bne.n	800d962 <main+0x2e2>
 800d926:	4a3c      	ldr	r2, [pc, #240]	@ (800da18 <main+0x398>)
 800d928:	6823      	ldr	r3, [r4, #0]
 800d92a:	6812      	ldr	r2, [r2, #0]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	d118      	bne.n	800d962 <main+0x2e2>
 	    master_decoded = ft8_decode();
 800d930:	f7ff f8a2 	bl	800ca78 <ft8_decode>
 800d934:	4d39      	ldr	r5, [pc, #228]	@ (800da1c <main+0x39c>)
 	    if (master_decoded > 0) {
 800d936:	2800      	cmp	r0, #0
 	    master_decoded = ft8_decode();
 800d938:	61e8      	str	r0, [r5, #28]
 	    if (master_decoded > 0) {
 800d93a:	dd10      	ble.n	800d95e <main+0x2de>
 	    	if(Beacon_On == 1)  service_Beacon_mode(master_decoded);
 800d93c:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 800da10 <main+0x390>
 	    	display_messages(master_decoded);
 800d940:	f7ff f816 	bl	800c970 <display_messages>
 	    	if(Beacon_On == 1)  service_Beacon_mode(master_decoded);
 800d944:	f8d8 3000 	ldr.w	r3, [r8]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d102      	bne.n	800d952 <main+0x2d2>
 800d94c:	69e8      	ldr	r0, [r5, #28]
 800d94e:	f000 f9bb 	bl	800dcc8 <service_Beacon_mode>
 	    	if( Beacon_On == 0 ) service_QSO_mode(master_decoded, 0);
 800d952:	f8d8 1000 	ldr.w	r1, [r8]
 800d956:	b911      	cbnz	r1, 800d95e <main+0x2de>
 800d958:	69e8      	ldr	r0, [r5, #28]
 800d95a:	f000 f9a3 	bl	800dca4 <service_QSO_mode>
 	  	decode_flag = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	603b      	str	r3, [r7, #0]
 	   if( FT_8_counter  > 0 && FT_8_counter < 90) Process_Touch();
 800d962:	4b2f      	ldr	r3, [pc, #188]	@ (800da20 <main+0x3a0>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	3b01      	subs	r3, #1
 800d968:	2b58      	cmp	r3, #88	@ 0x58
 800d96a:	d801      	bhi.n	800d970 <main+0x2f0>
 800d96c:	f7fd f9d0 	bl	800ad10 <Process_Touch>
	     if(  Tune_On == 0 && FT8_Touch_Flag == 1 && Beacon_On == 0 ) process_selected_Station(master_decoded, FT_8_TouchIndex);
 800d970:	6823      	ldr	r3, [r4, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d12b      	bne.n	800d9ce <main+0x34e>
 800d976:	4b2b      	ldr	r3, [pc, #172]	@ (800da24 <main+0x3a4>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d01a      	beq.n	800d9b4 <main+0x334>
	     if(  Tune_On == 0 && FT8_Message_Touch == 1 && Beacon_On == 0 ) 	{
 800d97e:	4d2a      	ldr	r5, [pc, #168]	@ (800da28 <main+0x3a8>)
 800d980:	682c      	ldr	r4, [r5, #0]
 800d982:	2c01      	cmp	r4, #1
 800d984:	d123      	bne.n	800d9ce <main+0x34e>
 800d986:	4b22      	ldr	r3, [pc, #136]	@ (800da10 <main+0x390>)
 800d988:	681f      	ldr	r7, [r3, #0]
 800d98a:	bb07      	cbnz	r7, 800d9ce <main+0x34e>
	    	 que_message(FT_8_MessageIndex );
 800d98c:	4b27      	ldr	r3, [pc, #156]	@ (800da2c <main+0x3ac>)
 800d98e:	6818      	ldr	r0, [r3, #0]
 800d990:	f7ff fc74 	bl	800d27c <que_message>
	    	 QSO_xmit = 1;
 800d994:	4b21      	ldr	r3, [pc, #132]	@ (800da1c <main+0x39c>)
	    	 FT8_Message_Touch = 0;
 800d996:	602f      	str	r7, [r5, #0]
	    	 QSO_xmit = 1;
 800d998:	621c      	str	r4, [r3, #32]
 800d99a:	e018      	b.n	800d9ce <main+0x34e>
							ft8_shift = 0;
 800d99c:	4b1b      	ldr	r3, [pc, #108]	@ (800da0c <main+0x38c>)
 800d99e:	ed83 8b00 	vstr	d8, [r3]
 800d9a2:	e7af      	b.n	800d904 <main+0x284>
					ft8_xmit_delay++;
 800d9a4:	3301      	adds	r3, #1
					if(ft8_xmit_delay == 16)  output_enable(SI5351_CLK0, 1);
 800d9a6:	2b10      	cmp	r3, #16
					ft8_xmit_delay++;
 800d9a8:	603b      	str	r3, [r7, #0]
					if(ft8_xmit_delay == 16)  output_enable(SI5351_CLK0, 1);
 800d9aa:	d1ab      	bne.n	800d904 <main+0x284>
 800d9ac:	2000      	movs	r0, #0
 800d9ae:	f7fd fd73 	bl	800b498 <output_enable>
 800d9b2:	e7a7      	b.n	800d904 <main+0x284>
	     if(  Tune_On == 0 && FT8_Touch_Flag == 1 && Beacon_On == 0 ) process_selected_Station(master_decoded, FT_8_TouchIndex);
 800d9b4:	4b16      	ldr	r3, [pc, #88]	@ (800da10 <main+0x390>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1e0      	bne.n	800d97e <main+0x2fe>
 800d9bc:	4b1c      	ldr	r3, [pc, #112]	@ (800da30 <main+0x3b0>)
 800d9be:	6819      	ldr	r1, [r3, #0]
 800d9c0:	4b16      	ldr	r3, [pc, #88]	@ (800da1c <main+0x39c>)
 800d9c2:	69d8      	ldr	r0, [r3, #28]
 800d9c4:	f7ff f9b2 	bl	800cd2c <process_selected_Station>
	     if(  Tune_On == 0 && FT8_Message_Touch == 1 && Beacon_On == 0 ) 	{
 800d9c8:	6823      	ldr	r3, [r4, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d0d7      	beq.n	800d97e <main+0x2fe>
	    update_synchronization();
 800d9ce:	f7ff fe01 	bl	800d5d4 <update_synchronization>
	   if (DSP_Flag == 1) {
 800d9d2:	e74f      	b.n	800d874 <main+0x1f4>
 800d9d4:	f3af 8000 	nop.w
	...
 800d9e0:	2003a51c 	.word	0x2003a51c
 800d9e4:	20001ba2 	.word	0x20001ba2
 800d9e8:	2003a508 	.word	0x2003a508
 800d9ec:	20000ff0 	.word	0x20000ff0
 800d9f0:	2003e948 	.word	0x2003e948
 800d9f4:	200439d4 	.word	0x200439d4
 800d9f8:	2003a518 	.word	0x2003a518
 800d9fc:	2003e938 	.word	0x2003e938
 800da00:	2003e940 	.word	0x2003e940
 800da04:	20001880 	.word	0x20001880
 800da08:	40190000 	.word	0x40190000
 800da0c:	2003e930 	.word	0x2003e930
 800da10:	200439d0 	.word	0x200439d0
 800da14:	2000950c 	.word	0x2000950c
 800da18:	2003e944 	.word	0x2003e944
 800da1c:	20044de4 	.word	0x20044de4
 800da20:	20009530 	.word	0x20009530
 800da24:	20001be0 	.word	0x20001be0
 800da28:	20001be4 	.word	0x20001be4
 800da2c:	20001bac 	.word	0x20001bac
 800da30:	20001ba8 	.word	0x20001ba8

0800da34 <Options_SetValue>:
*/


void Options_SetValue(int optionIdx, int16_t newValue)
{
	s_optionsData[optionIdx].CurrentValue = newValue;
 800da34:	4b02      	ldr	r3, [pc, #8]	@ (800da40 <Options_SetValue+0xc>)
 800da36:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800da3a:	8199      	strh	r1, [r3, #12]

    }
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	20001010 	.word	0x20001010

0800da44 <Options_ResetToDefaults>:
	s_optionsData[optionIdx].CurrentValue = newValue;
 800da44:	4b01      	ldr	r3, [pc, #4]	@ (800da4c <Options_ResetToDefaults+0x8>)
 800da46:	889a      	ldrh	r2, [r3, #4]
 800da48:	819a      	strh	r2, [r3, #12]
{
	int i;
	for (i = 0; i < NUM_OPTIONS; i++) {
		Options_SetValue(i, s_optionsData[i].Initial);
	}
}
 800da4a:	4770      	bx	lr
 800da4c:	20001010 	.word	0x20001010

0800da50 <Write_Int_MicroSD>:
//      return newValue;
//}

//Routine to write a integer value to the MicroSD starting at MicroSD address MicroSD_Addr
void Write_Int_MicroSD(uint16_t DiskBlock, int16_t value)
{
 800da50:	b570      	push	{r4, r5, r6, lr}
 800da52:	b0a2      	sub	sp, #136	@ 0x88

	uint8_t i;
	char read_buffer[132];

	for(i=0;i<32;i++)read_buffer[i]=0;
	f_mount(&SDFatFs, SDPath, 1);
 800da54:	4c14      	ldr	r4, [pc, #80]	@ (800daa8 <Write_Int_MicroSD+0x58>)
{
 800da56:	4606      	mov	r6, r0
 800da58:	460d      	mov	r5, r1
	for(i=0;i<32;i++)read_buffer[i]=0;
 800da5a:	2220      	movs	r2, #32
 800da5c:	2100      	movs	r1, #0
 800da5e:	a801      	add	r0, sp, #4
 800da60:	f000 fc6d 	bl	800e33e <memset>
	f_mount(&SDFatFs, SDPath, 1);
 800da64:	4621      	mov	r1, r4
 800da66:	1d20      	adds	r0, r4, #4
	f_open(&MyFile, "SaveParams.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800da68:	f504 740d 	add.w	r4, r4, #564	@ 0x234
	f_mount(&SDFatFs, SDPath, 1);
 800da6c:	2201      	movs	r2, #1
 800da6e:	f7fb fc33 	bl	80092d8 <f_mount>
	f_open(&MyFile, "SaveParams.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800da72:	2213      	movs	r2, #19
 800da74:	490d      	ldr	r1, [pc, #52]	@ (800daac <Write_Int_MicroSD+0x5c>)
 800da76:	4620      	mov	r0, r4
 800da78:	f7fc fb64 	bl	800a144 <f_open>
	HAL_Delay(1);
 800da7c:	2001      	movs	r0, #1
 800da7e:	f7ff fded 	bl	800d65c <HAL_Delay>
	f_lseek(&MyFile,DiskBlock*32);
 800da82:	4620      	mov	r0, r4
 800da84:	0171      	lsls	r1, r6, #5
 800da86:	f7fb fe96 	bl	80097b6 <f_lseek>
	sprintf(read_buffer,"%2i",value);
 800da8a:	462a      	mov	r2, r5
 800da8c:	4908      	ldr	r1, [pc, #32]	@ (800dab0 <Write_Int_MicroSD+0x60>)
 800da8e:	a801      	add	r0, sp, #4
 800da90:	f000 fbe2 	bl	800e258 <siprintf>
   	f_puts(read_buffer,&MyFile);
 800da94:	4621      	mov	r1, r4
 800da96:	a801      	add	r0, sp, #4
 800da98:	f7fb fffa 	bl	8009a90 <f_puts>
   	f_close(&MyFile);
 800da9c:	4620      	mov	r0, r4
 800da9e:	f7fb fe79 	bl	8009794 <f_close>

}
 800daa2:	b022      	add	sp, #136	@ 0x88
 800daa4:	bd70      	pop	{r4, r5, r6, pc}
 800daa6:	bf00      	nop
 800daa8:	20044e48 	.word	0x20044e48
 800daac:	08055a2b 	.word	0x08055a2b
 800dab0:	080558f9 	.word	0x080558f9

0800dab4 <Options_WriteToMicroSD>:
		Write_Int_MicroSD(i, Options_GetValue(i));
 800dab4:	4b02      	ldr	r3, [pc, #8]	@ (800dac0 <Options_WriteToMicroSD+0xc>)
 800dab6:	2000      	movs	r0, #0
 800dab8:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800dabc:	f7ff bfc8 	b.w	800da50 <Write_Int_MicroSD>
 800dac0:	20001010 	.word	0x20001010

0800dac4 <Options_StoreValue>:
	return s_optionsData[optionIdx].CurrentValue;
 800dac4:	4b03      	ldr	r3, [pc, #12]	@ (800dad4 <Options_StoreValue+0x10>)
 800dac6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    Write_Int_MicroSD((int16_t)optionIdx, option_value);
 800daca:	b280      	uxth	r0, r0
 800dacc:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800dad0:	f7ff bfbe 	b.w	800da50 <Write_Int_MicroSD>
 800dad4:	20001010 	.word	0x20001010

0800dad8 <Read_Int_MicroSD>:

int16_t Read_Int_MicroSD(uint16_t DiskBlock)
{
 800dad8:	b570      	push	{r4, r5, r6, lr}
	int16_t result = 0;
	uint8_t i;
	char read_buffer[132];

	for(i=0;i<32;i++)read_buffer[i]=0;
 800dada:	2620      	movs	r6, #32
{
 800dadc:	b0a2      	sub	sp, #136	@ 0x88
	f_mount(&SDFatFs, SDPath, 1);
 800dade:	4c13      	ldr	r4, [pc, #76]	@ (800db2c <Read_Int_MicroSD+0x54>)
{
 800dae0:	4605      	mov	r5, r0
	for(i=0;i<32;i++)read_buffer[i]=0;
 800dae2:	4632      	mov	r2, r6
 800dae4:	2100      	movs	r1, #0
 800dae6:	a801      	add	r0, sp, #4
 800dae8:	f000 fc29 	bl	800e33e <memset>
	f_mount(&SDFatFs, SDPath, 1);
 800daec:	4621      	mov	r1, r4
 800daee:	1d20      	adds	r0, r4, #4
	f_open(&MyFile, "SaveParams.txt", FA_READ );
 800daf0:	f504 740d 	add.w	r4, r4, #564	@ 0x234
	f_mount(&SDFatFs, SDPath, 1);
 800daf4:	2201      	movs	r2, #1
 800daf6:	f7fb fbef 	bl	80092d8 <f_mount>
	f_open(&MyFile, "SaveParams.txt", FA_READ );
 800dafa:	2201      	movs	r2, #1
 800dafc:	490c      	ldr	r1, [pc, #48]	@ (800db30 <Read_Int_MicroSD+0x58>)
 800dafe:	4620      	mov	r0, r4
 800db00:	f7fc fb20 	bl	800a144 <f_open>
   	f_lseek(&MyFile,DiskBlock*32);
 800db04:	4620      	mov	r0, r4
 800db06:	0169      	lsls	r1, r5, #5
 800db08:	f7fb fe55 	bl	80097b6 <f_lseek>
   	f_gets(read_buffer,32,&MyFile);
 800db0c:	4622      	mov	r2, r4
 800db0e:	4631      	mov	r1, r6
 800db10:	a801      	add	r0, sp, #4
 800db12:	f7fb ff98 	bl	8009a46 <f_gets>
    result = atoi(read_buffer);
 800db16:	a801      	add	r0, sp, #4
 800db18:	f000 f93a 	bl	800dd90 <atoi>
 800db1c:	4605      	mov	r5, r0
   	f_close(&MyFile);
 800db1e:	4620      	mov	r0, r4
 800db20:	f7fb fe38 	bl	8009794 <f_close>
	return result;
}
 800db24:	b228      	sxth	r0, r5
 800db26:	b022      	add	sp, #136	@ 0x88
 800db28:	bd70      	pop	{r4, r5, r6, pc}
 800db2a:	bf00      	nop
 800db2c:	20044e48 	.word	0x20044e48
 800db30:	08055a2b 	.word	0x08055a2b

0800db34 <Options_ReadFromMicroSD>:
{
 800db34:	b508      	push	{r3, lr}
		int16_t newValue = Read_Int_MicroSD(i);
 800db36:	2000      	movs	r0, #0
 800db38:	f7ff ffce 	bl	800dad8 <Read_Int_MicroSD>
	s_optionsData[optionIdx].CurrentValue = newValue;
 800db3c:	4b01      	ldr	r3, [pc, #4]	@ (800db44 <Options_ReadFromMicroSD+0x10>)
 800db3e:	8198      	strh	r0, [r3, #12]
}
 800db40:	bd08      	pop	{r3, pc}
 800db42:	bf00      	nop
 800db44:	20001010 	.word	0x20001010

0800db48 <Options_Initialize>:
	fres = f_mount(&SDFatFs, SDPath, 1);
 800db48:	4913      	ldr	r1, [pc, #76]	@ (800db98 <Options_Initialize+0x50>)
 800db4a:	2201      	movs	r2, #1
 800db4c:	1d08      	adds	r0, r1, #4
{
 800db4e:	b508      	push	{r3, lr}
	fres = f_mount(&SDFatFs, SDPath, 1);
 800db50:	f7fb fbc2 	bl	80092d8 <f_mount>
	fres = f_open(&MyFile, "SaveParams.txt",  FA_READ  );
 800db54:	2201      	movs	r2, #1
 800db56:	4911      	ldr	r1, [pc, #68]	@ (800db9c <Options_Initialize+0x54>)
 800db58:	4811      	ldr	r0, [pc, #68]	@ (800dba0 <Options_Initialize+0x58>)
 800db5a:	f7fc faf3 	bl	800a144 <f_open>
	if ( fres == FR_OK) {
 800db5e:	b9a8      	cbnz	r0, 800db8c <Options_Initialize+0x44>
		f_close(&MyFile);
 800db60:	480f      	ldr	r0, [pc, #60]	@ (800dba0 <Options_Initialize+0x58>)
 800db62:	f7fb fe17 	bl	8009794 <f_close>
		Options_ReadFromMicroSD();
 800db66:	f7ff ffe5 	bl	800db34 <Options_ReadFromMicroSD>
	return s_optionsData[optionIdx].CurrentValue;
 800db6a:	4b0e      	ldr	r3, [pc, #56]	@ (800dba4 <Options_Initialize+0x5c>)
   	show_wide(380, 0,(int) start_freq );
 800db6c:	2100      	movs	r1, #0
	BandIndex = Options_GetValue(0);
 800db6e:	4a0e      	ldr	r2, [pc, #56]	@ (800dba8 <Options_Initialize+0x60>)
   	show_wide(380, 0,(int) start_freq );
 800db70:	f44f 70be 	mov.w	r0, #380	@ 0x17c
	BandIndex = Options_GetValue(0);
 800db74:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800db78:	6013      	str	r3, [r2, #0]
	start_freq = sBand_Data[BandIndex].Frequency;
 800db7a:	4a0c      	ldr	r2, [pc, #48]	@ (800dbac <Options_Initialize+0x64>)
 800db7c:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 800db80:	4b0b      	ldr	r3, [pc, #44]	@ (800dbb0 <Options_Initialize+0x68>)
 800db82:	801a      	strh	r2, [r3, #0]
    }
 800db84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   	show_wide(380, 0,(int) start_freq );
 800db88:	f7fc bf7e 	b.w	800aa88 <show_wide>
		Options_ResetToDefaults();
 800db8c:	f7ff ff5a 	bl	800da44 <Options_ResetToDefaults>
		Options_WriteToMicroSD();
 800db90:	f7ff ff90 	bl	800dab4 <Options_WriteToMicroSD>
 800db94:	e7e9      	b.n	800db6a <Options_Initialize+0x22>
 800db96:	bf00      	nop
 800db98:	20044e48 	.word	0x20044e48
 800db9c:	08055a2b 	.word	0x08055a2b
 800dba0:	2004507c 	.word	0x2004507c
 800dba4:	20001010 	.word	0x20001010
 800dba8:	200439c8 	.word	0x200439c8
 800dbac:	20000fc0 	.word	0x20000fc0
 800dbb0:	200439cc 	.word	0x200439cc

0800dbb4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800dbb4:	4770      	bx	lr

0800dbb6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800dbb6:	e7fe      	b.n	800dbb6 <HardFault_Handler>

0800dbb8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800dbb8:	e7fe      	b.n	800dbb8 <MemManage_Handler>

0800dbba <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800dbba:	e7fe      	b.n	800dbba <BusFault_Handler>

0800dbbc <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800dbbc:	e7fe      	b.n	800dbbc <UsageFault_Handler>

0800dbbe <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 800dbbe:	4770      	bx	lr

0800dbc0 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 800dbc0:	4770      	bx	lr

0800dbc2 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 800dbc2:	4770      	bx	lr

0800dbc4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick(); 
 800dbc4:	f7f6 b908 	b.w	8003dd8 <HAL_IncTick>

0800dbc8 <DMA2_Stream4_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800dbc8:	4b01      	ldr	r3, [pc, #4]	@ (800dbd0 <DMA2_Stream4_IRQHandler+0x8>)
 800dbca:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800dbcc:	f7f6 ba46 	b.w	800405c <HAL_DMA_IRQHandler>
 800dbd0:	20001114 	.word	0x20001114

0800dbd4 <DMA2_Stream7_IRQHandler>:
}

void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800dbd4:	4b01      	ldr	r3, [pc, #4]	@ (800dbdc <DMA2_Stream7_IRQHandler+0x8>)
 800dbd6:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800dbd8:	f7f6 ba40 	b.w	800405c <HAL_DMA_IRQHandler>
 800dbdc:	20001198 	.word	0x20001198

0800dbe0 <tune_Off_sequence>:
	      HAL_Delay(10);
	      output_enable(SI5351_CLK0, 1);
   }

      void tune_Off_sequence(void){
          output_enable(SI5351_CLK0, 0);
 800dbe0:	2100      	movs	r1, #0
      void tune_Off_sequence(void){
 800dbe2:	b508      	push	{r3, lr}
          output_enable(SI5351_CLK0, 0);
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	f7fd fc57 	bl	800b498 <output_enable>
          HAL_Delay(10);
 800dbea:	200a      	movs	r0, #10
 800dbec:	f7ff fd36 	bl	800d65c <HAL_Delay>
          Set_ADC_DVC(ADC_DVC_Gain);
 800dbf0:	4b02      	ldr	r3, [pc, #8]	@ (800dbfc <tune_Off_sequence+0x1c>)
 800dbf2:	6818      	ldr	r0, [r3, #0]
   }
 800dbf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
          Set_ADC_DVC(ADC_DVC_Gain);
 800dbf8:	f7fc bc80 	b.w	800a4fc <Set_ADC_DVC>
 800dbfc:	2000100c 	.word	0x2000100c

0800dc00 <terminate_QSO>:
void terminate_QSO(void) {
 800dc00:	b508      	push	{r3, lr}
	ft8_receive_sequence();
 800dc02:	f7ff ffed 	bl	800dbe0 <tune_Off_sequence>
	receive_sequence();
 800dc06:	f7fe fcf3 	bl	800c5f0 <receive_sequence>
	xmit_flag = 0;
 800dc0a:	4b02      	ldr	r3, [pc, #8]	@ (800dc14 <terminate_QSO+0x14>)
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	601a      	str	r2, [r3, #0]
}
 800dc10:	bd08      	pop	{r3, pc}
 800dc12:	bf00      	nop
 800dc14:	2003e944 	.word	0x2003e944

0800dc18 <ft8_receive_sequence>:
      void ft8_receive_sequence(void){
 800dc18:	f7ff bfe2 	b.w	800dbe0 <tune_Off_sequence>

0800dc1c <set_Xmit_Freq>:


   void  set_Xmit_Freq(void){
      F_Long = ((start_freq * 1000ULL + (uint16_t) NCO_Frequency) * 100ULL  );
 800dc1c:	4b0b      	ldr	r3, [pc, #44]	@ (800dc4c <set_Xmit_Freq+0x30>)
   void  set_Xmit_Freq(void){
 800dc1e:	b510      	push	{r4, lr}
      F_Long = ((start_freq * 1000ULL + (uint16_t) NCO_Frequency) * 100ULL  );
 800dc20:	881c      	ldrh	r4, [r3, #0]
 800dc22:	4b0b      	ldr	r3, [pc, #44]	@ (800dc50 <set_Xmit_Freq+0x34>)
 800dc24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc28:	f7f3 f84e 	bl	8000cc8 <__aeabi_d2uiz>
 800dc2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dc30:	b280      	uxth	r0, r0
 800dc32:	2164      	movs	r1, #100	@ 0x64
      set_freq(F_Long, SI5351_CLK0);
 800dc34:	2200      	movs	r2, #0
      F_Long = ((start_freq * 1000ULL + (uint16_t) NCO_Frequency) * 100ULL  );
 800dc36:	fb03 0004 	mla	r0, r3, r4, r0
 800dc3a:	4b06      	ldr	r3, [pc, #24]	@ (800dc54 <set_Xmit_Freq+0x38>)
 800dc3c:	fba0 0101 	umull	r0, r1, r0, r1
}
 800dc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      F_Long = ((start_freq * 1000ULL + (uint16_t) NCO_Frequency) * 100ULL  );
 800dc44:	e9c3 0100 	strd	r0, r1, [r3]
      set_freq(F_Long, SI5351_CLK0);
 800dc48:	f7fe b97e 	b.w	800bf48 <set_freq>
 800dc4c:	200439cc 	.word	0x200439cc
 800dc50:	2003a508 	.word	0x2003a508
 800dc54:	200452a8 	.word	0x200452a8

0800dc58 <ft8_transmit_sequence>:
   void ft8_transmit_sequence(void){
 800dc58:	b508      	push	{r3, lr}
	      Set_ADC_DVC(ADC_DVC_Off);
 800dc5a:	4b07      	ldr	r3, [pc, #28]	@ (800dc78 <ft8_transmit_sequence+0x20>)
 800dc5c:	6818      	ldr	r0, [r3, #0]
 800dc5e:	f7fc fc4d 	bl	800a4fc <Set_ADC_DVC>
	      HAL_Delay(10);
 800dc62:	200a      	movs	r0, #10
 800dc64:	f7ff fcfa 	bl	800d65c <HAL_Delay>
	      set_Xmit_Freq();
 800dc68:	f7ff ffd8 	bl	800dc1c <set_Xmit_Freq>
	      HAL_Delay(10);
 800dc6c:	200a      	movs	r0, #10
   }
 800dc6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	      HAL_Delay(10);
 800dc72:	f7ff bcf3 	b.w	800d65c <HAL_Delay>
 800dc76:	bf00      	nop
 800dc78:	20001008 	.word	0x20001008

0800dc7c <setup_to_transmit_on_next_DSP_Flag>:
		ft8_xmit_counter = 0;
 800dc7c:	4b06      	ldr	r3, [pc, #24]	@ (800dc98 <setup_to_transmit_on_next_DSP_Flag+0x1c>)
void setup_to_transmit_on_next_DSP_Flag(void){
 800dc7e:	b510      	push	{r4, lr}
		ft8_xmit_counter = 0;
 800dc80:	2400      	movs	r4, #0
 800dc82:	601c      	str	r4, [r3, #0]
		xmit_sequence();
 800dc84:	f7fe fcc4 	bl	800c610 <xmit_sequence>
		ft8_transmit_sequence();
 800dc88:	f7ff ffe6 	bl	800dc58 <ft8_transmit_sequence>
		xmit_flag = 1;
 800dc8c:	4b03      	ldr	r3, [pc, #12]	@ (800dc9c <setup_to_transmit_on_next_DSP_Flag+0x20>)
 800dc8e:	2201      	movs	r2, #1
 800dc90:	601a      	str	r2, [r3, #0]
		Xmit_DSP_counter = 0;
 800dc92:	4b03      	ldr	r3, [pc, #12]	@ (800dca0 <setup_to_transmit_on_next_DSP_Flag+0x24>)
 800dc94:	601c      	str	r4, [r3, #0]
}
 800dc96:	bd10      	pop	{r4, pc}
 800dc98:	2003e940 	.word	0x2003e940
 800dc9c:	2003e944 	.word	0x2003e944
 800dca0:	20044dfc 	.word	0x20044dfc

0800dca4 <service_QSO_mode>:
void service_QSO_mode(int decoded_signals, int message_touch){
 800dca4:	b538      	push	{r3, r4, r5, lr}
	if(QSO_xmit == 1 ) {
 800dca6:	4c07      	ldr	r4, [pc, #28]	@ (800dcc4 <service_QSO_mode+0x20>)
	Check_QSO_Calling_Stations(decoded_signals, 0);
 800dca8:	2100      	movs	r1, #0
 800dcaa:	f7ff f93d 	bl	800cf28 <Check_QSO_Calling_Stations>
	if(QSO_xmit == 1 ) {
 800dcae:	6825      	ldr	r5, [r4, #0]
 800dcb0:	2d01      	cmp	r5, #1
 800dcb2:	d106      	bne.n	800dcc2 <service_QSO_mode+0x1e>
		setup_to_transmit_on_next_DSP_Flag();
 800dcb4:	f7ff ffe2 	bl	800dc7c <setup_to_transmit_on_next_DSP_Flag>
		update_log_display(1);
 800dcb8:	4628      	mov	r0, r5
 800dcba:	f7fc fe13 	bl	800a8e4 <update_log_display>
		QSO_xmit = 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	6023      	str	r3, [r4, #0]
	}
 800dcc2:	bd38      	pop	{r3, r4, r5, pc}
 800dcc4:	20044e04 	.word	0x20044e04

0800dcc8 <service_Beacon_mode>:
void service_Beacon_mode(int decoded_signals){
 800dcc8:	b510      	push	{r4, lr}
	switch (Beacon_State){
 800dcca:	4c0e      	ldr	r4, [pc, #56]	@ (800dd04 <service_Beacon_mode+0x3c>)
 800dccc:	68a3      	ldr	r3, [r4, #8]
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d002      	beq.n	800dcd8 <service_Beacon_mode+0x10>
 800dcd2:	2b02      	cmp	r3, #2
 800dcd4:	d00d      	beq.n	800dcf2 <service_Beacon_mode+0x2a>
}  //end of service_Beacon_mode
 800dcd6:	bd10      	pop	{r4, pc}
	case 1:    receive_status = Check_Calling_Stations(decoded_signals, 0);
 800dcd8:	2100      	movs	r1, #0
 800dcda:	f7ff f86d 	bl	800cdb8 <Check_Calling_Stations>
			   if(receive_status == 1) {
 800dcde:	2801      	cmp	r0, #1
 800dce0:	d104      	bne.n	800dcec <service_Beacon_mode+0x24>
			    setup_to_transmit_on_next_DSP_Flag();
 800dce2:	f7ff ffcb 	bl	800dc7c <setup_to_transmit_on_next_DSP_Flag>
			    Beacon_State = 2;
 800dce6:	2302      	movs	r3, #2
			  Beacon_State = 1;
 800dce8:	60a3      	str	r3, [r4, #8]
}  //end of service_Beacon_mode
 800dcea:	e7f4      	b.n	800dcd6 <service_Beacon_mode+0xe>
				set_cq();
 800dcec:	f7ff f952 	bl	800cf94 <set_cq>
 800dcf0:	e7f7      	b.n	800dce2 <service_Beacon_mode+0x1a>
	case 2:   receive_status = Check_Calling_Stations(decoded_signals, 0);
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	f7ff f860 	bl	800cdb8 <Check_Calling_Stations>
			  if(receive_status == 1) {
 800dcf8:	2801      	cmp	r0, #1
 800dcfa:	d101      	bne.n	800dd00 <service_Beacon_mode+0x38>
			  setup_to_transmit_on_next_DSP_Flag();
 800dcfc:	f7ff ffbe 	bl	800dc7c <setup_to_transmit_on_next_DSP_Flag>
			  Beacon_State = 1;
 800dd00:	2301      	movs	r3, #1
 800dd02:	e7f1      	b.n	800dce8 <service_Beacon_mode+0x20>
 800dd04:	200452a8 	.word	0x200452a8

0800dd08 <tune_On_sequence>:
   void tune_On_sequence(void){
 800dd08:	b508      	push	{r3, lr}
	      Set_ADC_DVC(ADC_DVC_Off);
 800dd0a:	4b09      	ldr	r3, [pc, #36]	@ (800dd30 <tune_On_sequence+0x28>)
 800dd0c:	6818      	ldr	r0, [r3, #0]
 800dd0e:	f7fc fbf5 	bl	800a4fc <Set_ADC_DVC>
	      HAL_Delay(10);
 800dd12:	200a      	movs	r0, #10
 800dd14:	f7ff fca2 	bl	800d65c <HAL_Delay>
	      set_Xmit_Freq();
 800dd18:	f7ff ff80 	bl	800dc1c <set_Xmit_Freq>
	      HAL_Delay(10);
 800dd1c:	200a      	movs	r0, #10
 800dd1e:	f7ff fc9d 	bl	800d65c <HAL_Delay>
	      output_enable(SI5351_CLK0, 1);
 800dd22:	2101      	movs	r1, #1
 800dd24:	2000      	movs	r0, #0
   }
 800dd26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	      output_enable(SI5351_CLK0, 1);
 800dd2a:	f7fd bbb5 	b.w	800b498 <output_enable>
 800dd2e:	bf00      	nop
 800dd30:	20001008 	.word	0x20001008

0800dd34 <set_FT8_Tone>:



    void set_FT8_Tone( uint8_t ft8_tone) {
          F_FT8 =  F_Long + (uint64_t)ft8_tone * FT8_TONE_SPACING;
 800dd34:	4b09      	ldr	r3, [pc, #36]	@ (800dd5c <set_FT8_Tone+0x28>)
 800dd36:	f240 2171 	movw	r1, #625	@ 0x271
    void set_FT8_Tone( uint8_t ft8_tone) {
 800dd3a:	b410      	push	{r4}
          F_FT8 =  F_Long + (uint64_t)ft8_tone * FT8_TONE_SPACING;
 800dd3c:	fba0 0101 	umull	r0, r1, r0, r1
 800dd40:	e9d3 2400 	ldrd	r2, r4, [r3]
 800dd44:	1880      	adds	r0, r0, r2
          set_freq(F_FT8, SI5351_CLK0);
 800dd46:	f04f 0200 	mov.w	r2, #0
          F_FT8 =  F_Long + (uint64_t)ft8_tone * FT8_TONE_SPACING;
 800dd4a:	eb41 0104 	adc.w	r1, r1, r4
    }
 800dd4e:	f85d 4b04 	ldr.w	r4, [sp], #4
          F_FT8 =  F_Long + (uint64_t)ft8_tone * FT8_TONE_SPACING;
 800dd52:	e9c3 0104 	strd	r0, r1, [r3, #16]
          set_freq(F_FT8, SI5351_CLK0);
 800dd56:	f7fe b8f7 	b.w	800bf48 <set_freq>
 800dd5a:	bf00      	nop
 800dd5c:	200452a8 	.word	0x200452a8

0800dd60 <set_Rcvr_Freq>:


  void set_Rcvr_Freq(void) {
	  F_Receive =  (  (  start_freq * 1000ULL - 10000ULL )   * 100ULL * 4ULL );
 800dd60:	4b07      	ldr	r3, [pc, #28]	@ (800dd80 <set_Rcvr_Freq+0x20>)
      set_freq(F_Receive, SI5351_CLK1);
 800dd62:	2201      	movs	r2, #1
	  F_Receive =  (  (  start_freq * 1000ULL - 10000ULL )   * 100ULL * 4ULL );
 800dd64:	4907      	ldr	r1, [pc, #28]	@ (800dd84 <set_Rcvr_Freq+0x24>)
 800dd66:	8818      	ldrh	r0, [r3, #0]
 800dd68:	4b07      	ldr	r3, [pc, #28]	@ (800dd88 <set_Rcvr_Freq+0x28>)
 800dd6a:	fba0 0101 	umull	r0, r1, r0, r1
 800dd6e:	18c0      	adds	r0, r0, r3
 800dd70:	4b06      	ldr	r3, [pc, #24]	@ (800dd8c <set_Rcvr_Freq+0x2c>)
 800dd72:	f161 0100 	sbc.w	r1, r1, #0
 800dd76:	e9c3 0106 	strd	r0, r1, [r3, #24]
      set_freq(F_Receive, SI5351_CLK1);
 800dd7a:	f7fe b8e5 	b.w	800bf48 <set_freq>
 800dd7e:	bf00      	nop
 800dd80:	200439cc 	.word	0x200439cc
 800dd84:	00061a80 	.word	0x00061a80
 800dd88:	ffc2f700 	.word	0xffc2f700
 800dd8c:	200452a8 	.word	0x200452a8

0800dd90 <atoi>:
 800dd90:	220a      	movs	r2, #10
 800dd92:	2100      	movs	r1, #0
 800dd94:	f000 b952 	b.w	800e03c <strtol>

0800dd98 <__itoa>:
 800dd98:	1e93      	subs	r3, r2, #2
 800dd9a:	2b22      	cmp	r3, #34	@ 0x22
 800dd9c:	b510      	push	{r4, lr}
 800dd9e:	460c      	mov	r4, r1
 800dda0:	d904      	bls.n	800ddac <__itoa+0x14>
 800dda2:	2300      	movs	r3, #0
 800dda4:	700b      	strb	r3, [r1, #0]
 800dda6:	461c      	mov	r4, r3
 800dda8:	4620      	mov	r0, r4
 800ddaa:	bd10      	pop	{r4, pc}
 800ddac:	2a0a      	cmp	r2, #10
 800ddae:	d109      	bne.n	800ddc4 <__itoa+0x2c>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	da07      	bge.n	800ddc4 <__itoa+0x2c>
 800ddb4:	232d      	movs	r3, #45	@ 0x2d
 800ddb6:	700b      	strb	r3, [r1, #0]
 800ddb8:	4240      	negs	r0, r0
 800ddba:	2101      	movs	r1, #1
 800ddbc:	4421      	add	r1, r4
 800ddbe:	f000 f947 	bl	800e050 <__utoa>
 800ddc2:	e7f1      	b.n	800dda8 <__itoa+0x10>
 800ddc4:	2100      	movs	r1, #0
 800ddc6:	e7f9      	b.n	800ddbc <__itoa+0x24>

0800ddc8 <itoa>:
 800ddc8:	f7ff bfe6 	b.w	800dd98 <__itoa>

0800ddcc <malloc>:
 800ddcc:	4b02      	ldr	r3, [pc, #8]	@ (800ddd8 <malloc+0xc>)
 800ddce:	4601      	mov	r1, r0
 800ddd0:	6818      	ldr	r0, [r3, #0]
 800ddd2:	f000 b82d 	b.w	800de30 <_malloc_r>
 800ddd6:	bf00      	nop
 800ddd8:	2000102c 	.word	0x2000102c

0800dddc <free>:
 800dddc:	4b02      	ldr	r3, [pc, #8]	@ (800dde8 <free+0xc>)
 800ddde:	4601      	mov	r1, r0
 800dde0:	6818      	ldr	r0, [r3, #0]
 800dde2:	f000 bbe5 	b.w	800e5b0 <_free_r>
 800dde6:	bf00      	nop
 800dde8:	2000102c 	.word	0x2000102c

0800ddec <sbrk_aligned>:
 800ddec:	b570      	push	{r4, r5, r6, lr}
 800ddee:	4e0f      	ldr	r6, [pc, #60]	@ (800de2c <sbrk_aligned+0x40>)
 800ddf0:	460c      	mov	r4, r1
 800ddf2:	6831      	ldr	r1, [r6, #0]
 800ddf4:	4605      	mov	r5, r0
 800ddf6:	b911      	cbnz	r1, 800ddfe <sbrk_aligned+0x12>
 800ddf8:	f000 fb56 	bl	800e4a8 <_sbrk_r>
 800ddfc:	6030      	str	r0, [r6, #0]
 800ddfe:	4621      	mov	r1, r4
 800de00:	4628      	mov	r0, r5
 800de02:	f000 fb51 	bl	800e4a8 <_sbrk_r>
 800de06:	1c43      	adds	r3, r0, #1
 800de08:	d103      	bne.n	800de12 <sbrk_aligned+0x26>
 800de0a:	f04f 34ff 	mov.w	r4, #4294967295
 800de0e:	4620      	mov	r0, r4
 800de10:	bd70      	pop	{r4, r5, r6, pc}
 800de12:	1cc4      	adds	r4, r0, #3
 800de14:	f024 0403 	bic.w	r4, r4, #3
 800de18:	42a0      	cmp	r0, r4
 800de1a:	d0f8      	beq.n	800de0e <sbrk_aligned+0x22>
 800de1c:	1a21      	subs	r1, r4, r0
 800de1e:	4628      	mov	r0, r5
 800de20:	f000 fb42 	bl	800e4a8 <_sbrk_r>
 800de24:	3001      	adds	r0, #1
 800de26:	d1f2      	bne.n	800de0e <sbrk_aligned+0x22>
 800de28:	e7ef      	b.n	800de0a <sbrk_aligned+0x1e>
 800de2a:	bf00      	nop
 800de2c:	200452cc 	.word	0x200452cc

0800de30 <_malloc_r>:
 800de30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de34:	1ccd      	adds	r5, r1, #3
 800de36:	f025 0503 	bic.w	r5, r5, #3
 800de3a:	3508      	adds	r5, #8
 800de3c:	2d0c      	cmp	r5, #12
 800de3e:	bf38      	it	cc
 800de40:	250c      	movcc	r5, #12
 800de42:	2d00      	cmp	r5, #0
 800de44:	4606      	mov	r6, r0
 800de46:	db01      	blt.n	800de4c <_malloc_r+0x1c>
 800de48:	42a9      	cmp	r1, r5
 800de4a:	d904      	bls.n	800de56 <_malloc_r+0x26>
 800de4c:	230c      	movs	r3, #12
 800de4e:	6033      	str	r3, [r6, #0]
 800de50:	2000      	movs	r0, #0
 800de52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df2c <_malloc_r+0xfc>
 800de5a:	f000 f869 	bl	800df30 <__malloc_lock>
 800de5e:	f8d8 3000 	ldr.w	r3, [r8]
 800de62:	461c      	mov	r4, r3
 800de64:	bb44      	cbnz	r4, 800deb8 <_malloc_r+0x88>
 800de66:	4629      	mov	r1, r5
 800de68:	4630      	mov	r0, r6
 800de6a:	f7ff ffbf 	bl	800ddec <sbrk_aligned>
 800de6e:	1c43      	adds	r3, r0, #1
 800de70:	4604      	mov	r4, r0
 800de72:	d158      	bne.n	800df26 <_malloc_r+0xf6>
 800de74:	f8d8 4000 	ldr.w	r4, [r8]
 800de78:	4627      	mov	r7, r4
 800de7a:	2f00      	cmp	r7, #0
 800de7c:	d143      	bne.n	800df06 <_malloc_r+0xd6>
 800de7e:	2c00      	cmp	r4, #0
 800de80:	d04b      	beq.n	800df1a <_malloc_r+0xea>
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	4639      	mov	r1, r7
 800de86:	4630      	mov	r0, r6
 800de88:	eb04 0903 	add.w	r9, r4, r3
 800de8c:	f000 fb0c 	bl	800e4a8 <_sbrk_r>
 800de90:	4581      	cmp	r9, r0
 800de92:	d142      	bne.n	800df1a <_malloc_r+0xea>
 800de94:	6821      	ldr	r1, [r4, #0]
 800de96:	1a6d      	subs	r5, r5, r1
 800de98:	4629      	mov	r1, r5
 800de9a:	4630      	mov	r0, r6
 800de9c:	f7ff ffa6 	bl	800ddec <sbrk_aligned>
 800dea0:	3001      	adds	r0, #1
 800dea2:	d03a      	beq.n	800df1a <_malloc_r+0xea>
 800dea4:	6823      	ldr	r3, [r4, #0]
 800dea6:	442b      	add	r3, r5
 800dea8:	6023      	str	r3, [r4, #0]
 800deaa:	f8d8 3000 	ldr.w	r3, [r8]
 800deae:	685a      	ldr	r2, [r3, #4]
 800deb0:	bb62      	cbnz	r2, 800df0c <_malloc_r+0xdc>
 800deb2:	f8c8 7000 	str.w	r7, [r8]
 800deb6:	e00f      	b.n	800ded8 <_malloc_r+0xa8>
 800deb8:	6822      	ldr	r2, [r4, #0]
 800deba:	1b52      	subs	r2, r2, r5
 800debc:	d420      	bmi.n	800df00 <_malloc_r+0xd0>
 800debe:	2a0b      	cmp	r2, #11
 800dec0:	d917      	bls.n	800def2 <_malloc_r+0xc2>
 800dec2:	1961      	adds	r1, r4, r5
 800dec4:	42a3      	cmp	r3, r4
 800dec6:	6025      	str	r5, [r4, #0]
 800dec8:	bf18      	it	ne
 800deca:	6059      	strne	r1, [r3, #4]
 800decc:	6863      	ldr	r3, [r4, #4]
 800dece:	bf08      	it	eq
 800ded0:	f8c8 1000 	streq.w	r1, [r8]
 800ded4:	5162      	str	r2, [r4, r5]
 800ded6:	604b      	str	r3, [r1, #4]
 800ded8:	4630      	mov	r0, r6
 800deda:	f000 f82f 	bl	800df3c <__malloc_unlock>
 800dede:	f104 000b 	add.w	r0, r4, #11
 800dee2:	1d23      	adds	r3, r4, #4
 800dee4:	f020 0007 	bic.w	r0, r0, #7
 800dee8:	1ac2      	subs	r2, r0, r3
 800deea:	bf1c      	itt	ne
 800deec:	1a1b      	subne	r3, r3, r0
 800deee:	50a3      	strne	r3, [r4, r2]
 800def0:	e7af      	b.n	800de52 <_malloc_r+0x22>
 800def2:	6862      	ldr	r2, [r4, #4]
 800def4:	42a3      	cmp	r3, r4
 800def6:	bf0c      	ite	eq
 800def8:	f8c8 2000 	streq.w	r2, [r8]
 800defc:	605a      	strne	r2, [r3, #4]
 800defe:	e7eb      	b.n	800ded8 <_malloc_r+0xa8>
 800df00:	4623      	mov	r3, r4
 800df02:	6864      	ldr	r4, [r4, #4]
 800df04:	e7ae      	b.n	800de64 <_malloc_r+0x34>
 800df06:	463c      	mov	r4, r7
 800df08:	687f      	ldr	r7, [r7, #4]
 800df0a:	e7b6      	b.n	800de7a <_malloc_r+0x4a>
 800df0c:	461a      	mov	r2, r3
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	42a3      	cmp	r3, r4
 800df12:	d1fb      	bne.n	800df0c <_malloc_r+0xdc>
 800df14:	2300      	movs	r3, #0
 800df16:	6053      	str	r3, [r2, #4]
 800df18:	e7de      	b.n	800ded8 <_malloc_r+0xa8>
 800df1a:	230c      	movs	r3, #12
 800df1c:	6033      	str	r3, [r6, #0]
 800df1e:	4630      	mov	r0, r6
 800df20:	f000 f80c 	bl	800df3c <__malloc_unlock>
 800df24:	e794      	b.n	800de50 <_malloc_r+0x20>
 800df26:	6005      	str	r5, [r0, #0]
 800df28:	e7d6      	b.n	800ded8 <_malloc_r+0xa8>
 800df2a:	bf00      	nop
 800df2c:	200452d0 	.word	0x200452d0

0800df30 <__malloc_lock>:
 800df30:	4801      	ldr	r0, [pc, #4]	@ (800df38 <__malloc_lock+0x8>)
 800df32:	f000 bb06 	b.w	800e542 <__retarget_lock_acquire_recursive>
 800df36:	bf00      	nop
 800df38:	20045414 	.word	0x20045414

0800df3c <__malloc_unlock>:
 800df3c:	4801      	ldr	r0, [pc, #4]	@ (800df44 <__malloc_unlock+0x8>)
 800df3e:	f000 bb01 	b.w	800e544 <__retarget_lock_release_recursive>
 800df42:	bf00      	nop
 800df44:	20045414 	.word	0x20045414

0800df48 <_strtol_l.constprop.0>:
 800df48:	2b24      	cmp	r3, #36	@ 0x24
 800df4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df4e:	4686      	mov	lr, r0
 800df50:	4690      	mov	r8, r2
 800df52:	d801      	bhi.n	800df58 <_strtol_l.constprop.0+0x10>
 800df54:	2b01      	cmp	r3, #1
 800df56:	d106      	bne.n	800df66 <_strtol_l.constprop.0+0x1e>
 800df58:	f000 fac8 	bl	800e4ec <__errno>
 800df5c:	2316      	movs	r3, #22
 800df5e:	6003      	str	r3, [r0, #0]
 800df60:	2000      	movs	r0, #0
 800df62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df66:	4834      	ldr	r0, [pc, #208]	@ (800e038 <_strtol_l.constprop.0+0xf0>)
 800df68:	460d      	mov	r5, r1
 800df6a:	462a      	mov	r2, r5
 800df6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df70:	5d06      	ldrb	r6, [r0, r4]
 800df72:	f016 0608 	ands.w	r6, r6, #8
 800df76:	d1f8      	bne.n	800df6a <_strtol_l.constprop.0+0x22>
 800df78:	2c2d      	cmp	r4, #45	@ 0x2d
 800df7a:	d12d      	bne.n	800dfd8 <_strtol_l.constprop.0+0x90>
 800df7c:	782c      	ldrb	r4, [r5, #0]
 800df7e:	2601      	movs	r6, #1
 800df80:	1c95      	adds	r5, r2, #2
 800df82:	f033 0210 	bics.w	r2, r3, #16
 800df86:	d109      	bne.n	800df9c <_strtol_l.constprop.0+0x54>
 800df88:	2c30      	cmp	r4, #48	@ 0x30
 800df8a:	d12a      	bne.n	800dfe2 <_strtol_l.constprop.0+0x9a>
 800df8c:	782a      	ldrb	r2, [r5, #0]
 800df8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800df92:	2a58      	cmp	r2, #88	@ 0x58
 800df94:	d125      	bne.n	800dfe2 <_strtol_l.constprop.0+0x9a>
 800df96:	786c      	ldrb	r4, [r5, #1]
 800df98:	2310      	movs	r3, #16
 800df9a:	3502      	adds	r5, #2
 800df9c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dfa0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	fbbc f9f3 	udiv	r9, ip, r3
 800dfaa:	4610      	mov	r0, r2
 800dfac:	fb03 ca19 	mls	sl, r3, r9, ip
 800dfb0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dfb4:	2f09      	cmp	r7, #9
 800dfb6:	d81b      	bhi.n	800dff0 <_strtol_l.constprop.0+0xa8>
 800dfb8:	463c      	mov	r4, r7
 800dfba:	42a3      	cmp	r3, r4
 800dfbc:	dd27      	ble.n	800e00e <_strtol_l.constprop.0+0xc6>
 800dfbe:	1c57      	adds	r7, r2, #1
 800dfc0:	d007      	beq.n	800dfd2 <_strtol_l.constprop.0+0x8a>
 800dfc2:	4581      	cmp	r9, r0
 800dfc4:	d320      	bcc.n	800e008 <_strtol_l.constprop.0+0xc0>
 800dfc6:	d101      	bne.n	800dfcc <_strtol_l.constprop.0+0x84>
 800dfc8:	45a2      	cmp	sl, r4
 800dfca:	db1d      	blt.n	800e008 <_strtol_l.constprop.0+0xc0>
 800dfcc:	fb00 4003 	mla	r0, r0, r3, r4
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfd6:	e7eb      	b.n	800dfb0 <_strtol_l.constprop.0+0x68>
 800dfd8:	2c2b      	cmp	r4, #43	@ 0x2b
 800dfda:	bf04      	itt	eq
 800dfdc:	782c      	ldrbeq	r4, [r5, #0]
 800dfde:	1c95      	addeq	r5, r2, #2
 800dfe0:	e7cf      	b.n	800df82 <_strtol_l.constprop.0+0x3a>
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1da      	bne.n	800df9c <_strtol_l.constprop.0+0x54>
 800dfe6:	2c30      	cmp	r4, #48	@ 0x30
 800dfe8:	bf0c      	ite	eq
 800dfea:	2308      	moveq	r3, #8
 800dfec:	230a      	movne	r3, #10
 800dfee:	e7d5      	b.n	800df9c <_strtol_l.constprop.0+0x54>
 800dff0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dff4:	2f19      	cmp	r7, #25
 800dff6:	d801      	bhi.n	800dffc <_strtol_l.constprop.0+0xb4>
 800dff8:	3c37      	subs	r4, #55	@ 0x37
 800dffa:	e7de      	b.n	800dfba <_strtol_l.constprop.0+0x72>
 800dffc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e000:	2f19      	cmp	r7, #25
 800e002:	d804      	bhi.n	800e00e <_strtol_l.constprop.0+0xc6>
 800e004:	3c57      	subs	r4, #87	@ 0x57
 800e006:	e7d8      	b.n	800dfba <_strtol_l.constprop.0+0x72>
 800e008:	f04f 32ff 	mov.w	r2, #4294967295
 800e00c:	e7e1      	b.n	800dfd2 <_strtol_l.constprop.0+0x8a>
 800e00e:	1c53      	adds	r3, r2, #1
 800e010:	d108      	bne.n	800e024 <_strtol_l.constprop.0+0xdc>
 800e012:	2322      	movs	r3, #34	@ 0x22
 800e014:	f8ce 3000 	str.w	r3, [lr]
 800e018:	4660      	mov	r0, ip
 800e01a:	f1b8 0f00 	cmp.w	r8, #0
 800e01e:	d0a0      	beq.n	800df62 <_strtol_l.constprop.0+0x1a>
 800e020:	1e69      	subs	r1, r5, #1
 800e022:	e006      	b.n	800e032 <_strtol_l.constprop.0+0xea>
 800e024:	b106      	cbz	r6, 800e028 <_strtol_l.constprop.0+0xe0>
 800e026:	4240      	negs	r0, r0
 800e028:	f1b8 0f00 	cmp.w	r8, #0
 800e02c:	d099      	beq.n	800df62 <_strtol_l.constprop.0+0x1a>
 800e02e:	2a00      	cmp	r2, #0
 800e030:	d1f6      	bne.n	800e020 <_strtol_l.constprop.0+0xd8>
 800e032:	f8c8 1000 	str.w	r1, [r8]
 800e036:	e794      	b.n	800df62 <_strtol_l.constprop.0+0x1a>
 800e038:	08055a6e 	.word	0x08055a6e

0800e03c <strtol>:
 800e03c:	4613      	mov	r3, r2
 800e03e:	460a      	mov	r2, r1
 800e040:	4601      	mov	r1, r0
 800e042:	4802      	ldr	r0, [pc, #8]	@ (800e04c <strtol+0x10>)
 800e044:	6800      	ldr	r0, [r0, #0]
 800e046:	f7ff bf7f 	b.w	800df48 <_strtol_l.constprop.0>
 800e04a:	bf00      	nop
 800e04c:	2000102c 	.word	0x2000102c

0800e050 <__utoa>:
 800e050:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e052:	4c1f      	ldr	r4, [pc, #124]	@ (800e0d0 <__utoa+0x80>)
 800e054:	b08b      	sub	sp, #44	@ 0x2c
 800e056:	4605      	mov	r5, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	466e      	mov	r6, sp
 800e05c:	f104 0c20 	add.w	ip, r4, #32
 800e060:	6820      	ldr	r0, [r4, #0]
 800e062:	6861      	ldr	r1, [r4, #4]
 800e064:	4637      	mov	r7, r6
 800e066:	c703      	stmia	r7!, {r0, r1}
 800e068:	3408      	adds	r4, #8
 800e06a:	4564      	cmp	r4, ip
 800e06c:	463e      	mov	r6, r7
 800e06e:	d1f7      	bne.n	800e060 <__utoa+0x10>
 800e070:	7921      	ldrb	r1, [r4, #4]
 800e072:	7139      	strb	r1, [r7, #4]
 800e074:	1e91      	subs	r1, r2, #2
 800e076:	6820      	ldr	r0, [r4, #0]
 800e078:	6038      	str	r0, [r7, #0]
 800e07a:	2922      	cmp	r1, #34	@ 0x22
 800e07c:	f04f 0100 	mov.w	r1, #0
 800e080:	d904      	bls.n	800e08c <__utoa+0x3c>
 800e082:	7019      	strb	r1, [r3, #0]
 800e084:	460b      	mov	r3, r1
 800e086:	4618      	mov	r0, r3
 800e088:	b00b      	add	sp, #44	@ 0x2c
 800e08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e08c:	1e58      	subs	r0, r3, #1
 800e08e:	4684      	mov	ip, r0
 800e090:	fbb5 f7f2 	udiv	r7, r5, r2
 800e094:	fb02 5617 	mls	r6, r2, r7, r5
 800e098:	3628      	adds	r6, #40	@ 0x28
 800e09a:	446e      	add	r6, sp
 800e09c:	460c      	mov	r4, r1
 800e09e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e0a2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e0a6:	462e      	mov	r6, r5
 800e0a8:	42b2      	cmp	r2, r6
 800e0aa:	f101 0101 	add.w	r1, r1, #1
 800e0ae:	463d      	mov	r5, r7
 800e0b0:	d9ee      	bls.n	800e090 <__utoa+0x40>
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	545a      	strb	r2, [r3, r1]
 800e0b6:	1919      	adds	r1, r3, r4
 800e0b8:	1aa5      	subs	r5, r4, r2
 800e0ba:	42aa      	cmp	r2, r5
 800e0bc:	dae3      	bge.n	800e086 <__utoa+0x36>
 800e0be:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e0c2:	780e      	ldrb	r6, [r1, #0]
 800e0c4:	7006      	strb	r6, [r0, #0]
 800e0c6:	3201      	adds	r2, #1
 800e0c8:	f801 5901 	strb.w	r5, [r1], #-1
 800e0cc:	e7f4      	b.n	800e0b8 <__utoa+0x68>
 800e0ce:	bf00      	nop
 800e0d0:	08055a48 	.word	0x08055a48

0800e0d4 <std>:
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	b510      	push	{r4, lr}
 800e0d8:	4604      	mov	r4, r0
 800e0da:	e9c0 3300 	strd	r3, r3, [r0]
 800e0de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0e2:	6083      	str	r3, [r0, #8]
 800e0e4:	8181      	strh	r1, [r0, #12]
 800e0e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800e0e8:	81c2      	strh	r2, [r0, #14]
 800e0ea:	6183      	str	r3, [r0, #24]
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	2208      	movs	r2, #8
 800e0f0:	305c      	adds	r0, #92	@ 0x5c
 800e0f2:	f000 f924 	bl	800e33e <memset>
 800e0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e12c <std+0x58>)
 800e0f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800e0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e130 <std+0x5c>)
 800e0fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e0fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e134 <std+0x60>)
 800e100:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e102:	4b0d      	ldr	r3, [pc, #52]	@ (800e138 <std+0x64>)
 800e104:	6323      	str	r3, [r4, #48]	@ 0x30
 800e106:	4b0d      	ldr	r3, [pc, #52]	@ (800e13c <std+0x68>)
 800e108:	6224      	str	r4, [r4, #32]
 800e10a:	429c      	cmp	r4, r3
 800e10c:	d006      	beq.n	800e11c <std+0x48>
 800e10e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e112:	4294      	cmp	r4, r2
 800e114:	d002      	beq.n	800e11c <std+0x48>
 800e116:	33d0      	adds	r3, #208	@ 0xd0
 800e118:	429c      	cmp	r4, r3
 800e11a:	d105      	bne.n	800e128 <std+0x54>
 800e11c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e124:	f000 ba0c 	b.w	800e540 <__retarget_lock_init_recursive>
 800e128:	bd10      	pop	{r4, pc}
 800e12a:	bf00      	nop
 800e12c:	0800e299 	.word	0x0800e299
 800e130:	0800e2bb 	.word	0x0800e2bb
 800e134:	0800e2f3 	.word	0x0800e2f3
 800e138:	0800e317 	.word	0x0800e317
 800e13c:	200452d4 	.word	0x200452d4

0800e140 <stdio_exit_handler>:
 800e140:	4a02      	ldr	r2, [pc, #8]	@ (800e14c <stdio_exit_handler+0xc>)
 800e142:	4903      	ldr	r1, [pc, #12]	@ (800e150 <stdio_exit_handler+0x10>)
 800e144:	4803      	ldr	r0, [pc, #12]	@ (800e154 <stdio_exit_handler+0x14>)
 800e146:	f000 b869 	b.w	800e21c <_fwalk_sglue>
 800e14a:	bf00      	nop
 800e14c:	20001020 	.word	0x20001020
 800e150:	0800ed19 	.word	0x0800ed19
 800e154:	20001030 	.word	0x20001030

0800e158 <cleanup_stdio>:
 800e158:	6841      	ldr	r1, [r0, #4]
 800e15a:	4b0c      	ldr	r3, [pc, #48]	@ (800e18c <cleanup_stdio+0x34>)
 800e15c:	4299      	cmp	r1, r3
 800e15e:	b510      	push	{r4, lr}
 800e160:	4604      	mov	r4, r0
 800e162:	d001      	beq.n	800e168 <cleanup_stdio+0x10>
 800e164:	f000 fdd8 	bl	800ed18 <_fflush_r>
 800e168:	68a1      	ldr	r1, [r4, #8]
 800e16a:	4b09      	ldr	r3, [pc, #36]	@ (800e190 <cleanup_stdio+0x38>)
 800e16c:	4299      	cmp	r1, r3
 800e16e:	d002      	beq.n	800e176 <cleanup_stdio+0x1e>
 800e170:	4620      	mov	r0, r4
 800e172:	f000 fdd1 	bl	800ed18 <_fflush_r>
 800e176:	68e1      	ldr	r1, [r4, #12]
 800e178:	4b06      	ldr	r3, [pc, #24]	@ (800e194 <cleanup_stdio+0x3c>)
 800e17a:	4299      	cmp	r1, r3
 800e17c:	d004      	beq.n	800e188 <cleanup_stdio+0x30>
 800e17e:	4620      	mov	r0, r4
 800e180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e184:	f000 bdc8 	b.w	800ed18 <_fflush_r>
 800e188:	bd10      	pop	{r4, pc}
 800e18a:	bf00      	nop
 800e18c:	200452d4 	.word	0x200452d4
 800e190:	2004533c 	.word	0x2004533c
 800e194:	200453a4 	.word	0x200453a4

0800e198 <global_stdio_init.part.0>:
 800e198:	b510      	push	{r4, lr}
 800e19a:	4b0b      	ldr	r3, [pc, #44]	@ (800e1c8 <global_stdio_init.part.0+0x30>)
 800e19c:	4c0b      	ldr	r4, [pc, #44]	@ (800e1cc <global_stdio_init.part.0+0x34>)
 800e19e:	4a0c      	ldr	r2, [pc, #48]	@ (800e1d0 <global_stdio_init.part.0+0x38>)
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	2104      	movs	r1, #4
 800e1a8:	f7ff ff94 	bl	800e0d4 <std>
 800e1ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	2109      	movs	r1, #9
 800e1b4:	f7ff ff8e 	bl	800e0d4 <std>
 800e1b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e1bc:	2202      	movs	r2, #2
 800e1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1c2:	2112      	movs	r1, #18
 800e1c4:	f7ff bf86 	b.w	800e0d4 <std>
 800e1c8:	2004540c 	.word	0x2004540c
 800e1cc:	200452d4 	.word	0x200452d4
 800e1d0:	0800e141 	.word	0x0800e141

0800e1d4 <__sfp_lock_acquire>:
 800e1d4:	4801      	ldr	r0, [pc, #4]	@ (800e1dc <__sfp_lock_acquire+0x8>)
 800e1d6:	f000 b9b4 	b.w	800e542 <__retarget_lock_acquire_recursive>
 800e1da:	bf00      	nop
 800e1dc:	20045415 	.word	0x20045415

0800e1e0 <__sfp_lock_release>:
 800e1e0:	4801      	ldr	r0, [pc, #4]	@ (800e1e8 <__sfp_lock_release+0x8>)
 800e1e2:	f000 b9af 	b.w	800e544 <__retarget_lock_release_recursive>
 800e1e6:	bf00      	nop
 800e1e8:	20045415 	.word	0x20045415

0800e1ec <__sinit>:
 800e1ec:	b510      	push	{r4, lr}
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	f7ff fff0 	bl	800e1d4 <__sfp_lock_acquire>
 800e1f4:	6a23      	ldr	r3, [r4, #32]
 800e1f6:	b11b      	cbz	r3, 800e200 <__sinit+0x14>
 800e1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1fc:	f7ff bff0 	b.w	800e1e0 <__sfp_lock_release>
 800e200:	4b04      	ldr	r3, [pc, #16]	@ (800e214 <__sinit+0x28>)
 800e202:	6223      	str	r3, [r4, #32]
 800e204:	4b04      	ldr	r3, [pc, #16]	@ (800e218 <__sinit+0x2c>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d1f5      	bne.n	800e1f8 <__sinit+0xc>
 800e20c:	f7ff ffc4 	bl	800e198 <global_stdio_init.part.0>
 800e210:	e7f2      	b.n	800e1f8 <__sinit+0xc>
 800e212:	bf00      	nop
 800e214:	0800e159 	.word	0x0800e159
 800e218:	2004540c 	.word	0x2004540c

0800e21c <_fwalk_sglue>:
 800e21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e220:	4607      	mov	r7, r0
 800e222:	4688      	mov	r8, r1
 800e224:	4614      	mov	r4, r2
 800e226:	2600      	movs	r6, #0
 800e228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e22c:	f1b9 0901 	subs.w	r9, r9, #1
 800e230:	d505      	bpl.n	800e23e <_fwalk_sglue+0x22>
 800e232:	6824      	ldr	r4, [r4, #0]
 800e234:	2c00      	cmp	r4, #0
 800e236:	d1f7      	bne.n	800e228 <_fwalk_sglue+0xc>
 800e238:	4630      	mov	r0, r6
 800e23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e23e:	89ab      	ldrh	r3, [r5, #12]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d907      	bls.n	800e254 <_fwalk_sglue+0x38>
 800e244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e248:	3301      	adds	r3, #1
 800e24a:	d003      	beq.n	800e254 <_fwalk_sglue+0x38>
 800e24c:	4629      	mov	r1, r5
 800e24e:	4638      	mov	r0, r7
 800e250:	47c0      	blx	r8
 800e252:	4306      	orrs	r6, r0
 800e254:	3568      	adds	r5, #104	@ 0x68
 800e256:	e7e9      	b.n	800e22c <_fwalk_sglue+0x10>

0800e258 <siprintf>:
 800e258:	b40e      	push	{r1, r2, r3}
 800e25a:	b500      	push	{lr}
 800e25c:	b09c      	sub	sp, #112	@ 0x70
 800e25e:	ab1d      	add	r3, sp, #116	@ 0x74
 800e260:	9002      	str	r0, [sp, #8]
 800e262:	9006      	str	r0, [sp, #24]
 800e264:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e268:	4809      	ldr	r0, [pc, #36]	@ (800e290 <siprintf+0x38>)
 800e26a:	9107      	str	r1, [sp, #28]
 800e26c:	9104      	str	r1, [sp, #16]
 800e26e:	4909      	ldr	r1, [pc, #36]	@ (800e294 <siprintf+0x3c>)
 800e270:	f853 2b04 	ldr.w	r2, [r3], #4
 800e274:	9105      	str	r1, [sp, #20]
 800e276:	6800      	ldr	r0, [r0, #0]
 800e278:	9301      	str	r3, [sp, #4]
 800e27a:	a902      	add	r1, sp, #8
 800e27c:	f000 fa3e 	bl	800e6fc <_svfiprintf_r>
 800e280:	9b02      	ldr	r3, [sp, #8]
 800e282:	2200      	movs	r2, #0
 800e284:	701a      	strb	r2, [r3, #0]
 800e286:	b01c      	add	sp, #112	@ 0x70
 800e288:	f85d eb04 	ldr.w	lr, [sp], #4
 800e28c:	b003      	add	sp, #12
 800e28e:	4770      	bx	lr
 800e290:	2000102c 	.word	0x2000102c
 800e294:	ffff0208 	.word	0xffff0208

0800e298 <__sread>:
 800e298:	b510      	push	{r4, lr}
 800e29a:	460c      	mov	r4, r1
 800e29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a0:	f000 f8f0 	bl	800e484 <_read_r>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	bfab      	itete	ge
 800e2a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e2aa:	89a3      	ldrhlt	r3, [r4, #12]
 800e2ac:	181b      	addge	r3, r3, r0
 800e2ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e2b2:	bfac      	ite	ge
 800e2b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e2b6:	81a3      	strhlt	r3, [r4, #12]
 800e2b8:	bd10      	pop	{r4, pc}

0800e2ba <__swrite>:
 800e2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2be:	461f      	mov	r7, r3
 800e2c0:	898b      	ldrh	r3, [r1, #12]
 800e2c2:	05db      	lsls	r3, r3, #23
 800e2c4:	4605      	mov	r5, r0
 800e2c6:	460c      	mov	r4, r1
 800e2c8:	4616      	mov	r6, r2
 800e2ca:	d505      	bpl.n	800e2d8 <__swrite+0x1e>
 800e2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f000 f8c4 	bl	800e460 <_lseek_r>
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2e2:	81a3      	strh	r3, [r4, #12]
 800e2e4:	4632      	mov	r2, r6
 800e2e6:	463b      	mov	r3, r7
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ee:	f000 b8eb 	b.w	800e4c8 <_write_r>

0800e2f2 <__sseek>:
 800e2f2:	b510      	push	{r4, lr}
 800e2f4:	460c      	mov	r4, r1
 800e2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2fa:	f000 f8b1 	bl	800e460 <_lseek_r>
 800e2fe:	1c43      	adds	r3, r0, #1
 800e300:	89a3      	ldrh	r3, [r4, #12]
 800e302:	bf15      	itete	ne
 800e304:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e30a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e30e:	81a3      	strheq	r3, [r4, #12]
 800e310:	bf18      	it	ne
 800e312:	81a3      	strhne	r3, [r4, #12]
 800e314:	bd10      	pop	{r4, pc}

0800e316 <__sclose>:
 800e316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e31a:	f000 b891 	b.w	800e440 <_close_r>

0800e31e <memcmp>:
 800e31e:	b510      	push	{r4, lr}
 800e320:	3901      	subs	r1, #1
 800e322:	4402      	add	r2, r0
 800e324:	4290      	cmp	r0, r2
 800e326:	d101      	bne.n	800e32c <memcmp+0xe>
 800e328:	2000      	movs	r0, #0
 800e32a:	e005      	b.n	800e338 <memcmp+0x1a>
 800e32c:	7803      	ldrb	r3, [r0, #0]
 800e32e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e332:	42a3      	cmp	r3, r4
 800e334:	d001      	beq.n	800e33a <memcmp+0x1c>
 800e336:	1b18      	subs	r0, r3, r4
 800e338:	bd10      	pop	{r4, pc}
 800e33a:	3001      	adds	r0, #1
 800e33c:	e7f2      	b.n	800e324 <memcmp+0x6>

0800e33e <memset>:
 800e33e:	4402      	add	r2, r0
 800e340:	4603      	mov	r3, r0
 800e342:	4293      	cmp	r3, r2
 800e344:	d100      	bne.n	800e348 <memset+0xa>
 800e346:	4770      	bx	lr
 800e348:	f803 1b01 	strb.w	r1, [r3], #1
 800e34c:	e7f9      	b.n	800e342 <memset+0x4>

0800e34e <strcat>:
 800e34e:	b510      	push	{r4, lr}
 800e350:	4602      	mov	r2, r0
 800e352:	7814      	ldrb	r4, [r2, #0]
 800e354:	4613      	mov	r3, r2
 800e356:	3201      	adds	r2, #1
 800e358:	2c00      	cmp	r4, #0
 800e35a:	d1fa      	bne.n	800e352 <strcat+0x4>
 800e35c:	3b01      	subs	r3, #1
 800e35e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e362:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e366:	2a00      	cmp	r2, #0
 800e368:	d1f9      	bne.n	800e35e <strcat+0x10>
 800e36a:	bd10      	pop	{r4, pc}

0800e36c <strchr>:
 800e36c:	b2c9      	uxtb	r1, r1
 800e36e:	4603      	mov	r3, r0
 800e370:	4618      	mov	r0, r3
 800e372:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e376:	b112      	cbz	r2, 800e37e <strchr+0x12>
 800e378:	428a      	cmp	r2, r1
 800e37a:	d1f9      	bne.n	800e370 <strchr+0x4>
 800e37c:	4770      	bx	lr
 800e37e:	2900      	cmp	r1, #0
 800e380:	bf18      	it	ne
 800e382:	2000      	movne	r0, #0
 800e384:	4770      	bx	lr
	...

0800e388 <strtok>:
 800e388:	4b16      	ldr	r3, [pc, #88]	@ (800e3e4 <strtok+0x5c>)
 800e38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38e:	681f      	ldr	r7, [r3, #0]
 800e390:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800e392:	4605      	mov	r5, r0
 800e394:	460e      	mov	r6, r1
 800e396:	b9ec      	cbnz	r4, 800e3d4 <strtok+0x4c>
 800e398:	2050      	movs	r0, #80	@ 0x50
 800e39a:	f7ff fd17 	bl	800ddcc <malloc>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	6478      	str	r0, [r7, #68]	@ 0x44
 800e3a2:	b920      	cbnz	r0, 800e3ae <strtok+0x26>
 800e3a4:	4b10      	ldr	r3, [pc, #64]	@ (800e3e8 <strtok+0x60>)
 800e3a6:	4811      	ldr	r0, [pc, #68]	@ (800e3ec <strtok+0x64>)
 800e3a8:	215b      	movs	r1, #91	@ 0x5b
 800e3aa:	f000 f8e3 	bl	800e574 <__assert_func>
 800e3ae:	e9c0 4400 	strd	r4, r4, [r0]
 800e3b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e3b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e3ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800e3be:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800e3c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800e3c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800e3ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800e3ce:	6184      	str	r4, [r0, #24]
 800e3d0:	7704      	strb	r4, [r0, #28]
 800e3d2:	6244      	str	r4, [r0, #36]	@ 0x24
 800e3d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e3d6:	4631      	mov	r1, r6
 800e3d8:	4628      	mov	r0, r5
 800e3da:	2301      	movs	r3, #1
 800e3dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e0:	f000 b806 	b.w	800e3f0 <__strtok_r>
 800e3e4:	2000102c 	.word	0x2000102c
 800e3e8:	08055b6e 	.word	0x08055b6e
 800e3ec:	08055b85 	.word	0x08055b85

0800e3f0 <__strtok_r>:
 800e3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	b908      	cbnz	r0, 800e3fa <__strtok_r+0xa>
 800e3f6:	6814      	ldr	r4, [r2, #0]
 800e3f8:	b144      	cbz	r4, 800e40c <__strtok_r+0x1c>
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e400:	460f      	mov	r7, r1
 800e402:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e406:	b91e      	cbnz	r6, 800e410 <__strtok_r+0x20>
 800e408:	b965      	cbnz	r5, 800e424 <__strtok_r+0x34>
 800e40a:	6015      	str	r5, [r2, #0]
 800e40c:	2000      	movs	r0, #0
 800e40e:	e005      	b.n	800e41c <__strtok_r+0x2c>
 800e410:	42b5      	cmp	r5, r6
 800e412:	d1f6      	bne.n	800e402 <__strtok_r+0x12>
 800e414:	2b00      	cmp	r3, #0
 800e416:	d1f0      	bne.n	800e3fa <__strtok_r+0xa>
 800e418:	6014      	str	r4, [r2, #0]
 800e41a:	7003      	strb	r3, [r0, #0]
 800e41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e41e:	461c      	mov	r4, r3
 800e420:	e00c      	b.n	800e43c <__strtok_r+0x4c>
 800e422:	b915      	cbnz	r5, 800e42a <__strtok_r+0x3a>
 800e424:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e428:	460e      	mov	r6, r1
 800e42a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e42e:	42ab      	cmp	r3, r5
 800e430:	d1f7      	bne.n	800e422 <__strtok_r+0x32>
 800e432:	2b00      	cmp	r3, #0
 800e434:	d0f3      	beq.n	800e41e <__strtok_r+0x2e>
 800e436:	2300      	movs	r3, #0
 800e438:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e43c:	6014      	str	r4, [r2, #0]
 800e43e:	e7ed      	b.n	800e41c <__strtok_r+0x2c>

0800e440 <_close_r>:
 800e440:	b538      	push	{r3, r4, r5, lr}
 800e442:	4d06      	ldr	r5, [pc, #24]	@ (800e45c <_close_r+0x1c>)
 800e444:	2300      	movs	r3, #0
 800e446:	4604      	mov	r4, r0
 800e448:	4608      	mov	r0, r1
 800e44a:	602b      	str	r3, [r5, #0]
 800e44c:	f001 feea 	bl	8010224 <_close>
 800e450:	1c43      	adds	r3, r0, #1
 800e452:	d102      	bne.n	800e45a <_close_r+0x1a>
 800e454:	682b      	ldr	r3, [r5, #0]
 800e456:	b103      	cbz	r3, 800e45a <_close_r+0x1a>
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	bd38      	pop	{r3, r4, r5, pc}
 800e45c:	20045410 	.word	0x20045410

0800e460 <_lseek_r>:
 800e460:	b538      	push	{r3, r4, r5, lr}
 800e462:	4d07      	ldr	r5, [pc, #28]	@ (800e480 <_lseek_r+0x20>)
 800e464:	4604      	mov	r4, r0
 800e466:	4608      	mov	r0, r1
 800e468:	4611      	mov	r1, r2
 800e46a:	2200      	movs	r2, #0
 800e46c:	602a      	str	r2, [r5, #0]
 800e46e:	461a      	mov	r2, r3
 800e470:	f001 ff00 	bl	8010274 <_lseek>
 800e474:	1c43      	adds	r3, r0, #1
 800e476:	d102      	bne.n	800e47e <_lseek_r+0x1e>
 800e478:	682b      	ldr	r3, [r5, #0]
 800e47a:	b103      	cbz	r3, 800e47e <_lseek_r+0x1e>
 800e47c:	6023      	str	r3, [r4, #0]
 800e47e:	bd38      	pop	{r3, r4, r5, pc}
 800e480:	20045410 	.word	0x20045410

0800e484 <_read_r>:
 800e484:	b538      	push	{r3, r4, r5, lr}
 800e486:	4d07      	ldr	r5, [pc, #28]	@ (800e4a4 <_read_r+0x20>)
 800e488:	4604      	mov	r4, r0
 800e48a:	4608      	mov	r0, r1
 800e48c:	4611      	mov	r1, r2
 800e48e:	2200      	movs	r2, #0
 800e490:	602a      	str	r2, [r5, #0]
 800e492:	461a      	mov	r2, r3
 800e494:	f001 fef6 	bl	8010284 <_read>
 800e498:	1c43      	adds	r3, r0, #1
 800e49a:	d102      	bne.n	800e4a2 <_read_r+0x1e>
 800e49c:	682b      	ldr	r3, [r5, #0]
 800e49e:	b103      	cbz	r3, 800e4a2 <_read_r+0x1e>
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	bd38      	pop	{r3, r4, r5, pc}
 800e4a4:	20045410 	.word	0x20045410

0800e4a8 <_sbrk_r>:
 800e4a8:	b538      	push	{r3, r4, r5, lr}
 800e4aa:	4d06      	ldr	r5, [pc, #24]	@ (800e4c4 <_sbrk_r+0x1c>)
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	4608      	mov	r0, r1
 800e4b2:	602b      	str	r3, [r5, #0]
 800e4b4:	f001 feee 	bl	8010294 <_sbrk>
 800e4b8:	1c43      	adds	r3, r0, #1
 800e4ba:	d102      	bne.n	800e4c2 <_sbrk_r+0x1a>
 800e4bc:	682b      	ldr	r3, [r5, #0]
 800e4be:	b103      	cbz	r3, 800e4c2 <_sbrk_r+0x1a>
 800e4c0:	6023      	str	r3, [r4, #0]
 800e4c2:	bd38      	pop	{r3, r4, r5, pc}
 800e4c4:	20045410 	.word	0x20045410

0800e4c8 <_write_r>:
 800e4c8:	b538      	push	{r3, r4, r5, lr}
 800e4ca:	4d07      	ldr	r5, [pc, #28]	@ (800e4e8 <_write_r+0x20>)
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	4608      	mov	r0, r1
 800e4d0:	4611      	mov	r1, r2
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	602a      	str	r2, [r5, #0]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	f001 feea 	bl	80102b0 <_write>
 800e4dc:	1c43      	adds	r3, r0, #1
 800e4de:	d102      	bne.n	800e4e6 <_write_r+0x1e>
 800e4e0:	682b      	ldr	r3, [r5, #0]
 800e4e2:	b103      	cbz	r3, 800e4e6 <_write_r+0x1e>
 800e4e4:	6023      	str	r3, [r4, #0]
 800e4e6:	bd38      	pop	{r3, r4, r5, pc}
 800e4e8:	20045410 	.word	0x20045410

0800e4ec <__errno>:
 800e4ec:	4b01      	ldr	r3, [pc, #4]	@ (800e4f4 <__errno+0x8>)
 800e4ee:	6818      	ldr	r0, [r3, #0]
 800e4f0:	4770      	bx	lr
 800e4f2:	bf00      	nop
 800e4f4:	2000102c 	.word	0x2000102c

0800e4f8 <__libc_init_array>:
 800e4f8:	b570      	push	{r4, r5, r6, lr}
 800e4fa:	4d0d      	ldr	r5, [pc, #52]	@ (800e530 <__libc_init_array+0x38>)
 800e4fc:	4c0d      	ldr	r4, [pc, #52]	@ (800e534 <__libc_init_array+0x3c>)
 800e4fe:	1b64      	subs	r4, r4, r5
 800e500:	10a4      	asrs	r4, r4, #2
 800e502:	2600      	movs	r6, #0
 800e504:	42a6      	cmp	r6, r4
 800e506:	d109      	bne.n	800e51c <__libc_init_array+0x24>
 800e508:	4d0b      	ldr	r5, [pc, #44]	@ (800e538 <__libc_init_array+0x40>)
 800e50a:	4c0c      	ldr	r4, [pc, #48]	@ (800e53c <__libc_init_array+0x44>)
 800e50c:	f001 feda 	bl	80102c4 <_init>
 800e510:	1b64      	subs	r4, r4, r5
 800e512:	10a4      	asrs	r4, r4, #2
 800e514:	2600      	movs	r6, #0
 800e516:	42a6      	cmp	r6, r4
 800e518:	d105      	bne.n	800e526 <__libc_init_array+0x2e>
 800e51a:	bd70      	pop	{r4, r5, r6, pc}
 800e51c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e520:	4798      	blx	r3
 800e522:	3601      	adds	r6, #1
 800e524:	e7ee      	b.n	800e504 <__libc_init_array+0xc>
 800e526:	f855 3b04 	ldr.w	r3, [r5], #4
 800e52a:	4798      	blx	r3
 800e52c:	3601      	adds	r6, #1
 800e52e:	e7f2      	b.n	800e516 <__libc_init_array+0x1e>
 800e530:	08056028 	.word	0x08056028
 800e534:	08056028 	.word	0x08056028
 800e538:	08056028 	.word	0x08056028
 800e53c:	0805602c 	.word	0x0805602c

0800e540 <__retarget_lock_init_recursive>:
 800e540:	4770      	bx	lr

0800e542 <__retarget_lock_acquire_recursive>:
 800e542:	4770      	bx	lr

0800e544 <__retarget_lock_release_recursive>:
 800e544:	4770      	bx	lr

0800e546 <strcpy>:
 800e546:	4603      	mov	r3, r0
 800e548:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e54c:	f803 2b01 	strb.w	r2, [r3], #1
 800e550:	2a00      	cmp	r2, #0
 800e552:	d1f9      	bne.n	800e548 <strcpy+0x2>
 800e554:	4770      	bx	lr

0800e556 <memcpy>:
 800e556:	440a      	add	r2, r1
 800e558:	4291      	cmp	r1, r2
 800e55a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e55e:	d100      	bne.n	800e562 <memcpy+0xc>
 800e560:	4770      	bx	lr
 800e562:	b510      	push	{r4, lr}
 800e564:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e568:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e56c:	4291      	cmp	r1, r2
 800e56e:	d1f9      	bne.n	800e564 <memcpy+0xe>
 800e570:	bd10      	pop	{r4, pc}
	...

0800e574 <__assert_func>:
 800e574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e576:	4614      	mov	r4, r2
 800e578:	461a      	mov	r2, r3
 800e57a:	4b09      	ldr	r3, [pc, #36]	@ (800e5a0 <__assert_func+0x2c>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	4605      	mov	r5, r0
 800e580:	68d8      	ldr	r0, [r3, #12]
 800e582:	b954      	cbnz	r4, 800e59a <__assert_func+0x26>
 800e584:	4b07      	ldr	r3, [pc, #28]	@ (800e5a4 <__assert_func+0x30>)
 800e586:	461c      	mov	r4, r3
 800e588:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e58c:	9100      	str	r1, [sp, #0]
 800e58e:	462b      	mov	r3, r5
 800e590:	4905      	ldr	r1, [pc, #20]	@ (800e5a8 <__assert_func+0x34>)
 800e592:	f000 fbe9 	bl	800ed68 <fiprintf>
 800e596:	f000 fc13 	bl	800edc0 <abort>
 800e59a:	4b04      	ldr	r3, [pc, #16]	@ (800e5ac <__assert_func+0x38>)
 800e59c:	e7f4      	b.n	800e588 <__assert_func+0x14>
 800e59e:	bf00      	nop
 800e5a0:	2000102c 	.word	0x2000102c
 800e5a4:	08055c1a 	.word	0x08055c1a
 800e5a8:	08055bec 	.word	0x08055bec
 800e5ac:	08055bdf 	.word	0x08055bdf

0800e5b0 <_free_r>:
 800e5b0:	b538      	push	{r3, r4, r5, lr}
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	2900      	cmp	r1, #0
 800e5b6:	d041      	beq.n	800e63c <_free_r+0x8c>
 800e5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5bc:	1f0c      	subs	r4, r1, #4
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	bfb8      	it	lt
 800e5c2:	18e4      	addlt	r4, r4, r3
 800e5c4:	f7ff fcb4 	bl	800df30 <__malloc_lock>
 800e5c8:	4a1d      	ldr	r2, [pc, #116]	@ (800e640 <_free_r+0x90>)
 800e5ca:	6813      	ldr	r3, [r2, #0]
 800e5cc:	b933      	cbnz	r3, 800e5dc <_free_r+0x2c>
 800e5ce:	6063      	str	r3, [r4, #4]
 800e5d0:	6014      	str	r4, [r2, #0]
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5d8:	f7ff bcb0 	b.w	800df3c <__malloc_unlock>
 800e5dc:	42a3      	cmp	r3, r4
 800e5de:	d908      	bls.n	800e5f2 <_free_r+0x42>
 800e5e0:	6820      	ldr	r0, [r4, #0]
 800e5e2:	1821      	adds	r1, r4, r0
 800e5e4:	428b      	cmp	r3, r1
 800e5e6:	bf01      	itttt	eq
 800e5e8:	6819      	ldreq	r1, [r3, #0]
 800e5ea:	685b      	ldreq	r3, [r3, #4]
 800e5ec:	1809      	addeq	r1, r1, r0
 800e5ee:	6021      	streq	r1, [r4, #0]
 800e5f0:	e7ed      	b.n	800e5ce <_free_r+0x1e>
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	b10b      	cbz	r3, 800e5fc <_free_r+0x4c>
 800e5f8:	42a3      	cmp	r3, r4
 800e5fa:	d9fa      	bls.n	800e5f2 <_free_r+0x42>
 800e5fc:	6811      	ldr	r1, [r2, #0]
 800e5fe:	1850      	adds	r0, r2, r1
 800e600:	42a0      	cmp	r0, r4
 800e602:	d10b      	bne.n	800e61c <_free_r+0x6c>
 800e604:	6820      	ldr	r0, [r4, #0]
 800e606:	4401      	add	r1, r0
 800e608:	1850      	adds	r0, r2, r1
 800e60a:	4283      	cmp	r3, r0
 800e60c:	6011      	str	r1, [r2, #0]
 800e60e:	d1e0      	bne.n	800e5d2 <_free_r+0x22>
 800e610:	6818      	ldr	r0, [r3, #0]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	6053      	str	r3, [r2, #4]
 800e616:	4408      	add	r0, r1
 800e618:	6010      	str	r0, [r2, #0]
 800e61a:	e7da      	b.n	800e5d2 <_free_r+0x22>
 800e61c:	d902      	bls.n	800e624 <_free_r+0x74>
 800e61e:	230c      	movs	r3, #12
 800e620:	602b      	str	r3, [r5, #0]
 800e622:	e7d6      	b.n	800e5d2 <_free_r+0x22>
 800e624:	6820      	ldr	r0, [r4, #0]
 800e626:	1821      	adds	r1, r4, r0
 800e628:	428b      	cmp	r3, r1
 800e62a:	bf04      	itt	eq
 800e62c:	6819      	ldreq	r1, [r3, #0]
 800e62e:	685b      	ldreq	r3, [r3, #4]
 800e630:	6063      	str	r3, [r4, #4]
 800e632:	bf04      	itt	eq
 800e634:	1809      	addeq	r1, r1, r0
 800e636:	6021      	streq	r1, [r4, #0]
 800e638:	6054      	str	r4, [r2, #4]
 800e63a:	e7ca      	b.n	800e5d2 <_free_r+0x22>
 800e63c:	bd38      	pop	{r3, r4, r5, pc}
 800e63e:	bf00      	nop
 800e640:	200452d0 	.word	0x200452d0

0800e644 <__ssputs_r>:
 800e644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e648:	688e      	ldr	r6, [r1, #8]
 800e64a:	461f      	mov	r7, r3
 800e64c:	42be      	cmp	r6, r7
 800e64e:	680b      	ldr	r3, [r1, #0]
 800e650:	4682      	mov	sl, r0
 800e652:	460c      	mov	r4, r1
 800e654:	4690      	mov	r8, r2
 800e656:	d82d      	bhi.n	800e6b4 <__ssputs_r+0x70>
 800e658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e65c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e660:	d026      	beq.n	800e6b0 <__ssputs_r+0x6c>
 800e662:	6965      	ldr	r5, [r4, #20]
 800e664:	6909      	ldr	r1, [r1, #16]
 800e666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e66a:	eba3 0901 	sub.w	r9, r3, r1
 800e66e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e672:	1c7b      	adds	r3, r7, #1
 800e674:	444b      	add	r3, r9
 800e676:	106d      	asrs	r5, r5, #1
 800e678:	429d      	cmp	r5, r3
 800e67a:	bf38      	it	cc
 800e67c:	461d      	movcc	r5, r3
 800e67e:	0553      	lsls	r3, r2, #21
 800e680:	d527      	bpl.n	800e6d2 <__ssputs_r+0x8e>
 800e682:	4629      	mov	r1, r5
 800e684:	f7ff fbd4 	bl	800de30 <_malloc_r>
 800e688:	4606      	mov	r6, r0
 800e68a:	b360      	cbz	r0, 800e6e6 <__ssputs_r+0xa2>
 800e68c:	6921      	ldr	r1, [r4, #16]
 800e68e:	464a      	mov	r2, r9
 800e690:	f7ff ff61 	bl	800e556 <memcpy>
 800e694:	89a3      	ldrh	r3, [r4, #12]
 800e696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e69e:	81a3      	strh	r3, [r4, #12]
 800e6a0:	6126      	str	r6, [r4, #16]
 800e6a2:	6165      	str	r5, [r4, #20]
 800e6a4:	444e      	add	r6, r9
 800e6a6:	eba5 0509 	sub.w	r5, r5, r9
 800e6aa:	6026      	str	r6, [r4, #0]
 800e6ac:	60a5      	str	r5, [r4, #8]
 800e6ae:	463e      	mov	r6, r7
 800e6b0:	42be      	cmp	r6, r7
 800e6b2:	d900      	bls.n	800e6b6 <__ssputs_r+0x72>
 800e6b4:	463e      	mov	r6, r7
 800e6b6:	6820      	ldr	r0, [r4, #0]
 800e6b8:	4632      	mov	r2, r6
 800e6ba:	4641      	mov	r1, r8
 800e6bc:	f000 fb66 	bl	800ed8c <memmove>
 800e6c0:	68a3      	ldr	r3, [r4, #8]
 800e6c2:	1b9b      	subs	r3, r3, r6
 800e6c4:	60a3      	str	r3, [r4, #8]
 800e6c6:	6823      	ldr	r3, [r4, #0]
 800e6c8:	4433      	add	r3, r6
 800e6ca:	6023      	str	r3, [r4, #0]
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6d2:	462a      	mov	r2, r5
 800e6d4:	f000 fb7b 	bl	800edce <_realloc_r>
 800e6d8:	4606      	mov	r6, r0
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	d1e0      	bne.n	800e6a0 <__ssputs_r+0x5c>
 800e6de:	6921      	ldr	r1, [r4, #16]
 800e6e0:	4650      	mov	r0, sl
 800e6e2:	f7ff ff65 	bl	800e5b0 <_free_r>
 800e6e6:	230c      	movs	r3, #12
 800e6e8:	f8ca 3000 	str.w	r3, [sl]
 800e6ec:	89a3      	ldrh	r3, [r4, #12]
 800e6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6f2:	81a3      	strh	r3, [r4, #12]
 800e6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f8:	e7e9      	b.n	800e6ce <__ssputs_r+0x8a>
	...

0800e6fc <_svfiprintf_r>:
 800e6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e700:	4698      	mov	r8, r3
 800e702:	898b      	ldrh	r3, [r1, #12]
 800e704:	061b      	lsls	r3, r3, #24
 800e706:	b09d      	sub	sp, #116	@ 0x74
 800e708:	4607      	mov	r7, r0
 800e70a:	460d      	mov	r5, r1
 800e70c:	4614      	mov	r4, r2
 800e70e:	d510      	bpl.n	800e732 <_svfiprintf_r+0x36>
 800e710:	690b      	ldr	r3, [r1, #16]
 800e712:	b973      	cbnz	r3, 800e732 <_svfiprintf_r+0x36>
 800e714:	2140      	movs	r1, #64	@ 0x40
 800e716:	f7ff fb8b 	bl	800de30 <_malloc_r>
 800e71a:	6028      	str	r0, [r5, #0]
 800e71c:	6128      	str	r0, [r5, #16]
 800e71e:	b930      	cbnz	r0, 800e72e <_svfiprintf_r+0x32>
 800e720:	230c      	movs	r3, #12
 800e722:	603b      	str	r3, [r7, #0]
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	b01d      	add	sp, #116	@ 0x74
 800e72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72e:	2340      	movs	r3, #64	@ 0x40
 800e730:	616b      	str	r3, [r5, #20]
 800e732:	2300      	movs	r3, #0
 800e734:	9309      	str	r3, [sp, #36]	@ 0x24
 800e736:	2320      	movs	r3, #32
 800e738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e73c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e740:	2330      	movs	r3, #48	@ 0x30
 800e742:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e8e0 <_svfiprintf_r+0x1e4>
 800e746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e74a:	f04f 0901 	mov.w	r9, #1
 800e74e:	4623      	mov	r3, r4
 800e750:	469a      	mov	sl, r3
 800e752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e756:	b10a      	cbz	r2, 800e75c <_svfiprintf_r+0x60>
 800e758:	2a25      	cmp	r2, #37	@ 0x25
 800e75a:	d1f9      	bne.n	800e750 <_svfiprintf_r+0x54>
 800e75c:	ebba 0b04 	subs.w	fp, sl, r4
 800e760:	d00b      	beq.n	800e77a <_svfiprintf_r+0x7e>
 800e762:	465b      	mov	r3, fp
 800e764:	4622      	mov	r2, r4
 800e766:	4629      	mov	r1, r5
 800e768:	4638      	mov	r0, r7
 800e76a:	f7ff ff6b 	bl	800e644 <__ssputs_r>
 800e76e:	3001      	adds	r0, #1
 800e770:	f000 80a7 	beq.w	800e8c2 <_svfiprintf_r+0x1c6>
 800e774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e776:	445a      	add	r2, fp
 800e778:	9209      	str	r2, [sp, #36]	@ 0x24
 800e77a:	f89a 3000 	ldrb.w	r3, [sl]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f000 809f 	beq.w	800e8c2 <_svfiprintf_r+0x1c6>
 800e784:	2300      	movs	r3, #0
 800e786:	f04f 32ff 	mov.w	r2, #4294967295
 800e78a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e78e:	f10a 0a01 	add.w	sl, sl, #1
 800e792:	9304      	str	r3, [sp, #16]
 800e794:	9307      	str	r3, [sp, #28]
 800e796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e79a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e79c:	4654      	mov	r4, sl
 800e79e:	2205      	movs	r2, #5
 800e7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7a4:	484e      	ldr	r0, [pc, #312]	@ (800e8e0 <_svfiprintf_r+0x1e4>)
 800e7a6:	f7f1 fdab 	bl	8000300 <memchr>
 800e7aa:	9a04      	ldr	r2, [sp, #16]
 800e7ac:	b9d8      	cbnz	r0, 800e7e6 <_svfiprintf_r+0xea>
 800e7ae:	06d0      	lsls	r0, r2, #27
 800e7b0:	bf44      	itt	mi
 800e7b2:	2320      	movmi	r3, #32
 800e7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7b8:	0711      	lsls	r1, r2, #28
 800e7ba:	bf44      	itt	mi
 800e7bc:	232b      	movmi	r3, #43	@ 0x2b
 800e7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e7c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7c8:	d015      	beq.n	800e7f6 <_svfiprintf_r+0xfa>
 800e7ca:	9a07      	ldr	r2, [sp, #28]
 800e7cc:	4654      	mov	r4, sl
 800e7ce:	2000      	movs	r0, #0
 800e7d0:	f04f 0c0a 	mov.w	ip, #10
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7da:	3b30      	subs	r3, #48	@ 0x30
 800e7dc:	2b09      	cmp	r3, #9
 800e7de:	d94b      	bls.n	800e878 <_svfiprintf_r+0x17c>
 800e7e0:	b1b0      	cbz	r0, 800e810 <_svfiprintf_r+0x114>
 800e7e2:	9207      	str	r2, [sp, #28]
 800e7e4:	e014      	b.n	800e810 <_svfiprintf_r+0x114>
 800e7e6:	eba0 0308 	sub.w	r3, r0, r8
 800e7ea:	fa09 f303 	lsl.w	r3, r9, r3
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	9304      	str	r3, [sp, #16]
 800e7f2:	46a2      	mov	sl, r4
 800e7f4:	e7d2      	b.n	800e79c <_svfiprintf_r+0xa0>
 800e7f6:	9b03      	ldr	r3, [sp, #12]
 800e7f8:	1d19      	adds	r1, r3, #4
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	9103      	str	r1, [sp, #12]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	bfbb      	ittet	lt
 800e802:	425b      	neglt	r3, r3
 800e804:	f042 0202 	orrlt.w	r2, r2, #2
 800e808:	9307      	strge	r3, [sp, #28]
 800e80a:	9307      	strlt	r3, [sp, #28]
 800e80c:	bfb8      	it	lt
 800e80e:	9204      	strlt	r2, [sp, #16]
 800e810:	7823      	ldrb	r3, [r4, #0]
 800e812:	2b2e      	cmp	r3, #46	@ 0x2e
 800e814:	d10a      	bne.n	800e82c <_svfiprintf_r+0x130>
 800e816:	7863      	ldrb	r3, [r4, #1]
 800e818:	2b2a      	cmp	r3, #42	@ 0x2a
 800e81a:	d132      	bne.n	800e882 <_svfiprintf_r+0x186>
 800e81c:	9b03      	ldr	r3, [sp, #12]
 800e81e:	1d1a      	adds	r2, r3, #4
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	9203      	str	r2, [sp, #12]
 800e824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e828:	3402      	adds	r4, #2
 800e82a:	9305      	str	r3, [sp, #20]
 800e82c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e8f0 <_svfiprintf_r+0x1f4>
 800e830:	7821      	ldrb	r1, [r4, #0]
 800e832:	2203      	movs	r2, #3
 800e834:	4650      	mov	r0, sl
 800e836:	f7f1 fd63 	bl	8000300 <memchr>
 800e83a:	b138      	cbz	r0, 800e84c <_svfiprintf_r+0x150>
 800e83c:	9b04      	ldr	r3, [sp, #16]
 800e83e:	eba0 000a 	sub.w	r0, r0, sl
 800e842:	2240      	movs	r2, #64	@ 0x40
 800e844:	4082      	lsls	r2, r0
 800e846:	4313      	orrs	r3, r2
 800e848:	3401      	adds	r4, #1
 800e84a:	9304      	str	r3, [sp, #16]
 800e84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e850:	4824      	ldr	r0, [pc, #144]	@ (800e8e4 <_svfiprintf_r+0x1e8>)
 800e852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e856:	2206      	movs	r2, #6
 800e858:	f7f1 fd52 	bl	8000300 <memchr>
 800e85c:	2800      	cmp	r0, #0
 800e85e:	d036      	beq.n	800e8ce <_svfiprintf_r+0x1d2>
 800e860:	4b21      	ldr	r3, [pc, #132]	@ (800e8e8 <_svfiprintf_r+0x1ec>)
 800e862:	bb1b      	cbnz	r3, 800e8ac <_svfiprintf_r+0x1b0>
 800e864:	9b03      	ldr	r3, [sp, #12]
 800e866:	3307      	adds	r3, #7
 800e868:	f023 0307 	bic.w	r3, r3, #7
 800e86c:	3308      	adds	r3, #8
 800e86e:	9303      	str	r3, [sp, #12]
 800e870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e872:	4433      	add	r3, r6
 800e874:	9309      	str	r3, [sp, #36]	@ 0x24
 800e876:	e76a      	b.n	800e74e <_svfiprintf_r+0x52>
 800e878:	fb0c 3202 	mla	r2, ip, r2, r3
 800e87c:	460c      	mov	r4, r1
 800e87e:	2001      	movs	r0, #1
 800e880:	e7a8      	b.n	800e7d4 <_svfiprintf_r+0xd8>
 800e882:	2300      	movs	r3, #0
 800e884:	3401      	adds	r4, #1
 800e886:	9305      	str	r3, [sp, #20]
 800e888:	4619      	mov	r1, r3
 800e88a:	f04f 0c0a 	mov.w	ip, #10
 800e88e:	4620      	mov	r0, r4
 800e890:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e894:	3a30      	subs	r2, #48	@ 0x30
 800e896:	2a09      	cmp	r2, #9
 800e898:	d903      	bls.n	800e8a2 <_svfiprintf_r+0x1a6>
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d0c6      	beq.n	800e82c <_svfiprintf_r+0x130>
 800e89e:	9105      	str	r1, [sp, #20]
 800e8a0:	e7c4      	b.n	800e82c <_svfiprintf_r+0x130>
 800e8a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	e7f0      	b.n	800e88e <_svfiprintf_r+0x192>
 800e8ac:	ab03      	add	r3, sp, #12
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	462a      	mov	r2, r5
 800e8b2:	4b0e      	ldr	r3, [pc, #56]	@ (800e8ec <_svfiprintf_r+0x1f0>)
 800e8b4:	a904      	add	r1, sp, #16
 800e8b6:	4638      	mov	r0, r7
 800e8b8:	f3af 8000 	nop.w
 800e8bc:	1c42      	adds	r2, r0, #1
 800e8be:	4606      	mov	r6, r0
 800e8c0:	d1d6      	bne.n	800e870 <_svfiprintf_r+0x174>
 800e8c2:	89ab      	ldrh	r3, [r5, #12]
 800e8c4:	065b      	lsls	r3, r3, #25
 800e8c6:	f53f af2d 	bmi.w	800e724 <_svfiprintf_r+0x28>
 800e8ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8cc:	e72c      	b.n	800e728 <_svfiprintf_r+0x2c>
 800e8ce:	ab03      	add	r3, sp, #12
 800e8d0:	9300      	str	r3, [sp, #0]
 800e8d2:	462a      	mov	r2, r5
 800e8d4:	4b05      	ldr	r3, [pc, #20]	@ (800e8ec <_svfiprintf_r+0x1f0>)
 800e8d6:	a904      	add	r1, sp, #16
 800e8d8:	4638      	mov	r0, r7
 800e8da:	f000 f879 	bl	800e9d0 <_printf_i>
 800e8de:	e7ed      	b.n	800e8bc <_svfiprintf_r+0x1c0>
 800e8e0:	08055c1b 	.word	0x08055c1b
 800e8e4:	08055c25 	.word	0x08055c25
 800e8e8:	00000000 	.word	0x00000000
 800e8ec:	0800e645 	.word	0x0800e645
 800e8f0:	08055c21 	.word	0x08055c21

0800e8f4 <_printf_common>:
 800e8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8f8:	4616      	mov	r6, r2
 800e8fa:	4698      	mov	r8, r3
 800e8fc:	688a      	ldr	r2, [r1, #8]
 800e8fe:	690b      	ldr	r3, [r1, #16]
 800e900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e904:	4293      	cmp	r3, r2
 800e906:	bfb8      	it	lt
 800e908:	4613      	movlt	r3, r2
 800e90a:	6033      	str	r3, [r6, #0]
 800e90c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e910:	4607      	mov	r7, r0
 800e912:	460c      	mov	r4, r1
 800e914:	b10a      	cbz	r2, 800e91a <_printf_common+0x26>
 800e916:	3301      	adds	r3, #1
 800e918:	6033      	str	r3, [r6, #0]
 800e91a:	6823      	ldr	r3, [r4, #0]
 800e91c:	0699      	lsls	r1, r3, #26
 800e91e:	bf42      	ittt	mi
 800e920:	6833      	ldrmi	r3, [r6, #0]
 800e922:	3302      	addmi	r3, #2
 800e924:	6033      	strmi	r3, [r6, #0]
 800e926:	6825      	ldr	r5, [r4, #0]
 800e928:	f015 0506 	ands.w	r5, r5, #6
 800e92c:	d106      	bne.n	800e93c <_printf_common+0x48>
 800e92e:	f104 0a19 	add.w	sl, r4, #25
 800e932:	68e3      	ldr	r3, [r4, #12]
 800e934:	6832      	ldr	r2, [r6, #0]
 800e936:	1a9b      	subs	r3, r3, r2
 800e938:	42ab      	cmp	r3, r5
 800e93a:	dc26      	bgt.n	800e98a <_printf_common+0x96>
 800e93c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e940:	6822      	ldr	r2, [r4, #0]
 800e942:	3b00      	subs	r3, #0
 800e944:	bf18      	it	ne
 800e946:	2301      	movne	r3, #1
 800e948:	0692      	lsls	r2, r2, #26
 800e94a:	d42b      	bmi.n	800e9a4 <_printf_common+0xb0>
 800e94c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e950:	4641      	mov	r1, r8
 800e952:	4638      	mov	r0, r7
 800e954:	47c8      	blx	r9
 800e956:	3001      	adds	r0, #1
 800e958:	d01e      	beq.n	800e998 <_printf_common+0xa4>
 800e95a:	6823      	ldr	r3, [r4, #0]
 800e95c:	6922      	ldr	r2, [r4, #16]
 800e95e:	f003 0306 	and.w	r3, r3, #6
 800e962:	2b04      	cmp	r3, #4
 800e964:	bf02      	ittt	eq
 800e966:	68e5      	ldreq	r5, [r4, #12]
 800e968:	6833      	ldreq	r3, [r6, #0]
 800e96a:	1aed      	subeq	r5, r5, r3
 800e96c:	68a3      	ldr	r3, [r4, #8]
 800e96e:	bf0c      	ite	eq
 800e970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e974:	2500      	movne	r5, #0
 800e976:	4293      	cmp	r3, r2
 800e978:	bfc4      	itt	gt
 800e97a:	1a9b      	subgt	r3, r3, r2
 800e97c:	18ed      	addgt	r5, r5, r3
 800e97e:	2600      	movs	r6, #0
 800e980:	341a      	adds	r4, #26
 800e982:	42b5      	cmp	r5, r6
 800e984:	d11a      	bne.n	800e9bc <_printf_common+0xc8>
 800e986:	2000      	movs	r0, #0
 800e988:	e008      	b.n	800e99c <_printf_common+0xa8>
 800e98a:	2301      	movs	r3, #1
 800e98c:	4652      	mov	r2, sl
 800e98e:	4641      	mov	r1, r8
 800e990:	4638      	mov	r0, r7
 800e992:	47c8      	blx	r9
 800e994:	3001      	adds	r0, #1
 800e996:	d103      	bne.n	800e9a0 <_printf_common+0xac>
 800e998:	f04f 30ff 	mov.w	r0, #4294967295
 800e99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a0:	3501      	adds	r5, #1
 800e9a2:	e7c6      	b.n	800e932 <_printf_common+0x3e>
 800e9a4:	18e1      	adds	r1, r4, r3
 800e9a6:	1c5a      	adds	r2, r3, #1
 800e9a8:	2030      	movs	r0, #48	@ 0x30
 800e9aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e9ae:	4422      	add	r2, r4
 800e9b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e9b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e9b8:	3302      	adds	r3, #2
 800e9ba:	e7c7      	b.n	800e94c <_printf_common+0x58>
 800e9bc:	2301      	movs	r3, #1
 800e9be:	4622      	mov	r2, r4
 800e9c0:	4641      	mov	r1, r8
 800e9c2:	4638      	mov	r0, r7
 800e9c4:	47c8      	blx	r9
 800e9c6:	3001      	adds	r0, #1
 800e9c8:	d0e6      	beq.n	800e998 <_printf_common+0xa4>
 800e9ca:	3601      	adds	r6, #1
 800e9cc:	e7d9      	b.n	800e982 <_printf_common+0x8e>
	...

0800e9d0 <_printf_i>:
 800e9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9d4:	7e0f      	ldrb	r7, [r1, #24]
 800e9d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e9d8:	2f78      	cmp	r7, #120	@ 0x78
 800e9da:	4691      	mov	r9, r2
 800e9dc:	4680      	mov	r8, r0
 800e9de:	460c      	mov	r4, r1
 800e9e0:	469a      	mov	sl, r3
 800e9e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e9e6:	d807      	bhi.n	800e9f8 <_printf_i+0x28>
 800e9e8:	2f62      	cmp	r7, #98	@ 0x62
 800e9ea:	d80a      	bhi.n	800ea02 <_printf_i+0x32>
 800e9ec:	2f00      	cmp	r7, #0
 800e9ee:	f000 80d2 	beq.w	800eb96 <_printf_i+0x1c6>
 800e9f2:	2f58      	cmp	r7, #88	@ 0x58
 800e9f4:	f000 80b9 	beq.w	800eb6a <_printf_i+0x19a>
 800e9f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ea00:	e03a      	b.n	800ea78 <_printf_i+0xa8>
 800ea02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ea06:	2b15      	cmp	r3, #21
 800ea08:	d8f6      	bhi.n	800e9f8 <_printf_i+0x28>
 800ea0a:	a101      	add	r1, pc, #4	@ (adr r1, 800ea10 <_printf_i+0x40>)
 800ea0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea10:	0800ea69 	.word	0x0800ea69
 800ea14:	0800ea7d 	.word	0x0800ea7d
 800ea18:	0800e9f9 	.word	0x0800e9f9
 800ea1c:	0800e9f9 	.word	0x0800e9f9
 800ea20:	0800e9f9 	.word	0x0800e9f9
 800ea24:	0800e9f9 	.word	0x0800e9f9
 800ea28:	0800ea7d 	.word	0x0800ea7d
 800ea2c:	0800e9f9 	.word	0x0800e9f9
 800ea30:	0800e9f9 	.word	0x0800e9f9
 800ea34:	0800e9f9 	.word	0x0800e9f9
 800ea38:	0800e9f9 	.word	0x0800e9f9
 800ea3c:	0800eb7d 	.word	0x0800eb7d
 800ea40:	0800eaa7 	.word	0x0800eaa7
 800ea44:	0800eb37 	.word	0x0800eb37
 800ea48:	0800e9f9 	.word	0x0800e9f9
 800ea4c:	0800e9f9 	.word	0x0800e9f9
 800ea50:	0800eb9f 	.word	0x0800eb9f
 800ea54:	0800e9f9 	.word	0x0800e9f9
 800ea58:	0800eaa7 	.word	0x0800eaa7
 800ea5c:	0800e9f9 	.word	0x0800e9f9
 800ea60:	0800e9f9 	.word	0x0800e9f9
 800ea64:	0800eb3f 	.word	0x0800eb3f
 800ea68:	6833      	ldr	r3, [r6, #0]
 800ea6a:	1d1a      	adds	r2, r3, #4
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	6032      	str	r2, [r6, #0]
 800ea70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e09d      	b.n	800ebb8 <_printf_i+0x1e8>
 800ea7c:	6833      	ldr	r3, [r6, #0]
 800ea7e:	6820      	ldr	r0, [r4, #0]
 800ea80:	1d19      	adds	r1, r3, #4
 800ea82:	6031      	str	r1, [r6, #0]
 800ea84:	0606      	lsls	r6, r0, #24
 800ea86:	d501      	bpl.n	800ea8c <_printf_i+0xbc>
 800ea88:	681d      	ldr	r5, [r3, #0]
 800ea8a:	e003      	b.n	800ea94 <_printf_i+0xc4>
 800ea8c:	0645      	lsls	r5, r0, #25
 800ea8e:	d5fb      	bpl.n	800ea88 <_printf_i+0xb8>
 800ea90:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea94:	2d00      	cmp	r5, #0
 800ea96:	da03      	bge.n	800eaa0 <_printf_i+0xd0>
 800ea98:	232d      	movs	r3, #45	@ 0x2d
 800ea9a:	426d      	negs	r5, r5
 800ea9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eaa0:	4859      	ldr	r0, [pc, #356]	@ (800ec08 <_printf_i+0x238>)
 800eaa2:	230a      	movs	r3, #10
 800eaa4:	e011      	b.n	800eaca <_printf_i+0xfa>
 800eaa6:	6821      	ldr	r1, [r4, #0]
 800eaa8:	6833      	ldr	r3, [r6, #0]
 800eaaa:	0608      	lsls	r0, r1, #24
 800eaac:	f853 5b04 	ldr.w	r5, [r3], #4
 800eab0:	d402      	bmi.n	800eab8 <_printf_i+0xe8>
 800eab2:	0649      	lsls	r1, r1, #25
 800eab4:	bf48      	it	mi
 800eab6:	b2ad      	uxthmi	r5, r5
 800eab8:	2f6f      	cmp	r7, #111	@ 0x6f
 800eaba:	4853      	ldr	r0, [pc, #332]	@ (800ec08 <_printf_i+0x238>)
 800eabc:	6033      	str	r3, [r6, #0]
 800eabe:	bf14      	ite	ne
 800eac0:	230a      	movne	r3, #10
 800eac2:	2308      	moveq	r3, #8
 800eac4:	2100      	movs	r1, #0
 800eac6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eaca:	6866      	ldr	r6, [r4, #4]
 800eacc:	60a6      	str	r6, [r4, #8]
 800eace:	2e00      	cmp	r6, #0
 800ead0:	bfa2      	ittt	ge
 800ead2:	6821      	ldrge	r1, [r4, #0]
 800ead4:	f021 0104 	bicge.w	r1, r1, #4
 800ead8:	6021      	strge	r1, [r4, #0]
 800eada:	b90d      	cbnz	r5, 800eae0 <_printf_i+0x110>
 800eadc:	2e00      	cmp	r6, #0
 800eade:	d04b      	beq.n	800eb78 <_printf_i+0x1a8>
 800eae0:	4616      	mov	r6, r2
 800eae2:	fbb5 f1f3 	udiv	r1, r5, r3
 800eae6:	fb03 5711 	mls	r7, r3, r1, r5
 800eaea:	5dc7      	ldrb	r7, [r0, r7]
 800eaec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eaf0:	462f      	mov	r7, r5
 800eaf2:	42bb      	cmp	r3, r7
 800eaf4:	460d      	mov	r5, r1
 800eaf6:	d9f4      	bls.n	800eae2 <_printf_i+0x112>
 800eaf8:	2b08      	cmp	r3, #8
 800eafa:	d10b      	bne.n	800eb14 <_printf_i+0x144>
 800eafc:	6823      	ldr	r3, [r4, #0]
 800eafe:	07df      	lsls	r7, r3, #31
 800eb00:	d508      	bpl.n	800eb14 <_printf_i+0x144>
 800eb02:	6923      	ldr	r3, [r4, #16]
 800eb04:	6861      	ldr	r1, [r4, #4]
 800eb06:	4299      	cmp	r1, r3
 800eb08:	bfde      	ittt	le
 800eb0a:	2330      	movle	r3, #48	@ 0x30
 800eb0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eb10:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eb14:	1b92      	subs	r2, r2, r6
 800eb16:	6122      	str	r2, [r4, #16]
 800eb18:	f8cd a000 	str.w	sl, [sp]
 800eb1c:	464b      	mov	r3, r9
 800eb1e:	aa03      	add	r2, sp, #12
 800eb20:	4621      	mov	r1, r4
 800eb22:	4640      	mov	r0, r8
 800eb24:	f7ff fee6 	bl	800e8f4 <_printf_common>
 800eb28:	3001      	adds	r0, #1
 800eb2a:	d14a      	bne.n	800ebc2 <_printf_i+0x1f2>
 800eb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb30:	b004      	add	sp, #16
 800eb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb36:	6823      	ldr	r3, [r4, #0]
 800eb38:	f043 0320 	orr.w	r3, r3, #32
 800eb3c:	6023      	str	r3, [r4, #0]
 800eb3e:	4833      	ldr	r0, [pc, #204]	@ (800ec0c <_printf_i+0x23c>)
 800eb40:	2778      	movs	r7, #120	@ 0x78
 800eb42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb46:	6823      	ldr	r3, [r4, #0]
 800eb48:	6831      	ldr	r1, [r6, #0]
 800eb4a:	061f      	lsls	r7, r3, #24
 800eb4c:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb50:	d402      	bmi.n	800eb58 <_printf_i+0x188>
 800eb52:	065f      	lsls	r7, r3, #25
 800eb54:	bf48      	it	mi
 800eb56:	b2ad      	uxthmi	r5, r5
 800eb58:	6031      	str	r1, [r6, #0]
 800eb5a:	07d9      	lsls	r1, r3, #31
 800eb5c:	bf44      	itt	mi
 800eb5e:	f043 0320 	orrmi.w	r3, r3, #32
 800eb62:	6023      	strmi	r3, [r4, #0]
 800eb64:	b11d      	cbz	r5, 800eb6e <_printf_i+0x19e>
 800eb66:	2310      	movs	r3, #16
 800eb68:	e7ac      	b.n	800eac4 <_printf_i+0xf4>
 800eb6a:	4827      	ldr	r0, [pc, #156]	@ (800ec08 <_printf_i+0x238>)
 800eb6c:	e7e9      	b.n	800eb42 <_printf_i+0x172>
 800eb6e:	6823      	ldr	r3, [r4, #0]
 800eb70:	f023 0320 	bic.w	r3, r3, #32
 800eb74:	6023      	str	r3, [r4, #0]
 800eb76:	e7f6      	b.n	800eb66 <_printf_i+0x196>
 800eb78:	4616      	mov	r6, r2
 800eb7a:	e7bd      	b.n	800eaf8 <_printf_i+0x128>
 800eb7c:	6833      	ldr	r3, [r6, #0]
 800eb7e:	6825      	ldr	r5, [r4, #0]
 800eb80:	6961      	ldr	r1, [r4, #20]
 800eb82:	1d18      	adds	r0, r3, #4
 800eb84:	6030      	str	r0, [r6, #0]
 800eb86:	062e      	lsls	r6, r5, #24
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	d501      	bpl.n	800eb90 <_printf_i+0x1c0>
 800eb8c:	6019      	str	r1, [r3, #0]
 800eb8e:	e002      	b.n	800eb96 <_printf_i+0x1c6>
 800eb90:	0668      	lsls	r0, r5, #25
 800eb92:	d5fb      	bpl.n	800eb8c <_printf_i+0x1bc>
 800eb94:	8019      	strh	r1, [r3, #0]
 800eb96:	2300      	movs	r3, #0
 800eb98:	6123      	str	r3, [r4, #16]
 800eb9a:	4616      	mov	r6, r2
 800eb9c:	e7bc      	b.n	800eb18 <_printf_i+0x148>
 800eb9e:	6833      	ldr	r3, [r6, #0]
 800eba0:	1d1a      	adds	r2, r3, #4
 800eba2:	6032      	str	r2, [r6, #0]
 800eba4:	681e      	ldr	r6, [r3, #0]
 800eba6:	6862      	ldr	r2, [r4, #4]
 800eba8:	2100      	movs	r1, #0
 800ebaa:	4630      	mov	r0, r6
 800ebac:	f7f1 fba8 	bl	8000300 <memchr>
 800ebb0:	b108      	cbz	r0, 800ebb6 <_printf_i+0x1e6>
 800ebb2:	1b80      	subs	r0, r0, r6
 800ebb4:	6060      	str	r0, [r4, #4]
 800ebb6:	6863      	ldr	r3, [r4, #4]
 800ebb8:	6123      	str	r3, [r4, #16]
 800ebba:	2300      	movs	r3, #0
 800ebbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebc0:	e7aa      	b.n	800eb18 <_printf_i+0x148>
 800ebc2:	6923      	ldr	r3, [r4, #16]
 800ebc4:	4632      	mov	r2, r6
 800ebc6:	4649      	mov	r1, r9
 800ebc8:	4640      	mov	r0, r8
 800ebca:	47d0      	blx	sl
 800ebcc:	3001      	adds	r0, #1
 800ebce:	d0ad      	beq.n	800eb2c <_printf_i+0x15c>
 800ebd0:	6823      	ldr	r3, [r4, #0]
 800ebd2:	079b      	lsls	r3, r3, #30
 800ebd4:	d413      	bmi.n	800ebfe <_printf_i+0x22e>
 800ebd6:	68e0      	ldr	r0, [r4, #12]
 800ebd8:	9b03      	ldr	r3, [sp, #12]
 800ebda:	4298      	cmp	r0, r3
 800ebdc:	bfb8      	it	lt
 800ebde:	4618      	movlt	r0, r3
 800ebe0:	e7a6      	b.n	800eb30 <_printf_i+0x160>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	4632      	mov	r2, r6
 800ebe6:	4649      	mov	r1, r9
 800ebe8:	4640      	mov	r0, r8
 800ebea:	47d0      	blx	sl
 800ebec:	3001      	adds	r0, #1
 800ebee:	d09d      	beq.n	800eb2c <_printf_i+0x15c>
 800ebf0:	3501      	adds	r5, #1
 800ebf2:	68e3      	ldr	r3, [r4, #12]
 800ebf4:	9903      	ldr	r1, [sp, #12]
 800ebf6:	1a5b      	subs	r3, r3, r1
 800ebf8:	42ab      	cmp	r3, r5
 800ebfa:	dcf2      	bgt.n	800ebe2 <_printf_i+0x212>
 800ebfc:	e7eb      	b.n	800ebd6 <_printf_i+0x206>
 800ebfe:	2500      	movs	r5, #0
 800ec00:	f104 0619 	add.w	r6, r4, #25
 800ec04:	e7f5      	b.n	800ebf2 <_printf_i+0x222>
 800ec06:	bf00      	nop
 800ec08:	08055c2c 	.word	0x08055c2c
 800ec0c:	08055c3d 	.word	0x08055c3d

0800ec10 <__sflush_r>:
 800ec10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec18:	0716      	lsls	r6, r2, #28
 800ec1a:	4605      	mov	r5, r0
 800ec1c:	460c      	mov	r4, r1
 800ec1e:	d454      	bmi.n	800ecca <__sflush_r+0xba>
 800ec20:	684b      	ldr	r3, [r1, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	dc02      	bgt.n	800ec2c <__sflush_r+0x1c>
 800ec26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	dd48      	ble.n	800ecbe <__sflush_r+0xae>
 800ec2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec2e:	2e00      	cmp	r6, #0
 800ec30:	d045      	beq.n	800ecbe <__sflush_r+0xae>
 800ec32:	2300      	movs	r3, #0
 800ec34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec38:	682f      	ldr	r7, [r5, #0]
 800ec3a:	6a21      	ldr	r1, [r4, #32]
 800ec3c:	602b      	str	r3, [r5, #0]
 800ec3e:	d030      	beq.n	800eca2 <__sflush_r+0x92>
 800ec40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec42:	89a3      	ldrh	r3, [r4, #12]
 800ec44:	0759      	lsls	r1, r3, #29
 800ec46:	d505      	bpl.n	800ec54 <__sflush_r+0x44>
 800ec48:	6863      	ldr	r3, [r4, #4]
 800ec4a:	1ad2      	subs	r2, r2, r3
 800ec4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec4e:	b10b      	cbz	r3, 800ec54 <__sflush_r+0x44>
 800ec50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec52:	1ad2      	subs	r2, r2, r3
 800ec54:	2300      	movs	r3, #0
 800ec56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec58:	6a21      	ldr	r1, [r4, #32]
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	47b0      	blx	r6
 800ec5e:	1c43      	adds	r3, r0, #1
 800ec60:	89a3      	ldrh	r3, [r4, #12]
 800ec62:	d106      	bne.n	800ec72 <__sflush_r+0x62>
 800ec64:	6829      	ldr	r1, [r5, #0]
 800ec66:	291d      	cmp	r1, #29
 800ec68:	d82b      	bhi.n	800ecc2 <__sflush_r+0xb2>
 800ec6a:	4a2a      	ldr	r2, [pc, #168]	@ (800ed14 <__sflush_r+0x104>)
 800ec6c:	410a      	asrs	r2, r1
 800ec6e:	07d6      	lsls	r6, r2, #31
 800ec70:	d427      	bmi.n	800ecc2 <__sflush_r+0xb2>
 800ec72:	2200      	movs	r2, #0
 800ec74:	6062      	str	r2, [r4, #4]
 800ec76:	04d9      	lsls	r1, r3, #19
 800ec78:	6922      	ldr	r2, [r4, #16]
 800ec7a:	6022      	str	r2, [r4, #0]
 800ec7c:	d504      	bpl.n	800ec88 <__sflush_r+0x78>
 800ec7e:	1c42      	adds	r2, r0, #1
 800ec80:	d101      	bne.n	800ec86 <__sflush_r+0x76>
 800ec82:	682b      	ldr	r3, [r5, #0]
 800ec84:	b903      	cbnz	r3, 800ec88 <__sflush_r+0x78>
 800ec86:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec8a:	602f      	str	r7, [r5, #0]
 800ec8c:	b1b9      	cbz	r1, 800ecbe <__sflush_r+0xae>
 800ec8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec92:	4299      	cmp	r1, r3
 800ec94:	d002      	beq.n	800ec9c <__sflush_r+0x8c>
 800ec96:	4628      	mov	r0, r5
 800ec98:	f7ff fc8a 	bl	800e5b0 <_free_r>
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800eca0:	e00d      	b.n	800ecbe <__sflush_r+0xae>
 800eca2:	2301      	movs	r3, #1
 800eca4:	4628      	mov	r0, r5
 800eca6:	47b0      	blx	r6
 800eca8:	4602      	mov	r2, r0
 800ecaa:	1c50      	adds	r0, r2, #1
 800ecac:	d1c9      	bne.n	800ec42 <__sflush_r+0x32>
 800ecae:	682b      	ldr	r3, [r5, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d0c6      	beq.n	800ec42 <__sflush_r+0x32>
 800ecb4:	2b1d      	cmp	r3, #29
 800ecb6:	d001      	beq.n	800ecbc <__sflush_r+0xac>
 800ecb8:	2b16      	cmp	r3, #22
 800ecba:	d11e      	bne.n	800ecfa <__sflush_r+0xea>
 800ecbc:	602f      	str	r7, [r5, #0]
 800ecbe:	2000      	movs	r0, #0
 800ecc0:	e022      	b.n	800ed08 <__sflush_r+0xf8>
 800ecc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecc6:	b21b      	sxth	r3, r3
 800ecc8:	e01b      	b.n	800ed02 <__sflush_r+0xf2>
 800ecca:	690f      	ldr	r7, [r1, #16]
 800eccc:	2f00      	cmp	r7, #0
 800ecce:	d0f6      	beq.n	800ecbe <__sflush_r+0xae>
 800ecd0:	0793      	lsls	r3, r2, #30
 800ecd2:	680e      	ldr	r6, [r1, #0]
 800ecd4:	bf08      	it	eq
 800ecd6:	694b      	ldreq	r3, [r1, #20]
 800ecd8:	600f      	str	r7, [r1, #0]
 800ecda:	bf18      	it	ne
 800ecdc:	2300      	movne	r3, #0
 800ecde:	eba6 0807 	sub.w	r8, r6, r7
 800ece2:	608b      	str	r3, [r1, #8]
 800ece4:	f1b8 0f00 	cmp.w	r8, #0
 800ece8:	dde9      	ble.n	800ecbe <__sflush_r+0xae>
 800ecea:	6a21      	ldr	r1, [r4, #32]
 800ecec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ecee:	4643      	mov	r3, r8
 800ecf0:	463a      	mov	r2, r7
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	47b0      	blx	r6
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	dc08      	bgt.n	800ed0c <__sflush_r+0xfc>
 800ecfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed02:	81a3      	strh	r3, [r4, #12]
 800ed04:	f04f 30ff 	mov.w	r0, #4294967295
 800ed08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed0c:	4407      	add	r7, r0
 800ed0e:	eba8 0800 	sub.w	r8, r8, r0
 800ed12:	e7e7      	b.n	800ece4 <__sflush_r+0xd4>
 800ed14:	dfbffffe 	.word	0xdfbffffe

0800ed18 <_fflush_r>:
 800ed18:	b538      	push	{r3, r4, r5, lr}
 800ed1a:	690b      	ldr	r3, [r1, #16]
 800ed1c:	4605      	mov	r5, r0
 800ed1e:	460c      	mov	r4, r1
 800ed20:	b913      	cbnz	r3, 800ed28 <_fflush_r+0x10>
 800ed22:	2500      	movs	r5, #0
 800ed24:	4628      	mov	r0, r5
 800ed26:	bd38      	pop	{r3, r4, r5, pc}
 800ed28:	b118      	cbz	r0, 800ed32 <_fflush_r+0x1a>
 800ed2a:	6a03      	ldr	r3, [r0, #32]
 800ed2c:	b90b      	cbnz	r3, 800ed32 <_fflush_r+0x1a>
 800ed2e:	f7ff fa5d 	bl	800e1ec <__sinit>
 800ed32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d0f3      	beq.n	800ed22 <_fflush_r+0xa>
 800ed3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed3c:	07d0      	lsls	r0, r2, #31
 800ed3e:	d404      	bmi.n	800ed4a <_fflush_r+0x32>
 800ed40:	0599      	lsls	r1, r3, #22
 800ed42:	d402      	bmi.n	800ed4a <_fflush_r+0x32>
 800ed44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed46:	f7ff fbfc 	bl	800e542 <__retarget_lock_acquire_recursive>
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	4621      	mov	r1, r4
 800ed4e:	f7ff ff5f 	bl	800ec10 <__sflush_r>
 800ed52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed54:	07da      	lsls	r2, r3, #31
 800ed56:	4605      	mov	r5, r0
 800ed58:	d4e4      	bmi.n	800ed24 <_fflush_r+0xc>
 800ed5a:	89a3      	ldrh	r3, [r4, #12]
 800ed5c:	059b      	lsls	r3, r3, #22
 800ed5e:	d4e1      	bmi.n	800ed24 <_fflush_r+0xc>
 800ed60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed62:	f7ff fbef 	bl	800e544 <__retarget_lock_release_recursive>
 800ed66:	e7dd      	b.n	800ed24 <_fflush_r+0xc>

0800ed68 <fiprintf>:
 800ed68:	b40e      	push	{r1, r2, r3}
 800ed6a:	b503      	push	{r0, r1, lr}
 800ed6c:	4601      	mov	r1, r0
 800ed6e:	ab03      	add	r3, sp, #12
 800ed70:	4805      	ldr	r0, [pc, #20]	@ (800ed88 <fiprintf+0x20>)
 800ed72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed76:	6800      	ldr	r0, [r0, #0]
 800ed78:	9301      	str	r3, [sp, #4]
 800ed7a:	f000 f87f 	bl	800ee7c <_vfiprintf_r>
 800ed7e:	b002      	add	sp, #8
 800ed80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed84:	b003      	add	sp, #12
 800ed86:	4770      	bx	lr
 800ed88:	2000102c 	.word	0x2000102c

0800ed8c <memmove>:
 800ed8c:	4288      	cmp	r0, r1
 800ed8e:	b510      	push	{r4, lr}
 800ed90:	eb01 0402 	add.w	r4, r1, r2
 800ed94:	d902      	bls.n	800ed9c <memmove+0x10>
 800ed96:	4284      	cmp	r4, r0
 800ed98:	4623      	mov	r3, r4
 800ed9a:	d807      	bhi.n	800edac <memmove+0x20>
 800ed9c:	1e43      	subs	r3, r0, #1
 800ed9e:	42a1      	cmp	r1, r4
 800eda0:	d008      	beq.n	800edb4 <memmove+0x28>
 800eda2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eda6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edaa:	e7f8      	b.n	800ed9e <memmove+0x12>
 800edac:	4402      	add	r2, r0
 800edae:	4601      	mov	r1, r0
 800edb0:	428a      	cmp	r2, r1
 800edb2:	d100      	bne.n	800edb6 <memmove+0x2a>
 800edb4:	bd10      	pop	{r4, pc}
 800edb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800edba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800edbe:	e7f7      	b.n	800edb0 <memmove+0x24>

0800edc0 <abort>:
 800edc0:	b508      	push	{r3, lr}
 800edc2:	2006      	movs	r0, #6
 800edc4:	f000 fa2e 	bl	800f224 <raise>
 800edc8:	2001      	movs	r0, #1
 800edca:	f001 fa79 	bl	80102c0 <_exit>

0800edce <_realloc_r>:
 800edce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd2:	4680      	mov	r8, r0
 800edd4:	4615      	mov	r5, r2
 800edd6:	460c      	mov	r4, r1
 800edd8:	b921      	cbnz	r1, 800ede4 <_realloc_r+0x16>
 800edda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edde:	4611      	mov	r1, r2
 800ede0:	f7ff b826 	b.w	800de30 <_malloc_r>
 800ede4:	b92a      	cbnz	r2, 800edf2 <_realloc_r+0x24>
 800ede6:	f7ff fbe3 	bl	800e5b0 <_free_r>
 800edea:	2400      	movs	r4, #0
 800edec:	4620      	mov	r0, r4
 800edee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edf2:	f000 fa33 	bl	800f25c <_malloc_usable_size_r>
 800edf6:	4285      	cmp	r5, r0
 800edf8:	4606      	mov	r6, r0
 800edfa:	d802      	bhi.n	800ee02 <_realloc_r+0x34>
 800edfc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee00:	d8f4      	bhi.n	800edec <_realloc_r+0x1e>
 800ee02:	4629      	mov	r1, r5
 800ee04:	4640      	mov	r0, r8
 800ee06:	f7ff f813 	bl	800de30 <_malloc_r>
 800ee0a:	4607      	mov	r7, r0
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	d0ec      	beq.n	800edea <_realloc_r+0x1c>
 800ee10:	42b5      	cmp	r5, r6
 800ee12:	462a      	mov	r2, r5
 800ee14:	4621      	mov	r1, r4
 800ee16:	bf28      	it	cs
 800ee18:	4632      	movcs	r2, r6
 800ee1a:	f7ff fb9c 	bl	800e556 <memcpy>
 800ee1e:	4621      	mov	r1, r4
 800ee20:	4640      	mov	r0, r8
 800ee22:	f7ff fbc5 	bl	800e5b0 <_free_r>
 800ee26:	463c      	mov	r4, r7
 800ee28:	e7e0      	b.n	800edec <_realloc_r+0x1e>

0800ee2a <__sfputc_r>:
 800ee2a:	6893      	ldr	r3, [r2, #8]
 800ee2c:	3b01      	subs	r3, #1
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	b410      	push	{r4}
 800ee32:	6093      	str	r3, [r2, #8]
 800ee34:	da08      	bge.n	800ee48 <__sfputc_r+0x1e>
 800ee36:	6994      	ldr	r4, [r2, #24]
 800ee38:	42a3      	cmp	r3, r4
 800ee3a:	db01      	blt.n	800ee40 <__sfputc_r+0x16>
 800ee3c:	290a      	cmp	r1, #10
 800ee3e:	d103      	bne.n	800ee48 <__sfputc_r+0x1e>
 800ee40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee44:	f000 b932 	b.w	800f0ac <__swbuf_r>
 800ee48:	6813      	ldr	r3, [r2, #0]
 800ee4a:	1c58      	adds	r0, r3, #1
 800ee4c:	6010      	str	r0, [r2, #0]
 800ee4e:	7019      	strb	r1, [r3, #0]
 800ee50:	4608      	mov	r0, r1
 800ee52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <__sfputs_r>:
 800ee58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee5a:	4606      	mov	r6, r0
 800ee5c:	460f      	mov	r7, r1
 800ee5e:	4614      	mov	r4, r2
 800ee60:	18d5      	adds	r5, r2, r3
 800ee62:	42ac      	cmp	r4, r5
 800ee64:	d101      	bne.n	800ee6a <__sfputs_r+0x12>
 800ee66:	2000      	movs	r0, #0
 800ee68:	e007      	b.n	800ee7a <__sfputs_r+0x22>
 800ee6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee6e:	463a      	mov	r2, r7
 800ee70:	4630      	mov	r0, r6
 800ee72:	f7ff ffda 	bl	800ee2a <__sfputc_r>
 800ee76:	1c43      	adds	r3, r0, #1
 800ee78:	d1f3      	bne.n	800ee62 <__sfputs_r+0xa>
 800ee7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ee7c <_vfiprintf_r>:
 800ee7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee80:	460d      	mov	r5, r1
 800ee82:	b09d      	sub	sp, #116	@ 0x74
 800ee84:	4614      	mov	r4, r2
 800ee86:	4698      	mov	r8, r3
 800ee88:	4606      	mov	r6, r0
 800ee8a:	b118      	cbz	r0, 800ee94 <_vfiprintf_r+0x18>
 800ee8c:	6a03      	ldr	r3, [r0, #32]
 800ee8e:	b90b      	cbnz	r3, 800ee94 <_vfiprintf_r+0x18>
 800ee90:	f7ff f9ac 	bl	800e1ec <__sinit>
 800ee94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee96:	07d9      	lsls	r1, r3, #31
 800ee98:	d405      	bmi.n	800eea6 <_vfiprintf_r+0x2a>
 800ee9a:	89ab      	ldrh	r3, [r5, #12]
 800ee9c:	059a      	lsls	r2, r3, #22
 800ee9e:	d402      	bmi.n	800eea6 <_vfiprintf_r+0x2a>
 800eea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eea2:	f7ff fb4e 	bl	800e542 <__retarget_lock_acquire_recursive>
 800eea6:	89ab      	ldrh	r3, [r5, #12]
 800eea8:	071b      	lsls	r3, r3, #28
 800eeaa:	d501      	bpl.n	800eeb0 <_vfiprintf_r+0x34>
 800eeac:	692b      	ldr	r3, [r5, #16]
 800eeae:	b99b      	cbnz	r3, 800eed8 <_vfiprintf_r+0x5c>
 800eeb0:	4629      	mov	r1, r5
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f000 f938 	bl	800f128 <__swsetup_r>
 800eeb8:	b170      	cbz	r0, 800eed8 <_vfiprintf_r+0x5c>
 800eeba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eebc:	07dc      	lsls	r4, r3, #31
 800eebe:	d504      	bpl.n	800eeca <_vfiprintf_r+0x4e>
 800eec0:	f04f 30ff 	mov.w	r0, #4294967295
 800eec4:	b01d      	add	sp, #116	@ 0x74
 800eec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeca:	89ab      	ldrh	r3, [r5, #12]
 800eecc:	0598      	lsls	r0, r3, #22
 800eece:	d4f7      	bmi.n	800eec0 <_vfiprintf_r+0x44>
 800eed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eed2:	f7ff fb37 	bl	800e544 <__retarget_lock_release_recursive>
 800eed6:	e7f3      	b.n	800eec0 <_vfiprintf_r+0x44>
 800eed8:	2300      	movs	r3, #0
 800eeda:	9309      	str	r3, [sp, #36]	@ 0x24
 800eedc:	2320      	movs	r3, #32
 800eede:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eee2:	f8cd 800c 	str.w	r8, [sp, #12]
 800eee6:	2330      	movs	r3, #48	@ 0x30
 800eee8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f098 <_vfiprintf_r+0x21c>
 800eeec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eef0:	f04f 0901 	mov.w	r9, #1
 800eef4:	4623      	mov	r3, r4
 800eef6:	469a      	mov	sl, r3
 800eef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eefc:	b10a      	cbz	r2, 800ef02 <_vfiprintf_r+0x86>
 800eefe:	2a25      	cmp	r2, #37	@ 0x25
 800ef00:	d1f9      	bne.n	800eef6 <_vfiprintf_r+0x7a>
 800ef02:	ebba 0b04 	subs.w	fp, sl, r4
 800ef06:	d00b      	beq.n	800ef20 <_vfiprintf_r+0xa4>
 800ef08:	465b      	mov	r3, fp
 800ef0a:	4622      	mov	r2, r4
 800ef0c:	4629      	mov	r1, r5
 800ef0e:	4630      	mov	r0, r6
 800ef10:	f7ff ffa2 	bl	800ee58 <__sfputs_r>
 800ef14:	3001      	adds	r0, #1
 800ef16:	f000 80a7 	beq.w	800f068 <_vfiprintf_r+0x1ec>
 800ef1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef1c:	445a      	add	r2, fp
 800ef1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef20:	f89a 3000 	ldrb.w	r3, [sl]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f000 809f 	beq.w	800f068 <_vfiprintf_r+0x1ec>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef34:	f10a 0a01 	add.w	sl, sl, #1
 800ef38:	9304      	str	r3, [sp, #16]
 800ef3a:	9307      	str	r3, [sp, #28]
 800ef3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef40:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef42:	4654      	mov	r4, sl
 800ef44:	2205      	movs	r2, #5
 800ef46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef4a:	4853      	ldr	r0, [pc, #332]	@ (800f098 <_vfiprintf_r+0x21c>)
 800ef4c:	f7f1 f9d8 	bl	8000300 <memchr>
 800ef50:	9a04      	ldr	r2, [sp, #16]
 800ef52:	b9d8      	cbnz	r0, 800ef8c <_vfiprintf_r+0x110>
 800ef54:	06d1      	lsls	r1, r2, #27
 800ef56:	bf44      	itt	mi
 800ef58:	2320      	movmi	r3, #32
 800ef5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef5e:	0713      	lsls	r3, r2, #28
 800ef60:	bf44      	itt	mi
 800ef62:	232b      	movmi	r3, #43	@ 0x2b
 800ef64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef68:	f89a 3000 	ldrb.w	r3, [sl]
 800ef6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef6e:	d015      	beq.n	800ef9c <_vfiprintf_r+0x120>
 800ef70:	9a07      	ldr	r2, [sp, #28]
 800ef72:	4654      	mov	r4, sl
 800ef74:	2000      	movs	r0, #0
 800ef76:	f04f 0c0a 	mov.w	ip, #10
 800ef7a:	4621      	mov	r1, r4
 800ef7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef80:	3b30      	subs	r3, #48	@ 0x30
 800ef82:	2b09      	cmp	r3, #9
 800ef84:	d94b      	bls.n	800f01e <_vfiprintf_r+0x1a2>
 800ef86:	b1b0      	cbz	r0, 800efb6 <_vfiprintf_r+0x13a>
 800ef88:	9207      	str	r2, [sp, #28]
 800ef8a:	e014      	b.n	800efb6 <_vfiprintf_r+0x13a>
 800ef8c:	eba0 0308 	sub.w	r3, r0, r8
 800ef90:	fa09 f303 	lsl.w	r3, r9, r3
 800ef94:	4313      	orrs	r3, r2
 800ef96:	9304      	str	r3, [sp, #16]
 800ef98:	46a2      	mov	sl, r4
 800ef9a:	e7d2      	b.n	800ef42 <_vfiprintf_r+0xc6>
 800ef9c:	9b03      	ldr	r3, [sp, #12]
 800ef9e:	1d19      	adds	r1, r3, #4
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	9103      	str	r1, [sp, #12]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	bfbb      	ittet	lt
 800efa8:	425b      	neglt	r3, r3
 800efaa:	f042 0202 	orrlt.w	r2, r2, #2
 800efae:	9307      	strge	r3, [sp, #28]
 800efb0:	9307      	strlt	r3, [sp, #28]
 800efb2:	bfb8      	it	lt
 800efb4:	9204      	strlt	r2, [sp, #16]
 800efb6:	7823      	ldrb	r3, [r4, #0]
 800efb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800efba:	d10a      	bne.n	800efd2 <_vfiprintf_r+0x156>
 800efbc:	7863      	ldrb	r3, [r4, #1]
 800efbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800efc0:	d132      	bne.n	800f028 <_vfiprintf_r+0x1ac>
 800efc2:	9b03      	ldr	r3, [sp, #12]
 800efc4:	1d1a      	adds	r2, r3, #4
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	9203      	str	r2, [sp, #12]
 800efca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800efce:	3402      	adds	r4, #2
 800efd0:	9305      	str	r3, [sp, #20]
 800efd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f0a8 <_vfiprintf_r+0x22c>
 800efd6:	7821      	ldrb	r1, [r4, #0]
 800efd8:	2203      	movs	r2, #3
 800efda:	4650      	mov	r0, sl
 800efdc:	f7f1 f990 	bl	8000300 <memchr>
 800efe0:	b138      	cbz	r0, 800eff2 <_vfiprintf_r+0x176>
 800efe2:	9b04      	ldr	r3, [sp, #16]
 800efe4:	eba0 000a 	sub.w	r0, r0, sl
 800efe8:	2240      	movs	r2, #64	@ 0x40
 800efea:	4082      	lsls	r2, r0
 800efec:	4313      	orrs	r3, r2
 800efee:	3401      	adds	r4, #1
 800eff0:	9304      	str	r3, [sp, #16]
 800eff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eff6:	4829      	ldr	r0, [pc, #164]	@ (800f09c <_vfiprintf_r+0x220>)
 800eff8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800effc:	2206      	movs	r2, #6
 800effe:	f7f1 f97f 	bl	8000300 <memchr>
 800f002:	2800      	cmp	r0, #0
 800f004:	d03f      	beq.n	800f086 <_vfiprintf_r+0x20a>
 800f006:	4b26      	ldr	r3, [pc, #152]	@ (800f0a0 <_vfiprintf_r+0x224>)
 800f008:	bb1b      	cbnz	r3, 800f052 <_vfiprintf_r+0x1d6>
 800f00a:	9b03      	ldr	r3, [sp, #12]
 800f00c:	3307      	adds	r3, #7
 800f00e:	f023 0307 	bic.w	r3, r3, #7
 800f012:	3308      	adds	r3, #8
 800f014:	9303      	str	r3, [sp, #12]
 800f016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f018:	443b      	add	r3, r7
 800f01a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f01c:	e76a      	b.n	800eef4 <_vfiprintf_r+0x78>
 800f01e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f022:	460c      	mov	r4, r1
 800f024:	2001      	movs	r0, #1
 800f026:	e7a8      	b.n	800ef7a <_vfiprintf_r+0xfe>
 800f028:	2300      	movs	r3, #0
 800f02a:	3401      	adds	r4, #1
 800f02c:	9305      	str	r3, [sp, #20]
 800f02e:	4619      	mov	r1, r3
 800f030:	f04f 0c0a 	mov.w	ip, #10
 800f034:	4620      	mov	r0, r4
 800f036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f03a:	3a30      	subs	r2, #48	@ 0x30
 800f03c:	2a09      	cmp	r2, #9
 800f03e:	d903      	bls.n	800f048 <_vfiprintf_r+0x1cc>
 800f040:	2b00      	cmp	r3, #0
 800f042:	d0c6      	beq.n	800efd2 <_vfiprintf_r+0x156>
 800f044:	9105      	str	r1, [sp, #20]
 800f046:	e7c4      	b.n	800efd2 <_vfiprintf_r+0x156>
 800f048:	fb0c 2101 	mla	r1, ip, r1, r2
 800f04c:	4604      	mov	r4, r0
 800f04e:	2301      	movs	r3, #1
 800f050:	e7f0      	b.n	800f034 <_vfiprintf_r+0x1b8>
 800f052:	ab03      	add	r3, sp, #12
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	462a      	mov	r2, r5
 800f058:	4b12      	ldr	r3, [pc, #72]	@ (800f0a4 <_vfiprintf_r+0x228>)
 800f05a:	a904      	add	r1, sp, #16
 800f05c:	4630      	mov	r0, r6
 800f05e:	f3af 8000 	nop.w
 800f062:	4607      	mov	r7, r0
 800f064:	1c78      	adds	r0, r7, #1
 800f066:	d1d6      	bne.n	800f016 <_vfiprintf_r+0x19a>
 800f068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f06a:	07d9      	lsls	r1, r3, #31
 800f06c:	d405      	bmi.n	800f07a <_vfiprintf_r+0x1fe>
 800f06e:	89ab      	ldrh	r3, [r5, #12]
 800f070:	059a      	lsls	r2, r3, #22
 800f072:	d402      	bmi.n	800f07a <_vfiprintf_r+0x1fe>
 800f074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f076:	f7ff fa65 	bl	800e544 <__retarget_lock_release_recursive>
 800f07a:	89ab      	ldrh	r3, [r5, #12]
 800f07c:	065b      	lsls	r3, r3, #25
 800f07e:	f53f af1f 	bmi.w	800eec0 <_vfiprintf_r+0x44>
 800f082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f084:	e71e      	b.n	800eec4 <_vfiprintf_r+0x48>
 800f086:	ab03      	add	r3, sp, #12
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	462a      	mov	r2, r5
 800f08c:	4b05      	ldr	r3, [pc, #20]	@ (800f0a4 <_vfiprintf_r+0x228>)
 800f08e:	a904      	add	r1, sp, #16
 800f090:	4630      	mov	r0, r6
 800f092:	f7ff fc9d 	bl	800e9d0 <_printf_i>
 800f096:	e7e4      	b.n	800f062 <_vfiprintf_r+0x1e6>
 800f098:	08055c1b 	.word	0x08055c1b
 800f09c:	08055c25 	.word	0x08055c25
 800f0a0:	00000000 	.word	0x00000000
 800f0a4:	0800ee59 	.word	0x0800ee59
 800f0a8:	08055c21 	.word	0x08055c21

0800f0ac <__swbuf_r>:
 800f0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ae:	460e      	mov	r6, r1
 800f0b0:	4614      	mov	r4, r2
 800f0b2:	4605      	mov	r5, r0
 800f0b4:	b118      	cbz	r0, 800f0be <__swbuf_r+0x12>
 800f0b6:	6a03      	ldr	r3, [r0, #32]
 800f0b8:	b90b      	cbnz	r3, 800f0be <__swbuf_r+0x12>
 800f0ba:	f7ff f897 	bl	800e1ec <__sinit>
 800f0be:	69a3      	ldr	r3, [r4, #24]
 800f0c0:	60a3      	str	r3, [r4, #8]
 800f0c2:	89a3      	ldrh	r3, [r4, #12]
 800f0c4:	071a      	lsls	r2, r3, #28
 800f0c6:	d501      	bpl.n	800f0cc <__swbuf_r+0x20>
 800f0c8:	6923      	ldr	r3, [r4, #16]
 800f0ca:	b943      	cbnz	r3, 800f0de <__swbuf_r+0x32>
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	f000 f82a 	bl	800f128 <__swsetup_r>
 800f0d4:	b118      	cbz	r0, 800f0de <__swbuf_r+0x32>
 800f0d6:	f04f 37ff 	mov.w	r7, #4294967295
 800f0da:	4638      	mov	r0, r7
 800f0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0de:	6823      	ldr	r3, [r4, #0]
 800f0e0:	6922      	ldr	r2, [r4, #16]
 800f0e2:	1a98      	subs	r0, r3, r2
 800f0e4:	6963      	ldr	r3, [r4, #20]
 800f0e6:	b2f6      	uxtb	r6, r6
 800f0e8:	4283      	cmp	r3, r0
 800f0ea:	4637      	mov	r7, r6
 800f0ec:	dc05      	bgt.n	800f0fa <__swbuf_r+0x4e>
 800f0ee:	4621      	mov	r1, r4
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	f7ff fe11 	bl	800ed18 <_fflush_r>
 800f0f6:	2800      	cmp	r0, #0
 800f0f8:	d1ed      	bne.n	800f0d6 <__swbuf_r+0x2a>
 800f0fa:	68a3      	ldr	r3, [r4, #8]
 800f0fc:	3b01      	subs	r3, #1
 800f0fe:	60a3      	str	r3, [r4, #8]
 800f100:	6823      	ldr	r3, [r4, #0]
 800f102:	1c5a      	adds	r2, r3, #1
 800f104:	6022      	str	r2, [r4, #0]
 800f106:	701e      	strb	r6, [r3, #0]
 800f108:	6962      	ldr	r2, [r4, #20]
 800f10a:	1c43      	adds	r3, r0, #1
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d004      	beq.n	800f11a <__swbuf_r+0x6e>
 800f110:	89a3      	ldrh	r3, [r4, #12]
 800f112:	07db      	lsls	r3, r3, #31
 800f114:	d5e1      	bpl.n	800f0da <__swbuf_r+0x2e>
 800f116:	2e0a      	cmp	r6, #10
 800f118:	d1df      	bne.n	800f0da <__swbuf_r+0x2e>
 800f11a:	4621      	mov	r1, r4
 800f11c:	4628      	mov	r0, r5
 800f11e:	f7ff fdfb 	bl	800ed18 <_fflush_r>
 800f122:	2800      	cmp	r0, #0
 800f124:	d0d9      	beq.n	800f0da <__swbuf_r+0x2e>
 800f126:	e7d6      	b.n	800f0d6 <__swbuf_r+0x2a>

0800f128 <__swsetup_r>:
 800f128:	b538      	push	{r3, r4, r5, lr}
 800f12a:	4b29      	ldr	r3, [pc, #164]	@ (800f1d0 <__swsetup_r+0xa8>)
 800f12c:	4605      	mov	r5, r0
 800f12e:	6818      	ldr	r0, [r3, #0]
 800f130:	460c      	mov	r4, r1
 800f132:	b118      	cbz	r0, 800f13c <__swsetup_r+0x14>
 800f134:	6a03      	ldr	r3, [r0, #32]
 800f136:	b90b      	cbnz	r3, 800f13c <__swsetup_r+0x14>
 800f138:	f7ff f858 	bl	800e1ec <__sinit>
 800f13c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f140:	0719      	lsls	r1, r3, #28
 800f142:	d422      	bmi.n	800f18a <__swsetup_r+0x62>
 800f144:	06da      	lsls	r2, r3, #27
 800f146:	d407      	bmi.n	800f158 <__swsetup_r+0x30>
 800f148:	2209      	movs	r2, #9
 800f14a:	602a      	str	r2, [r5, #0]
 800f14c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f150:	81a3      	strh	r3, [r4, #12]
 800f152:	f04f 30ff 	mov.w	r0, #4294967295
 800f156:	e033      	b.n	800f1c0 <__swsetup_r+0x98>
 800f158:	0758      	lsls	r0, r3, #29
 800f15a:	d512      	bpl.n	800f182 <__swsetup_r+0x5a>
 800f15c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f15e:	b141      	cbz	r1, 800f172 <__swsetup_r+0x4a>
 800f160:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f164:	4299      	cmp	r1, r3
 800f166:	d002      	beq.n	800f16e <__swsetup_r+0x46>
 800f168:	4628      	mov	r0, r5
 800f16a:	f7ff fa21 	bl	800e5b0 <_free_r>
 800f16e:	2300      	movs	r3, #0
 800f170:	6363      	str	r3, [r4, #52]	@ 0x34
 800f172:	89a3      	ldrh	r3, [r4, #12]
 800f174:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f178:	81a3      	strh	r3, [r4, #12]
 800f17a:	2300      	movs	r3, #0
 800f17c:	6063      	str	r3, [r4, #4]
 800f17e:	6923      	ldr	r3, [r4, #16]
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	89a3      	ldrh	r3, [r4, #12]
 800f184:	f043 0308 	orr.w	r3, r3, #8
 800f188:	81a3      	strh	r3, [r4, #12]
 800f18a:	6923      	ldr	r3, [r4, #16]
 800f18c:	b94b      	cbnz	r3, 800f1a2 <__swsetup_r+0x7a>
 800f18e:	89a3      	ldrh	r3, [r4, #12]
 800f190:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f198:	d003      	beq.n	800f1a2 <__swsetup_r+0x7a>
 800f19a:	4621      	mov	r1, r4
 800f19c:	4628      	mov	r0, r5
 800f19e:	f000 f88b 	bl	800f2b8 <__smakebuf_r>
 800f1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1a6:	f013 0201 	ands.w	r2, r3, #1
 800f1aa:	d00a      	beq.n	800f1c2 <__swsetup_r+0x9a>
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	60a2      	str	r2, [r4, #8]
 800f1b0:	6962      	ldr	r2, [r4, #20]
 800f1b2:	4252      	negs	r2, r2
 800f1b4:	61a2      	str	r2, [r4, #24]
 800f1b6:	6922      	ldr	r2, [r4, #16]
 800f1b8:	b942      	cbnz	r2, 800f1cc <__swsetup_r+0xa4>
 800f1ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f1be:	d1c5      	bne.n	800f14c <__swsetup_r+0x24>
 800f1c0:	bd38      	pop	{r3, r4, r5, pc}
 800f1c2:	0799      	lsls	r1, r3, #30
 800f1c4:	bf58      	it	pl
 800f1c6:	6962      	ldrpl	r2, [r4, #20]
 800f1c8:	60a2      	str	r2, [r4, #8]
 800f1ca:	e7f4      	b.n	800f1b6 <__swsetup_r+0x8e>
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	e7f7      	b.n	800f1c0 <__swsetup_r+0x98>
 800f1d0:	2000102c 	.word	0x2000102c

0800f1d4 <_raise_r>:
 800f1d4:	291f      	cmp	r1, #31
 800f1d6:	b538      	push	{r3, r4, r5, lr}
 800f1d8:	4605      	mov	r5, r0
 800f1da:	460c      	mov	r4, r1
 800f1dc:	d904      	bls.n	800f1e8 <_raise_r+0x14>
 800f1de:	2316      	movs	r3, #22
 800f1e0:	6003      	str	r3, [r0, #0]
 800f1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e6:	bd38      	pop	{r3, r4, r5, pc}
 800f1e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f1ea:	b112      	cbz	r2, 800f1f2 <_raise_r+0x1e>
 800f1ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1f0:	b94b      	cbnz	r3, 800f206 <_raise_r+0x32>
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	f000 f830 	bl	800f258 <_getpid_r>
 800f1f8:	4622      	mov	r2, r4
 800f1fa:	4601      	mov	r1, r0
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f202:	f000 b817 	b.w	800f234 <_kill_r>
 800f206:	2b01      	cmp	r3, #1
 800f208:	d00a      	beq.n	800f220 <_raise_r+0x4c>
 800f20a:	1c59      	adds	r1, r3, #1
 800f20c:	d103      	bne.n	800f216 <_raise_r+0x42>
 800f20e:	2316      	movs	r3, #22
 800f210:	6003      	str	r3, [r0, #0]
 800f212:	2001      	movs	r0, #1
 800f214:	e7e7      	b.n	800f1e6 <_raise_r+0x12>
 800f216:	2100      	movs	r1, #0
 800f218:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f21c:	4620      	mov	r0, r4
 800f21e:	4798      	blx	r3
 800f220:	2000      	movs	r0, #0
 800f222:	e7e0      	b.n	800f1e6 <_raise_r+0x12>

0800f224 <raise>:
 800f224:	4b02      	ldr	r3, [pc, #8]	@ (800f230 <raise+0xc>)
 800f226:	4601      	mov	r1, r0
 800f228:	6818      	ldr	r0, [r3, #0]
 800f22a:	f7ff bfd3 	b.w	800f1d4 <_raise_r>
 800f22e:	bf00      	nop
 800f230:	2000102c 	.word	0x2000102c

0800f234 <_kill_r>:
 800f234:	b538      	push	{r3, r4, r5, lr}
 800f236:	4d07      	ldr	r5, [pc, #28]	@ (800f254 <_kill_r+0x20>)
 800f238:	2300      	movs	r3, #0
 800f23a:	4604      	mov	r4, r0
 800f23c:	4608      	mov	r0, r1
 800f23e:	4611      	mov	r1, r2
 800f240:	602b      	str	r3, [r5, #0]
 800f242:	f001 f80f 	bl	8010264 <_kill>
 800f246:	1c43      	adds	r3, r0, #1
 800f248:	d102      	bne.n	800f250 <_kill_r+0x1c>
 800f24a:	682b      	ldr	r3, [r5, #0]
 800f24c:	b103      	cbz	r3, 800f250 <_kill_r+0x1c>
 800f24e:	6023      	str	r3, [r4, #0]
 800f250:	bd38      	pop	{r3, r4, r5, pc}
 800f252:	bf00      	nop
 800f254:	20045410 	.word	0x20045410

0800f258 <_getpid_r>:
 800f258:	f000 bff4 	b.w	8010244 <_getpid>

0800f25c <_malloc_usable_size_r>:
 800f25c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f260:	1f18      	subs	r0, r3, #4
 800f262:	2b00      	cmp	r3, #0
 800f264:	bfbc      	itt	lt
 800f266:	580b      	ldrlt	r3, [r1, r0]
 800f268:	18c0      	addlt	r0, r0, r3
 800f26a:	4770      	bx	lr

0800f26c <__swhatbuf_r>:
 800f26c:	b570      	push	{r4, r5, r6, lr}
 800f26e:	460c      	mov	r4, r1
 800f270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f274:	2900      	cmp	r1, #0
 800f276:	b096      	sub	sp, #88	@ 0x58
 800f278:	4615      	mov	r5, r2
 800f27a:	461e      	mov	r6, r3
 800f27c:	da0d      	bge.n	800f29a <__swhatbuf_r+0x2e>
 800f27e:	89a3      	ldrh	r3, [r4, #12]
 800f280:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f284:	f04f 0100 	mov.w	r1, #0
 800f288:	bf14      	ite	ne
 800f28a:	2340      	movne	r3, #64	@ 0x40
 800f28c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f290:	2000      	movs	r0, #0
 800f292:	6031      	str	r1, [r6, #0]
 800f294:	602b      	str	r3, [r5, #0]
 800f296:	b016      	add	sp, #88	@ 0x58
 800f298:	bd70      	pop	{r4, r5, r6, pc}
 800f29a:	466a      	mov	r2, sp
 800f29c:	f000 f848 	bl	800f330 <_fstat_r>
 800f2a0:	2800      	cmp	r0, #0
 800f2a2:	dbec      	blt.n	800f27e <__swhatbuf_r+0x12>
 800f2a4:	9901      	ldr	r1, [sp, #4]
 800f2a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f2aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f2ae:	4259      	negs	r1, r3
 800f2b0:	4159      	adcs	r1, r3
 800f2b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f2b6:	e7eb      	b.n	800f290 <__swhatbuf_r+0x24>

0800f2b8 <__smakebuf_r>:
 800f2b8:	898b      	ldrh	r3, [r1, #12]
 800f2ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2bc:	079d      	lsls	r5, r3, #30
 800f2be:	4606      	mov	r6, r0
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	d507      	bpl.n	800f2d4 <__smakebuf_r+0x1c>
 800f2c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f2c8:	6023      	str	r3, [r4, #0]
 800f2ca:	6123      	str	r3, [r4, #16]
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	6163      	str	r3, [r4, #20]
 800f2d0:	b003      	add	sp, #12
 800f2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2d4:	ab01      	add	r3, sp, #4
 800f2d6:	466a      	mov	r2, sp
 800f2d8:	f7ff ffc8 	bl	800f26c <__swhatbuf_r>
 800f2dc:	9f00      	ldr	r7, [sp, #0]
 800f2de:	4605      	mov	r5, r0
 800f2e0:	4639      	mov	r1, r7
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	f7fe fda4 	bl	800de30 <_malloc_r>
 800f2e8:	b948      	cbnz	r0, 800f2fe <__smakebuf_r+0x46>
 800f2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2ee:	059a      	lsls	r2, r3, #22
 800f2f0:	d4ee      	bmi.n	800f2d0 <__smakebuf_r+0x18>
 800f2f2:	f023 0303 	bic.w	r3, r3, #3
 800f2f6:	f043 0302 	orr.w	r3, r3, #2
 800f2fa:	81a3      	strh	r3, [r4, #12]
 800f2fc:	e7e2      	b.n	800f2c4 <__smakebuf_r+0xc>
 800f2fe:	89a3      	ldrh	r3, [r4, #12]
 800f300:	6020      	str	r0, [r4, #0]
 800f302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f306:	81a3      	strh	r3, [r4, #12]
 800f308:	9b01      	ldr	r3, [sp, #4]
 800f30a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f30e:	b15b      	cbz	r3, 800f328 <__smakebuf_r+0x70>
 800f310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f314:	4630      	mov	r0, r6
 800f316:	f000 f81d 	bl	800f354 <_isatty_r>
 800f31a:	b128      	cbz	r0, 800f328 <__smakebuf_r+0x70>
 800f31c:	89a3      	ldrh	r3, [r4, #12]
 800f31e:	f023 0303 	bic.w	r3, r3, #3
 800f322:	f043 0301 	orr.w	r3, r3, #1
 800f326:	81a3      	strh	r3, [r4, #12]
 800f328:	89a3      	ldrh	r3, [r4, #12]
 800f32a:	431d      	orrs	r5, r3
 800f32c:	81a5      	strh	r5, [r4, #12]
 800f32e:	e7cf      	b.n	800f2d0 <__smakebuf_r+0x18>

0800f330 <_fstat_r>:
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	4d07      	ldr	r5, [pc, #28]	@ (800f350 <_fstat_r+0x20>)
 800f334:	2300      	movs	r3, #0
 800f336:	4604      	mov	r4, r0
 800f338:	4608      	mov	r0, r1
 800f33a:	4611      	mov	r1, r2
 800f33c:	602b      	str	r3, [r5, #0]
 800f33e:	f000 ff79 	bl	8010234 <_fstat>
 800f342:	1c43      	adds	r3, r0, #1
 800f344:	d102      	bne.n	800f34c <_fstat_r+0x1c>
 800f346:	682b      	ldr	r3, [r5, #0]
 800f348:	b103      	cbz	r3, 800f34c <_fstat_r+0x1c>
 800f34a:	6023      	str	r3, [r4, #0]
 800f34c:	bd38      	pop	{r3, r4, r5, pc}
 800f34e:	bf00      	nop
 800f350:	20045410 	.word	0x20045410

0800f354 <_isatty_r>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	4d06      	ldr	r5, [pc, #24]	@ (800f370 <_isatty_r+0x1c>)
 800f358:	2300      	movs	r3, #0
 800f35a:	4604      	mov	r4, r0
 800f35c:	4608      	mov	r0, r1
 800f35e:	602b      	str	r3, [r5, #0]
 800f360:	f000 ff78 	bl	8010254 <_isatty>
 800f364:	1c43      	adds	r3, r0, #1
 800f366:	d102      	bne.n	800f36e <_isatty_r+0x1a>
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	b103      	cbz	r3, 800f36e <_isatty_r+0x1a>
 800f36c:	6023      	str	r3, [r4, #0]
 800f36e:	bd38      	pop	{r3, r4, r5, pc}
 800f370:	20045410 	.word	0x20045410
 800f374:	00000000 	.word	0x00000000

0800f378 <log>:
 800f378:	b538      	push	{r3, r4, r5, lr}
 800f37a:	ed2d 8b02 	vpush	{d8}
 800f37e:	ec55 4b10 	vmov	r4, r5, d0
 800f382:	f000 f8a5 	bl	800f4d0 <__ieee754_log>
 800f386:	4622      	mov	r2, r4
 800f388:	462b      	mov	r3, r5
 800f38a:	4620      	mov	r0, r4
 800f38c:	4629      	mov	r1, r5
 800f38e:	eeb0 8a40 	vmov.f32	s16, s0
 800f392:	eef0 8a60 	vmov.f32	s17, s1
 800f396:	f7f1 fc59 	bl	8000c4c <__aeabi_dcmpun>
 800f39a:	b998      	cbnz	r0, 800f3c4 <log+0x4c>
 800f39c:	2200      	movs	r2, #0
 800f39e:	2300      	movs	r3, #0
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	4629      	mov	r1, r5
 800f3a4:	f7f1 fc48 	bl	8000c38 <__aeabi_dcmpgt>
 800f3a8:	b960      	cbnz	r0, 800f3c4 <log+0x4c>
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	4629      	mov	r1, r5
 800f3b2:	f7f1 fc19 	bl	8000be8 <__aeabi_dcmpeq>
 800f3b6:	b160      	cbz	r0, 800f3d2 <log+0x5a>
 800f3b8:	f7ff f898 	bl	800e4ec <__errno>
 800f3bc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800f3e8 <log+0x70>
 800f3c0:	2322      	movs	r3, #34	@ 0x22
 800f3c2:	6003      	str	r3, [r0, #0]
 800f3c4:	eeb0 0a48 	vmov.f32	s0, s16
 800f3c8:	eef0 0a68 	vmov.f32	s1, s17
 800f3cc:	ecbd 8b02 	vpop	{d8}
 800f3d0:	bd38      	pop	{r3, r4, r5, pc}
 800f3d2:	f7ff f88b 	bl	800e4ec <__errno>
 800f3d6:	ecbd 8b02 	vpop	{d8}
 800f3da:	2321      	movs	r3, #33	@ 0x21
 800f3dc:	6003      	str	r3, [r0, #0]
 800f3de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3e2:	4803      	ldr	r0, [pc, #12]	@ (800f3f0 <log+0x78>)
 800f3e4:	f000 b868 	b.w	800f4b8 <nan>
 800f3e8:	00000000 	.word	0x00000000
 800f3ec:	fff00000 	.word	0xfff00000
 800f3f0:	08055c1a 	.word	0x08055c1a

0800f3f4 <sqrtf>:
 800f3f4:	b508      	push	{r3, lr}
 800f3f6:	ed2d 8b02 	vpush	{d8}
 800f3fa:	eeb0 8a40 	vmov.f32	s16, s0
 800f3fe:	f000 f863 	bl	800f4c8 <__ieee754_sqrtf>
 800f402:	eeb4 8a48 	vcmp.f32	s16, s16
 800f406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f40a:	d60c      	bvs.n	800f426 <sqrtf+0x32>
 800f40c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f42c <sqrtf+0x38>
 800f410:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f418:	d505      	bpl.n	800f426 <sqrtf+0x32>
 800f41a:	f7ff f867 	bl	800e4ec <__errno>
 800f41e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f422:	2321      	movs	r3, #33	@ 0x21
 800f424:	6003      	str	r3, [r0, #0]
 800f426:	ecbd 8b02 	vpop	{d8}
 800f42a:	bd08      	pop	{r3, pc}
 800f42c:	00000000 	.word	0x00000000

0800f430 <cosf>:
 800f430:	ee10 3a10 	vmov	r3, s0
 800f434:	b507      	push	{r0, r1, r2, lr}
 800f436:	4a1e      	ldr	r2, [pc, #120]	@ (800f4b0 <cosf+0x80>)
 800f438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d806      	bhi.n	800f44e <cosf+0x1e>
 800f440:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f4b4 <cosf+0x84>
 800f444:	b003      	add	sp, #12
 800f446:	f85d eb04 	ldr.w	lr, [sp], #4
 800f44a:	f000 b9f7 	b.w	800f83c <__kernel_cosf>
 800f44e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f452:	d304      	bcc.n	800f45e <cosf+0x2e>
 800f454:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f458:	b003      	add	sp, #12
 800f45a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f45e:	4668      	mov	r0, sp
 800f460:	f000 fa8c 	bl	800f97c <__ieee754_rem_pio2f>
 800f464:	f000 0003 	and.w	r0, r0, #3
 800f468:	2801      	cmp	r0, #1
 800f46a:	d009      	beq.n	800f480 <cosf+0x50>
 800f46c:	2802      	cmp	r0, #2
 800f46e:	d010      	beq.n	800f492 <cosf+0x62>
 800f470:	b9b0      	cbnz	r0, 800f4a0 <cosf+0x70>
 800f472:	eddd 0a01 	vldr	s1, [sp, #4]
 800f476:	ed9d 0a00 	vldr	s0, [sp]
 800f47a:	f000 f9df 	bl	800f83c <__kernel_cosf>
 800f47e:	e7eb      	b.n	800f458 <cosf+0x28>
 800f480:	eddd 0a01 	vldr	s1, [sp, #4]
 800f484:	ed9d 0a00 	vldr	s0, [sp]
 800f488:	f000 fa30 	bl	800f8ec <__kernel_sinf>
 800f48c:	eeb1 0a40 	vneg.f32	s0, s0
 800f490:	e7e2      	b.n	800f458 <cosf+0x28>
 800f492:	eddd 0a01 	vldr	s1, [sp, #4]
 800f496:	ed9d 0a00 	vldr	s0, [sp]
 800f49a:	f000 f9cf 	bl	800f83c <__kernel_cosf>
 800f49e:	e7f5      	b.n	800f48c <cosf+0x5c>
 800f4a0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f4a4:	ed9d 0a00 	vldr	s0, [sp]
 800f4a8:	2001      	movs	r0, #1
 800f4aa:	f000 fa1f 	bl	800f8ec <__kernel_sinf>
 800f4ae:	e7d3      	b.n	800f458 <cosf+0x28>
 800f4b0:	3f490fd8 	.word	0x3f490fd8
 800f4b4:	00000000 	.word	0x00000000

0800f4b8 <nan>:
 800f4b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f4c0 <nan+0x8>
 800f4bc:	4770      	bx	lr
 800f4be:	bf00      	nop
 800f4c0:	00000000 	.word	0x00000000
 800f4c4:	7ff80000 	.word	0x7ff80000

0800f4c8 <__ieee754_sqrtf>:
 800f4c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f4cc:	4770      	bx	lr
	...

0800f4d0 <__ieee754_log>:
 800f4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d4:	ec51 0b10 	vmov	r0, r1, d0
 800f4d8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800f4dc:	b087      	sub	sp, #28
 800f4de:	460d      	mov	r5, r1
 800f4e0:	da26      	bge.n	800f530 <__ieee754_log+0x60>
 800f4e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f4e6:	4303      	orrs	r3, r0
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	d10a      	bne.n	800f502 <__ieee754_log+0x32>
 800f4ec:	49ce      	ldr	r1, [pc, #824]	@ (800f828 <__ieee754_log+0x358>)
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	2000      	movs	r0, #0
 800f4f4:	f7f1 fa3a 	bl	800096c <__aeabi_ddiv>
 800f4f8:	ec41 0b10 	vmov	d0, r0, r1
 800f4fc:	b007      	add	sp, #28
 800f4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f502:	2900      	cmp	r1, #0
 800f504:	da05      	bge.n	800f512 <__ieee754_log+0x42>
 800f506:	460b      	mov	r3, r1
 800f508:	f7f0 ff4e 	bl	80003a8 <__aeabi_dsub>
 800f50c:	2200      	movs	r2, #0
 800f50e:	2300      	movs	r3, #0
 800f510:	e7f0      	b.n	800f4f4 <__ieee754_log+0x24>
 800f512:	4bc6      	ldr	r3, [pc, #792]	@ (800f82c <__ieee754_log+0x35c>)
 800f514:	2200      	movs	r2, #0
 800f516:	f7f1 f8ff 	bl	8000718 <__aeabi_dmul>
 800f51a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800f51e:	460d      	mov	r5, r1
 800f520:	4ac3      	ldr	r2, [pc, #780]	@ (800f830 <__ieee754_log+0x360>)
 800f522:	4295      	cmp	r5, r2
 800f524:	dd06      	ble.n	800f534 <__ieee754_log+0x64>
 800f526:	4602      	mov	r2, r0
 800f528:	460b      	mov	r3, r1
 800f52a:	f7f0 ff3f 	bl	80003ac <__adddf3>
 800f52e:	e7e3      	b.n	800f4f8 <__ieee754_log+0x28>
 800f530:	2300      	movs	r3, #0
 800f532:	e7f5      	b.n	800f520 <__ieee754_log+0x50>
 800f534:	152c      	asrs	r4, r5, #20
 800f536:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800f53a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f53e:	441c      	add	r4, r3
 800f540:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800f544:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800f548:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f54c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800f550:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800f554:	ea42 0105 	orr.w	r1, r2, r5
 800f558:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800f55c:	2200      	movs	r2, #0
 800f55e:	4bb5      	ldr	r3, [pc, #724]	@ (800f834 <__ieee754_log+0x364>)
 800f560:	f7f0 ff22 	bl	80003a8 <__aeabi_dsub>
 800f564:	1cab      	adds	r3, r5, #2
 800f566:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f56a:	2b02      	cmp	r3, #2
 800f56c:	4682      	mov	sl, r0
 800f56e:	468b      	mov	fp, r1
 800f570:	f04f 0200 	mov.w	r2, #0
 800f574:	dc53      	bgt.n	800f61e <__ieee754_log+0x14e>
 800f576:	2300      	movs	r3, #0
 800f578:	f7f1 fb36 	bl	8000be8 <__aeabi_dcmpeq>
 800f57c:	b1d0      	cbz	r0, 800f5b4 <__ieee754_log+0xe4>
 800f57e:	2c00      	cmp	r4, #0
 800f580:	f000 8120 	beq.w	800f7c4 <__ieee754_log+0x2f4>
 800f584:	4620      	mov	r0, r4
 800f586:	f7f1 f85d 	bl	8000644 <__aeabi_i2d>
 800f58a:	a391      	add	r3, pc, #580	@ (adr r3, 800f7d0 <__ieee754_log+0x300>)
 800f58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f590:	4606      	mov	r6, r0
 800f592:	460f      	mov	r7, r1
 800f594:	f7f1 f8c0 	bl	8000718 <__aeabi_dmul>
 800f598:	a38f      	add	r3, pc, #572	@ (adr r3, 800f7d8 <__ieee754_log+0x308>)
 800f59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59e:	4604      	mov	r4, r0
 800f5a0:	460d      	mov	r5, r1
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	f7f1 f8b7 	bl	8000718 <__aeabi_dmul>
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	4620      	mov	r0, r4
 800f5b0:	4629      	mov	r1, r5
 800f5b2:	e7ba      	b.n	800f52a <__ieee754_log+0x5a>
 800f5b4:	a38a      	add	r3, pc, #552	@ (adr r3, 800f7e0 <__ieee754_log+0x310>)
 800f5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ba:	4650      	mov	r0, sl
 800f5bc:	4659      	mov	r1, fp
 800f5be:	f7f1 f8ab 	bl	8000718 <__aeabi_dmul>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	2000      	movs	r0, #0
 800f5c8:	499b      	ldr	r1, [pc, #620]	@ (800f838 <__ieee754_log+0x368>)
 800f5ca:	f7f0 feed 	bl	80003a8 <__aeabi_dsub>
 800f5ce:	4652      	mov	r2, sl
 800f5d0:	4606      	mov	r6, r0
 800f5d2:	460f      	mov	r7, r1
 800f5d4:	465b      	mov	r3, fp
 800f5d6:	4650      	mov	r0, sl
 800f5d8:	4659      	mov	r1, fp
 800f5da:	f7f1 f89d 	bl	8000718 <__aeabi_dmul>
 800f5de:	4602      	mov	r2, r0
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	4639      	mov	r1, r7
 800f5e6:	f7f1 f897 	bl	8000718 <__aeabi_dmul>
 800f5ea:	4606      	mov	r6, r0
 800f5ec:	460f      	mov	r7, r1
 800f5ee:	b914      	cbnz	r4, 800f5f6 <__ieee754_log+0x126>
 800f5f0:	4632      	mov	r2, r6
 800f5f2:	463b      	mov	r3, r7
 800f5f4:	e0a0      	b.n	800f738 <__ieee754_log+0x268>
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f7f1 f824 	bl	8000644 <__aeabi_i2d>
 800f5fc:	a374      	add	r3, pc, #464	@ (adr r3, 800f7d0 <__ieee754_log+0x300>)
 800f5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f602:	4680      	mov	r8, r0
 800f604:	4689      	mov	r9, r1
 800f606:	f7f1 f887 	bl	8000718 <__aeabi_dmul>
 800f60a:	a373      	add	r3, pc, #460	@ (adr r3, 800f7d8 <__ieee754_log+0x308>)
 800f60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f610:	4604      	mov	r4, r0
 800f612:	460d      	mov	r5, r1
 800f614:	4640      	mov	r0, r8
 800f616:	4649      	mov	r1, r9
 800f618:	f7f1 f87e 	bl	8000718 <__aeabi_dmul>
 800f61c:	e0a5      	b.n	800f76a <__ieee754_log+0x29a>
 800f61e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f622:	f7f0 fec3 	bl	80003ac <__adddf3>
 800f626:	4602      	mov	r2, r0
 800f628:	460b      	mov	r3, r1
 800f62a:	4650      	mov	r0, sl
 800f62c:	4659      	mov	r1, fp
 800f62e:	f7f1 f99d 	bl	800096c <__aeabi_ddiv>
 800f632:	e9cd 0100 	strd	r0, r1, [sp]
 800f636:	4620      	mov	r0, r4
 800f638:	f7f1 f804 	bl	8000644 <__aeabi_i2d>
 800f63c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f644:	4610      	mov	r0, r2
 800f646:	4619      	mov	r1, r3
 800f648:	f7f1 f866 	bl	8000718 <__aeabi_dmul>
 800f64c:	4602      	mov	r2, r0
 800f64e:	460b      	mov	r3, r1
 800f650:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f654:	f7f1 f860 	bl	8000718 <__aeabi_dmul>
 800f658:	a363      	add	r3, pc, #396	@ (adr r3, 800f7e8 <__ieee754_log+0x318>)
 800f65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65e:	4680      	mov	r8, r0
 800f660:	4689      	mov	r9, r1
 800f662:	f7f1 f859 	bl	8000718 <__aeabi_dmul>
 800f666:	a362      	add	r3, pc, #392	@ (adr r3, 800f7f0 <__ieee754_log+0x320>)
 800f668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66c:	f7f0 fe9e 	bl	80003ac <__adddf3>
 800f670:	4642      	mov	r2, r8
 800f672:	464b      	mov	r3, r9
 800f674:	f7f1 f850 	bl	8000718 <__aeabi_dmul>
 800f678:	a35f      	add	r3, pc, #380	@ (adr r3, 800f7f8 <__ieee754_log+0x328>)
 800f67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f67e:	f7f0 fe95 	bl	80003ac <__adddf3>
 800f682:	4642      	mov	r2, r8
 800f684:	464b      	mov	r3, r9
 800f686:	f7f1 f847 	bl	8000718 <__aeabi_dmul>
 800f68a:	a35d      	add	r3, pc, #372	@ (adr r3, 800f800 <__ieee754_log+0x330>)
 800f68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f690:	f7f0 fe8c 	bl	80003ac <__adddf3>
 800f694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f698:	f7f1 f83e 	bl	8000718 <__aeabi_dmul>
 800f69c:	a35a      	add	r3, pc, #360	@ (adr r3, 800f808 <__ieee754_log+0x338>)
 800f69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6a6:	4640      	mov	r0, r8
 800f6a8:	4649      	mov	r1, r9
 800f6aa:	f7f1 f835 	bl	8000718 <__aeabi_dmul>
 800f6ae:	a358      	add	r3, pc, #352	@ (adr r3, 800f810 <__ieee754_log+0x340>)
 800f6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b4:	f7f0 fe7a 	bl	80003ac <__adddf3>
 800f6b8:	4642      	mov	r2, r8
 800f6ba:	464b      	mov	r3, r9
 800f6bc:	f7f1 f82c 	bl	8000718 <__aeabi_dmul>
 800f6c0:	a355      	add	r3, pc, #340	@ (adr r3, 800f818 <__ieee754_log+0x348>)
 800f6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c6:	f7f0 fe71 	bl	80003ac <__adddf3>
 800f6ca:	4642      	mov	r2, r8
 800f6cc:	464b      	mov	r3, r9
 800f6ce:	f7f1 f823 	bl	8000718 <__aeabi_dmul>
 800f6d2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	460b      	mov	r3, r1
 800f6da:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800f6de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6e2:	f7f0 fe63 	bl	80003ac <__adddf3>
 800f6e6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800f6ea:	3551      	adds	r5, #81	@ 0x51
 800f6ec:	4335      	orrs	r5, r6
 800f6ee:	2d00      	cmp	r5, #0
 800f6f0:	4680      	mov	r8, r0
 800f6f2:	4689      	mov	r9, r1
 800f6f4:	dd48      	ble.n	800f788 <__ieee754_log+0x2b8>
 800f6f6:	4b50      	ldr	r3, [pc, #320]	@ (800f838 <__ieee754_log+0x368>)
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	4650      	mov	r0, sl
 800f6fc:	4659      	mov	r1, fp
 800f6fe:	f7f1 f80b 	bl	8000718 <__aeabi_dmul>
 800f702:	4652      	mov	r2, sl
 800f704:	465b      	mov	r3, fp
 800f706:	f7f1 f807 	bl	8000718 <__aeabi_dmul>
 800f70a:	4602      	mov	r2, r0
 800f70c:	460b      	mov	r3, r1
 800f70e:	4606      	mov	r6, r0
 800f710:	460f      	mov	r7, r1
 800f712:	4640      	mov	r0, r8
 800f714:	4649      	mov	r1, r9
 800f716:	f7f0 fe49 	bl	80003ac <__adddf3>
 800f71a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f71e:	f7f0 fffb 	bl	8000718 <__aeabi_dmul>
 800f722:	4680      	mov	r8, r0
 800f724:	4689      	mov	r9, r1
 800f726:	b964      	cbnz	r4, 800f742 <__ieee754_log+0x272>
 800f728:	4602      	mov	r2, r0
 800f72a:	460b      	mov	r3, r1
 800f72c:	4630      	mov	r0, r6
 800f72e:	4639      	mov	r1, r7
 800f730:	f7f0 fe3a 	bl	80003a8 <__aeabi_dsub>
 800f734:	4602      	mov	r2, r0
 800f736:	460b      	mov	r3, r1
 800f738:	4650      	mov	r0, sl
 800f73a:	4659      	mov	r1, fp
 800f73c:	f7f0 fe34 	bl	80003a8 <__aeabi_dsub>
 800f740:	e6da      	b.n	800f4f8 <__ieee754_log+0x28>
 800f742:	a323      	add	r3, pc, #140	@ (adr r3, 800f7d0 <__ieee754_log+0x300>)
 800f744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f74c:	f7f0 ffe4 	bl	8000718 <__aeabi_dmul>
 800f750:	a321      	add	r3, pc, #132	@ (adr r3, 800f7d8 <__ieee754_log+0x308>)
 800f752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f756:	4604      	mov	r4, r0
 800f758:	460d      	mov	r5, r1
 800f75a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f75e:	f7f0 ffdb 	bl	8000718 <__aeabi_dmul>
 800f762:	4642      	mov	r2, r8
 800f764:	464b      	mov	r3, r9
 800f766:	f7f0 fe21 	bl	80003ac <__adddf3>
 800f76a:	4602      	mov	r2, r0
 800f76c:	460b      	mov	r3, r1
 800f76e:	4630      	mov	r0, r6
 800f770:	4639      	mov	r1, r7
 800f772:	f7f0 fe19 	bl	80003a8 <__aeabi_dsub>
 800f776:	4652      	mov	r2, sl
 800f778:	465b      	mov	r3, fp
 800f77a:	f7f0 fe15 	bl	80003a8 <__aeabi_dsub>
 800f77e:	4602      	mov	r2, r0
 800f780:	460b      	mov	r3, r1
 800f782:	4620      	mov	r0, r4
 800f784:	4629      	mov	r1, r5
 800f786:	e7d9      	b.n	800f73c <__ieee754_log+0x26c>
 800f788:	4602      	mov	r2, r0
 800f78a:	460b      	mov	r3, r1
 800f78c:	4650      	mov	r0, sl
 800f78e:	4659      	mov	r1, fp
 800f790:	f7f0 fe0a 	bl	80003a8 <__aeabi_dsub>
 800f794:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f798:	f7f0 ffbe 	bl	8000718 <__aeabi_dmul>
 800f79c:	4606      	mov	r6, r0
 800f79e:	460f      	mov	r7, r1
 800f7a0:	2c00      	cmp	r4, #0
 800f7a2:	f43f af25 	beq.w	800f5f0 <__ieee754_log+0x120>
 800f7a6:	a30a      	add	r3, pc, #40	@ (adr r3, 800f7d0 <__ieee754_log+0x300>)
 800f7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7b0:	f7f0 ffb2 	bl	8000718 <__aeabi_dmul>
 800f7b4:	a308      	add	r3, pc, #32	@ (adr r3, 800f7d8 <__ieee754_log+0x308>)
 800f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	460d      	mov	r5, r1
 800f7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7c2:	e729      	b.n	800f618 <__ieee754_log+0x148>
 800f7c4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800f820 <__ieee754_log+0x350>
 800f7c8:	e698      	b.n	800f4fc <__ieee754_log+0x2c>
 800f7ca:	bf00      	nop
 800f7cc:	f3af 8000 	nop.w
 800f7d0:	fee00000 	.word	0xfee00000
 800f7d4:	3fe62e42 	.word	0x3fe62e42
 800f7d8:	35793c76 	.word	0x35793c76
 800f7dc:	3dea39ef 	.word	0x3dea39ef
 800f7e0:	55555555 	.word	0x55555555
 800f7e4:	3fd55555 	.word	0x3fd55555
 800f7e8:	df3e5244 	.word	0xdf3e5244
 800f7ec:	3fc2f112 	.word	0x3fc2f112
 800f7f0:	96cb03de 	.word	0x96cb03de
 800f7f4:	3fc74664 	.word	0x3fc74664
 800f7f8:	94229359 	.word	0x94229359
 800f7fc:	3fd24924 	.word	0x3fd24924
 800f800:	55555593 	.word	0x55555593
 800f804:	3fe55555 	.word	0x3fe55555
 800f808:	d078c69f 	.word	0xd078c69f
 800f80c:	3fc39a09 	.word	0x3fc39a09
 800f810:	1d8e78af 	.word	0x1d8e78af
 800f814:	3fcc71c5 	.word	0x3fcc71c5
 800f818:	9997fa04 	.word	0x9997fa04
 800f81c:	3fd99999 	.word	0x3fd99999
	...
 800f828:	c3500000 	.word	0xc3500000
 800f82c:	43500000 	.word	0x43500000
 800f830:	7fefffff 	.word	0x7fefffff
 800f834:	3ff00000 	.word	0x3ff00000
 800f838:	3fe00000 	.word	0x3fe00000

0800f83c <__kernel_cosf>:
 800f83c:	ee10 3a10 	vmov	r3, s0
 800f840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f844:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f848:	eef0 6a40 	vmov.f32	s13, s0
 800f84c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f850:	d204      	bcs.n	800f85c <__kernel_cosf+0x20>
 800f852:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f856:	ee17 2a90 	vmov	r2, s15
 800f85a:	b342      	cbz	r2, 800f8ae <__kernel_cosf+0x72>
 800f85c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f860:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800f8cc <__kernel_cosf+0x90>
 800f864:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800f8d0 <__kernel_cosf+0x94>
 800f868:	4a1a      	ldr	r2, [pc, #104]	@ (800f8d4 <__kernel_cosf+0x98>)
 800f86a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f86e:	4293      	cmp	r3, r2
 800f870:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f8d8 <__kernel_cosf+0x9c>
 800f874:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f878:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800f8dc <__kernel_cosf+0xa0>
 800f87c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f880:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800f8e0 <__kernel_cosf+0xa4>
 800f884:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f888:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800f8e4 <__kernel_cosf+0xa8>
 800f88c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f890:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800f894:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f898:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f89c:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f8a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8a4:	d804      	bhi.n	800f8b0 <__kernel_cosf+0x74>
 800f8a6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f8aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f8ae:	4770      	bx	lr
 800f8b0:	4a0d      	ldr	r2, [pc, #52]	@ (800f8e8 <__kernel_cosf+0xac>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	bf9a      	itte	ls
 800f8b6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800f8ba:	ee07 3a10 	vmovls	s14, r3
 800f8be:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800f8c2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f8c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8ca:	e7ec      	b.n	800f8a6 <__kernel_cosf+0x6a>
 800f8cc:	ad47d74e 	.word	0xad47d74e
 800f8d0:	310f74f6 	.word	0x310f74f6
 800f8d4:	3e999999 	.word	0x3e999999
 800f8d8:	b493f27c 	.word	0xb493f27c
 800f8dc:	37d00d01 	.word	0x37d00d01
 800f8e0:	bab60b61 	.word	0xbab60b61
 800f8e4:	3d2aaaab 	.word	0x3d2aaaab
 800f8e8:	3f480000 	.word	0x3f480000

0800f8ec <__kernel_sinf>:
 800f8ec:	ee10 3a10 	vmov	r3, s0
 800f8f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f8f4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f8f8:	d204      	bcs.n	800f904 <__kernel_sinf+0x18>
 800f8fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f8fe:	ee17 3a90 	vmov	r3, s15
 800f902:	b35b      	cbz	r3, 800f95c <__kernel_sinf+0x70>
 800f904:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f908:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f960 <__kernel_sinf+0x74>
 800f90c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800f964 <__kernel_sinf+0x78>
 800f910:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f914:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800f968 <__kernel_sinf+0x7c>
 800f918:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f91c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800f96c <__kernel_sinf+0x80>
 800f920:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f924:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800f970 <__kernel_sinf+0x84>
 800f928:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f92c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f930:	b930      	cbnz	r0, 800f940 <__kernel_sinf+0x54>
 800f932:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800f974 <__kernel_sinf+0x88>
 800f936:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f93a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f93e:	4770      	bx	lr
 800f940:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f944:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f948:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f94c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f950:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f978 <__kernel_sinf+0x8c>
 800f954:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f958:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop
 800f960:	2f2ec9d3 	.word	0x2f2ec9d3
 800f964:	b2d72f34 	.word	0xb2d72f34
 800f968:	3638ef1b 	.word	0x3638ef1b
 800f96c:	b9500d01 	.word	0xb9500d01
 800f970:	3c088889 	.word	0x3c088889
 800f974:	be2aaaab 	.word	0xbe2aaaab
 800f978:	3e2aaaab 	.word	0x3e2aaaab

0800f97c <__ieee754_rem_pio2f>:
 800f97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f97e:	ee10 6a10 	vmov	r6, s0
 800f982:	4b88      	ldr	r3, [pc, #544]	@ (800fba4 <__ieee754_rem_pio2f+0x228>)
 800f984:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800f988:	429d      	cmp	r5, r3
 800f98a:	b087      	sub	sp, #28
 800f98c:	4604      	mov	r4, r0
 800f98e:	d805      	bhi.n	800f99c <__ieee754_rem_pio2f+0x20>
 800f990:	2300      	movs	r3, #0
 800f992:	ed80 0a00 	vstr	s0, [r0]
 800f996:	6043      	str	r3, [r0, #4]
 800f998:	2000      	movs	r0, #0
 800f99a:	e022      	b.n	800f9e2 <__ieee754_rem_pio2f+0x66>
 800f99c:	4b82      	ldr	r3, [pc, #520]	@ (800fba8 <__ieee754_rem_pio2f+0x22c>)
 800f99e:	429d      	cmp	r5, r3
 800f9a0:	d83a      	bhi.n	800fa18 <__ieee754_rem_pio2f+0x9c>
 800f9a2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f9a6:	2e00      	cmp	r6, #0
 800f9a8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800fbac <__ieee754_rem_pio2f+0x230>
 800f9ac:	4a80      	ldr	r2, [pc, #512]	@ (800fbb0 <__ieee754_rem_pio2f+0x234>)
 800f9ae:	f023 030f 	bic.w	r3, r3, #15
 800f9b2:	dd18      	ble.n	800f9e6 <__ieee754_rem_pio2f+0x6a>
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f9ba:	bf09      	itett	eq
 800f9bc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800fbb4 <__ieee754_rem_pio2f+0x238>
 800f9c0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800fbb8 <__ieee754_rem_pio2f+0x23c>
 800f9c4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800fbbc <__ieee754_rem_pio2f+0x240>
 800f9c8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f9cc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800f9d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9d4:	ed80 7a00 	vstr	s14, [r0]
 800f9d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f9dc:	edc0 7a01 	vstr	s15, [r0, #4]
 800f9e0:	2001      	movs	r0, #1
 800f9e2:	b007      	add	sp, #28
 800f9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f9ec:	bf09      	itett	eq
 800f9ee:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800fbb4 <__ieee754_rem_pio2f+0x238>
 800f9f2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800fbb8 <__ieee754_rem_pio2f+0x23c>
 800f9f6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800fbbc <__ieee754_rem_pio2f+0x240>
 800f9fa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f9fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fa02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa06:	ed80 7a00 	vstr	s14, [r0]
 800fa0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa0e:	edc0 7a01 	vstr	s15, [r0, #4]
 800fa12:	f04f 30ff 	mov.w	r0, #4294967295
 800fa16:	e7e4      	b.n	800f9e2 <__ieee754_rem_pio2f+0x66>
 800fa18:	4b69      	ldr	r3, [pc, #420]	@ (800fbc0 <__ieee754_rem_pio2f+0x244>)
 800fa1a:	429d      	cmp	r5, r3
 800fa1c:	d873      	bhi.n	800fb06 <__ieee754_rem_pio2f+0x18a>
 800fa1e:	f000 f8dd 	bl	800fbdc <fabsf>
 800fa22:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800fbc4 <__ieee754_rem_pio2f+0x248>
 800fa26:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fa2a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fa2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fa36:	ee17 0a90 	vmov	r0, s15
 800fa3a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fbac <__ieee754_rem_pio2f+0x230>
 800fa3e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800fa42:	281f      	cmp	r0, #31
 800fa44:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fbb8 <__ieee754_rem_pio2f+0x23c>
 800fa48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa4c:	eeb1 6a47 	vneg.f32	s12, s14
 800fa50:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fa54:	ee16 1a90 	vmov	r1, s13
 800fa58:	dc09      	bgt.n	800fa6e <__ieee754_rem_pio2f+0xf2>
 800fa5a:	4a5b      	ldr	r2, [pc, #364]	@ (800fbc8 <__ieee754_rem_pio2f+0x24c>)
 800fa5c:	1e47      	subs	r7, r0, #1
 800fa5e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fa62:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800fa66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d107      	bne.n	800fa7e <__ieee754_rem_pio2f+0x102>
 800fa6e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800fa72:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800fa76:	2a08      	cmp	r2, #8
 800fa78:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800fa7c:	dc14      	bgt.n	800faa8 <__ieee754_rem_pio2f+0x12c>
 800fa7e:	6021      	str	r1, [r4, #0]
 800fa80:	ed94 7a00 	vldr	s14, [r4]
 800fa84:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fa88:	2e00      	cmp	r6, #0
 800fa8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fa8e:	ed84 0a01 	vstr	s0, [r4, #4]
 800fa92:	daa6      	bge.n	800f9e2 <__ieee754_rem_pio2f+0x66>
 800fa94:	eeb1 7a47 	vneg.f32	s14, s14
 800fa98:	eeb1 0a40 	vneg.f32	s0, s0
 800fa9c:	ed84 7a00 	vstr	s14, [r4]
 800faa0:	ed84 0a01 	vstr	s0, [r4, #4]
 800faa4:	4240      	negs	r0, r0
 800faa6:	e79c      	b.n	800f9e2 <__ieee754_rem_pio2f+0x66>
 800faa8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800fbb4 <__ieee754_rem_pio2f+0x238>
 800faac:	eef0 6a40 	vmov.f32	s13, s0
 800fab0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800fab4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800fab8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fabc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800fbbc <__ieee754_rem_pio2f+0x240>
 800fac0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800fac4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800fac8:	ee15 2a90 	vmov	r2, s11
 800facc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fad0:	1a5b      	subs	r3, r3, r1
 800fad2:	2b19      	cmp	r3, #25
 800fad4:	dc04      	bgt.n	800fae0 <__ieee754_rem_pio2f+0x164>
 800fad6:	edc4 5a00 	vstr	s11, [r4]
 800fada:	eeb0 0a66 	vmov.f32	s0, s13
 800fade:	e7cf      	b.n	800fa80 <__ieee754_rem_pio2f+0x104>
 800fae0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800fbcc <__ieee754_rem_pio2f+0x250>
 800fae4:	eeb0 0a66 	vmov.f32	s0, s13
 800fae8:	eea6 0a25 	vfma.f32	s0, s12, s11
 800faec:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800faf0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800fbd0 <__ieee754_rem_pio2f+0x254>
 800faf4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800faf8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800fafc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fb00:	ed84 7a00 	vstr	s14, [r4]
 800fb04:	e7bc      	b.n	800fa80 <__ieee754_rem_pio2f+0x104>
 800fb06:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800fb0a:	d306      	bcc.n	800fb1a <__ieee754_rem_pio2f+0x19e>
 800fb0c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fb10:	edc0 7a01 	vstr	s15, [r0, #4]
 800fb14:	edc0 7a00 	vstr	s15, [r0]
 800fb18:	e73e      	b.n	800f998 <__ieee754_rem_pio2f+0x1c>
 800fb1a:	15ea      	asrs	r2, r5, #23
 800fb1c:	3a86      	subs	r2, #134	@ 0x86
 800fb1e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800fb22:	ee07 3a90 	vmov	s15, r3
 800fb26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fb2a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800fbd4 <__ieee754_rem_pio2f+0x258>
 800fb2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fb32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb36:	ed8d 7a03 	vstr	s14, [sp, #12]
 800fb3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fb3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fb42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fb46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb4a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800fb4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fb52:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5a:	edcd 7a05 	vstr	s15, [sp, #20]
 800fb5e:	d11e      	bne.n	800fb9e <__ieee754_rem_pio2f+0x222>
 800fb60:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb68:	bf0c      	ite	eq
 800fb6a:	2301      	moveq	r3, #1
 800fb6c:	2302      	movne	r3, #2
 800fb6e:	491a      	ldr	r1, [pc, #104]	@ (800fbd8 <__ieee754_rem_pio2f+0x25c>)
 800fb70:	9101      	str	r1, [sp, #4]
 800fb72:	2102      	movs	r1, #2
 800fb74:	9100      	str	r1, [sp, #0]
 800fb76:	a803      	add	r0, sp, #12
 800fb78:	4621      	mov	r1, r4
 800fb7a:	f000 f837 	bl	800fbec <__kernel_rem_pio2f>
 800fb7e:	2e00      	cmp	r6, #0
 800fb80:	f6bf af2f 	bge.w	800f9e2 <__ieee754_rem_pio2f+0x66>
 800fb84:	edd4 7a00 	vldr	s15, [r4]
 800fb88:	eef1 7a67 	vneg.f32	s15, s15
 800fb8c:	edc4 7a00 	vstr	s15, [r4]
 800fb90:	edd4 7a01 	vldr	s15, [r4, #4]
 800fb94:	eef1 7a67 	vneg.f32	s15, s15
 800fb98:	edc4 7a01 	vstr	s15, [r4, #4]
 800fb9c:	e782      	b.n	800faa4 <__ieee754_rem_pio2f+0x128>
 800fb9e:	2303      	movs	r3, #3
 800fba0:	e7e5      	b.n	800fb6e <__ieee754_rem_pio2f+0x1f2>
 800fba2:	bf00      	nop
 800fba4:	3f490fd8 	.word	0x3f490fd8
 800fba8:	4016cbe3 	.word	0x4016cbe3
 800fbac:	3fc90f80 	.word	0x3fc90f80
 800fbb0:	3fc90fd0 	.word	0x3fc90fd0
 800fbb4:	37354400 	.word	0x37354400
 800fbb8:	37354443 	.word	0x37354443
 800fbbc:	2e85a308 	.word	0x2e85a308
 800fbc0:	43490f80 	.word	0x43490f80
 800fbc4:	3f22f984 	.word	0x3f22f984
 800fbc8:	08055c50 	.word	0x08055c50
 800fbcc:	2e85a300 	.word	0x2e85a300
 800fbd0:	248d3132 	.word	0x248d3132
 800fbd4:	43800000 	.word	0x43800000
 800fbd8:	08055cd0 	.word	0x08055cd0

0800fbdc <fabsf>:
 800fbdc:	ee10 3a10 	vmov	r3, s0
 800fbe0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fbe4:	ee00 3a10 	vmov	s0, r3
 800fbe8:	4770      	bx	lr
	...

0800fbec <__kernel_rem_pio2f>:
 800fbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf0:	ed2d 8b04 	vpush	{d8-d9}
 800fbf4:	b0d9      	sub	sp, #356	@ 0x164
 800fbf6:	4690      	mov	r8, r2
 800fbf8:	9001      	str	r0, [sp, #4]
 800fbfa:	4ab9      	ldr	r2, [pc, #740]	@ (800fee0 <__kernel_rem_pio2f+0x2f4>)
 800fbfc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800fbfe:	f118 0f04 	cmn.w	r8, #4
 800fc02:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800fc06:	460f      	mov	r7, r1
 800fc08:	f103 3bff 	add.w	fp, r3, #4294967295
 800fc0c:	db27      	blt.n	800fc5e <__kernel_rem_pio2f+0x72>
 800fc0e:	f1b8 0203 	subs.w	r2, r8, #3
 800fc12:	bf48      	it	mi
 800fc14:	f108 0204 	addmi.w	r2, r8, #4
 800fc18:	10d2      	asrs	r2, r2, #3
 800fc1a:	1c55      	adds	r5, r2, #1
 800fc1c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fc1e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800fef0 <__kernel_rem_pio2f+0x304>
 800fc22:	00e8      	lsls	r0, r5, #3
 800fc24:	eba2 060b 	sub.w	r6, r2, fp
 800fc28:	9002      	str	r0, [sp, #8]
 800fc2a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800fc2e:	eb0a 0c0b 	add.w	ip, sl, fp
 800fc32:	ac1c      	add	r4, sp, #112	@ 0x70
 800fc34:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800fc38:	2000      	movs	r0, #0
 800fc3a:	4560      	cmp	r0, ip
 800fc3c:	dd11      	ble.n	800fc62 <__kernel_rem_pio2f+0x76>
 800fc3e:	a91c      	add	r1, sp, #112	@ 0x70
 800fc40:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800fc44:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800fc48:	f04f 0c00 	mov.w	ip, #0
 800fc4c:	45d4      	cmp	ip, sl
 800fc4e:	dc27      	bgt.n	800fca0 <__kernel_rem_pio2f+0xb4>
 800fc50:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fc54:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800fef0 <__kernel_rem_pio2f+0x304>
 800fc58:	4606      	mov	r6, r0
 800fc5a:	2400      	movs	r4, #0
 800fc5c:	e016      	b.n	800fc8c <__kernel_rem_pio2f+0xa0>
 800fc5e:	2200      	movs	r2, #0
 800fc60:	e7db      	b.n	800fc1a <__kernel_rem_pio2f+0x2e>
 800fc62:	42c6      	cmn	r6, r0
 800fc64:	bf5d      	ittte	pl
 800fc66:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800fc6a:	ee07 1a90 	vmovpl	s15, r1
 800fc6e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fc72:	eef0 7a47 	vmovmi.f32	s15, s14
 800fc76:	ece4 7a01 	vstmia	r4!, {s15}
 800fc7a:	3001      	adds	r0, #1
 800fc7c:	e7dd      	b.n	800fc3a <__kernel_rem_pio2f+0x4e>
 800fc7e:	ecfe 6a01 	vldmia	lr!, {s13}
 800fc82:	ed96 7a00 	vldr	s14, [r6]
 800fc86:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fc8a:	3401      	adds	r4, #1
 800fc8c:	455c      	cmp	r4, fp
 800fc8e:	f1a6 0604 	sub.w	r6, r6, #4
 800fc92:	ddf4      	ble.n	800fc7e <__kernel_rem_pio2f+0x92>
 800fc94:	ece9 7a01 	vstmia	r9!, {s15}
 800fc98:	f10c 0c01 	add.w	ip, ip, #1
 800fc9c:	3004      	adds	r0, #4
 800fc9e:	e7d5      	b.n	800fc4c <__kernel_rem_pio2f+0x60>
 800fca0:	a908      	add	r1, sp, #32
 800fca2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fca6:	9104      	str	r1, [sp, #16]
 800fca8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fcaa:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800feec <__kernel_rem_pio2f+0x300>
 800fcae:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800fee8 <__kernel_rem_pio2f+0x2fc>
 800fcb2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800fcb6:	9203      	str	r2, [sp, #12]
 800fcb8:	4654      	mov	r4, sl
 800fcba:	00a2      	lsls	r2, r4, #2
 800fcbc:	9205      	str	r2, [sp, #20]
 800fcbe:	aa58      	add	r2, sp, #352	@ 0x160
 800fcc0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800fcc4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800fcc8:	a944      	add	r1, sp, #272	@ 0x110
 800fcca:	aa08      	add	r2, sp, #32
 800fccc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800fcd0:	4694      	mov	ip, r2
 800fcd2:	4626      	mov	r6, r4
 800fcd4:	2e00      	cmp	r6, #0
 800fcd6:	f1a0 0004 	sub.w	r0, r0, #4
 800fcda:	dc4c      	bgt.n	800fd76 <__kernel_rem_pio2f+0x18a>
 800fcdc:	4628      	mov	r0, r5
 800fcde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fce2:	f000 f9f5 	bl	80100d0 <scalbnf>
 800fce6:	eeb0 8a40 	vmov.f32	s16, s0
 800fcea:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800fcee:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fcf2:	f000 fa53 	bl	801019c <floorf>
 800fcf6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800fcfa:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fcfe:	2d00      	cmp	r5, #0
 800fd00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd04:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fd08:	ee17 9a90 	vmov	r9, s15
 800fd0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd10:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fd14:	dd41      	ble.n	800fd9a <__kernel_rem_pio2f+0x1ae>
 800fd16:	f104 3cff 	add.w	ip, r4, #4294967295
 800fd1a:	a908      	add	r1, sp, #32
 800fd1c:	f1c5 0e08 	rsb	lr, r5, #8
 800fd20:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800fd24:	fa46 f00e 	asr.w	r0, r6, lr
 800fd28:	4481      	add	r9, r0
 800fd2a:	fa00 f00e 	lsl.w	r0, r0, lr
 800fd2e:	1a36      	subs	r6, r6, r0
 800fd30:	f1c5 0007 	rsb	r0, r5, #7
 800fd34:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800fd38:	4106      	asrs	r6, r0
 800fd3a:	2e00      	cmp	r6, #0
 800fd3c:	dd3c      	ble.n	800fdb8 <__kernel_rem_pio2f+0x1cc>
 800fd3e:	f04f 0e00 	mov.w	lr, #0
 800fd42:	f109 0901 	add.w	r9, r9, #1
 800fd46:	4670      	mov	r0, lr
 800fd48:	4574      	cmp	r4, lr
 800fd4a:	dc68      	bgt.n	800fe1e <__kernel_rem_pio2f+0x232>
 800fd4c:	2d00      	cmp	r5, #0
 800fd4e:	dd03      	ble.n	800fd58 <__kernel_rem_pio2f+0x16c>
 800fd50:	2d01      	cmp	r5, #1
 800fd52:	d074      	beq.n	800fe3e <__kernel_rem_pio2f+0x252>
 800fd54:	2d02      	cmp	r5, #2
 800fd56:	d07d      	beq.n	800fe54 <__kernel_rem_pio2f+0x268>
 800fd58:	2e02      	cmp	r6, #2
 800fd5a:	d12d      	bne.n	800fdb8 <__kernel_rem_pio2f+0x1cc>
 800fd5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fd60:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fd64:	b340      	cbz	r0, 800fdb8 <__kernel_rem_pio2f+0x1cc>
 800fd66:	4628      	mov	r0, r5
 800fd68:	9306      	str	r3, [sp, #24]
 800fd6a:	f000 f9b1 	bl	80100d0 <scalbnf>
 800fd6e:	9b06      	ldr	r3, [sp, #24]
 800fd70:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fd74:	e020      	b.n	800fdb8 <__kernel_rem_pio2f+0x1cc>
 800fd76:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fd7a:	3e01      	subs	r6, #1
 800fd7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd84:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fd88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fd8c:	ecac 0a01 	vstmia	ip!, {s0}
 800fd90:	ed90 0a00 	vldr	s0, [r0]
 800fd94:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fd98:	e79c      	b.n	800fcd4 <__kernel_rem_pio2f+0xe8>
 800fd9a:	d105      	bne.n	800fda8 <__kernel_rem_pio2f+0x1bc>
 800fd9c:	1e60      	subs	r0, r4, #1
 800fd9e:	a908      	add	r1, sp, #32
 800fda0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800fda4:	11f6      	asrs	r6, r6, #7
 800fda6:	e7c8      	b.n	800fd3a <__kernel_rem_pio2f+0x14e>
 800fda8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fdac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb4:	da31      	bge.n	800fe1a <__kernel_rem_pio2f+0x22e>
 800fdb6:	2600      	movs	r6, #0
 800fdb8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fdbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc0:	f040 8098 	bne.w	800fef4 <__kernel_rem_pio2f+0x308>
 800fdc4:	1e60      	subs	r0, r4, #1
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	4550      	cmp	r0, sl
 800fdca:	da4b      	bge.n	800fe64 <__kernel_rem_pio2f+0x278>
 800fdcc:	2a00      	cmp	r2, #0
 800fdce:	d065      	beq.n	800fe9c <__kernel_rem_pio2f+0x2b0>
 800fdd0:	3c01      	subs	r4, #1
 800fdd2:	ab08      	add	r3, sp, #32
 800fdd4:	3d08      	subs	r5, #8
 800fdd6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d0f8      	beq.n	800fdd0 <__kernel_rem_pio2f+0x1e4>
 800fdde:	4628      	mov	r0, r5
 800fde0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fde4:	f000 f974 	bl	80100d0 <scalbnf>
 800fde8:	1c63      	adds	r3, r4, #1
 800fdea:	aa44      	add	r2, sp, #272	@ 0x110
 800fdec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800feec <__kernel_rem_pio2f+0x300>
 800fdf0:	0099      	lsls	r1, r3, #2
 800fdf2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fdf6:	4623      	mov	r3, r4
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	f280 80a9 	bge.w	800ff50 <__kernel_rem_pio2f+0x364>
 800fdfe:	4623      	mov	r3, r4
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	f2c0 80c7 	blt.w	800ff94 <__kernel_rem_pio2f+0x3a8>
 800fe06:	aa44      	add	r2, sp, #272	@ 0x110
 800fe08:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800fe0c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800fee4 <__kernel_rem_pio2f+0x2f8>
 800fe10:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800fef0 <__kernel_rem_pio2f+0x304>
 800fe14:	2000      	movs	r0, #0
 800fe16:	1ae2      	subs	r2, r4, r3
 800fe18:	e0b1      	b.n	800ff7e <__kernel_rem_pio2f+0x392>
 800fe1a:	2602      	movs	r6, #2
 800fe1c:	e78f      	b.n	800fd3e <__kernel_rem_pio2f+0x152>
 800fe1e:	f852 1b04 	ldr.w	r1, [r2], #4
 800fe22:	b948      	cbnz	r0, 800fe38 <__kernel_rem_pio2f+0x24c>
 800fe24:	b121      	cbz	r1, 800fe30 <__kernel_rem_pio2f+0x244>
 800fe26:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800fe2a:	f842 1c04 	str.w	r1, [r2, #-4]
 800fe2e:	2101      	movs	r1, #1
 800fe30:	f10e 0e01 	add.w	lr, lr, #1
 800fe34:	4608      	mov	r0, r1
 800fe36:	e787      	b.n	800fd48 <__kernel_rem_pio2f+0x15c>
 800fe38:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800fe3c:	e7f5      	b.n	800fe2a <__kernel_rem_pio2f+0x23e>
 800fe3e:	f104 3cff 	add.w	ip, r4, #4294967295
 800fe42:	aa08      	add	r2, sp, #32
 800fe44:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fe48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fe4c:	a908      	add	r1, sp, #32
 800fe4e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800fe52:	e781      	b.n	800fd58 <__kernel_rem_pio2f+0x16c>
 800fe54:	f104 3cff 	add.w	ip, r4, #4294967295
 800fe58:	aa08      	add	r2, sp, #32
 800fe5a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fe5e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fe62:	e7f3      	b.n	800fe4c <__kernel_rem_pio2f+0x260>
 800fe64:	a908      	add	r1, sp, #32
 800fe66:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fe6a:	3801      	subs	r0, #1
 800fe6c:	430a      	orrs	r2, r1
 800fe6e:	e7ab      	b.n	800fdc8 <__kernel_rem_pio2f+0x1dc>
 800fe70:	3201      	adds	r2, #1
 800fe72:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800fe76:	2e00      	cmp	r6, #0
 800fe78:	d0fa      	beq.n	800fe70 <__kernel_rem_pio2f+0x284>
 800fe7a:	9905      	ldr	r1, [sp, #20]
 800fe7c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800fe80:	eb0d 0001 	add.w	r0, sp, r1
 800fe84:	18e6      	adds	r6, r4, r3
 800fe86:	a91c      	add	r1, sp, #112	@ 0x70
 800fe88:	f104 0c01 	add.w	ip, r4, #1
 800fe8c:	384c      	subs	r0, #76	@ 0x4c
 800fe8e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800fe92:	4422      	add	r2, r4
 800fe94:	4562      	cmp	r2, ip
 800fe96:	da04      	bge.n	800fea2 <__kernel_rem_pio2f+0x2b6>
 800fe98:	4614      	mov	r4, r2
 800fe9a:	e70e      	b.n	800fcba <__kernel_rem_pio2f+0xce>
 800fe9c:	9804      	ldr	r0, [sp, #16]
 800fe9e:	2201      	movs	r2, #1
 800fea0:	e7e7      	b.n	800fe72 <__kernel_rem_pio2f+0x286>
 800fea2:	9903      	ldr	r1, [sp, #12]
 800fea4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fea8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800feac:	9105      	str	r1, [sp, #20]
 800feae:	ee07 1a90 	vmov	s15, r1
 800feb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800feb6:	2400      	movs	r4, #0
 800feb8:	ece6 7a01 	vstmia	r6!, {s15}
 800febc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800fef0 <__kernel_rem_pio2f+0x304>
 800fec0:	46b1      	mov	r9, r6
 800fec2:	455c      	cmp	r4, fp
 800fec4:	dd04      	ble.n	800fed0 <__kernel_rem_pio2f+0x2e4>
 800fec6:	ece0 7a01 	vstmia	r0!, {s15}
 800feca:	f10c 0c01 	add.w	ip, ip, #1
 800fece:	e7e1      	b.n	800fe94 <__kernel_rem_pio2f+0x2a8>
 800fed0:	ecfe 6a01 	vldmia	lr!, {s13}
 800fed4:	ed39 7a01 	vldmdb	r9!, {s14}
 800fed8:	3401      	adds	r4, #1
 800feda:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fede:	e7f0      	b.n	800fec2 <__kernel_rem_pio2f+0x2d6>
 800fee0:	08056014 	.word	0x08056014
 800fee4:	08055fe8 	.word	0x08055fe8
 800fee8:	43800000 	.word	0x43800000
 800feec:	3b800000 	.word	0x3b800000
 800fef0:	00000000 	.word	0x00000000
 800fef4:	9b02      	ldr	r3, [sp, #8]
 800fef6:	eeb0 0a48 	vmov.f32	s0, s16
 800fefa:	eba3 0008 	sub.w	r0, r3, r8
 800fefe:	f000 f8e7 	bl	80100d0 <scalbnf>
 800ff02:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800fee8 <__kernel_rem_pio2f+0x2fc>
 800ff06:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ff0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff0e:	db19      	blt.n	800ff44 <__kernel_rem_pio2f+0x358>
 800ff10:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800feec <__kernel_rem_pio2f+0x300>
 800ff14:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ff18:	aa08      	add	r2, sp, #32
 800ff1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff1e:	3508      	adds	r5, #8
 800ff20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff24:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ff28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff30:	ee10 3a10 	vmov	r3, s0
 800ff34:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ff38:	ee17 3a90 	vmov	r3, s15
 800ff3c:	3401      	adds	r4, #1
 800ff3e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ff42:	e74c      	b.n	800fdde <__kernel_rem_pio2f+0x1f2>
 800ff44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff48:	aa08      	add	r2, sp, #32
 800ff4a:	ee10 3a10 	vmov	r3, s0
 800ff4e:	e7f6      	b.n	800ff3e <__kernel_rem_pio2f+0x352>
 800ff50:	a808      	add	r0, sp, #32
 800ff52:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ff56:	9001      	str	r0, [sp, #4]
 800ff58:	ee07 0a90 	vmov	s15, r0
 800ff5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff60:	3b01      	subs	r3, #1
 800ff62:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ff66:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ff6a:	ed62 7a01 	vstmdb	r2!, {s15}
 800ff6e:	e743      	b.n	800fdf8 <__kernel_rem_pio2f+0x20c>
 800ff70:	ecfc 6a01 	vldmia	ip!, {s13}
 800ff74:	ecb5 7a01 	vldmia	r5!, {s14}
 800ff78:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ff7c:	3001      	adds	r0, #1
 800ff7e:	4550      	cmp	r0, sl
 800ff80:	dc01      	bgt.n	800ff86 <__kernel_rem_pio2f+0x39a>
 800ff82:	4282      	cmp	r2, r0
 800ff84:	daf4      	bge.n	800ff70 <__kernel_rem_pio2f+0x384>
 800ff86:	a858      	add	r0, sp, #352	@ 0x160
 800ff88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ff8c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ff90:	3b01      	subs	r3, #1
 800ff92:	e735      	b.n	800fe00 <__kernel_rem_pio2f+0x214>
 800ff94:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ff96:	2b02      	cmp	r3, #2
 800ff98:	dc09      	bgt.n	800ffae <__kernel_rem_pio2f+0x3c2>
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	dc2b      	bgt.n	800fff6 <__kernel_rem_pio2f+0x40a>
 800ff9e:	d044      	beq.n	801002a <__kernel_rem_pio2f+0x43e>
 800ffa0:	f009 0007 	and.w	r0, r9, #7
 800ffa4:	b059      	add	sp, #356	@ 0x164
 800ffa6:	ecbd 8b04 	vpop	{d8-d9}
 800ffaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffae:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ffb0:	2b03      	cmp	r3, #3
 800ffb2:	d1f5      	bne.n	800ffa0 <__kernel_rem_pio2f+0x3b4>
 800ffb4:	aa30      	add	r2, sp, #192	@ 0xc0
 800ffb6:	1f0b      	subs	r3, r1, #4
 800ffb8:	4413      	add	r3, r2
 800ffba:	461a      	mov	r2, r3
 800ffbc:	4620      	mov	r0, r4
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	f1a2 0204 	sub.w	r2, r2, #4
 800ffc4:	dc52      	bgt.n	801006c <__kernel_rem_pio2f+0x480>
 800ffc6:	4622      	mov	r2, r4
 800ffc8:	2a01      	cmp	r2, #1
 800ffca:	f1a3 0304 	sub.w	r3, r3, #4
 800ffce:	dc5d      	bgt.n	801008c <__kernel_rem_pio2f+0x4a0>
 800ffd0:	ab30      	add	r3, sp, #192	@ 0xc0
 800ffd2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800fef0 <__kernel_rem_pio2f+0x304>
 800ffd6:	440b      	add	r3, r1
 800ffd8:	2c01      	cmp	r4, #1
 800ffda:	dc67      	bgt.n	80100ac <__kernel_rem_pio2f+0x4c0>
 800ffdc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800ffe0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800ffe4:	2e00      	cmp	r6, #0
 800ffe6:	d167      	bne.n	80100b8 <__kernel_rem_pio2f+0x4cc>
 800ffe8:	edc7 6a00 	vstr	s13, [r7]
 800ffec:	ed87 7a01 	vstr	s14, [r7, #4]
 800fff0:	edc7 7a02 	vstr	s15, [r7, #8]
 800fff4:	e7d4      	b.n	800ffa0 <__kernel_rem_pio2f+0x3b4>
 800fff6:	ab30      	add	r3, sp, #192	@ 0xc0
 800fff8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800fef0 <__kernel_rem_pio2f+0x304>
 800fffc:	440b      	add	r3, r1
 800fffe:	4622      	mov	r2, r4
 8010000:	2a00      	cmp	r2, #0
 8010002:	da24      	bge.n	801004e <__kernel_rem_pio2f+0x462>
 8010004:	b34e      	cbz	r6, 801005a <__kernel_rem_pio2f+0x46e>
 8010006:	eef1 7a47 	vneg.f32	s15, s14
 801000a:	edc7 7a00 	vstr	s15, [r7]
 801000e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8010012:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010016:	aa31      	add	r2, sp, #196	@ 0xc4
 8010018:	2301      	movs	r3, #1
 801001a:	429c      	cmp	r4, r3
 801001c:	da20      	bge.n	8010060 <__kernel_rem_pio2f+0x474>
 801001e:	b10e      	cbz	r6, 8010024 <__kernel_rem_pio2f+0x438>
 8010020:	eef1 7a67 	vneg.f32	s15, s15
 8010024:	edc7 7a01 	vstr	s15, [r7, #4]
 8010028:	e7ba      	b.n	800ffa0 <__kernel_rem_pio2f+0x3b4>
 801002a:	ab30      	add	r3, sp, #192	@ 0xc0
 801002c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800fef0 <__kernel_rem_pio2f+0x304>
 8010030:	440b      	add	r3, r1
 8010032:	2c00      	cmp	r4, #0
 8010034:	da05      	bge.n	8010042 <__kernel_rem_pio2f+0x456>
 8010036:	b10e      	cbz	r6, 801003c <__kernel_rem_pio2f+0x450>
 8010038:	eef1 7a67 	vneg.f32	s15, s15
 801003c:	edc7 7a00 	vstr	s15, [r7]
 8010040:	e7ae      	b.n	800ffa0 <__kernel_rem_pio2f+0x3b4>
 8010042:	ed33 7a01 	vldmdb	r3!, {s14}
 8010046:	3c01      	subs	r4, #1
 8010048:	ee77 7a87 	vadd.f32	s15, s15, s14
 801004c:	e7f1      	b.n	8010032 <__kernel_rem_pio2f+0x446>
 801004e:	ed73 7a01 	vldmdb	r3!, {s15}
 8010052:	3a01      	subs	r2, #1
 8010054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010058:	e7d2      	b.n	8010000 <__kernel_rem_pio2f+0x414>
 801005a:	eef0 7a47 	vmov.f32	s15, s14
 801005e:	e7d4      	b.n	801000a <__kernel_rem_pio2f+0x41e>
 8010060:	ecb2 7a01 	vldmia	r2!, {s14}
 8010064:	3301      	adds	r3, #1
 8010066:	ee77 7a87 	vadd.f32	s15, s15, s14
 801006a:	e7d6      	b.n	801001a <__kernel_rem_pio2f+0x42e>
 801006c:	edd2 7a00 	vldr	s15, [r2]
 8010070:	edd2 6a01 	vldr	s13, [r2, #4]
 8010074:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010078:	3801      	subs	r0, #1
 801007a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801007e:	ed82 7a00 	vstr	s14, [r2]
 8010082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010086:	edc2 7a01 	vstr	s15, [r2, #4]
 801008a:	e798      	b.n	800ffbe <__kernel_rem_pio2f+0x3d2>
 801008c:	edd3 7a00 	vldr	s15, [r3]
 8010090:	edd3 6a01 	vldr	s13, [r3, #4]
 8010094:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010098:	3a01      	subs	r2, #1
 801009a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801009e:	ed83 7a00 	vstr	s14, [r3]
 80100a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100a6:	edc3 7a01 	vstr	s15, [r3, #4]
 80100aa:	e78d      	b.n	800ffc8 <__kernel_rem_pio2f+0x3dc>
 80100ac:	ed33 7a01 	vldmdb	r3!, {s14}
 80100b0:	3c01      	subs	r4, #1
 80100b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80100b6:	e78f      	b.n	800ffd8 <__kernel_rem_pio2f+0x3ec>
 80100b8:	eef1 6a66 	vneg.f32	s13, s13
 80100bc:	eeb1 7a47 	vneg.f32	s14, s14
 80100c0:	edc7 6a00 	vstr	s13, [r7]
 80100c4:	ed87 7a01 	vstr	s14, [r7, #4]
 80100c8:	eef1 7a67 	vneg.f32	s15, s15
 80100cc:	e790      	b.n	800fff0 <__kernel_rem_pio2f+0x404>
 80100ce:	bf00      	nop

080100d0 <scalbnf>:
 80100d0:	ee10 3a10 	vmov	r3, s0
 80100d4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80100d8:	d02b      	beq.n	8010132 <scalbnf+0x62>
 80100da:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80100de:	d302      	bcc.n	80100e6 <scalbnf+0x16>
 80100e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80100e4:	4770      	bx	lr
 80100e6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80100ea:	d123      	bne.n	8010134 <scalbnf+0x64>
 80100ec:	4b24      	ldr	r3, [pc, #144]	@ (8010180 <scalbnf+0xb0>)
 80100ee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010184 <scalbnf+0xb4>
 80100f2:	4298      	cmp	r0, r3
 80100f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80100f8:	db17      	blt.n	801012a <scalbnf+0x5a>
 80100fa:	ee10 3a10 	vmov	r3, s0
 80100fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010102:	3a19      	subs	r2, #25
 8010104:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010108:	4288      	cmp	r0, r1
 801010a:	dd15      	ble.n	8010138 <scalbnf+0x68>
 801010c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010188 <scalbnf+0xb8>
 8010110:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801018c <scalbnf+0xbc>
 8010114:	ee10 3a10 	vmov	r3, s0
 8010118:	eeb0 7a67 	vmov.f32	s14, s15
 801011c:	2b00      	cmp	r3, #0
 801011e:	bfb8      	it	lt
 8010120:	eef0 7a66 	vmovlt.f32	s15, s13
 8010124:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010128:	4770      	bx	lr
 801012a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010190 <scalbnf+0xc0>
 801012e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010132:	4770      	bx	lr
 8010134:	0dd2      	lsrs	r2, r2, #23
 8010136:	e7e5      	b.n	8010104 <scalbnf+0x34>
 8010138:	4410      	add	r0, r2
 801013a:	28fe      	cmp	r0, #254	@ 0xfe
 801013c:	dce6      	bgt.n	801010c <scalbnf+0x3c>
 801013e:	2800      	cmp	r0, #0
 8010140:	dd06      	ble.n	8010150 <scalbnf+0x80>
 8010142:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010146:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801014a:	ee00 3a10 	vmov	s0, r3
 801014e:	4770      	bx	lr
 8010150:	f110 0f16 	cmn.w	r0, #22
 8010154:	da09      	bge.n	801016a <scalbnf+0x9a>
 8010156:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010190 <scalbnf+0xc0>
 801015a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010194 <scalbnf+0xc4>
 801015e:	ee10 3a10 	vmov	r3, s0
 8010162:	eeb0 7a67 	vmov.f32	s14, s15
 8010166:	2b00      	cmp	r3, #0
 8010168:	e7d9      	b.n	801011e <scalbnf+0x4e>
 801016a:	3019      	adds	r0, #25
 801016c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010170:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010174:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010198 <scalbnf+0xc8>
 8010178:	ee07 3a90 	vmov	s15, r3
 801017c:	e7d7      	b.n	801012e <scalbnf+0x5e>
 801017e:	bf00      	nop
 8010180:	ffff3cb0 	.word	0xffff3cb0
 8010184:	4c000000 	.word	0x4c000000
 8010188:	7149f2ca 	.word	0x7149f2ca
 801018c:	f149f2ca 	.word	0xf149f2ca
 8010190:	0da24260 	.word	0x0da24260
 8010194:	8da24260 	.word	0x8da24260
 8010198:	33000000 	.word	0x33000000

0801019c <floorf>:
 801019c:	ee10 3a10 	vmov	r3, s0
 80101a0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80101a4:	3a7f      	subs	r2, #127	@ 0x7f
 80101a6:	2a16      	cmp	r2, #22
 80101a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80101ac:	dc2b      	bgt.n	8010206 <floorf+0x6a>
 80101ae:	2a00      	cmp	r2, #0
 80101b0:	da12      	bge.n	80101d8 <floorf+0x3c>
 80101b2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010218 <floorf+0x7c>
 80101b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80101ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80101be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c2:	dd06      	ble.n	80101d2 <floorf+0x36>
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	da24      	bge.n	8010212 <floorf+0x76>
 80101c8:	2900      	cmp	r1, #0
 80101ca:	4b14      	ldr	r3, [pc, #80]	@ (801021c <floorf+0x80>)
 80101cc:	bf08      	it	eq
 80101ce:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80101d2:	ee00 3a10 	vmov	s0, r3
 80101d6:	4770      	bx	lr
 80101d8:	4911      	ldr	r1, [pc, #68]	@ (8010220 <floorf+0x84>)
 80101da:	4111      	asrs	r1, r2
 80101dc:	420b      	tst	r3, r1
 80101de:	d0fa      	beq.n	80101d6 <floorf+0x3a>
 80101e0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010218 <floorf+0x7c>
 80101e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80101e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80101ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f0:	ddef      	ble.n	80101d2 <floorf+0x36>
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	bfbe      	ittt	lt
 80101f6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80101fa:	fa40 f202 	asrlt.w	r2, r0, r2
 80101fe:	189b      	addlt	r3, r3, r2
 8010200:	ea23 0301 	bic.w	r3, r3, r1
 8010204:	e7e5      	b.n	80101d2 <floorf+0x36>
 8010206:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801020a:	d3e4      	bcc.n	80101d6 <floorf+0x3a>
 801020c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010210:	4770      	bx	lr
 8010212:	2300      	movs	r3, #0
 8010214:	e7dd      	b.n	80101d2 <floorf+0x36>
 8010216:	bf00      	nop
 8010218:	7149f2ca 	.word	0x7149f2ca
 801021c:	bf800000 	.word	0xbf800000
 8010220:	007fffff 	.word	0x007fffff

08010224 <_close>:
 8010224:	4b02      	ldr	r3, [pc, #8]	@ (8010230 <_close+0xc>)
 8010226:	2258      	movs	r2, #88	@ 0x58
 8010228:	601a      	str	r2, [r3, #0]
 801022a:	f04f 30ff 	mov.w	r0, #4294967295
 801022e:	4770      	bx	lr
 8010230:	20045410 	.word	0x20045410

08010234 <_fstat>:
 8010234:	4b02      	ldr	r3, [pc, #8]	@ (8010240 <_fstat+0xc>)
 8010236:	2258      	movs	r2, #88	@ 0x58
 8010238:	601a      	str	r2, [r3, #0]
 801023a:	f04f 30ff 	mov.w	r0, #4294967295
 801023e:	4770      	bx	lr
 8010240:	20045410 	.word	0x20045410

08010244 <_getpid>:
 8010244:	4b02      	ldr	r3, [pc, #8]	@ (8010250 <_getpid+0xc>)
 8010246:	2258      	movs	r2, #88	@ 0x58
 8010248:	601a      	str	r2, [r3, #0]
 801024a:	f04f 30ff 	mov.w	r0, #4294967295
 801024e:	4770      	bx	lr
 8010250:	20045410 	.word	0x20045410

08010254 <_isatty>:
 8010254:	4b02      	ldr	r3, [pc, #8]	@ (8010260 <_isatty+0xc>)
 8010256:	2258      	movs	r2, #88	@ 0x58
 8010258:	601a      	str	r2, [r3, #0]
 801025a:	2000      	movs	r0, #0
 801025c:	4770      	bx	lr
 801025e:	bf00      	nop
 8010260:	20045410 	.word	0x20045410

08010264 <_kill>:
 8010264:	4b02      	ldr	r3, [pc, #8]	@ (8010270 <_kill+0xc>)
 8010266:	2258      	movs	r2, #88	@ 0x58
 8010268:	601a      	str	r2, [r3, #0]
 801026a:	f04f 30ff 	mov.w	r0, #4294967295
 801026e:	4770      	bx	lr
 8010270:	20045410 	.word	0x20045410

08010274 <_lseek>:
 8010274:	4b02      	ldr	r3, [pc, #8]	@ (8010280 <_lseek+0xc>)
 8010276:	2258      	movs	r2, #88	@ 0x58
 8010278:	601a      	str	r2, [r3, #0]
 801027a:	f04f 30ff 	mov.w	r0, #4294967295
 801027e:	4770      	bx	lr
 8010280:	20045410 	.word	0x20045410

08010284 <_read>:
 8010284:	4b02      	ldr	r3, [pc, #8]	@ (8010290 <_read+0xc>)
 8010286:	2258      	movs	r2, #88	@ 0x58
 8010288:	601a      	str	r2, [r3, #0]
 801028a:	f04f 30ff 	mov.w	r0, #4294967295
 801028e:	4770      	bx	lr
 8010290:	20045410 	.word	0x20045410

08010294 <_sbrk>:
 8010294:	4a04      	ldr	r2, [pc, #16]	@ (80102a8 <_sbrk+0x14>)
 8010296:	6811      	ldr	r1, [r2, #0]
 8010298:	4603      	mov	r3, r0
 801029a:	b909      	cbnz	r1, 80102a0 <_sbrk+0xc>
 801029c:	4903      	ldr	r1, [pc, #12]	@ (80102ac <_sbrk+0x18>)
 801029e:	6011      	str	r1, [r2, #0]
 80102a0:	6810      	ldr	r0, [r2, #0]
 80102a2:	4403      	add	r3, r0
 80102a4:	6013      	str	r3, [r2, #0]
 80102a6:	4770      	bx	lr
 80102a8:	20045418 	.word	0x20045418
 80102ac:	20045420 	.word	0x20045420

080102b0 <_write>:
 80102b0:	4b02      	ldr	r3, [pc, #8]	@ (80102bc <_write+0xc>)
 80102b2:	2258      	movs	r2, #88	@ 0x58
 80102b4:	601a      	str	r2, [r3, #0]
 80102b6:	f04f 30ff 	mov.w	r0, #4294967295
 80102ba:	4770      	bx	lr
 80102bc:	20045410 	.word	0x20045410

080102c0 <_exit>:
 80102c0:	e7fe      	b.n	80102c0 <_exit>
	...

080102c4 <_init>:
 80102c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102c6:	bf00      	nop
 80102c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102ca:	bc08      	pop	{r3}
 80102cc:	469e      	mov	lr, r3
 80102ce:	4770      	bx	lr

080102d0 <_fini>:
 80102d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102d2:	bf00      	nop
 80102d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102d6:	bc08      	pop	{r3}
 80102d8:	469e      	mov	lr, r3
 80102da:	4770      	bx	lr
